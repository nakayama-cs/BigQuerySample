// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchControllerServiceClient is the client API for BatchControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchControllerServiceClient interface {
	CreateBatchTask(ctx context.Context, in *CreateBatchTaskRequest, opts ...grpc.CallOption) (*CreateBatchTaskResponse, error)
	CreateBatchScheduleTask(ctx context.Context, in *CreateBatchScheduleTaskRequest, opts ...grpc.CallOption) (*CreateBatchScheduleTaskResponse, error)
}

type batchControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchControllerServiceClient(cc grpc.ClientConnInterface) BatchControllerServiceClient {
	return &batchControllerServiceClient{cc}
}

func (c *batchControllerServiceClient) CreateBatchTask(ctx context.Context, in *CreateBatchTaskRequest, opts ...grpc.CallOption) (*CreateBatchTaskResponse, error) {
	out := new(CreateBatchTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.batch.BatchControllerService/CreateBatchTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batchControllerServiceClient) CreateBatchScheduleTask(ctx context.Context, in *CreateBatchScheduleTaskRequest, opts ...grpc.CallOption) (*CreateBatchScheduleTaskResponse, error) {
	out := new(CreateBatchScheduleTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.batch.BatchControllerService/CreateBatchScheduleTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchControllerServiceServer is the server API for BatchControllerService service.
// All implementations must embed UnimplementedBatchControllerServiceServer
// for forward compatibility
type BatchControllerServiceServer interface {
	CreateBatchTask(context.Context, *CreateBatchTaskRequest) (*CreateBatchTaskResponse, error)
	CreateBatchScheduleTask(context.Context, *CreateBatchScheduleTaskRequest) (*CreateBatchScheduleTaskResponse, error)
	mustEmbedUnimplementedBatchControllerServiceServer()
}

// UnimplementedBatchControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchControllerServiceServer struct {
}

func (UnimplementedBatchControllerServiceServer) CreateBatchTask(context.Context, *CreateBatchTaskRequest) (*CreateBatchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchTask not implemented")
}
func (UnimplementedBatchControllerServiceServer) CreateBatchScheduleTask(context.Context, *CreateBatchScheduleTaskRequest) (*CreateBatchScheduleTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchScheduleTask not implemented")
}
func (UnimplementedBatchControllerServiceServer) mustEmbedUnimplementedBatchControllerServiceServer() {
}

// UnsafeBatchControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchControllerServiceServer will
// result in compilation errors.
type UnsafeBatchControllerServiceServer interface {
	mustEmbedUnimplementedBatchControllerServiceServer()
}

func RegisterBatchControllerServiceServer(s grpc.ServiceRegistrar, srv BatchControllerServiceServer) {
	s.RegisterService(&BatchControllerService_ServiceDesc, srv)
}

func _BatchControllerService_CreateBatchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchControllerServiceServer).CreateBatchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.batch.BatchControllerService/CreateBatchTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchControllerServiceServer).CreateBatchTask(ctx, req.(*CreateBatchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatchControllerService_CreateBatchScheduleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchScheduleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchControllerServiceServer).CreateBatchScheduleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.batch.BatchControllerService/CreateBatchScheduleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchControllerServiceServer).CreateBatchScheduleTask(ctx, req.(*CreateBatchScheduleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchControllerService_ServiceDesc is the grpc.ServiceDesc for BatchControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.batch.BatchControllerService",
	HandlerType: (*BatchControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBatchTask",
			Handler:    _BatchControllerService_CreateBatchTask_Handler,
		},
		{
			MethodName: "CreateBatchScheduleTask",
			Handler:    _BatchControllerService_CreateBatchScheduleTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batch_controller.proto",
}
