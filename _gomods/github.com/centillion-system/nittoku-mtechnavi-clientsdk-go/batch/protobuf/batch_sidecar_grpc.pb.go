// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BatchSidecarServiceClient is the client API for BatchSidecarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatchSidecarServiceClient interface {
	OnTriggerBatch(ctx context.Context, in *OnTriggerBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type batchSidecarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchSidecarServiceClient(cc grpc.ClientConnInterface) BatchSidecarServiceClient {
	return &batchSidecarServiceClient{cc}
}

func (c *batchSidecarServiceClient) OnTriggerBatch(ctx context.Context, in *OnTriggerBatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.batch.BatchSidecarService/OnTriggerBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatchSidecarServiceServer is the server API for BatchSidecarService service.
// All implementations must embed UnimplementedBatchSidecarServiceServer
// for forward compatibility
type BatchSidecarServiceServer interface {
	OnTriggerBatch(context.Context, *OnTriggerBatchRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBatchSidecarServiceServer()
}

// UnimplementedBatchSidecarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBatchSidecarServiceServer struct {
}

func (UnimplementedBatchSidecarServiceServer) OnTriggerBatch(context.Context, *OnTriggerBatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnTriggerBatch not implemented")
}
func (UnimplementedBatchSidecarServiceServer) mustEmbedUnimplementedBatchSidecarServiceServer() {}

// UnsafeBatchSidecarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchSidecarServiceServer will
// result in compilation errors.
type UnsafeBatchSidecarServiceServer interface {
	mustEmbedUnimplementedBatchSidecarServiceServer()
}

func RegisterBatchSidecarServiceServer(s grpc.ServiceRegistrar, srv BatchSidecarServiceServer) {
	s.RegisterService(&BatchSidecarService_ServiceDesc, srv)
}

func _BatchSidecarService_OnTriggerBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnTriggerBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatchSidecarServiceServer).OnTriggerBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.batch.BatchSidecarService/OnTriggerBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatchSidecarServiceServer).OnTriggerBatch(ctx, req.(*OnTriggerBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatchSidecarService_ServiceDesc is the grpc.ServiceDesc for BatchSidecarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatchSidecarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.batch.BatchSidecarService",
	HandlerType: (*BatchSidecarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnTriggerBatch",
			Handler:    _BatchSidecarService_OnTriggerBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "batch_sidecar.proto",
}
