// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: surveynotification.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 催促データ
type SurveyReminder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 催促ID
	SurveyReminderId string `protobuf:"bytes,1,opt,name=survey_reminder_id,json=surveyReminderId,proto3" json:"survey_reminder_id,omitempty"`
	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,2,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
	// readonly 催促日時
	RemindedAt int64 `protobuf:"varint,3,opt,name=reminded_at,json=remindedAt,proto3" json:"reminded_at,omitempty"`
	// 催促メッセージ区分
	// 名称マスタにおける種別 A1000003 (催促メッセージ区分) を参照
	ContentType *protobuf.NameOption `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// 催促メッセージ内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// 通知先
	// 名称マスタにおける種別 A1000005 (通知先設定) を参照
	NotifyTos []*protobuf.NameOption `protobuf:"bytes,6,rep,name=notify_tos,json=notifyTos,proto3" json:"notify_tos,omitempty"`
	// TO
	Tos []string `protobuf:"bytes,7,rep,name=tos,proto3" json:"tos,omitempty"`
	// CC
	Ccs []string `protobuf:"bytes,8,rep,name=ccs,proto3" json:"ccs,omitempty"`
	// readonly 手動送信
	Manual bool `protobuf:"varint,9,opt,name=manual,proto3" json:"manual,omitempty"`
	// 回答期日変更ID
	SurveyReplyDueDateChangeId string `protobuf:"bytes,10,opt,name=survey_reply_due_date_change_id,json=surveyReplyDueDateChangeId,proto3" json:"survey_reply_due_date_change_id,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,11,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *SurveyReminder) Reset() {
	*x = SurveyReminder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveynotification_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReminder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReminder) ProtoMessage() {}

func (x *SurveyReminder) ProtoReflect() protoreflect.Message {
	mi := &file_surveynotification_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReminder.ProtoReflect.Descriptor instead.
func (*SurveyReminder) Descriptor() ([]byte, []int) {
	return file_surveynotification_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyReminder) GetSurveyReminderId() string {
	if x != nil {
		return x.SurveyReminderId
	}
	return ""
}

func (x *SurveyReminder) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

func (x *SurveyReminder) GetRemindedAt() int64 {
	if x != nil {
		return x.RemindedAt
	}
	return 0
}

func (x *SurveyReminder) GetContentType() *protobuf.NameOption {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *SurveyReminder) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SurveyReminder) GetNotifyTos() []*protobuf.NameOption {
	if x != nil {
		return x.NotifyTos
	}
	return nil
}

func (x *SurveyReminder) GetTos() []string {
	if x != nil {
		return x.Tos
	}
	return nil
}

func (x *SurveyReminder) GetCcs() []string {
	if x != nil {
		return x.Ccs
	}
	return nil
}

func (x *SurveyReminder) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *SurveyReminder) GetSurveyReplyDueDateChangeId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeId
	}
	return ""
}

func (x *SurveyReminder) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *SurveyReminder) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SurveyReminder) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SurveyReminder) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 履歴データ
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 履歴ID
	HistoryId string `protobuf:"bytes,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// urn
	// "urn:mtechnavi.api.survey.SurveyRequest:{{survey_request_id}}"
	Urn string `protobuf:"bytes,2,opt,name=urn,proto3" json:"urn,omitempty"`
	// "mtechnavi.api.survey.SurveyRequest"
	TypeName string `protobuf:"bytes,10,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// "{{survey_request_id}}"
	RecordId string `protobuf:"bytes,11,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// 履歴分類
	// メッセージにおける種別 HISTORY / コード H[XXXXXXX]a を参照
	// e.g. H0000001a
	HistoryCategoryName string `protobuf:"bytes,3,opt,name=history_category_name,json=historyCategoryName,proto3" json:"history_category_name,omitempty"`
	// 内容
	// メッセージにおける種別 HISTORY / コード H[XXXXXXX]b を参照
	// e.g. H0000001b
	ContentName string `protobuf:"bytes,4,opt,name=content_name,json=contentName,proto3" json:"content_name,omitempty"`
	// 内容パラメータ
	ContentParamaters []string `protobuf:"bytes,5,rep,name=content_paramaters,json=contentParamaters,proto3" json:"content_paramaters,omitempty"`
	// readonly 発生日時
	OccurredAt int64 `protobuf:"varint,6,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// 通知レベル
	Level     int64 `protobuf:"varint,12,opt,name=level,proto3" json:"level,omitempty"`
	CreatedAt int64 `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt int64 `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveynotification_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_surveynotification_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_surveynotification_proto_rawDescGZIP(), []int{1}
}

func (x *History) GetHistoryId() string {
	if x != nil {
		return x.HistoryId
	}
	return ""
}

func (x *History) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *History) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *History) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *History) GetHistoryCategoryName() string {
	if x != nil {
		return x.HistoryCategoryName
	}
	return ""
}

func (x *History) GetContentName() string {
	if x != nil {
		return x.ContentName
	}
	return ""
}

func (x *History) GetContentParamaters() []string {
	if x != nil {
		return x.ContentParamaters
	}
	return nil
}

func (x *History) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *History) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *History) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *History) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *History) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

var File_surveynotification_proto protoreflect.FileDescriptor

var file_surveynotification_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x1a, 0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d, 0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x05, 0x0a, 0x0e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0xd2, 0xb8, 0x02,
	0x15, 0x0a, 0x13, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x6f,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x73,
	0x12, 0x18, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x03, 0x63, 0x63,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52,
	0x03, 0x63, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x1a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xbc, 0x03, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x03, 0x75, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xd2, 0xb8, 0x02, 0x07, 0x0a, 0x05, 0x0a,
	0x03, 0x75, 0x72, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xd2, 0xb8,
	0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x1b,
	0x5a, 0x19, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_surveynotification_proto_rawDescOnce sync.Once
	file_surveynotification_proto_rawDescData = file_surveynotification_proto_rawDesc
)

func file_surveynotification_proto_rawDescGZIP() []byte {
	file_surveynotification_proto_rawDescOnce.Do(func() {
		file_surveynotification_proto_rawDescData = protoimpl.X.CompressGZIP(file_surveynotification_proto_rawDescData)
	})
	return file_surveynotification_proto_rawDescData
}

var file_surveynotification_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_surveynotification_proto_goTypes = []interface{}{
	(*SurveyReminder)(nil),                    // 0: mtechnavi.api.survey.SurveyReminder
	(*History)(nil),                           // 1: mtechnavi.api.survey.History
	(*protobuf.NameOption)(nil),               // 2: sharelib.NameOption
	(*protobuf.EmbeddedSharedProperties)(nil), // 3: sharelib.EmbeddedSharedProperties
}
var file_surveynotification_proto_depIdxs = []int32{
	2, // 0: mtechnavi.api.survey.SurveyReminder.content_type:type_name -> sharelib.NameOption
	2, // 1: mtechnavi.api.survey.SurveyReminder.notify_tos:type_name -> sharelib.NameOption
	3, // 2: mtechnavi.api.survey.SurveyReminder.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_surveynotification_proto_init() }
func file_surveynotification_proto_init() {
	if File_surveynotification_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_surveynotification_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReminder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surveynotification_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_surveynotification_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_surveynotification_proto_goTypes,
		DependencyIndexes: file_surveynotification_proto_depIdxs,
		MessageInfos:      file_surveynotification_proto_msgTypes,
	}.Build()
	File_surveynotification_proto = out.File
	file_surveynotification_proto_rawDesc = nil
	file_surveynotification_proto_goTypes = nil
	file_surveynotification_proto_depIdxs = nil
}
