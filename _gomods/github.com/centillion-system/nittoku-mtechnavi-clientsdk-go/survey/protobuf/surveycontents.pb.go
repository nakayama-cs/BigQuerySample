// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: surveycontents.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 依頼伝票コンテンツ
type SurveyBaseRequestContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票データ
	SurveyBaseRequest *SurveyBaseRequest `protobuf:"bytes,1,opt,name=survey_base_request,json=surveyBaseRequest,proto3" json:"survey_base_request,omitempty"`
	// ステータス
	Status *protobuf.NameOption `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 取引先件数
	TotalRequestUnit int64 `protobuf:"varint,3,opt,name=total_request_unit,json=totalRequestUnit,proto3" json:"total_request_unit,omitempty"`
}

func (x *SurveyBaseRequestContent) Reset() {
	*x = SurveyBaseRequestContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveycontents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyBaseRequestContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyBaseRequestContent) ProtoMessage() {}

func (x *SurveyBaseRequestContent) ProtoReflect() protoreflect.Message {
	mi := &file_surveycontents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyBaseRequestContent.ProtoReflect.Descriptor instead.
func (*SurveyBaseRequestContent) Descriptor() ([]byte, []int) {
	return file_surveycontents_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyBaseRequestContent) GetSurveyBaseRequest() *SurveyBaseRequest {
	if x != nil {
		return x.SurveyBaseRequest
	}
	return nil
}

func (x *SurveyBaseRequestContent) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SurveyBaseRequestContent) GetTotalRequestUnit() int64 {
	if x != nil {
		return x.TotalRequestUnit
	}
	return 0
}

// 依頼明細コンテンツ
type SurveyRequestContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細データ
	SurveyRequest *SurveyRequest `protobuf:"bytes,1,opt,name=survey_request,json=surveyRequest,proto3" json:"survey_request,omitempty"`
	// 依頼回答データ
	SurveyResult *SurveyResult `protobuf:"bytes,2,opt,name=survey_result,json=surveyResult,proto3" json:"survey_result,omitempty"`
	// 終了データ
	Complete *Complete `protobuf:"bytes,3,opt,name=complete,proto3" json:"complete,omitempty"`
	// 破棄データ
	Discard *Discard `protobuf:"bytes,4,opt,name=discard,proto3" json:"discard,omitempty"`
	// 開府済みデータ
	Opened *Opened `protobuf:"bytes,9,opt,name=opened,proto3" json:"opened,omitempty"`
	// 修正依頼データ
	SurveyResultChangeRequest *SurveyResultChangeRequest `protobuf:"bytes,5,opt,name=survey_result_change_request,json=surveyResultChangeRequest,proto3" json:"survey_result_change_request,omitempty"`
	// 回答期日変更データ
	SurveyReplyDueDateChangeResult *SurveyReplyDueDateChangeResult `protobuf:"bytes,6,opt,name=survey_reply_due_date_change_result,json=surveyReplyDueDateChangeResult,proto3" json:"survey_reply_due_date_change_result,omitempty"`
	// ステータス
	Status *protobuf.NameOption `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// 現在回答期日
	ReplyDueDateDt *protobuf.Datetime `protobuf:"bytes,8,opt,name=reply_due_date_dt,json=replyDueDateDt,proto3" json:"reply_due_date_dt,omitempty"`
}

func (x *SurveyRequestContent) Reset() {
	*x = SurveyRequestContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveycontents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyRequestContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyRequestContent) ProtoMessage() {}

func (x *SurveyRequestContent) ProtoReflect() protoreflect.Message {
	mi := &file_surveycontents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyRequestContent.ProtoReflect.Descriptor instead.
func (*SurveyRequestContent) Descriptor() ([]byte, []int) {
	return file_surveycontents_proto_rawDescGZIP(), []int{1}
}

func (x *SurveyRequestContent) GetSurveyRequest() *SurveyRequest {
	if x != nil {
		return x.SurveyRequest
	}
	return nil
}

func (x *SurveyRequestContent) GetSurveyResult() *SurveyResult {
	if x != nil {
		return x.SurveyResult
	}
	return nil
}

func (x *SurveyRequestContent) GetComplete() *Complete {
	if x != nil {
		return x.Complete
	}
	return nil
}

func (x *SurveyRequestContent) GetDiscard() *Discard {
	if x != nil {
		return x.Discard
	}
	return nil
}

func (x *SurveyRequestContent) GetOpened() *Opened {
	if x != nil {
		return x.Opened
	}
	return nil
}

func (x *SurveyRequestContent) GetSurveyResultChangeRequest() *SurveyResultChangeRequest {
	if x != nil {
		return x.SurveyResultChangeRequest
	}
	return nil
}

func (x *SurveyRequestContent) GetSurveyReplyDueDateChangeResult() *SurveyReplyDueDateChangeResult {
	if x != nil {
		return x.SurveyReplyDueDateChangeResult
	}
	return nil
}

func (x *SurveyRequestContent) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SurveyRequestContent) GetReplyDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.ReplyDueDateDt
	}
	return nil
}

// 依頼受信コンテンツ
type SurveyReceptionContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼受信データ
	SurveyReception *SurveyReception `protobuf:"bytes,1,opt,name=survey_reception,json=surveyReception,proto3" json:"survey_reception,omitempty"`
	// 依頼明細データ
	SurveyRequest *SurveyRequest `protobuf:"bytes,2,opt,name=survey_request,json=surveyRequest,proto3" json:"survey_request,omitempty"`
	// 依頼回答データ
	SurveyResult *SurveyResult `protobuf:"bytes,3,opt,name=survey_result,json=surveyResult,proto3" json:"survey_result,omitempty"`
	// 終了データ
	Complete *Complete `protobuf:"bytes,4,opt,name=complete,proto3" json:"complete,omitempty"`
	// 破棄データ
	Discard *Discard `protobuf:"bytes,5,opt,name=discard,proto3" json:"discard,omitempty"`
	// 開府済みデータ
	Opened *Opened `protobuf:"bytes,10,opt,name=opened,proto3" json:"opened,omitempty"`
	// 修正依頼データ
	SurveyResultChangeRequest *SurveyResultChangeRequest `protobuf:"bytes,6,opt,name=survey_result_change_request,json=surveyResultChangeRequest,proto3" json:"survey_result_change_request,omitempty"`
	// 回答期日変更データ
	SurveyReplyDueDateChangeResult *SurveyReplyDueDateChangeResult `protobuf:"bytes,7,opt,name=survey_reply_due_date_change_result,json=surveyReplyDueDateChangeResult,proto3" json:"survey_reply_due_date_change_result,omitempty"`
	// ステータス
	Status *protobuf.NameOption `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// 現在回答期日
	ReplyDueDateDt *protobuf.Datetime `protobuf:"bytes,9,opt,name=reply_due_date_dt,json=replyDueDateDt,proto3" json:"reply_due_date_dt,omitempty"`
}

func (x *SurveyReceptionContent) Reset() {
	*x = SurveyReceptionContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveycontents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReceptionContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReceptionContent) ProtoMessage() {}

func (x *SurveyReceptionContent) ProtoReflect() protoreflect.Message {
	mi := &file_surveycontents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReceptionContent.ProtoReflect.Descriptor instead.
func (*SurveyReceptionContent) Descriptor() ([]byte, []int) {
	return file_surveycontents_proto_rawDescGZIP(), []int{2}
}

func (x *SurveyReceptionContent) GetSurveyReception() *SurveyReception {
	if x != nil {
		return x.SurveyReception
	}
	return nil
}

func (x *SurveyReceptionContent) GetSurveyRequest() *SurveyRequest {
	if x != nil {
		return x.SurveyRequest
	}
	return nil
}

func (x *SurveyReceptionContent) GetSurveyResult() *SurveyResult {
	if x != nil {
		return x.SurveyResult
	}
	return nil
}

func (x *SurveyReceptionContent) GetComplete() *Complete {
	if x != nil {
		return x.Complete
	}
	return nil
}

func (x *SurveyReceptionContent) GetDiscard() *Discard {
	if x != nil {
		return x.Discard
	}
	return nil
}

func (x *SurveyReceptionContent) GetOpened() *Opened {
	if x != nil {
		return x.Opened
	}
	return nil
}

func (x *SurveyReceptionContent) GetSurveyResultChangeRequest() *SurveyResultChangeRequest {
	if x != nil {
		return x.SurveyResultChangeRequest
	}
	return nil
}

func (x *SurveyReceptionContent) GetSurveyReplyDueDateChangeResult() *SurveyReplyDueDateChangeResult {
	if x != nil {
		return x.SurveyReplyDueDateChangeResult
	}
	return nil
}

func (x *SurveyReceptionContent) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SurveyReceptionContent) GetReplyDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.ReplyDueDateDt
	}
	return nil
}

var File_surveycontents_proto protoreflect.FileDescriptor

var file_surveycontents_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x1a, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x18,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xb9, 0x05,
	0x0a, 0x14, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x44, 0x74, 0x22, 0x8d, 0x06, 0x0a, 0x16, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x44, 0x74, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_surveycontents_proto_rawDescOnce sync.Once
	file_surveycontents_proto_rawDescData = file_surveycontents_proto_rawDesc
)

func file_surveycontents_proto_rawDescGZIP() []byte {
	file_surveycontents_proto_rawDescOnce.Do(func() {
		file_surveycontents_proto_rawDescData = protoimpl.X.CompressGZIP(file_surveycontents_proto_rawDescData)
	})
	return file_surveycontents_proto_rawDescData
}

var file_surveycontents_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_surveycontents_proto_goTypes = []interface{}{
	(*SurveyBaseRequestContent)(nil),       // 0: mtechnavi.api.survey.SurveyBaseRequestContent
	(*SurveyRequestContent)(nil),           // 1: mtechnavi.api.survey.SurveyRequestContent
	(*SurveyReceptionContent)(nil),         // 2: mtechnavi.api.survey.SurveyReceptionContent
	(*SurveyBaseRequest)(nil),              // 3: mtechnavi.api.survey.SurveyBaseRequest
	(*protobuf.NameOption)(nil),            // 4: sharelib.NameOption
	(*SurveyRequest)(nil),                  // 5: mtechnavi.api.survey.SurveyRequest
	(*SurveyResult)(nil),                   // 6: mtechnavi.api.survey.SurveyResult
	(*Complete)(nil),                       // 7: mtechnavi.api.survey.Complete
	(*Discard)(nil),                        // 8: mtechnavi.api.survey.Discard
	(*Opened)(nil),                         // 9: mtechnavi.api.survey.Opened
	(*SurveyResultChangeRequest)(nil),      // 10: mtechnavi.api.survey.SurveyResultChangeRequest
	(*SurveyReplyDueDateChangeResult)(nil), // 11: mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	(*protobuf.Datetime)(nil),              // 12: sharelib.Datetime
	(*SurveyReception)(nil),                // 13: mtechnavi.api.survey.SurveyReception
}
var file_surveycontents_proto_depIdxs = []int32{
	3,  // 0: mtechnavi.api.survey.SurveyBaseRequestContent.survey_base_request:type_name -> mtechnavi.api.survey.SurveyBaseRequest
	4,  // 1: mtechnavi.api.survey.SurveyBaseRequestContent.status:type_name -> sharelib.NameOption
	5,  // 2: mtechnavi.api.survey.SurveyRequestContent.survey_request:type_name -> mtechnavi.api.survey.SurveyRequest
	6,  // 3: mtechnavi.api.survey.SurveyRequestContent.survey_result:type_name -> mtechnavi.api.survey.SurveyResult
	7,  // 4: mtechnavi.api.survey.SurveyRequestContent.complete:type_name -> mtechnavi.api.survey.Complete
	8,  // 5: mtechnavi.api.survey.SurveyRequestContent.discard:type_name -> mtechnavi.api.survey.Discard
	9,  // 6: mtechnavi.api.survey.SurveyRequestContent.opened:type_name -> mtechnavi.api.survey.Opened
	10, // 7: mtechnavi.api.survey.SurveyRequestContent.survey_result_change_request:type_name -> mtechnavi.api.survey.SurveyResultChangeRequest
	11, // 8: mtechnavi.api.survey.SurveyRequestContent.survey_reply_due_date_change_result:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	4,  // 9: mtechnavi.api.survey.SurveyRequestContent.status:type_name -> sharelib.NameOption
	12, // 10: mtechnavi.api.survey.SurveyRequestContent.reply_due_date_dt:type_name -> sharelib.Datetime
	13, // 11: mtechnavi.api.survey.SurveyReceptionContent.survey_reception:type_name -> mtechnavi.api.survey.SurveyReception
	5,  // 12: mtechnavi.api.survey.SurveyReceptionContent.survey_request:type_name -> mtechnavi.api.survey.SurveyRequest
	6,  // 13: mtechnavi.api.survey.SurveyReceptionContent.survey_result:type_name -> mtechnavi.api.survey.SurveyResult
	7,  // 14: mtechnavi.api.survey.SurveyReceptionContent.complete:type_name -> mtechnavi.api.survey.Complete
	8,  // 15: mtechnavi.api.survey.SurveyReceptionContent.discard:type_name -> mtechnavi.api.survey.Discard
	9,  // 16: mtechnavi.api.survey.SurveyReceptionContent.opened:type_name -> mtechnavi.api.survey.Opened
	10, // 17: mtechnavi.api.survey.SurveyReceptionContent.survey_result_change_request:type_name -> mtechnavi.api.survey.SurveyResultChangeRequest
	11, // 18: mtechnavi.api.survey.SurveyReceptionContent.survey_reply_due_date_change_result:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	4,  // 19: mtechnavi.api.survey.SurveyReceptionContent.status:type_name -> sharelib.NameOption
	12, // 20: mtechnavi.api.survey.SurveyReceptionContent.reply_due_date_dt:type_name -> sharelib.Datetime
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_surveycontents_proto_init() }
func file_surveycontents_proto_init() {
	if File_surveycontents_proto != nil {
		return
	}
	file_surveyrequest_proto_init()
	file_surveyresult_proto_init()
	file_surveystatus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_surveycontents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyBaseRequestContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surveycontents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyRequestContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surveycontents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReceptionContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_surveycontents_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_surveycontents_proto_goTypes,
		DependencyIndexes: file_surveycontents_proto_depIdxs,
		MessageInfos:      file_surveycontents_proto_msgTypes,
	}.Build()
	File_surveycontents_proto = out.File
	file_surveycontents_proto_rawDesc = nil
	file_surveycontents_proto_goTypes = nil
	file_surveycontents_proto_depIdxs = nil
}
