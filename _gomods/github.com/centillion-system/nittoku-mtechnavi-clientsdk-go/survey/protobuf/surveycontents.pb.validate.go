// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: surveycontents.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SurveyBaseRequestContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurveyBaseRequestContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyBaseRequestContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurveyBaseRequestContentMultiError, or nil if none found.
func (m *SurveyBaseRequestContent) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyBaseRequestContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestContentValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestContentValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestContentValidationError{
				field:  "SurveyBaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestContentValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalRequestUnit

	if len(errors) > 0 {
		return SurveyBaseRequestContentMultiError(errors)
	}

	return nil
}

// SurveyBaseRequestContentMultiError is an error wrapping multiple validation
// errors returned by SurveyBaseRequestContent.ValidateAll() if the designated
// constraints aren't met.
type SurveyBaseRequestContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyBaseRequestContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyBaseRequestContentMultiError) AllErrors() []error { return m }

// SurveyBaseRequestContentValidationError is the validation error returned by
// SurveyBaseRequestContent.Validate if the designated constraints aren't met.
type SurveyBaseRequestContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyBaseRequestContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyBaseRequestContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyBaseRequestContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyBaseRequestContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyBaseRequestContentValidationError) ErrorName() string {
	return "SurveyBaseRequestContentValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyBaseRequestContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyBaseRequestContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyBaseRequestContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyBaseRequestContentValidationError{}

// Validate checks the field values on SurveyRequestContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurveyRequestContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyRequestContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurveyRequestContentMultiError, or nil if none found.
func (m *SurveyRequestContent) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyRequestContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "SurveyRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "SurveyResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComplete()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComplete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "Complete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "Discard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpened()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpened()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "Opened",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyResultChangeRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResultChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "SurveyResultChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyReplyDueDateChangeResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReplyDueDateChangeResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "SurveyReplyDueDateChangeResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplyDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestContentValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestContentValidationError{
				field:  "ReplyDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SurveyRequestContentMultiError(errors)
	}

	return nil
}

// SurveyRequestContentMultiError is an error wrapping multiple validation
// errors returned by SurveyRequestContent.ValidateAll() if the designated
// constraints aren't met.
type SurveyRequestContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyRequestContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyRequestContentMultiError) AllErrors() []error { return m }

// SurveyRequestContentValidationError is the validation error returned by
// SurveyRequestContent.Validate if the designated constraints aren't met.
type SurveyRequestContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyRequestContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyRequestContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyRequestContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyRequestContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyRequestContentValidationError) ErrorName() string {
	return "SurveyRequestContentValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyRequestContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyRequestContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyRequestContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyRequestContentValidationError{}

// Validate checks the field values on SurveyReceptionContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurveyReceptionContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyReceptionContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurveyReceptionContentMultiError, or nil if none found.
func (m *SurveyReceptionContent) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyReceptionContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReception()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyReception",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyReception",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReception()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "SurveyReception",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "SurveyRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "SurveyResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComplete()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComplete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "Complete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "Discard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOpened()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpened()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "Opened",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyResultChangeRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResultChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "SurveyResultChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyReplyDueDateChangeResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReplyDueDateChangeResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "SurveyReplyDueDateChangeResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReplyDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReceptionContentValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReceptionContentValidationError{
				field:  "ReplyDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SurveyReceptionContentMultiError(errors)
	}

	return nil
}

// SurveyReceptionContentMultiError is an error wrapping multiple validation
// errors returned by SurveyReceptionContent.ValidateAll() if the designated
// constraints aren't met.
type SurveyReceptionContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyReceptionContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyReceptionContentMultiError) AllErrors() []error { return m }

// SurveyReceptionContentValidationError is the validation error returned by
// SurveyReceptionContent.Validate if the designated constraints aren't met.
type SurveyReceptionContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyReceptionContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyReceptionContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyReceptionContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyReceptionContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyReceptionContentValidationError) ErrorName() string {
	return "SurveyReceptionContentValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyReceptionContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyReceptionContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyReceptionContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyReceptionContentValidationError{}
