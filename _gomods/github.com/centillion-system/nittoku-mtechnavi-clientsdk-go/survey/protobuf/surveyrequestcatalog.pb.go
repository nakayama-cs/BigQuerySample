// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: surveyrequestcatalog.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 依頼カタログマスタ
type SurveyRequestCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼カタログID
	SurveyRequestCatalogId string `protobuf:"bytes,1,opt,name=survey_request_catalog_id,json=surveyRequestCatalogId,proto3" json:"survey_request_catalog_id,omitempty"`
	// readonly 依頼カタログコード
	//
	// Implementation Note:
	//
	//	create時に保存した値を変更しない
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// 依頼カタログ名
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 依頼カタログ分類
	// 名称マスタにおける種別 A1000001 (依頼カタログ分類) を参照
	Category *protobuf.NameOption `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// 案内文
	Guidance string `protobuf:"bytes,5,opt,name=guidance,proto3" json:"guidance,omitempty"`
	// 承認必要
	Approval bool `protobuf:"varint,6,opt,name=approval,proto3" json:"approval,omitempty"`
	// 完了区分
	// 名称マスタにおける種別 A1000002 (完了区分) を参照
	CompleteCondition *protobuf.NameOption `protobuf:"bytes,7,opt,name=complete_condition,json=completeCondition,proto3" json:"complete_condition,omitempty"`
	// 部分回答許可
	PartialReply bool `protobuf:"varint,8,opt,name=partial_reply,json=partialReply,proto3" json:"partial_reply,omitempty"`
	// 辞退許可
	Decline bool `protobuf:"varint,9,opt,name=decline,proto3" json:"decline,omitempty"`
	// 自動催促設定
	AutoReminderSettings []*AutoReminderSetting `protobuf:"bytes,10,rep,name=auto_reminder_settings,json=autoReminderSettings,proto3" json:"auto_reminder_settings,omitempty"`
	// 依頼元名称
	Requesters []string `protobuf:"bytes,11,rep,name=requesters,proto3" json:"requesters,omitempty"`
	// 共通ファイルリスト
	CommonAttachments []*protobuf.Attachment `protobuf:"bytes,12,rep,name=common_attachments,json=commonAttachments,proto3" json:"common_attachments,omitempty"`
	// readonly 最終更新日時
	SurveyRequestCatalogUpdatedAt int64 `protobuf:"varint,13,opt,name=survey_request_catalog_updated_at,json=surveyRequestCatalogUpdatedAt,proto3" json:"survey_request_catalog_updated_at,omitempty"`
	// readonly 最終更新アカウント情報
	SurveyRequestCatalogUpdatedBy *protobuf.EmbeddedUser `protobuf:"bytes,14,opt,name=survey_request_catalog_updated_by,json=surveyRequestCatalogUpdatedBy,proto3" json:"survey_request_catalog_updated_by,omitempty"`
	CreatedAt                     int64                  `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                     int64                  `protobuf:"varint,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt                     int64                  `protobuf:"varint,17,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *SurveyRequestCatalog) Reset() {
	*x = SurveyRequestCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveyrequestcatalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyRequestCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyRequestCatalog) ProtoMessage() {}

func (x *SurveyRequestCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_surveyrequestcatalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyRequestCatalog.ProtoReflect.Descriptor instead.
func (*SurveyRequestCatalog) Descriptor() ([]byte, []int) {
	return file_surveyrequestcatalog_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyRequestCatalog) GetSurveyRequestCatalogId() string {
	if x != nil {
		return x.SurveyRequestCatalogId
	}
	return ""
}

func (x *SurveyRequestCatalog) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SurveyRequestCatalog) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SurveyRequestCatalog) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *SurveyRequestCatalog) GetGuidance() string {
	if x != nil {
		return x.Guidance
	}
	return ""
}

func (x *SurveyRequestCatalog) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *SurveyRequestCatalog) GetCompleteCondition() *protobuf.NameOption {
	if x != nil {
		return x.CompleteCondition
	}
	return nil
}

func (x *SurveyRequestCatalog) GetPartialReply() bool {
	if x != nil {
		return x.PartialReply
	}
	return false
}

func (x *SurveyRequestCatalog) GetDecline() bool {
	if x != nil {
		return x.Decline
	}
	return false
}

func (x *SurveyRequestCatalog) GetAutoReminderSettings() []*AutoReminderSetting {
	if x != nil {
		return x.AutoReminderSettings
	}
	return nil
}

func (x *SurveyRequestCatalog) GetRequesters() []string {
	if x != nil {
		return x.Requesters
	}
	return nil
}

func (x *SurveyRequestCatalog) GetCommonAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.CommonAttachments
	}
	return nil
}

func (x *SurveyRequestCatalog) GetSurveyRequestCatalogUpdatedAt() int64 {
	if x != nil {
		return x.SurveyRequestCatalogUpdatedAt
	}
	return 0
}

func (x *SurveyRequestCatalog) GetSurveyRequestCatalogUpdatedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.SurveyRequestCatalogUpdatedBy
	}
	return nil
}

func (x *SurveyRequestCatalog) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SurveyRequestCatalog) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SurveyRequestCatalog) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

var File_surveyrequestcatalog_proto protoreflect.FileDescriptor

var file_surveyrequestcatalog_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x1a, 0x0f, 0x6d, 0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd3, 0x06, 0x0a, 0x14, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xd2, 0xb8, 0x02, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x21,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x60, 0x0a, 0x21, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x1d, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_surveyrequestcatalog_proto_rawDescOnce sync.Once
	file_surveyrequestcatalog_proto_rawDescData = file_surveyrequestcatalog_proto_rawDesc
)

func file_surveyrequestcatalog_proto_rawDescGZIP() []byte {
	file_surveyrequestcatalog_proto_rawDescOnce.Do(func() {
		file_surveyrequestcatalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_surveyrequestcatalog_proto_rawDescData)
	})
	return file_surveyrequestcatalog_proto_rawDescData
}

var file_surveyrequestcatalog_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_surveyrequestcatalog_proto_goTypes = []interface{}{
	(*SurveyRequestCatalog)(nil),  // 0: mtechnavi.api.survey.SurveyRequestCatalog
	(*protobuf.NameOption)(nil),   // 1: sharelib.NameOption
	(*AutoReminderSetting)(nil),   // 2: mtechnavi.api.survey.AutoReminderSetting
	(*protobuf.Attachment)(nil),   // 3: sharelib.Attachment
	(*protobuf.EmbeddedUser)(nil), // 4: sharelib.EmbeddedUser
}
var file_surveyrequestcatalog_proto_depIdxs = []int32{
	1, // 0: mtechnavi.api.survey.SurveyRequestCatalog.category:type_name -> sharelib.NameOption
	1, // 1: mtechnavi.api.survey.SurveyRequestCatalog.complete_condition:type_name -> sharelib.NameOption
	2, // 2: mtechnavi.api.survey.SurveyRequestCatalog.auto_reminder_settings:type_name -> mtechnavi.api.survey.AutoReminderSetting
	3, // 3: mtechnavi.api.survey.SurveyRequestCatalog.common_attachments:type_name -> sharelib.Attachment
	4, // 4: mtechnavi.api.survey.SurveyRequestCatalog.survey_request_catalog_updated_by:type_name -> sharelib.EmbeddedUser
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_surveyrequestcatalog_proto_init() }
func file_surveyrequestcatalog_proto_init() {
	if File_surveyrequestcatalog_proto != nil {
		return
	}
	file_surveybasictypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_surveyrequestcatalog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyRequestCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_surveyrequestcatalog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_surveyrequestcatalog_proto_goTypes,
		DependencyIndexes: file_surveyrequestcatalog_proto_depIdxs,
		MessageInfos:      file_surveyrequestcatalog_proto_msgTypes,
	}.Build()
	File_surveyrequestcatalog_proto = out.File
	file_surveyrequestcatalog_proto_rawDesc = nil
	file_surveyrequestcatalog_proto_goTypes = nil
	file_surveyrequestcatalog_proto_depIdxs = nil
}
