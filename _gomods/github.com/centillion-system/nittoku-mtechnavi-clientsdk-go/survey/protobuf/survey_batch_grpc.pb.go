// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyBatchServiceClient is the client API for SurveyBatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyBatchServiceClient interface {
	// 非同期 展開処理
	TaskExpandCreateSurveyRequest(ctx context.Context, in *TaskExpandCreateSurveyRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 非同期 依頼伝票削除
	TaskDeleteSurveyBaseRequest(ctx context.Context, in *TaskDeleteSurveyBaseRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 非同期 履歴作成
	TaskCreateHistory(ctx context.Context, in *TaskCreateHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 日次メール作成処理
	// （分類 依頼伝票 コード：SurveyBaseRequest)
	TaskCreateDailyMailSurveyBaseRequest(ctx context.Context, in *TaskCreateDailyMailSurveyBaseRequestRequest, opts ...grpc.CallOption) (*TaskCreateDailyMailSurveyBaseRequestResponse, error)
	// 日次メール作成処理
	// （分類 依頼明細 コード：SurveyRequest)
	TaskCreateDailyMailSurveyRequest(ctx context.Context, in *TaskCreateDailyMailSurveyRequestRequest, opts ...grpc.CallOption) (*TaskCreateDailyMailSurveyRequestResponse, error)
	// 非同期 日次自動催促処理
	TaskShareReminder(ctx context.Context, in *TaskShareReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type surveyBatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyBatchServiceClient(cc grpc.ClientConnInterface) SurveyBatchServiceClient {
	return &surveyBatchServiceClient{cc}
}

func (c *surveyBatchServiceClient) TaskExpandCreateSurveyRequest(ctx context.Context, in *TaskExpandCreateSurveyRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.surveyBatchService/TaskExpandCreateSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyBatchServiceClient) TaskDeleteSurveyBaseRequest(ctx context.Context, in *TaskDeleteSurveyBaseRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.surveyBatchService/TaskDeleteSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyBatchServiceClient) TaskCreateHistory(ctx context.Context, in *TaskCreateHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.surveyBatchService/TaskCreateHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyBatchServiceClient) TaskCreateDailyMailSurveyBaseRequest(ctx context.Context, in *TaskCreateDailyMailSurveyBaseRequestRequest, opts ...grpc.CallOption) (*TaskCreateDailyMailSurveyBaseRequestResponse, error) {
	out := new(TaskCreateDailyMailSurveyBaseRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.surveyBatchService/TaskCreateDailyMailSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyBatchServiceClient) TaskCreateDailyMailSurveyRequest(ctx context.Context, in *TaskCreateDailyMailSurveyRequestRequest, opts ...grpc.CallOption) (*TaskCreateDailyMailSurveyRequestResponse, error) {
	out := new(TaskCreateDailyMailSurveyRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.surveyBatchService/TaskCreateDailyMailSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyBatchServiceClient) TaskShareReminder(ctx context.Context, in *TaskShareReminderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.surveyBatchService/TaskShareReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyBatchServiceServer is the server API for SurveyBatchService service.
// All implementations must embed UnimplementedSurveyBatchServiceServer
// for forward compatibility
type SurveyBatchServiceServer interface {
	// 非同期 展開処理
	TaskExpandCreateSurveyRequest(context.Context, *TaskExpandCreateSurveyRequestRequest) (*emptypb.Empty, error)
	// 非同期 依頼伝票削除
	TaskDeleteSurveyBaseRequest(context.Context, *TaskDeleteSurveyBaseRequestRequest) (*emptypb.Empty, error)
	// 非同期 履歴作成
	TaskCreateHistory(context.Context, *TaskCreateHistoryRequest) (*emptypb.Empty, error)
	// 日次メール作成処理
	// （分類 依頼伝票 コード：SurveyBaseRequest)
	TaskCreateDailyMailSurveyBaseRequest(context.Context, *TaskCreateDailyMailSurveyBaseRequestRequest) (*TaskCreateDailyMailSurveyBaseRequestResponse, error)
	// 日次メール作成処理
	// （分類 依頼明細 コード：SurveyRequest)
	TaskCreateDailyMailSurveyRequest(context.Context, *TaskCreateDailyMailSurveyRequestRequest) (*TaskCreateDailyMailSurveyRequestResponse, error)
	// 非同期 日次自動催促処理
	TaskShareReminder(context.Context, *TaskShareReminderRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSurveyBatchServiceServer()
}

// UnimplementedSurveyBatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyBatchServiceServer struct {
}

func (UnimplementedSurveyBatchServiceServer) TaskExpandCreateSurveyRequest(context.Context, *TaskExpandCreateSurveyRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExpandCreateSurveyRequest not implemented")
}
func (UnimplementedSurveyBatchServiceServer) TaskDeleteSurveyBaseRequest(context.Context, *TaskDeleteSurveyBaseRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDeleteSurveyBaseRequest not implemented")
}
func (UnimplementedSurveyBatchServiceServer) TaskCreateHistory(context.Context, *TaskCreateHistoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateHistory not implemented")
}
func (UnimplementedSurveyBatchServiceServer) TaskCreateDailyMailSurveyBaseRequest(context.Context, *TaskCreateDailyMailSurveyBaseRequestRequest) (*TaskCreateDailyMailSurveyBaseRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateDailyMailSurveyBaseRequest not implemented")
}
func (UnimplementedSurveyBatchServiceServer) TaskCreateDailyMailSurveyRequest(context.Context, *TaskCreateDailyMailSurveyRequestRequest) (*TaskCreateDailyMailSurveyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateDailyMailSurveyRequest not implemented")
}
func (UnimplementedSurveyBatchServiceServer) TaskShareReminder(context.Context, *TaskShareReminderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskShareReminder not implemented")
}
func (UnimplementedSurveyBatchServiceServer) mustEmbedUnimplementedSurveyBatchServiceServer() {}

// UnsafeSurveyBatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyBatchServiceServer will
// result in compilation errors.
type UnsafeSurveyBatchServiceServer interface {
	mustEmbedUnimplementedSurveyBatchServiceServer()
}

func RegisterSurveyBatchServiceServer(s grpc.ServiceRegistrar, srv SurveyBatchServiceServer) {
	s.RegisterService(&SurveyBatchService_ServiceDesc, srv)
}

func _SurveyBatchService_TaskExpandCreateSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExpandCreateSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyBatchServiceServer).TaskExpandCreateSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.surveyBatchService/TaskExpandCreateSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyBatchServiceServer).TaskExpandCreateSurveyRequest(ctx, req.(*TaskExpandCreateSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyBatchService_TaskDeleteSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDeleteSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyBatchServiceServer).TaskDeleteSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.surveyBatchService/TaskDeleteSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyBatchServiceServer).TaskDeleteSurveyBaseRequest(ctx, req.(*TaskDeleteSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyBatchService_TaskCreateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyBatchServiceServer).TaskCreateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.surveyBatchService/TaskCreateHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyBatchServiceServer).TaskCreateHistory(ctx, req.(*TaskCreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyBatchService_TaskCreateDailyMailSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateDailyMailSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyBatchServiceServer).TaskCreateDailyMailSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.surveyBatchService/TaskCreateDailyMailSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyBatchServiceServer).TaskCreateDailyMailSurveyBaseRequest(ctx, req.(*TaskCreateDailyMailSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyBatchService_TaskCreateDailyMailSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateDailyMailSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyBatchServiceServer).TaskCreateDailyMailSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.surveyBatchService/TaskCreateDailyMailSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyBatchServiceServer).TaskCreateDailyMailSurveyRequest(ctx, req.(*TaskCreateDailyMailSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyBatchService_TaskShareReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskShareReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyBatchServiceServer).TaskShareReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.surveyBatchService/TaskShareReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyBatchServiceServer).TaskShareReminder(ctx, req.(*TaskShareReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyBatchService_ServiceDesc is the grpc.ServiceDesc for SurveyBatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyBatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.survey.surveyBatchService",
	HandlerType: (*SurveyBatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskExpandCreateSurveyRequest",
			Handler:    _SurveyBatchService_TaskExpandCreateSurveyRequest_Handler,
		},
		{
			MethodName: "TaskDeleteSurveyBaseRequest",
			Handler:    _SurveyBatchService_TaskDeleteSurveyBaseRequest_Handler,
		},
		{
			MethodName: "TaskCreateHistory",
			Handler:    _SurveyBatchService_TaskCreateHistory_Handler,
		},
		{
			MethodName: "TaskCreateDailyMailSurveyBaseRequest",
			Handler:    _SurveyBatchService_TaskCreateDailyMailSurveyBaseRequest_Handler,
		},
		{
			MethodName: "TaskCreateDailyMailSurveyRequest",
			Handler:    _SurveyBatchService_TaskCreateDailyMailSurveyRequest_Handler,
		},
		{
			MethodName: "TaskShareReminder",
			Handler:    _SurveyBatchService_TaskShareReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey_batch.proto",
}
