// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: surveyresult.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SurveyReception with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SurveyReception) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyReception with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurveyReceptionMultiError, or nil if none found.
func (m *SurveyReception) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyReception) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReceptionId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyReceptionValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyReceptionValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyReceptionValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ReceiptedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyReceptionMultiError(errors)
	}

	return nil
}

// SurveyReceptionMultiError is an error wrapping multiple validation errors
// returned by SurveyReception.ValidateAll() if the designated constraints
// aren't met.
type SurveyReceptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyReceptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyReceptionMultiError) AllErrors() []error { return m }

// SurveyReceptionValidationError is the validation error returned by
// SurveyReception.Validate if the designated constraints aren't met.
type SurveyReceptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyReceptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyReceptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyReceptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyReceptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyReceptionValidationError) ErrorName() string { return "SurveyReceptionValidationError" }

// Error satisfies the builtin error interface
func (e SurveyReceptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyReception.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyReceptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyReceptionValidationError{}

// Validate checks the field values on SurveyResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SurveyResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SurveyResultMultiError, or
// nil if none found.
func (m *SurveyResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyResultId

	// no validation rules for SurveyRequestId

	// no validation rules for SendedAt

	// no validation rules for PartialReplyed

	// no validation rules for Declined

	// no validation rules for Comment

	for idx, item := range m.GetReplyAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyResultValidationError{
						field:  fmt.Sprintf("ReplyAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyResultValidationError{
						field:  fmt.Sprintf("ReplyAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyResultValidationError{
					field:  fmt.Sprintf("ReplyAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyResultValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyResultValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyResultValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyResultMultiError(errors)
	}

	return nil
}

// SurveyResultMultiError is an error wrapping multiple validation errors
// returned by SurveyResult.ValidateAll() if the designated constraints aren't met.
type SurveyResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyResultMultiError) AllErrors() []error { return m }

// SurveyResultValidationError is the validation error returned by
// SurveyResult.Validate if the designated constraints aren't met.
type SurveyResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyResultValidationError) ErrorName() string { return "SurveyResultValidationError" }

// Error satisfies the builtin error interface
func (e SurveyResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyResultValidationError{}

// Validate checks the field values on SurveyResultChangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurveyResultChangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyResultChangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurveyResultChangeRequestMultiError, or nil if none found.
func (m *SurveyResultChangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyResultChangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyResultChangeRequestId

	// no validation rules for SurveyRequestId

	// no validation rules for SurveyResultId

	// no validation rules for RequestedAt

	// no validation rules for Comment

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyResultChangeRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyResultChangeRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyResultChangeRequestValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyResultChangeRequestMultiError(errors)
	}

	return nil
}

// SurveyResultChangeRequestMultiError is an error wrapping multiple validation
// errors returned by SurveyResultChangeRequest.ValidateAll() if the
// designated constraints aren't met.
type SurveyResultChangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyResultChangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyResultChangeRequestMultiError) AllErrors() []error { return m }

// SurveyResultChangeRequestValidationError is the validation error returned by
// SurveyResultChangeRequest.Validate if the designated constraints aren't met.
type SurveyResultChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyResultChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyResultChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyResultChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyResultChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyResultChangeRequestValidationError) ErrorName() string {
	return "SurveyResultChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyResultChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyResultChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyResultChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyResultChangeRequestValidationError{}

// Validate checks the field values on ExportedSurveyResultReplyAttachment with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportedSurveyResultReplyAttachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportedSurveyResultReplyAttachment
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportedSurveyResultReplyAttachmentMultiError, or nil if none found.
func (m *ExportedSurveyResultReplyAttachment) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportedSurveyResultReplyAttachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExportedSurveyResultReplyAttachmentId

	// no validation rules for SurveyResultId

	// no validation rules for SurveyRequestId

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportedSurveyResultReplyAttachmentValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportedSurveyResultReplyAttachmentValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportedSurveyResultReplyAttachmentValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return ExportedSurveyResultReplyAttachmentMultiError(errors)
	}

	return nil
}

// ExportedSurveyResultReplyAttachmentMultiError is an error wrapping multiple
// validation errors returned by
// ExportedSurveyResultReplyAttachment.ValidateAll() if the designated
// constraints aren't met.
type ExportedSurveyResultReplyAttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportedSurveyResultReplyAttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportedSurveyResultReplyAttachmentMultiError) AllErrors() []error { return m }

// ExportedSurveyResultReplyAttachmentValidationError is the validation error
// returned by ExportedSurveyResultReplyAttachment.Validate if the designated
// constraints aren't met.
type ExportedSurveyResultReplyAttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportedSurveyResultReplyAttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportedSurveyResultReplyAttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportedSurveyResultReplyAttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportedSurveyResultReplyAttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportedSurveyResultReplyAttachmentValidationError) ErrorName() string {
	return "ExportedSurveyResultReplyAttachmentValidationError"
}

// Error satisfies the builtin error interface
func (e ExportedSurveyResultReplyAttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportedSurveyResultReplyAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportedSurveyResultReplyAttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportedSurveyResultReplyAttachmentValidationError{}
