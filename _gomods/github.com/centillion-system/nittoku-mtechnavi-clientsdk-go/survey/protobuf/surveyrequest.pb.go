// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: surveyrequest.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 依頼伝票データ
type SurveyBaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,25,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	// readonly 依頼番号
	//
	// Implementation Note:
	//
	//	依頼伝票データの作成時に採番される
	SurveyRequestAutoName int64 `protobuf:"varint,24,opt,name=survey_request_auto_name,json=surveyRequestAutoName,proto3" json:"survey_request_auto_name,omitempty"`
	// 依頼名
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 回答期日
	ReplyDueDateDt *protobuf.Datetime `protobuf:"bytes,5,opt,name=reply_due_date_dt,json=replyDueDateDt,proto3" json:"reply_due_date_dt,omitempty"`
	// 依頼カタログ
	SurveyRequestCatalog *SurveyRequestCatalog `protobuf:"bytes,6,opt,name=survey_request_catalog,json=surveyRequestCatalog,proto3" json:"survey_request_catalog,omitempty"`
	// readonly 依頼カタログID
	SurveyRequestCatalogId string `protobuf:"bytes,7,opt,name=survey_request_catalog_id,json=surveyRequestCatalogId,proto3" json:"survey_request_catalog_id,omitempty"`
	// 案内文
	Guidance string `protobuf:"bytes,8,opt,name=guidance,proto3" json:"guidance,omitempty"`
	// 承認必要
	Approval bool `protobuf:"varint,9,opt,name=approval,proto3" json:"approval,omitempty"`
	// 完了区分
	// 名称マスタにおける種別 A1000002 (完了区分) を参照
	CompleteCondition *protobuf.NameOption `protobuf:"bytes,10,opt,name=complete_condition,json=completeCondition,proto3" json:"complete_condition,omitempty"`
	// 部分回答許可
	PartialReply bool `protobuf:"varint,11,opt,name=partial_reply,json=partialReply,proto3" json:"partial_reply,omitempty"`
	// 辞退許可
	Decline bool `protobuf:"varint,12,opt,name=decline,proto3" json:"decline,omitempty"`
	// 自動催促設定
	AutoReminderSettings []*AutoReminderSetting `protobuf:"bytes,13,rep,name=auto_reminder_settings,json=autoReminderSettings,proto3" json:"auto_reminder_settings,omitempty"`
	// 依頼元名称
	Requesters []string `protobuf:"bytes,14,rep,name=requesters,proto3" json:"requesters,omitempty"`
	// 共通依頼ファイルリスト
	CommonRequestAttachments []*protobuf.Attachment `protobuf:"bytes,15,rep,name=common_request_attachments,json=commonRequestAttachments,proto3" json:"common_request_attachments,omitempty"`
	// 個別依頼ファイルリスト
	BusinessUnitRequestAttachments []*AttachmentAttribute `protobuf:"bytes,29,rep,name=business_unit_request_attachments,json=businessUnitRequestAttachments,proto3" json:"business_unit_request_attachments,omitempty"`
	// 送信先取引先
	RequestUnits []*BusinessUnitProperties `protobuf:"bytes,17,rep,name=request_units,json=requestUnits,proto3" json:"request_units,omitempty"`
	// readonly 依頼送信日時
	SendedAt int64 `protobuf:"varint,18,opt,name=sended_at,json=sendedAt,proto3" json:"sended_at,omitempty"`
	// readonly 承認ステータス
	ApprovalStatus *protobuf.NameOption `protobuf:"bytes,26,opt,name=approval_status,json=approvalStatus,proto3" json:"approval_status,omitempty"`
	// readonly 承認依頼情報
	ApprovalRequest *ApprovalRequest `protobuf:"bytes,27,opt,name=approval_request,json=approvalRequest,proto3" json:"approval_request,omitempty"`
	// readonly 承認実績情報
	ApprovalResult *ApprovalResult `protobuf:"bytes,28,opt,name=approval_result,json=approvalResult,proto3" json:"approval_result,omitempty"`
	// readonly 完了
	Completed bool `protobuf:"varint,19,opt,name=completed,proto3" json:"completed,omitempty"`
	// readonly 最終更新日時
	SurveyBaseRequestUpdatedAt int64 `protobuf:"varint,20,opt,name=survey_base_request_updated_at,json=surveyBaseRequestUpdatedAt,proto3" json:"survey_base_request_updated_at,omitempty"`
	CreatedAt                  int64 `protobuf:"varint,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                  int64 `protobuf:"varint,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt                  int64 `protobuf:"varint,23,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *SurveyBaseRequest) Reset() {
	*x = SurveyBaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveyrequest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyBaseRequest) ProtoMessage() {}

func (x *SurveyBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_surveyrequest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyBaseRequest.ProtoReflect.Descriptor instead.
func (*SurveyBaseRequest) Descriptor() ([]byte, []int) {
	return file_surveyrequest_proto_rawDescGZIP(), []int{0}
}

func (x *SurveyBaseRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *SurveyBaseRequest) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *SurveyBaseRequest) GetSurveyRequestAutoName() int64 {
	if x != nil {
		return x.SurveyRequestAutoName
	}
	return 0
}

func (x *SurveyBaseRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SurveyBaseRequest) GetReplyDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.ReplyDueDateDt
	}
	return nil
}

func (x *SurveyBaseRequest) GetSurveyRequestCatalog() *SurveyRequestCatalog {
	if x != nil {
		return x.SurveyRequestCatalog
	}
	return nil
}

func (x *SurveyBaseRequest) GetSurveyRequestCatalogId() string {
	if x != nil {
		return x.SurveyRequestCatalogId
	}
	return ""
}

func (x *SurveyBaseRequest) GetGuidance() string {
	if x != nil {
		return x.Guidance
	}
	return ""
}

func (x *SurveyBaseRequest) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *SurveyBaseRequest) GetCompleteCondition() *protobuf.NameOption {
	if x != nil {
		return x.CompleteCondition
	}
	return nil
}

func (x *SurveyBaseRequest) GetPartialReply() bool {
	if x != nil {
		return x.PartialReply
	}
	return false
}

func (x *SurveyBaseRequest) GetDecline() bool {
	if x != nil {
		return x.Decline
	}
	return false
}

func (x *SurveyBaseRequest) GetAutoReminderSettings() []*AutoReminderSetting {
	if x != nil {
		return x.AutoReminderSettings
	}
	return nil
}

func (x *SurveyBaseRequest) GetRequesters() []string {
	if x != nil {
		return x.Requesters
	}
	return nil
}

func (x *SurveyBaseRequest) GetCommonRequestAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.CommonRequestAttachments
	}
	return nil
}

func (x *SurveyBaseRequest) GetBusinessUnitRequestAttachments() []*AttachmentAttribute {
	if x != nil {
		return x.BusinessUnitRequestAttachments
	}
	return nil
}

func (x *SurveyBaseRequest) GetRequestUnits() []*BusinessUnitProperties {
	if x != nil {
		return x.RequestUnits
	}
	return nil
}

func (x *SurveyBaseRequest) GetSendedAt() int64 {
	if x != nil {
		return x.SendedAt
	}
	return 0
}

func (x *SurveyBaseRequest) GetApprovalStatus() *protobuf.NameOption {
	if x != nil {
		return x.ApprovalStatus
	}
	return nil
}

func (x *SurveyBaseRequest) GetApprovalRequest() *ApprovalRequest {
	if x != nil {
		return x.ApprovalRequest
	}
	return nil
}

func (x *SurveyBaseRequest) GetApprovalResult() *ApprovalResult {
	if x != nil {
		return x.ApprovalResult
	}
	return nil
}

func (x *SurveyBaseRequest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *SurveyBaseRequest) GetSurveyBaseRequestUpdatedAt() int64 {
	if x != nil {
		return x.SurveyBaseRequestUpdatedAt
	}
	return 0
}

func (x *SurveyBaseRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SurveyBaseRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SurveyBaseRequest) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 依頼明細データ
type SurveyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,2,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,29,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	// readonly 依頼番号
	SurveyRequestAutoName int64 `protobuf:"varint,3,opt,name=survey_request_auto_name,json=surveyRequestAutoName,proto3" json:"survey_request_auto_name,omitempty"`
	// readonly 依頼明細番号
	SurveyRequestDetailAutoName int64 `protobuf:"varint,4,opt,name=survey_request_detail_auto_name,json=surveyRequestDetailAutoName,proto3" json:"survey_request_detail_auto_name,omitempty"`
	// readonly 完了
	Completed bool `protobuf:"varint,6,opt,name=completed,proto3" json:"completed,omitempty"`
	// 依頼名
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 回答期日
	ReplyDueDateDt *protobuf.Datetime `protobuf:"bytes,8,opt,name=reply_due_date_dt,json=replyDueDateDt,proto3" json:"reply_due_date_dt,omitempty"`
	// readonly 依頼カタログ
	SurveyRequestCatalog *SurveyRequestCatalog `protobuf:"bytes,9,opt,name=survey_request_catalog,json=surveyRequestCatalog,proto3" json:"survey_request_catalog,omitempty"`
	// readonly 依頼カタログID
	SurveyRequestCatalogId string `protobuf:"bytes,28,opt,name=survey_request_catalog_id,json=surveyRequestCatalogId,proto3" json:"survey_request_catalog_id,omitempty"`
	// 案内文
	Guidance string `protobuf:"bytes,10,opt,name=guidance,proto3" json:"guidance,omitempty"`
	// 承認必要
	Approval bool `protobuf:"varint,11,opt,name=approval,proto3" json:"approval,omitempty"`
	// 完了区分
	// 名称マスタにおける種別 A1000002 (完了区分) を参照
	CompleteCondition *protobuf.NameOption `protobuf:"bytes,12,opt,name=complete_condition,json=completeCondition,proto3" json:"complete_condition,omitempty"`
	// 部分回答許可
	PartialReply bool `protobuf:"varint,13,opt,name=partial_reply,json=partialReply,proto3" json:"partial_reply,omitempty"`
	// 辞退許可
	Decline bool `protobuf:"varint,14,opt,name=decline,proto3" json:"decline,omitempty"`
	// 自動催促設定
	AutoReminderSettings []*AutoReminderSetting `protobuf:"bytes,15,rep,name=auto_reminder_settings,json=autoReminderSettings,proto3" json:"auto_reminder_settings,omitempty"`
	// 依頼元名称
	Requesters []string `protobuf:"bytes,16,rep,name=requesters,proto3" json:"requesters,omitempty"`
	// 共通依頼ファイル
	CommonRequestAttachments []*protobuf.Attachment `protobuf:"bytes,17,rep,name=common_request_attachments,json=commonRequestAttachments,proto3" json:"common_request_attachments,omitempty"`
	// 個別依頼ファイルリスト
	BusinessUnitRequestAttachments []*protobuf.Attachment `protobuf:"bytes,18,rep,name=business_unit_request_attachments,json=businessUnitRequestAttachments,proto3" json:"business_unit_request_attachments,omitempty"`
	// 取引先情報
	RequestUnit *BusinessUnitProperties `protobuf:"bytes,19,opt,name=request_unit,json=requestUnit,proto3" json:"request_unit,omitempty"`
	// 回答代行ファイルリスト
	ProxyAttachments []*protobuf.Attachment `protobuf:"bytes,20,rep,name=proxy_attachments,json=proxyAttachments,proto3" json:"proxy_attachments,omitempty"`
	// 社内メモ
	Remarks string `protobuf:"bytes,21,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// readonly 依頼送信日時
	SendedAt int64 `protobuf:"varint,22,opt,name=sended_at,json=sendedAt,proto3" json:"sended_at,omitempty"`
	// readonly 回答出力日時
	SurveyResultExportedAt int64 `protobuf:"varint,23,opt,name=survey_result_exported_at,json=surveyResultExportedAt,proto3" json:"survey_result_exported_at,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,24,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,27,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *SurveyRequest) Reset() {
	*x = SurveyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveyrequest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyRequest) ProtoMessage() {}

func (x *SurveyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_surveyrequest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyRequest.ProtoReflect.Descriptor instead.
func (*SurveyRequest) Descriptor() ([]byte, []int) {
	return file_surveyrequest_proto_rawDescGZIP(), []int{1}
}

func (x *SurveyRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

func (x *SurveyRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *SurveyRequest) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *SurveyRequest) GetSurveyRequestAutoName() int64 {
	if x != nil {
		return x.SurveyRequestAutoName
	}
	return 0
}

func (x *SurveyRequest) GetSurveyRequestDetailAutoName() int64 {
	if x != nil {
		return x.SurveyRequestDetailAutoName
	}
	return 0
}

func (x *SurveyRequest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *SurveyRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *SurveyRequest) GetReplyDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.ReplyDueDateDt
	}
	return nil
}

func (x *SurveyRequest) GetSurveyRequestCatalog() *SurveyRequestCatalog {
	if x != nil {
		return x.SurveyRequestCatalog
	}
	return nil
}

func (x *SurveyRequest) GetSurveyRequestCatalogId() string {
	if x != nil {
		return x.SurveyRequestCatalogId
	}
	return ""
}

func (x *SurveyRequest) GetGuidance() string {
	if x != nil {
		return x.Guidance
	}
	return ""
}

func (x *SurveyRequest) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *SurveyRequest) GetCompleteCondition() *protobuf.NameOption {
	if x != nil {
		return x.CompleteCondition
	}
	return nil
}

func (x *SurveyRequest) GetPartialReply() bool {
	if x != nil {
		return x.PartialReply
	}
	return false
}

func (x *SurveyRequest) GetDecline() bool {
	if x != nil {
		return x.Decline
	}
	return false
}

func (x *SurveyRequest) GetAutoReminderSettings() []*AutoReminderSetting {
	if x != nil {
		return x.AutoReminderSettings
	}
	return nil
}

func (x *SurveyRequest) GetRequesters() []string {
	if x != nil {
		return x.Requesters
	}
	return nil
}

func (x *SurveyRequest) GetCommonRequestAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.CommonRequestAttachments
	}
	return nil
}

func (x *SurveyRequest) GetBusinessUnitRequestAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.BusinessUnitRequestAttachments
	}
	return nil
}

func (x *SurveyRequest) GetRequestUnit() *BusinessUnitProperties {
	if x != nil {
		return x.RequestUnit
	}
	return nil
}

func (x *SurveyRequest) GetProxyAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.ProxyAttachments
	}
	return nil
}

func (x *SurveyRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *SurveyRequest) GetSendedAt() int64 {
	if x != nil {
		return x.SendedAt
	}
	return 0
}

func (x *SurveyRequest) GetSurveyResultExportedAt() int64 {
	if x != nil {
		return x.SurveyResultExportedAt
	}
	return 0
}

func (x *SurveyRequest) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *SurveyRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SurveyRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SurveyRequest) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 回答期日変更依頼データ
type SurveyReplyDueDateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更依頼ID
	SurveyReplyDueDateChangeRequestId string `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_request_id,json=surveyReplyDueDateChangeRequestId,proto3" json:"survey_reply_due_date_change_request_id,omitempty"`
	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,2,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
	// readonly 回答期日変更依頼日時
	RequestedAt int64 `protobuf:"varint,3,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	// 変更後回答期日
	ReplyDueDateDt *protobuf.Datetime `protobuf:"bytes,4,opt,name=reply_due_date_dt,json=replyDueDateDt,proto3" json:"reply_due_date_dt,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// 回答期日変更ID（参考）
	//
	// Implementation Note:
	//
	//	回答期日変更がない場合は空白
	SurveyReplyDueDateChangeId string `protobuf:"bytes,6,opt,name=survey_reply_due_date_change_id,json=surveyReplyDueDateChangeId,proto3" json:"survey_reply_due_date_change_id,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,7,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *SurveyReplyDueDateChangeRequest) Reset() {
	*x = SurveyReplyDueDateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveyrequest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReplyDueDateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReplyDueDateChangeRequest) ProtoMessage() {}

func (x *SurveyReplyDueDateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_surveyrequest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReplyDueDateChangeRequest.ProtoReflect.Descriptor instead.
func (*SurveyReplyDueDateChangeRequest) Descriptor() ([]byte, []int) {
	return file_surveyrequest_proto_rawDescGZIP(), []int{2}
}

func (x *SurveyReplyDueDateChangeRequest) GetSurveyReplyDueDateChangeRequestId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeRequestId
	}
	return ""
}

func (x *SurveyReplyDueDateChangeRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

func (x *SurveyReplyDueDateChangeRequest) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *SurveyReplyDueDateChangeRequest) GetReplyDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.ReplyDueDateDt
	}
	return nil
}

func (x *SurveyReplyDueDateChangeRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SurveyReplyDueDateChangeRequest) GetSurveyReplyDueDateChangeId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeId
	}
	return ""
}

func (x *SurveyReplyDueDateChangeRequest) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *SurveyReplyDueDateChangeRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SurveyReplyDueDateChangeRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SurveyReplyDueDateChangeRequest) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 回答期日変更データ
type SurveyReplyDueDateChangeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更ID
	SurveyReplyDueDateChangeResultId string `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_result_id,json=surveyReplyDueDateChangeResultId,proto3" json:"survey_reply_due_date_change_result_id,omitempty"`
	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,2,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
	// readonly 回答期日変更日時
	ChangedAt int64 `protobuf:"varint,3,opt,name=changed_at,json=changedAt,proto3" json:"changed_at,omitempty"`
	// 変更後回答期日
	ReplyDueDateDt *protobuf.Datetime `protobuf:"bytes,4,opt,name=reply_due_date_dt,json=replyDueDateDt,proto3" json:"reply_due_date_dt,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// 回答期日変更依頼ID（参考）
	//
	// Implementation Note:
	//
	//	回答期日変更依頼がない場合は空白
	SurveyReplyDueDateChangeRequestId string `protobuf:"bytes,6,opt,name=survey_reply_due_date_change_request_id,json=surveyReplyDueDateChangeRequestId,proto3" json:"survey_reply_due_date_change_request_id,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,7,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *SurveyReplyDueDateChangeResult) Reset() {
	*x = SurveyReplyDueDateChangeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_surveyrequest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyReplyDueDateChangeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyReplyDueDateChangeResult) ProtoMessage() {}

func (x *SurveyReplyDueDateChangeResult) ProtoReflect() protoreflect.Message {
	mi := &file_surveyrequest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyReplyDueDateChangeResult.ProtoReflect.Descriptor instead.
func (*SurveyReplyDueDateChangeResult) Descriptor() ([]byte, []int) {
	return file_surveyrequest_proto_rawDescGZIP(), []int{3}
}

func (x *SurveyReplyDueDateChangeResult) GetSurveyReplyDueDateChangeResultId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeResultId
	}
	return ""
}

func (x *SurveyReplyDueDateChangeResult) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

func (x *SurveyReplyDueDateChangeResult) GetChangedAt() int64 {
	if x != nil {
		return x.ChangedAt
	}
	return 0
}

func (x *SurveyReplyDueDateChangeResult) GetReplyDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.ReplyDueDateDt
	}
	return nil
}

func (x *SurveyReplyDueDateChangeResult) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SurveyReplyDueDateChangeResult) GetSurveyReplyDueDateChangeRequestId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeRequestId
	}
	return ""
}

func (x *SurveyReplyDueDateChangeResult) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *SurveyReplyDueDateChangeResult) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SurveyReplyDueDateChangeResult) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SurveyReplyDueDateChangeResult) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

var File_surveyrequest_proto protoreflect.FileDescriptor

var file_surveyrequest_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x1a, 0x14, 0x6d, 0x74, 0x6e,
	0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x6d, 0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x0c, 0x0a, 0x11,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x44, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x5c, 0x0a, 0x19, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb8, 0x02,
	0x1d, 0x0a, 0x1b, 0x0a, 0x19, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x52, 0x16,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x21, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1e, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x50, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x10, 0x10, 0x11, 0x22, 0xea, 0x0d, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0xd2, 0xb8, 0x02, 0x1a, 0x0a, 0x18,
	0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a,
	0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x18, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x15, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x1b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x44, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x5c, 0x0a, 0x19, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xd2, 0xb8, 0x02, 0x1d, 0x0a,
	0x1b, 0x0a, 0x19, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x52, 0x16, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x11,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x5f, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x26, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x18, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x21, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x1e,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x57,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x42, 0x17, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0xd2,
	0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x19, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a,
	0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x22, 0xd1, 0x04, 0x0a, 0x1f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x27, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0xd2, 0xb8, 0x02, 0x15,
	0x0a, 0x13, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x45, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x44, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x1f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x1a, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd9, 0x04, 0x0a, 0x1e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x26, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0xd2, 0xb8, 0x02,
	0x15, 0x0a, 0x13, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45,
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x44, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x27, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x21, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_surveyrequest_proto_rawDescOnce sync.Once
	file_surveyrequest_proto_rawDescData = file_surveyrequest_proto_rawDesc
)

func file_surveyrequest_proto_rawDescGZIP() []byte {
	file_surveyrequest_proto_rawDescOnce.Do(func() {
		file_surveyrequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_surveyrequest_proto_rawDescData)
	})
	return file_surveyrequest_proto_rawDescData
}

var file_surveyrequest_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_surveyrequest_proto_goTypes = []interface{}{
	(*SurveyBaseRequest)(nil),                 // 0: mtechnavi.api.survey.SurveyBaseRequest
	(*SurveyRequest)(nil),                     // 1: mtechnavi.api.survey.SurveyRequest
	(*SurveyReplyDueDateChangeRequest)(nil),   // 2: mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	(*SurveyReplyDueDateChangeResult)(nil),    // 3: mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	(*protobuf.UserReference)(nil),            // 4: sharelib.UserReference
	(*protobuf.Datetime)(nil),                 // 5: sharelib.Datetime
	(*SurveyRequestCatalog)(nil),              // 6: mtechnavi.api.survey.SurveyRequestCatalog
	(*protobuf.NameOption)(nil),               // 7: sharelib.NameOption
	(*AutoReminderSetting)(nil),               // 8: mtechnavi.api.survey.AutoReminderSetting
	(*protobuf.Attachment)(nil),               // 9: sharelib.Attachment
	(*AttachmentAttribute)(nil),               // 10: mtechnavi.api.survey.AttachmentAttribute
	(*BusinessUnitProperties)(nil),            // 11: mtechnavi.api.survey.BusinessUnitProperties
	(*ApprovalRequest)(nil),                   // 12: mtechnavi.api.survey.ApprovalRequest
	(*ApprovalResult)(nil),                    // 13: mtechnavi.api.survey.ApprovalResult
	(*protobuf.EmbeddedSharedProperties)(nil), // 14: sharelib.EmbeddedSharedProperties
}
var file_surveyrequest_proto_depIdxs = []int32{
	4,  // 0: mtechnavi.api.survey.SurveyBaseRequest.system_notification_users:type_name -> sharelib.UserReference
	5,  // 1: mtechnavi.api.survey.SurveyBaseRequest.reply_due_date_dt:type_name -> sharelib.Datetime
	6,  // 2: mtechnavi.api.survey.SurveyBaseRequest.survey_request_catalog:type_name -> mtechnavi.api.survey.SurveyRequestCatalog
	7,  // 3: mtechnavi.api.survey.SurveyBaseRequest.complete_condition:type_name -> sharelib.NameOption
	8,  // 4: mtechnavi.api.survey.SurveyBaseRequest.auto_reminder_settings:type_name -> mtechnavi.api.survey.AutoReminderSetting
	9,  // 5: mtechnavi.api.survey.SurveyBaseRequest.common_request_attachments:type_name -> sharelib.Attachment
	10, // 6: mtechnavi.api.survey.SurveyBaseRequest.business_unit_request_attachments:type_name -> mtechnavi.api.survey.AttachmentAttribute
	11, // 7: mtechnavi.api.survey.SurveyBaseRequest.request_units:type_name -> mtechnavi.api.survey.BusinessUnitProperties
	7,  // 8: mtechnavi.api.survey.SurveyBaseRequest.approval_status:type_name -> sharelib.NameOption
	12, // 9: mtechnavi.api.survey.SurveyBaseRequest.approval_request:type_name -> mtechnavi.api.survey.ApprovalRequest
	13, // 10: mtechnavi.api.survey.SurveyBaseRequest.approval_result:type_name -> mtechnavi.api.survey.ApprovalResult
	4,  // 11: mtechnavi.api.survey.SurveyRequest.system_notification_users:type_name -> sharelib.UserReference
	5,  // 12: mtechnavi.api.survey.SurveyRequest.reply_due_date_dt:type_name -> sharelib.Datetime
	6,  // 13: mtechnavi.api.survey.SurveyRequest.survey_request_catalog:type_name -> mtechnavi.api.survey.SurveyRequestCatalog
	7,  // 14: mtechnavi.api.survey.SurveyRequest.complete_condition:type_name -> sharelib.NameOption
	8,  // 15: mtechnavi.api.survey.SurveyRequest.auto_reminder_settings:type_name -> mtechnavi.api.survey.AutoReminderSetting
	9,  // 16: mtechnavi.api.survey.SurveyRequest.common_request_attachments:type_name -> sharelib.Attachment
	9,  // 17: mtechnavi.api.survey.SurveyRequest.business_unit_request_attachments:type_name -> sharelib.Attachment
	11, // 18: mtechnavi.api.survey.SurveyRequest.request_unit:type_name -> mtechnavi.api.survey.BusinessUnitProperties
	9,  // 19: mtechnavi.api.survey.SurveyRequest.proxy_attachments:type_name -> sharelib.Attachment
	14, // 20: mtechnavi.api.survey.SurveyRequest.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	5,  // 21: mtechnavi.api.survey.SurveyReplyDueDateChangeRequest.reply_due_date_dt:type_name -> sharelib.Datetime
	14, // 22: mtechnavi.api.survey.SurveyReplyDueDateChangeRequest.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	5,  // 23: mtechnavi.api.survey.SurveyReplyDueDateChangeResult.reply_due_date_dt:type_name -> sharelib.Datetime
	14, // 24: mtechnavi.api.survey.SurveyReplyDueDateChangeResult.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_surveyrequest_proto_init() }
func file_surveyrequest_proto_init() {
	if File_surveyrequest_proto != nil {
		return
	}
	file_surveybasictypes_proto_init()
	file_surveyrequestcatalog_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_surveyrequest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyBaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surveyrequest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surveyrequest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReplyDueDateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_surveyrequest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyReplyDueDateChangeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_surveyrequest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_surveyrequest_proto_goTypes,
		DependencyIndexes: file_surveyrequest_proto_depIdxs,
		MessageInfos:      file_surveyrequest_proto_msgTypes,
	}.Build()
	File_surveyrequest_proto = out.File
	file_surveyrequest_proto_rawDesc = nil
	file_surveyrequest_proto_goTypes = nil
	file_surveyrequest_proto_depIdxs = nil
}
