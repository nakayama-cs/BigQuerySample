// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: surveybasictypes.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AutoReminderSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoReminderSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoReminderSetting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoReminderSettingMultiError, or nil if none found.
func (m *AutoReminderSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoReminderSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AutoReminder

	// no validation rules for Offset

	if all {
		switch v := interface{}(m.GetOffsetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoReminderSettingValidationError{
					field:  "OffsetType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoReminderSettingValidationError{
					field:  "OffsetType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffsetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoReminderSettingValidationError{
				field:  "OffsetType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Repeat

	// no validation rules for RepeatInterval

	if all {
		switch v := interface{}(m.GetContentType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoReminderSettingValidationError{
					field:  "ContentType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoReminderSettingValidationError{
					field:  "ContentType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContentType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoReminderSettingValidationError{
				field:  "ContentType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	for idx, item := range m.GetSystemNotificationTos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AutoReminderSettingValidationError{
						field:  fmt.Sprintf("SystemNotificationTos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AutoReminderSettingValidationError{
						field:  fmt.Sprintf("SystemNotificationTos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AutoReminderSettingValidationError{
					field:  fmt.Sprintf("SystemNotificationTos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AutoReminderSettingMultiError(errors)
	}

	return nil
}

// AutoReminderSettingMultiError is an error wrapping multiple validation
// errors returned by AutoReminderSetting.ValidateAll() if the designated
// constraints aren't met.
type AutoReminderSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoReminderSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoReminderSettingMultiError) AllErrors() []error { return m }

// AutoReminderSettingValidationError is the validation error returned by
// AutoReminderSetting.Validate if the designated constraints aren't met.
type AutoReminderSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoReminderSettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoReminderSettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoReminderSettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoReminderSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoReminderSettingValidationError) ErrorName() string {
	return "AutoReminderSettingValidationError"
}

// Error satisfies the builtin error interface
func (e AutoReminderSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoReminderSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoReminderSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoReminderSettingValidationError{}

// Validate checks the field values on BusinessUnitProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitPropertiesMultiError, or nil if none found.
func (m *BusinessUnitProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	// no validation rules for Code

	// no validation rules for DisplayName

	for idx, item := range m.GetMainContact() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("MainContact[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("MainContact[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitPropertiesValidationError{
					field:  fmt.Sprintf("MainContact[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMainContactAssistant() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("MainContactAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("MainContactAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitPropertiesValidationError{
					field:  fmt.Sprintf("MainContactAssistant[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStaff() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("Staff[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("Staff[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitPropertiesValidationError{
					field:  fmt.Sprintf("Staff[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStaffAssistant() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("StaffAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitPropertiesValidationError{
						field:  fmt.Sprintf("StaffAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitPropertiesValidationError{
					field:  fmt.Sprintf("StaffAssistant[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return BusinessUnitPropertiesMultiError(errors)
	}

	return nil
}

// BusinessUnitPropertiesMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitProperties.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitPropertiesMultiError) AllErrors() []error { return m }

// BusinessUnitPropertiesValidationError is the validation error returned by
// BusinessUnitProperties.Validate if the designated constraints aren't met.
type BusinessUnitPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitPropertiesValidationError) ErrorName() string {
	return "BusinessUnitPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitPropertiesValidationError{}

// Validate checks the field values on ApprovalRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApprovalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovalRequestMultiError, or nil if none found.
func (m *ApprovalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestedAt

	if all {
		switch v := interface{}(m.GetRequestedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "RequestedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "RequestedStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "RequestedOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalPlanStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "ApprovalPlanStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalPlanOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "ApprovalPlanOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestedComment

	if len(errors) > 0 {
		return ApprovalRequestMultiError(errors)
	}

	return nil
}

// ApprovalRequestMultiError is an error wrapping multiple validation errors
// returned by ApprovalRequest.ValidateAll() if the designated constraints
// aren't met.
type ApprovalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestMultiError) AllErrors() []error { return m }

// ApprovalRequestValidationError is the validation error returned by
// ApprovalRequest.Validate if the designated constraints aren't met.
type ApprovalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestValidationError) ErrorName() string { return "ApprovalRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApprovalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestValidationError{}

// Validate checks the field values on ApprovalResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApprovalResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApprovalResultMultiError,
// or nil if none found.
func (m *ApprovalResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DecidedAt

	if all {
		switch v := interface{}(m.GetDecidedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecidedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalResultValidationError{
				field:  "DecidedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDecidedStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecidedStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalResultValidationError{
				field:  "DecidedStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDecidedOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecidedOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalResultValidationError{
				field:  "DecidedOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DecidedComment

	if len(errors) > 0 {
		return ApprovalResultMultiError(errors)
	}

	return nil
}

// ApprovalResultMultiError is an error wrapping multiple validation errors
// returned by ApprovalResult.ValidateAll() if the designated constraints
// aren't met.
type ApprovalResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalResultMultiError) AllErrors() []error { return m }

// ApprovalResultValidationError is the validation error returned by
// ApprovalResult.Validate if the designated constraints aren't met.
type ApprovalResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalResultValidationError) ErrorName() string { return "ApprovalResultValidationError" }

// Error satisfies the builtin error interface
func (e ApprovalResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalResultValidationError{}

// Validate checks the field values on AttachmentAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttachmentAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachmentAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttachmentAttributeMultiError, or nil if none found.
func (m *AttachmentAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachmentAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachmentAttributeValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachmentAttributeValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachmentAttributeValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BusinessUnitManagementId

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return AttachmentAttributeMultiError(errors)
	}

	return nil
}

// AttachmentAttributeMultiError is an error wrapping multiple validation
// errors returned by AttachmentAttribute.ValidateAll() if the designated
// constraints aren't met.
type AttachmentAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentAttributeMultiError) AllErrors() []error { return m }

// AttachmentAttributeValidationError is the validation error returned by
// AttachmentAttribute.Validate if the designated constraints aren't met.
type AttachmentAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentAttributeValidationError) ErrorName() string {
	return "AttachmentAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e AttachmentAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachmentAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentAttributeValidationError{}

// Validate checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProcessMultiError, or nil if none found.
func (m *Process) ValidateAll() error {
	return m.validate(true)
}

func (m *Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcessedAt

	if all {
		switch v := interface{}(m.GetProcessedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "ProcessedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "ProcessedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "ProcessedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessMultiError(errors)
	}

	return nil
}

// ProcessMultiError is an error wrapping multiple validation errors returned
// by Process.ValidateAll() if the designated constraints aren't met.
type ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessMultiError) AllErrors() []error { return m }

// ProcessValidationError is the validation error returned by Process.Validate
// if the designated constraints aren't met.
type ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessValidationError) ErrorName() string { return "ProcessValidationError" }

// Error satisfies the builtin error interface
func (e ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessValidationError{}
