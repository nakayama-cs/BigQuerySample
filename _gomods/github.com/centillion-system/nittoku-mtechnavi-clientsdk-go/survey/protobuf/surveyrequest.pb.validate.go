// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: surveyrequest.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SurveyBaseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SurveyBaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyBaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SurveyBaseRequestMultiError, or nil if none found.
func (m *SurveyBaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyBaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyBaseRequestValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SurveyRequestAutoName

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetReplyDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestValidationError{
				field:  "ReplyDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyRequestCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequestCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestValidationError{
				field:  "SurveyRequestCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SurveyRequestCatalogId

	// no validation rules for Guidance

	// no validation rules for Approval

	if all {
		switch v := interface{}(m.GetCompleteCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "CompleteCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "CompleteCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompleteCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestValidationError{
				field:  "CompleteCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PartialReply

	// no validation rules for Decline

	for idx, item := range m.GetAutoReminderSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("AutoReminderSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("AutoReminderSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyBaseRequestValidationError{
					field:  fmt.Sprintf("AutoReminderSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCommonRequestAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("CommonRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("CommonRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyBaseRequestValidationError{
					field:  fmt.Sprintf("CommonRequestAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBusinessUnitRequestAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("BusinessUnitRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("BusinessUnitRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyBaseRequestValidationError{
					field:  fmt.Sprintf("BusinessUnitRequestAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRequestUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("RequestUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyBaseRequestValidationError{
						field:  fmt.Sprintf("RequestUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyBaseRequestValidationError{
					field:  fmt.Sprintf("RequestUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SendedAt

	if all {
		switch v := interface{}(m.GetApprovalStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestValidationError{
				field:  "ApprovalStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ApprovalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ApprovalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestValidationError{
				field:  "ApprovalRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ApprovalResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyBaseRequestValidationError{
					field:  "ApprovalResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyBaseRequestValidationError{
				field:  "ApprovalResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Completed

	// no validation rules for SurveyBaseRequestUpdatedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyBaseRequestMultiError(errors)
	}

	return nil
}

// SurveyBaseRequestMultiError is an error wrapping multiple validation errors
// returned by SurveyBaseRequest.ValidateAll() if the designated constraints
// aren't met.
type SurveyBaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyBaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyBaseRequestMultiError) AllErrors() []error { return m }

// SurveyBaseRequestValidationError is the validation error returned by
// SurveyBaseRequest.Validate if the designated constraints aren't met.
type SurveyBaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyBaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyBaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyBaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyBaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyBaseRequestValidationError) ErrorName() string {
	return "SurveyBaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyBaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyBaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyBaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyBaseRequestValidationError{}

// Validate checks the field values on SurveyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SurveyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SurveyRequestMultiError, or
// nil if none found.
func (m *SurveyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	// no validation rules for SurveyBaseRequestId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyRequestValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SurveyRequestAutoName

	// no validation rules for SurveyRequestDetailAutoName

	// no validation rules for Completed

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetReplyDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestValidationError{
				field:  "ReplyDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSurveyRequestCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequestCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestValidationError{
				field:  "SurveyRequestCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SurveyRequestCatalogId

	// no validation rules for Guidance

	// no validation rules for Approval

	if all {
		switch v := interface{}(m.GetCompleteCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "CompleteCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "CompleteCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompleteCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestValidationError{
				field:  "CompleteCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PartialReply

	// no validation rules for Decline

	for idx, item := range m.GetAutoReminderSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("AutoReminderSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("AutoReminderSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyRequestValidationError{
					field:  fmt.Sprintf("AutoReminderSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCommonRequestAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("CommonRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("CommonRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyRequestValidationError{
					field:  fmt.Sprintf("CommonRequestAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBusinessUnitRequestAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("BusinessUnitRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("BusinessUnitRequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyRequestValidationError{
					field:  fmt.Sprintf("BusinessUnitRequestAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRequestUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "RequestUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "RequestUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestValidationError{
				field:  "RequestUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProxyAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("ProxyAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyRequestValidationError{
						field:  fmt.Sprintf("ProxyAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyRequestValidationError{
					field:  fmt.Sprintf("ProxyAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Remarks

	// no validation rules for SendedAt

	// no validation rules for SurveyResultExportedAt

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyRequestValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyRequestMultiError(errors)
	}

	return nil
}

// SurveyRequestMultiError is an error wrapping multiple validation errors
// returned by SurveyRequest.ValidateAll() if the designated constraints
// aren't met.
type SurveyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyRequestMultiError) AllErrors() []error { return m }

// SurveyRequestValidationError is the validation error returned by
// SurveyRequest.Validate if the designated constraints aren't met.
type SurveyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyRequestValidationError) ErrorName() string { return "SurveyRequestValidationError" }

// Error satisfies the builtin error interface
func (e SurveyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyRequestValidationError{}

// Validate checks the field values on SurveyReplyDueDateChangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurveyReplyDueDateChangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyReplyDueDateChangeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SurveyReplyDueDateChangeRequestMultiError, or nil if none found.
func (m *SurveyReplyDueDateChangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyReplyDueDateChangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReplyDueDateChangeRequestId

	// no validation rules for SurveyRequestId

	// no validation rules for RequestedAt

	if all {
		switch v := interface{}(m.GetReplyDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeRequestValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeRequestValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReplyDueDateChangeRequestValidationError{
				field:  "ReplyDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	// no validation rules for SurveyReplyDueDateChangeId

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReplyDueDateChangeRequestValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyReplyDueDateChangeRequestMultiError(errors)
	}

	return nil
}

// SurveyReplyDueDateChangeRequestMultiError is an error wrapping multiple
// validation errors returned by SurveyReplyDueDateChangeRequest.ValidateAll()
// if the designated constraints aren't met.
type SurveyReplyDueDateChangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyReplyDueDateChangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyReplyDueDateChangeRequestMultiError) AllErrors() []error { return m }

// SurveyReplyDueDateChangeRequestValidationError is the validation error
// returned by SurveyReplyDueDateChangeRequest.Validate if the designated
// constraints aren't met.
type SurveyReplyDueDateChangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyReplyDueDateChangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyReplyDueDateChangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyReplyDueDateChangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyReplyDueDateChangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyReplyDueDateChangeRequestValidationError) ErrorName() string {
	return "SurveyReplyDueDateChangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyReplyDueDateChangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyReplyDueDateChangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyReplyDueDateChangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyReplyDueDateChangeRequestValidationError{}

// Validate checks the field values on SurveyReplyDueDateChangeResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SurveyReplyDueDateChangeResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyReplyDueDateChangeResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SurveyReplyDueDateChangeResultMultiError, or nil if none found.
func (m *SurveyReplyDueDateChangeResult) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyReplyDueDateChangeResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReplyDueDateChangeResultId

	// no validation rules for SurveyRequestId

	// no validation rules for ChangedAt

	if all {
		switch v := interface{}(m.GetReplyDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeResultValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeResultValidationError{
					field:  "ReplyDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplyDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReplyDueDateChangeResultValidationError{
				field:  "ReplyDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	// no validation rules for SurveyReplyDueDateChangeRequestId

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeResultValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SurveyReplyDueDateChangeResultValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SurveyReplyDueDateChangeResultValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return SurveyReplyDueDateChangeResultMultiError(errors)
	}

	return nil
}

// SurveyReplyDueDateChangeResultMultiError is an error wrapping multiple
// validation errors returned by SurveyReplyDueDateChangeResult.ValidateAll()
// if the designated constraints aren't met.
type SurveyReplyDueDateChangeResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyReplyDueDateChangeResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyReplyDueDateChangeResultMultiError) AllErrors() []error { return m }

// SurveyReplyDueDateChangeResultValidationError is the validation error
// returned by SurveyReplyDueDateChangeResult.Validate if the designated
// constraints aren't met.
type SurveyReplyDueDateChangeResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyReplyDueDateChangeResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyReplyDueDateChangeResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyReplyDueDateChangeResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyReplyDueDateChangeResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyReplyDueDateChangeResultValidationError) ErrorName() string {
	return "SurveyReplyDueDateChangeResultValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyReplyDueDateChangeResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyReplyDueDateChangeResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyReplyDueDateChangeResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyReplyDueDateChangeResultValidationError{}
