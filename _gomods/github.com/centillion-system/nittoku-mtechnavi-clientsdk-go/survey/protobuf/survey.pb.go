// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: survey.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 依頼カタログマスタ
// required survey_request_catalog
type CreateSurveyRequestCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼カタログマスタ
	// required code
	SurveyRequestCatalog *SurveyRequestCatalog `protobuf:"bytes,1,opt,name=survey_request_catalog,json=surveyRequestCatalog,proto3" json:"survey_request_catalog,omitempty"`
}

func (x *CreateSurveyRequestCatalogRequest) Reset() {
	*x = CreateSurveyRequestCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyRequestCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyRequestCatalogRequest) ProtoMessage() {}

func (x *CreateSurveyRequestCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyRequestCatalogRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyRequestCatalogRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSurveyRequestCatalogRequest) GetSurveyRequestCatalog() *SurveyRequestCatalog {
	if x != nil {
		return x.SurveyRequestCatalog
	}
	return nil
}

type ListSurveyRequestCatalogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyRequestCatalogsRequest) Reset() {
	*x = ListSurveyRequestCatalogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestCatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestCatalogsRequest) ProtoMessage() {}

func (x *ListSurveyRequestCatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestCatalogsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestCatalogsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{1}
}

func (x *ListSurveyRequestCatalogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSurveyRequestCatalogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼カタログマスタ
	Items []*SurveyRequestCatalog `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyRequestCatalogsResponse) Reset() {
	*x = ListSurveyRequestCatalogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestCatalogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestCatalogsResponse) ProtoMessage() {}

func (x *ListSurveyRequestCatalogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestCatalogsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestCatalogsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{2}
}

func (x *ListSurveyRequestCatalogsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyRequestCatalogsResponse) GetItems() []*SurveyRequestCatalog {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyRequestCatalogsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_request_catalog_id
type GetSurveyRequestCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼カタログID
	SurveyRequestCatalogId string `protobuf:"bytes,1,opt,name=survey_request_catalog_id,json=surveyRequestCatalogId,proto3" json:"survey_request_catalog_id,omitempty"`
}

func (x *GetSurveyRequestCatalogRequest) Reset() {
	*x = GetSurveyRequestCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyRequestCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyRequestCatalogRequest) ProtoMessage() {}

func (x *GetSurveyRequestCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyRequestCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyRequestCatalogRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{3}
}

func (x *GetSurveyRequestCatalogRequest) GetSurveyRequestCatalogId() string {
	if x != nil {
		return x.SurveyRequestCatalogId
	}
	return ""
}

// required survey_request_catalog
type UpdateSurveyRequestCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼カタログマスタ
	// required survey_request_catalog_id
	// required updated_at
	SurveyRequestCatalog *SurveyRequestCatalog `protobuf:"bytes,1,opt,name=survey_request_catalog,json=surveyRequestCatalog,proto3" json:"survey_request_catalog,omitempty"`
}

func (x *UpdateSurveyRequestCatalogRequest) Reset() {
	*x = UpdateSurveyRequestCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyRequestCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyRequestCatalogRequest) ProtoMessage() {}

func (x *UpdateSurveyRequestCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyRequestCatalogRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyRequestCatalogRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSurveyRequestCatalogRequest) GetSurveyRequestCatalog() *SurveyRequestCatalog {
	if x != nil {
		return x.SurveyRequestCatalog
	}
	return nil
}

// required survey_request_catalog
type DeleteSurveyRequestCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼カタログマスタ
	// required survey_request_catalog_id
	// required updated_at
	SurveyRequestCatalog *SurveyRequestCatalog `protobuf:"bytes,1,opt,name=survey_request_catalog,json=surveyRequestCatalog,proto3" json:"survey_request_catalog,omitempty"`
}

func (x *DeleteSurveyRequestCatalogRequest) Reset() {
	*x = DeleteSurveyRequestCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSurveyRequestCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSurveyRequestCatalogRequest) ProtoMessage() {}

func (x *DeleteSurveyRequestCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSurveyRequestCatalogRequest.ProtoReflect.Descriptor instead.
func (*DeleteSurveyRequestCatalogRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSurveyRequestCatalogRequest) GetSurveyRequestCatalog() *SurveyRequestCatalog {
	if x != nil {
		return x.SurveyRequestCatalog
	}
	return nil
}

// 依頼伝票データ
// required survey_base_request
type CreateSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票データ
	// required survey_request_catalog
	SurveyBaseRequest *SurveyBaseRequest `protobuf:"bytes,1,opt,name=survey_base_request,json=surveyBaseRequest,proto3" json:"survey_base_request,omitempty"`
}

func (x *CreateSurveyBaseRequestRequest) Reset() {
	*x = CreateSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyBaseRequestRequest) ProtoMessage() {}

func (x *CreateSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSurveyBaseRequestRequest) GetSurveyBaseRequest() *SurveyBaseRequest {
	if x != nil {
		return x.SurveyBaseRequest
	}
	return nil
}

// required survey_base_request
type UpdateSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票データ
	// required survey_base_request_id
	// required updated_at
	SurveyBaseRequest *SurveyBaseRequest `protobuf:"bytes,1,opt,name=survey_base_request,json=surveyBaseRequest,proto3" json:"survey_base_request,omitempty"`
}

func (x *UpdateSurveyBaseRequestRequest) Reset() {
	*x = UpdateSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyBaseRequestRequest) ProtoMessage() {}

func (x *UpdateSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateSurveyBaseRequestRequest) GetSurveyBaseRequest() *SurveyBaseRequest {
	if x != nil {
		return x.SurveyBaseRequest
	}
	return nil
}

// required survey_base_request
type DeleteSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票データ
	// required survey_base_request_id
	// required updated_at
	SurveyBaseRequest *SurveyBaseRequest `protobuf:"bytes,1,opt,name=survey_base_request,json=surveyBaseRequest,proto3" json:"survey_base_request,omitempty"`
}

func (x *DeleteSurveyBaseRequestRequest) Reset() {
	*x = DeleteSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSurveyBaseRequestRequest) ProtoMessage() {}

func (x *DeleteSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*DeleteSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteSurveyBaseRequestRequest) GetSurveyBaseRequest() *SurveyBaseRequest {
	if x != nil {
		return x.SurveyBaseRequest
	}
	return nil
}

// 依頼伝票データ を 承認依頼 する
// required survey_base_request_id
type ApprovalRequestSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// 承認予定担当
	ApprovalPlanStaff *protobuf.StaffReference `protobuf:"bytes,2,opt,name=approval_plan_staff,json=approvalPlanStaff,proto3" json:"approval_plan_staff,omitempty"`
	// 承認予定部門
	ApprovalPlanOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,3,opt,name=approval_plan_organization,json=approvalPlanOrganization,proto3" json:"approval_plan_organization,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ApprovalRequestSurveyBaseRequestRequest) Reset() {
	*x = ApprovalRequestSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalRequestSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequestSurveyBaseRequestRequest) ProtoMessage() {}

func (x *ApprovalRequestSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequestSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*ApprovalRequestSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{9}
}

func (x *ApprovalRequestSurveyBaseRequestRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *ApprovalRequestSurveyBaseRequestRequest) GetApprovalPlanStaff() *protobuf.StaffReference {
	if x != nil {
		return x.ApprovalPlanStaff
	}
	return nil
}

func (x *ApprovalRequestSurveyBaseRequestRequest) GetApprovalPlanOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.ApprovalPlanOrganization
	}
	return nil
}

func (x *ApprovalRequestSurveyBaseRequestRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ApprovalRequestSurveyBaseRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApprovalRequestSurveyBaseRequestResponse) Reset() {
	*x = ApprovalRequestSurveyBaseRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalRequestSurveyBaseRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequestSurveyBaseRequestResponse) ProtoMessage() {}

func (x *ApprovalRequestSurveyBaseRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequestSurveyBaseRequestResponse.ProtoReflect.Descriptor instead.
func (*ApprovalRequestSurveyBaseRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{10}
}

// 依頼伝票データ を 却下 する
// required survey_base_request_id
type RejectSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RejectSurveyBaseRequestRequest) Reset() {
	*x = RejectSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectSurveyBaseRequestRequest) ProtoMessage() {}

func (x *RejectSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*RejectSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{11}
}

func (x *RejectSurveyBaseRequestRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *RejectSurveyBaseRequestRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type RejectSurveyBaseRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectSurveyBaseRequestResponse) Reset() {
	*x = RejectSurveyBaseRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectSurveyBaseRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectSurveyBaseRequestResponse) ProtoMessage() {}

func (x *RejectSurveyBaseRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectSurveyBaseRequestResponse.ProtoReflect.Descriptor instead.
func (*RejectSurveyBaseRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{12}
}

// 依頼伝票データ を 承認 する
// required survey_base_request_id
type ApproveSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ApproveSurveyBaseRequestRequest) Reset() {
	*x = ApproveSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveSurveyBaseRequestRequest) ProtoMessage() {}

func (x *ApproveSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*ApproveSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{13}
}

func (x *ApproveSurveyBaseRequestRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *ApproveSurveyBaseRequestRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ApproveSurveyBaseRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveSurveyBaseRequestResponse) Reset() {
	*x = ApproveSurveyBaseRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveSurveyBaseRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveSurveyBaseRequestResponse) ProtoMessage() {}

func (x *ApproveSurveyBaseRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveSurveyBaseRequestResponse.ProtoReflect.Descriptor instead.
func (*ApproveSurveyBaseRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{14}
}

// required survey_request_id
type GetSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
}

func (x *GetSurveyRequestRequest) Reset() {
	*x = GetSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyRequestRequest) ProtoMessage() {}

func (x *GetSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{15}
}

func (x *GetSurveyRequestRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

// required survey_request
type UpdateSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細データ
	// required survey_request_id
	// required updated_at
	SurveyRequest *SurveyRequest `protobuf:"bytes,1,opt,name=survey_request,json=surveyRequest,proto3" json:"survey_request,omitempty"`
}

func (x *UpdateSurveyRequestRequest) Reset() {
	*x = UpdateSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyRequestRequest) ProtoMessage() {}

func (x *UpdateSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateSurveyRequestRequest) GetSurveyRequest() *SurveyRequest {
	if x != nil {
		return x.SurveyRequest
	}
	return nil
}

// 依頼明細データ.システム通知先
// required survey_request_id
// required updated_at
type UpdateSystemNotificationUsersInSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,2,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	UpdatedAt               int64                     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateSystemNotificationUsersInSurveyRequestRequest) Reset() {
	*x = UpdateSystemNotificationUsersInSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemNotificationUsersInSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemNotificationUsersInSurveyRequestRequest) ProtoMessage() {}

func (x *UpdateSystemNotificationUsersInSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemNotificationUsersInSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateSystemNotificationUsersInSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateSystemNotificationUsersInSurveyRequestRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

func (x *UpdateSystemNotificationUsersInSurveyRequestRequest) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *UpdateSystemNotificationUsersInSurveyRequestRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 依頼明細データ を 公開 する
// required survey_base_request_id
type SharetoSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
}

func (x *SharetoSurveyRequestRequest) Reset() {
	*x = SharetoSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyRequestRequest) ProtoMessage() {}

func (x *SharetoSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*SharetoSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{18}
}

func (x *SharetoSurveyRequestRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

type SharetoSurveyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoSurveyRequestResponse) Reset() {
	*x = SharetoSurveyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyRequestResponse) ProtoMessage() {}

func (x *SharetoSurveyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyRequestResponse.ProtoReflect.Descriptor instead.
func (*SharetoSurveyRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{19}
}

// 依頼明細データ を 破棄 する
// required survey_request_id
type DiscardSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DiscardSurveyRequestRequest) Reset() {
	*x = DiscardSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSurveyRequestRequest) ProtoMessage() {}

func (x *DiscardSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*DiscardSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{20}
}

func (x *DiscardSurveyRequestRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

func (x *DiscardSurveyRequestRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type DiscardSurveyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 破棄データ
	Discard *Discard `protobuf:"bytes,1,opt,name=discard,proto3" json:"discard,omitempty"`
}

func (x *DiscardSurveyRequestResponse) Reset() {
	*x = DiscardSurveyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardSurveyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSurveyRequestResponse) ProtoMessage() {}

func (x *DiscardSurveyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSurveyRequestResponse.ProtoReflect.Descriptor instead.
func (*DiscardSurveyRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{21}
}

func (x *DiscardSurveyRequestResponse) GetDiscard() *Discard {
	if x != nil {
		return x.Discard
	}
	return nil
}

// 依頼明細データ を 完了 する
// required survey_request_id
type CompleteSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
}

func (x *CompleteSurveyRequestRequest) Reset() {
	*x = CompleteSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSurveyRequestRequest) ProtoMessage() {}

func (x *CompleteSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*CompleteSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{22}
}

func (x *CompleteSurveyRequestRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

type CompleteSurveyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 終了データ
	Complete *Complete `protobuf:"bytes,1,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (x *CompleteSurveyRequestResponse) Reset() {
	*x = CompleteSurveyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteSurveyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteSurveyRequestResponse) ProtoMessage() {}

func (x *CompleteSurveyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteSurveyRequestResponse.ProtoReflect.Descriptor instead.
func (*CompleteSurveyRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{23}
}

func (x *CompleteSurveyRequestResponse) GetComplete() *Complete {
	if x != nil {
		return x.Complete
	}
	return nil
}

// 回答期日変更データ
// required survey_reply_due_date_change_result
type CreateSurveyReplyDueDateChangeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更データ
	// required reply_due_date_dt
	SurveyReplyDueDateChangeResult *SurveyReplyDueDateChangeResult `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_result,json=surveyReplyDueDateChangeResult,proto3" json:"survey_reply_due_date_change_result,omitempty"`
}

func (x *CreateSurveyReplyDueDateChangeResultRequest) Reset() {
	*x = CreateSurveyReplyDueDateChangeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyReplyDueDateChangeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyReplyDueDateChangeResultRequest) ProtoMessage() {}

func (x *CreateSurveyReplyDueDateChangeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyReplyDueDateChangeResultRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyReplyDueDateChangeResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{24}
}

func (x *CreateSurveyReplyDueDateChangeResultRequest) GetSurveyReplyDueDateChangeResult() *SurveyReplyDueDateChangeResult {
	if x != nil {
		return x.SurveyReplyDueDateChangeResult
	}
	return nil
}

type ListSurveyReplyDueDateChangeResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
}

func (x *ListSurveyReplyDueDateChangeResultsRequest) Reset() {
	*x = ListSurveyReplyDueDateChangeResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReplyDueDateChangeResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReplyDueDateChangeResultsRequest) ProtoMessage() {}

func (x *ListSurveyReplyDueDateChangeResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReplyDueDateChangeResultsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyReplyDueDateChangeResultsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{25}
}

func (x *ListSurveyReplyDueDateChangeResultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyReplyDueDateChangeResultsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

type ListSurveyReplyDueDateChangeResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 回答期日変更データ
	Items []*SurveyReplyDueDateChangeResult `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyReplyDueDateChangeResultsResponse) Reset() {
	*x = ListSurveyReplyDueDateChangeResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReplyDueDateChangeResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReplyDueDateChangeResultsResponse) ProtoMessage() {}

func (x *ListSurveyReplyDueDateChangeResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReplyDueDateChangeResultsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyReplyDueDateChangeResultsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{26}
}

func (x *ListSurveyReplyDueDateChangeResultsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyReplyDueDateChangeResultsResponse) GetItems() []*SurveyReplyDueDateChangeResult {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyReplyDueDateChangeResultsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reply_due_date_change_result_id
type GetSurveyReplyDueDateChangeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更ID
	SurveyReplyDueDateChangeResultId string `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_result_id,json=surveyReplyDueDateChangeResultId,proto3" json:"survey_reply_due_date_change_result_id,omitempty"`
}

func (x *GetSurveyReplyDueDateChangeResultRequest) Reset() {
	*x = GetSurveyReplyDueDateChangeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyReplyDueDateChangeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyReplyDueDateChangeResultRequest) ProtoMessage() {}

func (x *GetSurveyReplyDueDateChangeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyReplyDueDateChangeResultRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyReplyDueDateChangeResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{27}
}

func (x *GetSurveyReplyDueDateChangeResultRequest) GetSurveyReplyDueDateChangeResultId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeResultId
	}
	return ""
}

// 回答期日変更データ を 公開 する
// required survey_reply_due_date_change_result
type SharetoSurveyReplyDueDateChangeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更データ
	// required survey_reply_due_date_change_result_id
	SurveyReplyDueDateChangeResult *SurveyReplyDueDateChangeResult `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_result,json=surveyReplyDueDateChangeResult,proto3" json:"survey_reply_due_date_change_result,omitempty"`
}

func (x *SharetoSurveyReplyDueDateChangeResultRequest) Reset() {
	*x = SharetoSurveyReplyDueDateChangeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyReplyDueDateChangeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyReplyDueDateChangeResultRequest) ProtoMessage() {}

func (x *SharetoSurveyReplyDueDateChangeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyReplyDueDateChangeResultRequest.ProtoReflect.Descriptor instead.
func (*SharetoSurveyReplyDueDateChangeResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{28}
}

func (x *SharetoSurveyReplyDueDateChangeResultRequest) GetSurveyReplyDueDateChangeResult() *SurveyReplyDueDateChangeResult {
	if x != nil {
		return x.SurveyReplyDueDateChangeResult
	}
	return nil
}

type SharetoSurveyReplyDueDateChangeResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoSurveyReplyDueDateChangeResultResponse) Reset() {
	*x = SharetoSurveyReplyDueDateChangeResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyReplyDueDateChangeResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyReplyDueDateChangeResultResponse) ProtoMessage() {}

func (x *SharetoSurveyReplyDueDateChangeResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyReplyDueDateChangeResultResponse.ProtoReflect.Descriptor instead.
func (*SharetoSurveyReplyDueDateChangeResultResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{29}
}

// 回答期日変更依頼データ
// required survey_reply_due_date_change_request
type CreateSurveyReplyDueDateChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更依頼データ
	// required survey_request_id
	// required reply_due_date_dt
	SurveyReplyDueDateChangeRequest *SurveyReplyDueDateChangeRequest `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_request,json=surveyReplyDueDateChangeRequest,proto3" json:"survey_reply_due_date_change_request,omitempty"`
}

func (x *CreateSurveyReplyDueDateChangeRequestRequest) Reset() {
	*x = CreateSurveyReplyDueDateChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyReplyDueDateChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyReplyDueDateChangeRequestRequest) ProtoMessage() {}

func (x *CreateSurveyReplyDueDateChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyReplyDueDateChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyReplyDueDateChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{30}
}

func (x *CreateSurveyReplyDueDateChangeRequestRequest) GetSurveyReplyDueDateChangeRequest() *SurveyReplyDueDateChangeRequest {
	if x != nil {
		return x.SurveyReplyDueDateChangeRequest
	}
	return nil
}

type ListSurveyReplyDueDateChangeRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
}

func (x *ListSurveyReplyDueDateChangeRequestsRequest) Reset() {
	*x = ListSurveyReplyDueDateChangeRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReplyDueDateChangeRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReplyDueDateChangeRequestsRequest) ProtoMessage() {}

func (x *ListSurveyReplyDueDateChangeRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReplyDueDateChangeRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyReplyDueDateChangeRequestsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{31}
}

func (x *ListSurveyReplyDueDateChangeRequestsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyReplyDueDateChangeRequestsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

type ListSurveyReplyDueDateChangeRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 回答期日変更依頼データ
	Items []*SurveyReplyDueDateChangeRequest `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyReplyDueDateChangeRequestsResponse) Reset() {
	*x = ListSurveyReplyDueDateChangeRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReplyDueDateChangeRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReplyDueDateChangeRequestsResponse) ProtoMessage() {}

func (x *ListSurveyReplyDueDateChangeRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReplyDueDateChangeRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyReplyDueDateChangeRequestsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{32}
}

func (x *ListSurveyReplyDueDateChangeRequestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyReplyDueDateChangeRequestsResponse) GetItems() []*SurveyReplyDueDateChangeRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyReplyDueDateChangeRequestsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reply_due_date_change_request_id
type GetSurveyReplyDueDateChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyReplyDueDateChangeRequestId string `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_request_id,json=surveyReplyDueDateChangeRequestId,proto3" json:"survey_reply_due_date_change_request_id,omitempty"`
}

func (x *GetSurveyReplyDueDateChangeRequestRequest) Reset() {
	*x = GetSurveyReplyDueDateChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyReplyDueDateChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyReplyDueDateChangeRequestRequest) ProtoMessage() {}

func (x *GetSurveyReplyDueDateChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyReplyDueDateChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyReplyDueDateChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{33}
}

func (x *GetSurveyReplyDueDateChangeRequestRequest) GetSurveyReplyDueDateChangeRequestId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeRequestId
	}
	return ""
}

// 回答期日変更依頼データ を 公開 する
// required survey_reply_due_date_change_request
type SharetoSurveyReplyDueDateChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更依頼データ
	// required survey_reply_due_date_change_request_id
	SurveyReplyDueDateChangeRequest *SurveyReplyDueDateChangeRequest `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_request,json=surveyReplyDueDateChangeRequest,proto3" json:"survey_reply_due_date_change_request,omitempty"`
}

func (x *SharetoSurveyReplyDueDateChangeRequestRequest) Reset() {
	*x = SharetoSurveyReplyDueDateChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyReplyDueDateChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyReplyDueDateChangeRequestRequest) ProtoMessage() {}

func (x *SharetoSurveyReplyDueDateChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyReplyDueDateChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*SharetoSurveyReplyDueDateChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{34}
}

func (x *SharetoSurveyReplyDueDateChangeRequestRequest) GetSurveyReplyDueDateChangeRequest() *SurveyReplyDueDateChangeRequest {
	if x != nil {
		return x.SurveyReplyDueDateChangeRequest
	}
	return nil
}

type SharetoSurveyReplyDueDateChangeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoSurveyReplyDueDateChangeRequestResponse) Reset() {
	*x = SharetoSurveyReplyDueDateChangeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyReplyDueDateChangeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyReplyDueDateChangeRequestResponse) ProtoMessage() {}

func (x *SharetoSurveyReplyDueDateChangeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyReplyDueDateChangeRequestResponse.ProtoReflect.Descriptor instead.
func (*SharetoSurveyReplyDueDateChangeRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{35}
}

// required survey_reception_id
type GetSurveyReceptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼受信ID
	SurveyReceptionId string `protobuf:"bytes,1,opt,name=survey_reception_id,json=surveyReceptionId,proto3" json:"survey_reception_id,omitempty"`
}

func (x *GetSurveyReceptionRequest) Reset() {
	*x = GetSurveyReceptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyReceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyReceptionRequest) ProtoMessage() {}

func (x *GetSurveyReceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyReceptionRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyReceptionRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{36}
}

func (x *GetSurveyReceptionRequest) GetSurveyReceptionId() string {
	if x != nil {
		return x.SurveyReceptionId
	}
	return ""
}

// required survey_reception
type UpdateSurveyReceptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼受信データ
	// required survey_reception_id
	// required updated_at
	SurveyReception *SurveyReception `protobuf:"bytes,1,opt,name=survey_reception,json=surveyReception,proto3" json:"survey_reception,omitempty"`
}

func (x *UpdateSurveyReceptionRequest) Reset() {
	*x = UpdateSurveyReceptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSurveyReceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSurveyReceptionRequest) ProtoMessage() {}

func (x *UpdateSurveyReceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSurveyReceptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSurveyReceptionRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateSurveyReceptionRequest) GetSurveyReception() *SurveyReception {
	if x != nil {
		return x.SurveyReception
	}
	return nil
}

// 依頼受信データ.システム通知先
// required survey_reception_id
// required updated_at
type UpdateSystemNotificationUsersInSurveyReceptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼受信ID
	SurveyReceptionId string `protobuf:"bytes,1,opt,name=survey_reception_id,json=surveyReceptionId,proto3" json:"survey_reception_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,2,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	UpdatedAt               int64                     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateSystemNotificationUsersInSurveyReceptionRequest) Reset() {
	*x = UpdateSystemNotificationUsersInSurveyReceptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemNotificationUsersInSurveyReceptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemNotificationUsersInSurveyReceptionRequest) ProtoMessage() {}

func (x *UpdateSystemNotificationUsersInSurveyReceptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemNotificationUsersInSurveyReceptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSystemNotificationUsersInSurveyReceptionRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateSystemNotificationUsersInSurveyReceptionRequest) GetSurveyReceptionId() string {
	if x != nil {
		return x.SurveyReceptionId
	}
	return ""
}

func (x *UpdateSystemNotificationUsersInSurveyReceptionRequest) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *UpdateSystemNotificationUsersInSurveyReceptionRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 依頼回答データ
// required survey_result
type CreateSurveyResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼回答データ
	// required survey_request_id
	SurveyResult *SurveyResult `protobuf:"bytes,1,opt,name=survey_result,json=surveyResult,proto3" json:"survey_result,omitempty"`
}

func (x *CreateSurveyResultRequest) Reset() {
	*x = CreateSurveyResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyResultRequest) ProtoMessage() {}

func (x *CreateSurveyResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyResultRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{39}
}

func (x *CreateSurveyResultRequest) GetSurveyResult() *SurveyResult {
	if x != nil {
		return x.SurveyResult
	}
	return nil
}

// 依頼回答データ を 公開 する
// required survey_result
type SharetoSurveyResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼回答データ
	// required survey_result_id
	SurveyResult *SurveyResult `protobuf:"bytes,1,opt,name=survey_result,json=surveyResult,proto3" json:"survey_result,omitempty"`
}

func (x *SharetoSurveyResultRequest) Reset() {
	*x = SharetoSurveyResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyResultRequest) ProtoMessage() {}

func (x *SharetoSurveyResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyResultRequest.ProtoReflect.Descriptor instead.
func (*SharetoSurveyResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{40}
}

func (x *SharetoSurveyResultRequest) GetSurveyResult() *SurveyResult {
	if x != nil {
		return x.SurveyResult
	}
	return nil
}

type SharetoSurveyResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoSurveyResultResponse) Reset() {
	*x = SharetoSurveyResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyResultResponse) ProtoMessage() {}

func (x *SharetoSurveyResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyResultResponse.ProtoReflect.Descriptor instead.
func (*SharetoSurveyResultResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{41}
}

// 修正依頼データ
// required survey_result_change_request
type CreateSurveyResultChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 修正依頼データ
	// required survey_request_id
	// required survey_result_id
	SurveyResultChangeRequest *SurveyResultChangeRequest `protobuf:"bytes,1,opt,name=survey_result_change_request,json=surveyResultChangeRequest,proto3" json:"survey_result_change_request,omitempty"`
}

func (x *CreateSurveyResultChangeRequestRequest) Reset() {
	*x = CreateSurveyResultChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyResultChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyResultChangeRequestRequest) ProtoMessage() {}

func (x *CreateSurveyResultChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyResultChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyResultChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{42}
}

func (x *CreateSurveyResultChangeRequestRequest) GetSurveyResultChangeRequest() *SurveyResultChangeRequest {
	if x != nil {
		return x.SurveyResultChangeRequest
	}
	return nil
}

type ListSurveyResultChangeRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
	// 依頼回答ID
	SurveyResultIds []string `protobuf:"bytes,3,rep,name=survey_result_ids,json=surveyResultIds,proto3" json:"survey_result_ids,omitempty"`
}

func (x *ListSurveyResultChangeRequestsRequest) Reset() {
	*x = ListSurveyResultChangeRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyResultChangeRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyResultChangeRequestsRequest) ProtoMessage() {}

func (x *ListSurveyResultChangeRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyResultChangeRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyResultChangeRequestsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{43}
}

func (x *ListSurveyResultChangeRequestsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyResultChangeRequestsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

func (x *ListSurveyResultChangeRequestsRequest) GetSurveyResultIds() []string {
	if x != nil {
		return x.SurveyResultIds
	}
	return nil
}

type ListSurveyResultChangeRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼修正データ
	Items []*SurveyResultChangeRequest `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyResultChangeRequestsResponse) Reset() {
	*x = ListSurveyResultChangeRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyResultChangeRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyResultChangeRequestsResponse) ProtoMessage() {}

func (x *ListSurveyResultChangeRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyResultChangeRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyResultChangeRequestsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{44}
}

func (x *ListSurveyResultChangeRequestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyResultChangeRequestsResponse) GetItems() []*SurveyResultChangeRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyResultChangeRequestsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_result_change_request_id
type GetSurveyResultChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼修正ID
	SurveyResultChangeRequestId string `protobuf:"bytes,1,opt,name=survey_result_change_request_id,json=surveyResultChangeRequestId,proto3" json:"survey_result_change_request_id,omitempty"`
}

func (x *GetSurveyResultChangeRequestRequest) Reset() {
	*x = GetSurveyResultChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyResultChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyResultChangeRequestRequest) ProtoMessage() {}

func (x *GetSurveyResultChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyResultChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyResultChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{45}
}

func (x *GetSurveyResultChangeRequestRequest) GetSurveyResultChangeRequestId() string {
	if x != nil {
		return x.SurveyResultChangeRequestId
	}
	return ""
}

// 修正依頼データ を 公開 する
// required survey_result_change_request
type SharetoSurveyResultChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 修正依頼データ
	// required survey_result_change_request_id
	SurveyResultChangeRequest *SurveyResultChangeRequest `protobuf:"bytes,1,opt,name=survey_result_change_request,json=surveyResultChangeRequest,proto3" json:"survey_result_change_request,omitempty"`
}

func (x *SharetoSurveyResultChangeRequestRequest) Reset() {
	*x = SharetoSurveyResultChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyResultChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyResultChangeRequestRequest) ProtoMessage() {}

func (x *SharetoSurveyResultChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyResultChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*SharetoSurveyResultChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{46}
}

func (x *SharetoSurveyResultChangeRequestRequest) GetSurveyResultChangeRequest() *SurveyResultChangeRequest {
	if x != nil {
		return x.SurveyResultChangeRequest
	}
	return nil
}

type SharetoSurveyResultChangeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoSurveyResultChangeRequestResponse) Reset() {
	*x = SharetoSurveyResultChangeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyResultChangeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyResultChangeRequestResponse) ProtoMessage() {}

func (x *SharetoSurveyResultChangeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyResultChangeRequestResponse.ProtoReflect.Descriptor instead.
func (*SharetoSurveyResultChangeRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{47}
}

// 催促データ
// required survey_reminder
type CreateSurveyReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 催促データ
	// required survey_request_id
	SurveyReminder *SurveyReminder `protobuf:"bytes,1,opt,name=survey_reminder,json=surveyReminder,proto3" json:"survey_reminder,omitempty"`
}

func (x *CreateSurveyReminderRequest) Reset() {
	*x = CreateSurveyReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSurveyReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSurveyReminderRequest) ProtoMessage() {}

func (x *CreateSurveyReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSurveyReminderRequest.ProtoReflect.Descriptor instead.
func (*CreateSurveyReminderRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{48}
}

func (x *CreateSurveyReminderRequest) GetSurveyReminder() *SurveyReminder {
	if x != nil {
		return x.SurveyReminder
	}
	return nil
}

type ListSurveyRemindersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
}

func (x *ListSurveyRemindersRequest) Reset() {
	*x = ListSurveyRemindersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRemindersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRemindersRequest) ProtoMessage() {}

func (x *ListSurveyRemindersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRemindersRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyRemindersRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{49}
}

func (x *ListSurveyRemindersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyRemindersRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

type ListSurveyRemindersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 催促データ
	Items []*SurveyReminder `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyRemindersResponse) Reset() {
	*x = ListSurveyRemindersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRemindersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRemindersResponse) ProtoMessage() {}

func (x *ListSurveyRemindersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRemindersResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyRemindersResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{50}
}

func (x *ListSurveyRemindersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyRemindersResponse) GetItems() []*SurveyReminder {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyRemindersResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reminder_id
type GetSurveyReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 催促ID
	SurveyReminderId string `protobuf:"bytes,1,opt,name=survey_reminder_id,json=surveyReminderId,proto3" json:"survey_reminder_id,omitempty"`
}

func (x *GetSurveyReminderRequest) Reset() {
	*x = GetSurveyReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyReminderRequest) ProtoMessage() {}

func (x *GetSurveyReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyReminderRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyReminderRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{51}
}

func (x *GetSurveyReminderRequest) GetSurveyReminderId() string {
	if x != nil {
		return x.SurveyReminderId
	}
	return ""
}

// 催促データ を 公開 する
// required survey_reminder
type SharetoSurveyReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 催促データ
	// required survey_reminder_id
	SurveyReminder *SurveyReminder `protobuf:"bytes,1,opt,name=survey_reminder,json=surveyReminder,proto3" json:"survey_reminder,omitempty"`
}

func (x *SharetoSurveyReminderRequest) Reset() {
	*x = SharetoSurveyReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyReminderRequest) ProtoMessage() {}

func (x *SharetoSurveyReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyReminderRequest.ProtoReflect.Descriptor instead.
func (*SharetoSurveyReminderRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{52}
}

func (x *SharetoSurveyReminderRequest) GetSurveyReminder() *SurveyReminder {
	if x != nil {
		return x.SurveyReminder
	}
	return nil
}

type SharetoSurveyReminderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoSurveyReminderResponse) Reset() {
	*x = SharetoSurveyReminderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoSurveyReminderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoSurveyReminderResponse) ProtoMessage() {}

func (x *SharetoSurveyReminderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoSurveyReminderResponse.ProtoReflect.Descriptor instead.
func (*SharetoSurveyReminderResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{53}
}

// 履歴データ
// required type_name
type ListHistorysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// レコードタイプ
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// レコードID
	RecordIds []string `protobuf:"bytes,3,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ListHistorysRequest) Reset() {
	*x = ListHistorysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistorysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistorysRequest) ProtoMessage() {}

func (x *ListHistorysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistorysRequest.ProtoReflect.Descriptor instead.
func (*ListHistorysRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{54}
}

func (x *ListHistorysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHistorysRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListHistorysRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type ListHistorysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 履歴
	Items []*History `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListHistorysResponse) Reset() {
	*x = ListHistorysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistorysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistorysResponse) ProtoMessage() {}

func (x *ListHistorysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistorysResponse.ProtoReflect.Descriptor instead.
func (*ListHistorysResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{55}
}

func (x *ListHistorysResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHistorysResponse) GetItems() []*History {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListHistorysResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 破棄データ を 公開 する
// required discard
type SharetoDiscardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 破棄データ
	// required discard_id
	Discard *Discard `protobuf:"bytes,1,opt,name=discard,proto3" json:"discard,omitempty"`
}

func (x *SharetoDiscardRequest) Reset() {
	*x = SharetoDiscardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoDiscardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoDiscardRequest) ProtoMessage() {}

func (x *SharetoDiscardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoDiscardRequest.ProtoReflect.Descriptor instead.
func (*SharetoDiscardRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{56}
}

func (x *SharetoDiscardRequest) GetDiscard() *Discard {
	if x != nil {
		return x.Discard
	}
	return nil
}

type SharetoDiscardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoDiscardResponse) Reset() {
	*x = SharetoDiscardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoDiscardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoDiscardResponse) ProtoMessage() {}

func (x *SharetoDiscardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoDiscardResponse.ProtoReflect.Descriptor instead.
func (*SharetoDiscardResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{57}
}

// 終了データ を 公開 する
// required complete
type SharetoCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 終了データ
	// required complete_id
	Complete *Complete `protobuf:"bytes,1,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (x *SharetoCompleteRequest) Reset() {
	*x = SharetoCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoCompleteRequest) ProtoMessage() {}

func (x *SharetoCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoCompleteRequest.ProtoReflect.Descriptor instead.
func (*SharetoCompleteRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{58}
}

func (x *SharetoCompleteRequest) GetComplete() *Complete {
	if x != nil {
		return x.Complete
	}
	return nil
}

type SharetoCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoCompleteResponse) Reset() {
	*x = SharetoCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoCompleteResponse) ProtoMessage() {}

func (x *SharetoCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoCompleteResponse.ProtoReflect.Descriptor instead.
func (*SharetoCompleteResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{59}
}

// 開府済みデータ を 公開 する
// required opened
type SharetoOpenedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 開府済みデータ
	// required opened_id
	Opened *Opened `protobuf:"bytes,1,opt,name=opened,proto3" json:"opened,omitempty"`
}

func (x *SharetoOpenedRequest) Reset() {
	*x = SharetoOpenedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoOpenedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoOpenedRequest) ProtoMessage() {}

func (x *SharetoOpenedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoOpenedRequest.ProtoReflect.Descriptor instead.
func (*SharetoOpenedRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{60}
}

func (x *SharetoOpenedRequest) GetOpened() *Opened {
	if x != nil {
		return x.Opened
	}
	return nil
}

type SharetoOpenedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoOpenedResponse) Reset() {
	*x = SharetoOpenedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoOpenedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoOpenedResponse) ProtoMessage() {}

func (x *SharetoOpenedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoOpenedResponse.ProtoReflect.Descriptor instead.
func (*SharetoOpenedResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{61}
}

// 依頼管理情報出力
// required file_format
type ExportSurveyRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	// Implementation Note:
	//
	//	依頼伝票IDが渡ってきている場合は、依頼伝票IDを条件に依頼明細および架空展開した明細を取得する
	SurveyBaseRequestIds []string `protobuf:"bytes,3,rep,name=survey_base_request_ids,json=surveyBaseRequestIds,proto3" json:"survey_base_request_ids,omitempty"`
	// 依頼明細ID
	// Implementation Note:
	//
	//	依頼明細IDが渡ってきている場合は、依頼明細IDを条件に依頼明細から取得する
	SurveyRequestIds []string `protobuf:"bytes,4,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportSurveyRequestsRequest) Reset() {
	*x = ExportSurveyRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportSurveyRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSurveyRequestsRequest) ProtoMessage() {}

func (x *ExportSurveyRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSurveyRequestsRequest.ProtoReflect.Descriptor instead.
func (*ExportSurveyRequestsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{62}
}

func (x *ExportSurveyRequestsRequest) GetSurveyBaseRequestIds() []string {
	if x != nil {
		return x.SurveyBaseRequestIds
	}
	return nil
}

func (x *ExportSurveyRequestsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

func (x *ExportSurveyRequestsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportSurveyRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// アセットID（一時領域）
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportSurveyRequestsResponse) Reset() {
	*x = ExportSurveyRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportSurveyRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSurveyRequestsResponse) ProtoMessage() {}

func (x *ExportSurveyRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSurveyRequestsResponse.ProtoReflect.Descriptor instead.
func (*ExportSurveyRequestsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{63}
}

func (x *ExportSurveyRequestsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 依頼管理情報出力フォーマット取得
type ListSurveyRequestFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyRequestFormatsRequest) Reset() {
	*x = ListSurveyRequestFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestFormatsRequest) ProtoMessage() {}

func (x *ListSurveyRequestFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestFormatsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{64}
}

func (x *ListSurveyRequestFormatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSurveyRequestFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyRequestFormatsResponse) Reset() {
	*x = ListSurveyRequestFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestFormatsResponse) ProtoMessage() {}

func (x *ListSurveyRequestFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestFormatsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{65}
}

func (x *ListSurveyRequestFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyRequestFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyRequestFormatsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_request_id
type SharedGetSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
}

func (x *SharedGetSurveyRequestRequest) Reset() {
	*x = SharedGetSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetSurveyRequestRequest) ProtoMessage() {}

func (x *SharedGetSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*SharedGetSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{66}
}

func (x *SharedGetSurveyRequestRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

// 公開された 回答期日変更データ
type SharedListSurveyReplyDueDateChangeResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼伝票
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
}

func (x *SharedListSurveyReplyDueDateChangeResultsRequest) Reset() {
	*x = SharedListSurveyReplyDueDateChangeResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyReplyDueDateChangeResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyReplyDueDateChangeResultsRequest) ProtoMessage() {}

func (x *SharedListSurveyReplyDueDateChangeResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyReplyDueDateChangeResultsRequest.ProtoReflect.Descriptor instead.
func (*SharedListSurveyReplyDueDateChangeResultsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{67}
}

func (x *SharedListSurveyReplyDueDateChangeResultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListSurveyReplyDueDateChangeResultsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

type SharedListSurveyReplyDueDateChangeResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 回答期日変更データ
	Items []*SurveyReplyDueDateChangeResult `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListSurveyReplyDueDateChangeResultsResponse) Reset() {
	*x = SharedListSurveyReplyDueDateChangeResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyReplyDueDateChangeResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyReplyDueDateChangeResultsResponse) ProtoMessage() {}

func (x *SharedListSurveyReplyDueDateChangeResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyReplyDueDateChangeResultsResponse.ProtoReflect.Descriptor instead.
func (*SharedListSurveyReplyDueDateChangeResultsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{68}
}

func (x *SharedListSurveyReplyDueDateChangeResultsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListSurveyReplyDueDateChangeResultsResponse) GetItems() []*SurveyReplyDueDateChangeResult {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListSurveyReplyDueDateChangeResultsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reply_due_date_change_result_id
type SharedGetSurveyReplyDueDateChangeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更ID
	SurveyReplyDueDateChangeResultId string `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_result_id,json=surveyReplyDueDateChangeResultId,proto3" json:"survey_reply_due_date_change_result_id,omitempty"`
}

func (x *SharedGetSurveyReplyDueDateChangeResultRequest) Reset() {
	*x = SharedGetSurveyReplyDueDateChangeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetSurveyReplyDueDateChangeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetSurveyReplyDueDateChangeResultRequest) ProtoMessage() {}

func (x *SharedGetSurveyReplyDueDateChangeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetSurveyReplyDueDateChangeResultRequest.ProtoReflect.Descriptor instead.
func (*SharedGetSurveyReplyDueDateChangeResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{69}
}

func (x *SharedGetSurveyReplyDueDateChangeResultRequest) GetSurveyReplyDueDateChangeResultId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeResultId
	}
	return ""
}

// 公開された 催促データ
type SharedListSurveyRemindersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
}

func (x *SharedListSurveyRemindersRequest) Reset() {
	*x = SharedListSurveyRemindersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyRemindersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyRemindersRequest) ProtoMessage() {}

func (x *SharedListSurveyRemindersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyRemindersRequest.ProtoReflect.Descriptor instead.
func (*SharedListSurveyRemindersRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{70}
}

func (x *SharedListSurveyRemindersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListSurveyRemindersRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

type SharedListSurveyRemindersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 催促データ
	Items []*SurveyReminder `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListSurveyRemindersResponse) Reset() {
	*x = SharedListSurveyRemindersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyRemindersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyRemindersResponse) ProtoMessage() {}

func (x *SharedListSurveyRemindersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyRemindersResponse.ProtoReflect.Descriptor instead.
func (*SharedListSurveyRemindersResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{71}
}

func (x *SharedListSurveyRemindersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListSurveyRemindersResponse) GetItems() []*SurveyReminder {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListSurveyRemindersResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reminder_id
type SharedGetSurveyReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 催促ID
	SurveyReminderId string `protobuf:"bytes,1,opt,name=survey_reminder_id,json=surveyReminderId,proto3" json:"survey_reminder_id,omitempty"`
}

func (x *SharedGetSurveyReminderRequest) Reset() {
	*x = SharedGetSurveyReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetSurveyReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetSurveyReminderRequest) ProtoMessage() {}

func (x *SharedGetSurveyReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetSurveyReminderRequest.ProtoReflect.Descriptor instead.
func (*SharedGetSurveyReminderRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{72}
}

func (x *SharedGetSurveyReminderRequest) GetSurveyReminderId() string {
	if x != nil {
		return x.SurveyReminderId
	}
	return ""
}

// 公開された 回答期日変更依頼データ
type SharedListSurveyReplyDueDateChangeRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
}

func (x *SharedListSurveyReplyDueDateChangeRequestsRequest) Reset() {
	*x = SharedListSurveyReplyDueDateChangeRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyReplyDueDateChangeRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyReplyDueDateChangeRequestsRequest) ProtoMessage() {}

func (x *SharedListSurveyReplyDueDateChangeRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyReplyDueDateChangeRequestsRequest.ProtoReflect.Descriptor instead.
func (*SharedListSurveyReplyDueDateChangeRequestsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{73}
}

func (x *SharedListSurveyReplyDueDateChangeRequestsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListSurveyReplyDueDateChangeRequestsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

type SharedListSurveyReplyDueDateChangeRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 回答期日変更依頼データ
	Items []*SurveyReplyDueDateChangeRequest `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListSurveyReplyDueDateChangeRequestsResponse) Reset() {
	*x = SharedListSurveyReplyDueDateChangeRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyReplyDueDateChangeRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyReplyDueDateChangeRequestsResponse) ProtoMessage() {}

func (x *SharedListSurveyReplyDueDateChangeRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyReplyDueDateChangeRequestsResponse.ProtoReflect.Descriptor instead.
func (*SharedListSurveyReplyDueDateChangeRequestsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{74}
}

func (x *SharedListSurveyReplyDueDateChangeRequestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListSurveyReplyDueDateChangeRequestsResponse) GetItems() []*SurveyReplyDueDateChangeRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListSurveyReplyDueDateChangeRequestsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reply_due_date_change_request_id
type SharedGetSurveyReplyDueDateChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 回答期日変更依頼ID
	SurveyReplyDueDateChangeRequestId string `protobuf:"bytes,1,opt,name=survey_reply_due_date_change_request_id,json=surveyReplyDueDateChangeRequestId,proto3" json:"survey_reply_due_date_change_request_id,omitempty"`
}

func (x *SharedGetSurveyReplyDueDateChangeRequestRequest) Reset() {
	*x = SharedGetSurveyReplyDueDateChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetSurveyReplyDueDateChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetSurveyReplyDueDateChangeRequestRequest) ProtoMessage() {}

func (x *SharedGetSurveyReplyDueDateChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetSurveyReplyDueDateChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*SharedGetSurveyReplyDueDateChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{75}
}

func (x *SharedGetSurveyReplyDueDateChangeRequestRequest) GetSurveyReplyDueDateChangeRequestId() string {
	if x != nil {
		return x.SurveyReplyDueDateChangeRequestId
	}
	return ""
}

// required survey_result_id
type SharedGetSurveyResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼回答ID
	SurveyResultId string `protobuf:"bytes,1,opt,name=survey_result_id,json=surveyResultId,proto3" json:"survey_result_id,omitempty"`
}

func (x *SharedGetSurveyResultRequest) Reset() {
	*x = SharedGetSurveyResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetSurveyResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetSurveyResultRequest) ProtoMessage() {}

func (x *SharedGetSurveyResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetSurveyResultRequest.ProtoReflect.Descriptor instead.
func (*SharedGetSurveyResultRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{76}
}

func (x *SharedGetSurveyResultRequest) GetSurveyResultId() string {
	if x != nil {
		return x.SurveyResultId
	}
	return ""
}

// 公開された 修正依頼データ
type SharedListSurveyResultChangeRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼明細ID
	SurveyRequestIds []string `protobuf:"bytes,2,rep,name=survey_request_ids,json=surveyRequestIds,proto3" json:"survey_request_ids,omitempty"`
	// 依頼回答ID
	SurveyResultIds []string `protobuf:"bytes,3,rep,name=survey_result_ids,json=surveyResultIds,proto3" json:"survey_result_ids,omitempty"`
}

func (x *SharedListSurveyResultChangeRequestsRequest) Reset() {
	*x = SharedListSurveyResultChangeRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListSurveyResultChangeRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListSurveyResultChangeRequestsRequest) ProtoMessage() {}

func (x *SharedListSurveyResultChangeRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListSurveyResultChangeRequestsRequest.ProtoReflect.Descriptor instead.
func (*SharedListSurveyResultChangeRequestsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{77}
}

func (x *SharedListSurveyResultChangeRequestsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListSurveyResultChangeRequestsRequest) GetSurveyRequestIds() []string {
	if x != nil {
		return x.SurveyRequestIds
	}
	return nil
}

func (x *SharedListSurveyResultChangeRequestsRequest) GetSurveyResultIds() []string {
	if x != nil {
		return x.SurveyResultIds
	}
	return nil
}

type SurveyResultChangeRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 修正依頼データ
	Items []*SurveyResultChangeRequest `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SurveyResultChangeRequestsResponse) Reset() {
	*x = SurveyResultChangeRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResultChangeRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResultChangeRequestsResponse) ProtoMessage() {}

func (x *SurveyResultChangeRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResultChangeRequestsResponse.ProtoReflect.Descriptor instead.
func (*SurveyResultChangeRequestsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{78}
}

func (x *SurveyResultChangeRequestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SurveyResultChangeRequestsResponse) GetItems() []*SurveyResultChangeRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SurveyResultChangeRequestsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_result_change_request_id
type SharedGetSurveyResultChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 修正依頼ID
	SurveyResultChangeRequestId string `protobuf:"bytes,1,opt,name=survey_result_change_request_id,json=surveyResultChangeRequestId,proto3" json:"survey_result_change_request_id,omitempty"`
}

func (x *SharedGetSurveyResultChangeRequestRequest) Reset() {
	*x = SharedGetSurveyResultChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetSurveyResultChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetSurveyResultChangeRequestRequest) ProtoMessage() {}

func (x *SharedGetSurveyResultChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetSurveyResultChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*SharedGetSurveyResultChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{79}
}

func (x *SharedGetSurveyResultChangeRequestRequest) GetSurveyResultChangeRequestId() string {
	if x != nil {
		return x.SurveyResultChangeRequestId
	}
	return ""
}

// 展開された 依頼明細コンテンツ
type ExpandedListSurveyRequestContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,2,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// データフィルタ
	DataFilter *ExpandedListSurveyRequestContentsRequest_DataFilter `protobuf:"bytes,3,opt,name=data_filter,json=dataFilter,proto3" json:"data_filter,omitempty"`
}

func (x *ExpandedListSurveyRequestContentsRequest) Reset() {
	*x = ExpandedListSurveyRequestContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedListSurveyRequestContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedListSurveyRequestContentsRequest) ProtoMessage() {}

func (x *ExpandedListSurveyRequestContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedListSurveyRequestContentsRequest.ProtoReflect.Descriptor instead.
func (*ExpandedListSurveyRequestContentsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{80}
}

func (x *ExpandedListSurveyRequestContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ExpandedListSurveyRequestContentsRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *ExpandedListSurveyRequestContentsRequest) GetDataFilter() *ExpandedListSurveyRequestContentsRequest_DataFilter {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

type ExpandedListSurveyRequestContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼明細コンテンツ
	Items []*SurveyRequestContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ExpandedListSurveyRequestContentsResponse) Reset() {
	*x = ExpandedListSurveyRequestContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedListSurveyRequestContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedListSurveyRequestContentsResponse) ProtoMessage() {}

func (x *ExpandedListSurveyRequestContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedListSurveyRequestContentsResponse.ProtoReflect.Descriptor instead.
func (*ExpandedListSurveyRequestContentsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{81}
}

func (x *ExpandedListSurveyRequestContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ExpandedListSurveyRequestContentsResponse) GetItems() []*SurveyRequestContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExpandedListSurveyRequestContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_base_request_id
// required business_unit_management_id
type ExpandedGetSurveyRequestContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
}

func (x *ExpandedGetSurveyRequestContentRequest) Reset() {
	*x = ExpandedGetSurveyRequestContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedGetSurveyRequestContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedGetSurveyRequestContentRequest) ProtoMessage() {}

func (x *ExpandedGetSurveyRequestContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedGetSurveyRequestContentRequest.ProtoReflect.Descriptor instead.
func (*ExpandedGetSurveyRequestContentRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{82}
}

func (x *ExpandedGetSurveyRequestContentRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *ExpandedGetSurveyRequestContentRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

// 依頼伝票コンテンツ
// required data_filter
type ListSurveyBaseRequestContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// データフィルタ
	DataFilter *ListSurveyBaseRequestContentsRequest_DataFilter `protobuf:"bytes,2,opt,name=data_filter,json=dataFilter,proto3" json:"data_filter,omitempty"`
}

func (x *ListSurveyBaseRequestContentsRequest) Reset() {
	*x = ListSurveyBaseRequestContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyBaseRequestContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyBaseRequestContentsRequest) ProtoMessage() {}

func (x *ListSurveyBaseRequestContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyBaseRequestContentsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyBaseRequestContentsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{83}
}

func (x *ListSurveyBaseRequestContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyBaseRequestContentsRequest) GetDataFilter() *ListSurveyBaseRequestContentsRequest_DataFilter {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

type ListSurveyBaseRequestContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼伝票コンテンツ
	Items []*SurveyBaseRequestContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyBaseRequestContentsResponse) Reset() {
	*x = ListSurveyBaseRequestContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyBaseRequestContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyBaseRequestContentsResponse) ProtoMessage() {}

func (x *ListSurveyBaseRequestContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyBaseRequestContentsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyBaseRequestContentsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{84}
}

func (x *ListSurveyBaseRequestContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyBaseRequestContentsResponse) GetItems() []*SurveyBaseRequestContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyBaseRequestContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_base_request_id
type GetSurveyBaseRequestContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,1,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
}

func (x *GetSurveyBaseRequestContentRequest) Reset() {
	*x = GetSurveyBaseRequestContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyBaseRequestContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyBaseRequestContentRequest) ProtoMessage() {}

func (x *GetSurveyBaseRequestContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyBaseRequestContentRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyBaseRequestContentRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{85}
}

func (x *GetSurveyBaseRequestContentRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

// 依頼明細コンテンツ
type ListSurveyRequestContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// データフィルタ
	DataFilter *ListSurveyRequestContentsRequest_DataFilter `protobuf:"bytes,2,opt,name=data_filter,json=dataFilter,proto3" json:"data_filter,omitempty"`
}

func (x *ListSurveyRequestContentsRequest) Reset() {
	*x = ListSurveyRequestContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestContentsRequest) ProtoMessage() {}

func (x *ListSurveyRequestContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestContentsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestContentsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{86}
}

func (x *ListSurveyRequestContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyRequestContentsRequest) GetDataFilter() *ListSurveyRequestContentsRequest_DataFilter {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

type ListSurveyRequestContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼明細コンテンツ
	Items []*SurveyRequestContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyRequestContentsResponse) Reset() {
	*x = ListSurveyRequestContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestContentsResponse) ProtoMessage() {}

func (x *ListSurveyRequestContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestContentsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestContentsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{87}
}

func (x *ListSurveyRequestContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyRequestContentsResponse) GetItems() []*SurveyRequestContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyRequestContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_request_id
type GetSurveyRequestContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼伝票ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
}

func (x *GetSurveyRequestContentRequest) Reset() {
	*x = GetSurveyRequestContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyRequestContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyRequestContentRequest) ProtoMessage() {}

func (x *GetSurveyRequestContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyRequestContentRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyRequestContentRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{88}
}

func (x *GetSurveyRequestContentRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

// 依頼受信コンテンツ
type ListSurveyReceptionContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// データフィルタ
	DataFilter *ListSurveyReceptionContentsRequest_DataFilter `protobuf:"bytes,2,opt,name=data_filter,json=dataFilter,proto3" json:"data_filter,omitempty"`
}

func (x *ListSurveyReceptionContentsRequest) Reset() {
	*x = ListSurveyReceptionContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReceptionContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReceptionContentsRequest) ProtoMessage() {}

func (x *ListSurveyReceptionContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReceptionContentsRequest.ProtoReflect.Descriptor instead.
func (*ListSurveyReceptionContentsRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{89}
}

func (x *ListSurveyReceptionContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSurveyReceptionContentsRequest) GetDataFilter() *ListSurveyReceptionContentsRequest_DataFilter {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

type ListSurveyReceptionContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼受信コンテンツ
	Items []*SurveyReceptionContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSurveyReceptionContentsResponse) Reset() {
	*x = ListSurveyReceptionContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReceptionContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReceptionContentsResponse) ProtoMessage() {}

func (x *ListSurveyReceptionContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReceptionContentsResponse.ProtoReflect.Descriptor instead.
func (*ListSurveyReceptionContentsResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{90}
}

func (x *ListSurveyReceptionContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSurveyReceptionContentsResponse) GetItems() []*SurveyReceptionContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListSurveyReceptionContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_reception_id
type GetSurveyReceptionContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼受信ID
	SurveyReceptionId string `protobuf:"bytes,1,opt,name=survey_reception_id,json=surveyReceptionId,proto3" json:"survey_reception_id,omitempty"`
}

func (x *GetSurveyReceptionContentRequest) Reset() {
	*x = GetSurveyReceptionContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSurveyReceptionContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSurveyReceptionContentRequest) ProtoMessage() {}

func (x *GetSurveyReceptionContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSurveyReceptionContentRequest.ProtoReflect.Descriptor instead.
func (*GetSurveyReceptionContentRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{91}
}

func (x *GetSurveyReceptionContentRequest) GetSurveyReceptionId() string {
	if x != nil {
		return x.SurveyReceptionId
	}
	return ""
}

type UncompletedListSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UncompletedListSurveyRequestRequest) Reset() {
	*x = UncompletedListSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompletedListSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompletedListSurveyRequestRequest) ProtoMessage() {}

func (x *UncompletedListSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompletedListSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*UncompletedListSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{92}
}

func (x *UncompletedListSurveyRequestRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UncompletedListSurveyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼受信コンテンツ
	Items []*SurveyReceptionContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UncompletedListSurveyRequestResponse) Reset() {
	*x = UncompletedListSurveyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompletedListSurveyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompletedListSurveyRequestResponse) ProtoMessage() {}

func (x *UncompletedListSurveyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompletedListSurveyRequestResponse.ProtoReflect.Descriptor instead.
func (*UncompletedListSurveyRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{93}
}

func (x *UncompletedListSurveyRequestResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UncompletedListSurveyRequestResponse) GetItems() []*SurveyReceptionContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UncompletedListSurveyRequestResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UnchangedListSurveyReplyDueDateChangeRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestRequest) Reset() {
	*x = UnchangedListSurveyReplyDueDateChangeRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnchangedListSurveyReplyDueDateChangeRequestRequest) ProtoMessage() {}

func (x *UnchangedListSurveyReplyDueDateChangeRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnchangedListSurveyReplyDueDateChangeRequestRequest.ProtoReflect.Descriptor instead.
func (*UnchangedListSurveyReplyDueDateChangeRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{94}
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UnchangedListSurveyReplyDueDateChangeRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 依頼明細コンテンツ
	Items []*SurveyRequestContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestResponse) Reset() {
	*x = UnchangedListSurveyReplyDueDateChangeRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnchangedListSurveyReplyDueDateChangeRequestResponse) ProtoMessage() {}

func (x *UnchangedListSurveyReplyDueDateChangeRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnchangedListSurveyReplyDueDateChangeRequestResponse.ProtoReflect.Descriptor instead.
func (*UnchangedListSurveyReplyDueDateChangeRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{95}
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestResponse) GetItems() []*SurveyRequestContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnchangedListSurveyReplyDueDateChangeRequestResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required survey_result_id
type ExportedSurveyResultFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyResultId string `protobuf:"bytes,1,opt,name=survey_result_id,json=surveyResultId,proto3" json:"survey_result_id,omitempty"`
}

func (x *ExportedSurveyResultFileRequest) Reset() {
	*x = ExportedSurveyResultFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportedSurveyResultFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportedSurveyResultFileRequest) ProtoMessage() {}

func (x *ExportedSurveyResultFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportedSurveyResultFileRequest.ProtoReflect.Descriptor instead.
func (*ExportedSurveyResultFileRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{96}
}

func (x *ExportedSurveyResultFileRequest) GetSurveyResultId() string {
	if x != nil {
		return x.SurveyResultId
	}
	return ""
}

type ExportedSurveyResultFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportedSurveyResultFileResponse) Reset() {
	*x = ExportedSurveyResultFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportedSurveyResultFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportedSurveyResultFileResponse) ProtoMessage() {}

func (x *ExportedSurveyResultFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportedSurveyResultFileResponse.ProtoReflect.Descriptor instead.
func (*ExportedSurveyResultFileResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{97}
}

// 依頼明細データ を 開封済みにする
// required survey_request_id
type OpenSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 依頼明細ID
	SurveyRequestId string `protobuf:"bytes,1,opt,name=survey_request_id,json=surveyRequestId,proto3" json:"survey_request_id,omitempty"`
}

func (x *OpenSurveyRequestRequest) Reset() {
	*x = OpenSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSurveyRequestRequest) ProtoMessage() {}

func (x *OpenSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*OpenSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{98}
}

func (x *OpenSurveyRequestRequest) GetSurveyRequestId() string {
	if x != nil {
		return x.SurveyRequestId
	}
	return ""
}

type OpenSurveyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 開封済みデータ
	Opened *Opened `protobuf:"bytes,1,opt,name=opened,proto3" json:"opened,omitempty"`
}

func (x *OpenSurveyRequestResponse) Reset() {
	*x = OpenSurveyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSurveyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSurveyRequestResponse) ProtoMessage() {}

func (x *OpenSurveyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSurveyRequestResponse.ProtoReflect.Descriptor instead.
func (*OpenSurveyRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{99}
}

func (x *OpenSurveyRequestResponse) GetOpened() *Opened {
	if x != nil {
		return x.Opened
	}
	return nil
}

type ExpandedListSurveyRequestContentsRequest_DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ステータス
	//
	// Implementation Note:
	//
	//	status.code が渡され、BEで名称マスタを取得する (種別 A1010001)
	//	status.system_name が "B08" 完了 を含まない場合、completed = false で indexFilter をかける
	StatusCodes []string `protobuf:"bytes,5,rep,name=status_codes,json=statusCodes,proto3" json:"status_codes,omitempty"`
	// 依頼カタログID
	SurveyRequestCatalogIds []string `protobuf:"bytes,2,rep,name=survey_request_catalog_ids,json=surveyRequestCatalogIds,proto3" json:"survey_request_catalog_ids,omitempty"`
	// 依頼送信日時 開始
	SendedAtFrom int64 `protobuf:"varint,3,opt,name=sended_at_from,json=sendedAtFrom,proto3" json:"sended_at_from,omitempty"`
	// 依頼送信日時 終了
	SendedAtTo int64 `protobuf:"varint,4,opt,name=sended_at_to,json=sendedAtTo,proto3" json:"sended_at_to,omitempty"`
}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) Reset() {
	*x = ExpandedListSurveyRequestContentsRequest_DataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedListSurveyRequestContentsRequest_DataFilter) ProtoMessage() {}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedListSurveyRequestContentsRequest_DataFilter.ProtoReflect.Descriptor instead.
func (*ExpandedListSurveyRequestContentsRequest_DataFilter) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{80, 0}
}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) GetStatusCodes() []string {
	if x != nil {
		return x.StatusCodes
	}
	return nil
}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) GetSurveyRequestCatalogIds() []string {
	if x != nil {
		return x.SurveyRequestCatalogIds
	}
	return nil
}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) GetSendedAtFrom() int64 {
	if x != nil {
		return x.SendedAtFrom
	}
	return 0
}

func (x *ExpandedListSurveyRequestContentsRequest_DataFilter) GetSendedAtTo() int64 {
	if x != nil {
		return x.SendedAtTo
	}
	return 0
}

type ListSurveyBaseRequestContentsRequest_DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ステータス
	//
	// Implementation Note:
	//
	//	status.code が渡され、BEで名称マスタを取得する (種別 A1010001)
	//	status.system_name が "B08" 完了 を含まない場合、completed = false で indexFilter をかける
	StatusCodes []string `protobuf:"bytes,5,rep,name=status_codes,json=statusCodes,proto3" json:"status_codes,omitempty"`
	// 依頼カタログID
	SurveyRequestCatalogIds []string `protobuf:"bytes,2,rep,name=survey_request_catalog_ids,json=surveyRequestCatalogIds,proto3" json:"survey_request_catalog_ids,omitempty"`
	// 依頼送信日時 開始
	SendedAtFrom int64 `protobuf:"varint,3,opt,name=sended_at_from,json=sendedAtFrom,proto3" json:"sended_at_from,omitempty"`
	// 依頼送信日時 終了
	SendedAtTo int64 `protobuf:"varint,4,opt,name=sended_at_to,json=sendedAtTo,proto3" json:"sended_at_to,omitempty"`
}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) Reset() {
	*x = ListSurveyBaseRequestContentsRequest_DataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyBaseRequestContentsRequest_DataFilter) ProtoMessage() {}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyBaseRequestContentsRequest_DataFilter.ProtoReflect.Descriptor instead.
func (*ListSurveyBaseRequestContentsRequest_DataFilter) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{83, 0}
}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) GetStatusCodes() []string {
	if x != nil {
		return x.StatusCodes
	}
	return nil
}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) GetSurveyRequestCatalogIds() []string {
	if x != nil {
		return x.SurveyRequestCatalogIds
	}
	return nil
}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) GetSendedAtFrom() int64 {
	if x != nil {
		return x.SendedAtFrom
	}
	return 0
}

func (x *ListSurveyBaseRequestContentsRequest_DataFilter) GetSendedAtTo() int64 {
	if x != nil {
		return x.SendedAtTo
	}
	return 0
}

type ListSurveyRequestContentsRequest_DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ステータス
	//
	// Implementation Note:
	//
	//	status.code が渡され、BEで名称マスタを取得する (種別 A1010001)
	//	status.system_name が "B08" 完了 を含まない場合、completed = false で indexFilter をかける
	StatusCodes []string `protobuf:"bytes,5,rep,name=status_codes,json=statusCodes,proto3" json:"status_codes,omitempty"`
	// 依頼カタログID
	SurveyRequestCatalogIds []string `protobuf:"bytes,2,rep,name=survey_request_catalog_ids,json=surveyRequestCatalogIds,proto3" json:"survey_request_catalog_ids,omitempty"`
	// 依頼送信日時 開始
	SendedAtFrom int64 `protobuf:"varint,3,opt,name=sended_at_from,json=sendedAtFrom,proto3" json:"sended_at_from,omitempty"`
	// 依頼送信日時 終了
	SendedAtTo int64 `protobuf:"varint,4,opt,name=sended_at_to,json=sendedAtTo,proto3" json:"sended_at_to,omitempty"`
}

func (x *ListSurveyRequestContentsRequest_DataFilter) Reset() {
	*x = ListSurveyRequestContentsRequest_DataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyRequestContentsRequest_DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyRequestContentsRequest_DataFilter) ProtoMessage() {}

func (x *ListSurveyRequestContentsRequest_DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyRequestContentsRequest_DataFilter.ProtoReflect.Descriptor instead.
func (*ListSurveyRequestContentsRequest_DataFilter) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{86, 0}
}

func (x *ListSurveyRequestContentsRequest_DataFilter) GetStatusCodes() []string {
	if x != nil {
		return x.StatusCodes
	}
	return nil
}

func (x *ListSurveyRequestContentsRequest_DataFilter) GetSurveyRequestCatalogIds() []string {
	if x != nil {
		return x.SurveyRequestCatalogIds
	}
	return nil
}

func (x *ListSurveyRequestContentsRequest_DataFilter) GetSendedAtFrom() int64 {
	if x != nil {
		return x.SendedAtFrom
	}
	return 0
}

func (x *ListSurveyRequestContentsRequest_DataFilter) GetSendedAtTo() int64 {
	if x != nil {
		return x.SendedAtTo
	}
	return 0
}

type ListSurveyReceptionContentsRequest_DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptedAtFrom int64 `protobuf:"varint,1,opt,name=receipted_at_from,json=receiptedAtFrom,proto3" json:"receipted_at_from,omitempty"`
	ReceiptedAtTo   int64 `protobuf:"varint,2,opt,name=receipted_at_to,json=receiptedAtTo,proto3" json:"receipted_at_to,omitempty"`
}

func (x *ListSurveyReceptionContentsRequest_DataFilter) Reset() {
	*x = ListSurveyReceptionContentsRequest_DataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSurveyReceptionContentsRequest_DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSurveyReceptionContentsRequest_DataFilter) ProtoMessage() {}

func (x *ListSurveyReceptionContentsRequest_DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_survey_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSurveyReceptionContentsRequest_DataFilter.ProtoReflect.Descriptor instead.
func (*ListSurveyReceptionContentsRequest_DataFilter) Descriptor() ([]byte, []int) {
	return file_survey_proto_rawDescGZIP(), []int{89, 0}
}

func (x *ListSurveyReceptionContentsRequest_DataFilter) GetReceiptedAtFrom() int64 {
	if x != nil {
		return x.ReceiptedAtFrom
	}
	return 0
}

func (x *ListSurveyReceptionContentsRequest_DataFilter) GetReceiptedAtTo() int64 {
	if x != nil {
		return x.ReceiptedAtTo
	}
	return 0
}

var File_survey_proto protoreflect.FileDescriptor

var file_survey_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x60, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x14, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x22, 0x41, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x5b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x16,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x79,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa2, 0x02, 0x0a, 0x27, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x5e, 0x0a, 0x1a, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x75, 0x0a, 0x1e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x21, 0x0a, 0x1f, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x1f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x33, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x19, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x52, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x1c, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x22, 0x4a, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a,
	0x1d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x2b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x79,
	0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x2b, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x4a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x26, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x2c, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x23, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2f, 0x0a,
	0x2d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x84, 0x01, 0x0a, 0x24, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7f, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x27, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x21, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x2d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x24, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x30, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x70,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50,
	0x0a, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xdb, 0x01, 0x0a, 0x35, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x26, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x6b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9b,
	0x01, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x19, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x80,
	0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x50, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a,
	0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c,
	0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x39, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x40, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x1d, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x30, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x31, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x82, 0x01, 0x0a, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x26, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x20, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x21, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x1e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a,
	0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x22,
	0xb6, 0x01, 0x0a, 0x32, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x2f, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x27,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x75, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x48, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x2b, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x64, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x45, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x29, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x03, 0x0a, 0x28, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xba, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x54, 0x6f, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x22, 0xa2, 0x01, 0x0a, 0x29, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x26, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x66, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xba, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x54, 0x6f, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0xa2, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x62, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xba, 0x01, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x17, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41,
	0x74, 0x54, 0x6f, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x64, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x1a, 0x60, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x54, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x52, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x23, 0x55, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9f, 0x01,
	0x0a, 0x24, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x54, 0x0a, 0x33, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x34, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x32, 0xbd, 0x03, 0x0a, 0x0d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x9b, 0x2f, 0x0a, 0x13, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x8c, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x6d, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x67, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa1, 0x01, 0x0a, 0x20, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x9e, 0x01, 0x0a, 0x2c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x14, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x24, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xaa, 0x01, 0x0a,
	0x23, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x25, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74,
	0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa1, 0x01, 0x0a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xbf, 0x01, 0x0a, 0x2a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x47, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a,
	0x15, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xa3,
	0x01, 0x0a, 0x24, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa4, 0x01,
	0x0a, 0x21, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xa1, 0x13, 0x0a, 0x15, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x25, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xad,
	0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9c,
	0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xb3, 0x01,
	0x0a, 0x26, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x72, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa4, 0x01, 0x0a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x7a, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x16, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xbc, 0x01, 0x0a, 0x29, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x46, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x44, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x8c,
	0x01, 0x0a, 0x19, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x17, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a,
	0x11, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xf7, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x95, 0x01,
	0x0a, 0x1c, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x2c, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x55, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a,
	0x19, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_survey_proto_rawDescOnce sync.Once
	file_survey_proto_rawDescData = file_survey_proto_rawDesc
)

func file_survey_proto_rawDescGZIP() []byte {
	file_survey_proto_rawDescOnce.Do(func() {
		file_survey_proto_rawDescData = protoimpl.X.CompressGZIP(file_survey_proto_rawDescData)
	})
	return file_survey_proto_rawDescData
}

var file_survey_proto_msgTypes = make([]protoimpl.MessageInfo, 104)
var file_survey_proto_goTypes = []interface{}{
	(*CreateSurveyRequestCatalogRequest)(nil),                     // 0: mtechnavi.api.survey.CreateSurveyRequestCatalogRequest
	(*ListSurveyRequestCatalogsRequest)(nil),                      // 1: mtechnavi.api.survey.ListSurveyRequestCatalogsRequest
	(*ListSurveyRequestCatalogsResponse)(nil),                     // 2: mtechnavi.api.survey.ListSurveyRequestCatalogsResponse
	(*GetSurveyRequestCatalogRequest)(nil),                        // 3: mtechnavi.api.survey.GetSurveyRequestCatalogRequest
	(*UpdateSurveyRequestCatalogRequest)(nil),                     // 4: mtechnavi.api.survey.UpdateSurveyRequestCatalogRequest
	(*DeleteSurveyRequestCatalogRequest)(nil),                     // 5: mtechnavi.api.survey.DeleteSurveyRequestCatalogRequest
	(*CreateSurveyBaseRequestRequest)(nil),                        // 6: mtechnavi.api.survey.CreateSurveyBaseRequestRequest
	(*UpdateSurveyBaseRequestRequest)(nil),                        // 7: mtechnavi.api.survey.UpdateSurveyBaseRequestRequest
	(*DeleteSurveyBaseRequestRequest)(nil),                        // 8: mtechnavi.api.survey.DeleteSurveyBaseRequestRequest
	(*ApprovalRequestSurveyBaseRequestRequest)(nil),               // 9: mtechnavi.api.survey.ApprovalRequestSurveyBaseRequestRequest
	(*ApprovalRequestSurveyBaseRequestResponse)(nil),              // 10: mtechnavi.api.survey.ApprovalRequestSurveyBaseRequestResponse
	(*RejectSurveyBaseRequestRequest)(nil),                        // 11: mtechnavi.api.survey.RejectSurveyBaseRequestRequest
	(*RejectSurveyBaseRequestResponse)(nil),                       // 12: mtechnavi.api.survey.RejectSurveyBaseRequestResponse
	(*ApproveSurveyBaseRequestRequest)(nil),                       // 13: mtechnavi.api.survey.ApproveSurveyBaseRequestRequest
	(*ApproveSurveyBaseRequestResponse)(nil),                      // 14: mtechnavi.api.survey.ApproveSurveyBaseRequestResponse
	(*GetSurveyRequestRequest)(nil),                               // 15: mtechnavi.api.survey.GetSurveyRequestRequest
	(*UpdateSurveyRequestRequest)(nil),                            // 16: mtechnavi.api.survey.UpdateSurveyRequestRequest
	(*UpdateSystemNotificationUsersInSurveyRequestRequest)(nil),   // 17: mtechnavi.api.survey.UpdateSystemNotificationUsersInSurveyRequestRequest
	(*SharetoSurveyRequestRequest)(nil),                           // 18: mtechnavi.api.survey.SharetoSurveyRequestRequest
	(*SharetoSurveyRequestResponse)(nil),                          // 19: mtechnavi.api.survey.SharetoSurveyRequestResponse
	(*DiscardSurveyRequestRequest)(nil),                           // 20: mtechnavi.api.survey.DiscardSurveyRequestRequest
	(*DiscardSurveyRequestResponse)(nil),                          // 21: mtechnavi.api.survey.DiscardSurveyRequestResponse
	(*CompleteSurveyRequestRequest)(nil),                          // 22: mtechnavi.api.survey.CompleteSurveyRequestRequest
	(*CompleteSurveyRequestResponse)(nil),                         // 23: mtechnavi.api.survey.CompleteSurveyRequestResponse
	(*CreateSurveyReplyDueDateChangeResultRequest)(nil),           // 24: mtechnavi.api.survey.CreateSurveyReplyDueDateChangeResultRequest
	(*ListSurveyReplyDueDateChangeResultsRequest)(nil),            // 25: mtechnavi.api.survey.ListSurveyReplyDueDateChangeResultsRequest
	(*ListSurveyReplyDueDateChangeResultsResponse)(nil),           // 26: mtechnavi.api.survey.ListSurveyReplyDueDateChangeResultsResponse
	(*GetSurveyReplyDueDateChangeResultRequest)(nil),              // 27: mtechnavi.api.survey.GetSurveyReplyDueDateChangeResultRequest
	(*SharetoSurveyReplyDueDateChangeResultRequest)(nil),          // 28: mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeResultRequest
	(*SharetoSurveyReplyDueDateChangeResultResponse)(nil),         // 29: mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeResultResponse
	(*CreateSurveyReplyDueDateChangeRequestRequest)(nil),          // 30: mtechnavi.api.survey.CreateSurveyReplyDueDateChangeRequestRequest
	(*ListSurveyReplyDueDateChangeRequestsRequest)(nil),           // 31: mtechnavi.api.survey.ListSurveyReplyDueDateChangeRequestsRequest
	(*ListSurveyReplyDueDateChangeRequestsResponse)(nil),          // 32: mtechnavi.api.survey.ListSurveyReplyDueDateChangeRequestsResponse
	(*GetSurveyReplyDueDateChangeRequestRequest)(nil),             // 33: mtechnavi.api.survey.GetSurveyReplyDueDateChangeRequestRequest
	(*SharetoSurveyReplyDueDateChangeRequestRequest)(nil),         // 34: mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeRequestRequest
	(*SharetoSurveyReplyDueDateChangeRequestResponse)(nil),        // 35: mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeRequestResponse
	(*GetSurveyReceptionRequest)(nil),                             // 36: mtechnavi.api.survey.GetSurveyReceptionRequest
	(*UpdateSurveyReceptionRequest)(nil),                          // 37: mtechnavi.api.survey.UpdateSurveyReceptionRequest
	(*UpdateSystemNotificationUsersInSurveyReceptionRequest)(nil), // 38: mtechnavi.api.survey.UpdateSystemNotificationUsersInSurveyReceptionRequest
	(*CreateSurveyResultRequest)(nil),                             // 39: mtechnavi.api.survey.CreateSurveyResultRequest
	(*SharetoSurveyResultRequest)(nil),                            // 40: mtechnavi.api.survey.SharetoSurveyResultRequest
	(*SharetoSurveyResultResponse)(nil),                           // 41: mtechnavi.api.survey.SharetoSurveyResultResponse
	(*CreateSurveyResultChangeRequestRequest)(nil),                // 42: mtechnavi.api.survey.CreateSurveyResultChangeRequestRequest
	(*ListSurveyResultChangeRequestsRequest)(nil),                 // 43: mtechnavi.api.survey.ListSurveyResultChangeRequestsRequest
	(*ListSurveyResultChangeRequestsResponse)(nil),                // 44: mtechnavi.api.survey.ListSurveyResultChangeRequestsResponse
	(*GetSurveyResultChangeRequestRequest)(nil),                   // 45: mtechnavi.api.survey.GetSurveyResultChangeRequestRequest
	(*SharetoSurveyResultChangeRequestRequest)(nil),               // 46: mtechnavi.api.survey.SharetoSurveyResultChangeRequestRequest
	(*SharetoSurveyResultChangeRequestResponse)(nil),              // 47: mtechnavi.api.survey.SharetoSurveyResultChangeRequestResponse
	(*CreateSurveyReminderRequest)(nil),                           // 48: mtechnavi.api.survey.CreateSurveyReminderRequest
	(*ListSurveyRemindersRequest)(nil),                            // 49: mtechnavi.api.survey.ListSurveyRemindersRequest
	(*ListSurveyRemindersResponse)(nil),                           // 50: mtechnavi.api.survey.ListSurveyRemindersResponse
	(*GetSurveyReminderRequest)(nil),                              // 51: mtechnavi.api.survey.GetSurveyReminderRequest
	(*SharetoSurveyReminderRequest)(nil),                          // 52: mtechnavi.api.survey.SharetoSurveyReminderRequest
	(*SharetoSurveyReminderResponse)(nil),                         // 53: mtechnavi.api.survey.SharetoSurveyReminderResponse
	(*ListHistorysRequest)(nil),                                   // 54: mtechnavi.api.survey.ListHistorysRequest
	(*ListHistorysResponse)(nil),                                  // 55: mtechnavi.api.survey.ListHistorysResponse
	(*SharetoDiscardRequest)(nil),                                 // 56: mtechnavi.api.survey.SharetoDiscardRequest
	(*SharetoDiscardResponse)(nil),                                // 57: mtechnavi.api.survey.SharetoDiscardResponse
	(*SharetoCompleteRequest)(nil),                                // 58: mtechnavi.api.survey.SharetoCompleteRequest
	(*SharetoCompleteResponse)(nil),                               // 59: mtechnavi.api.survey.SharetoCompleteResponse
	(*SharetoOpenedRequest)(nil),                                  // 60: mtechnavi.api.survey.SharetoOpenedRequest
	(*SharetoOpenedResponse)(nil),                                 // 61: mtechnavi.api.survey.SharetoOpenedResponse
	(*ExportSurveyRequestsRequest)(nil),                           // 62: mtechnavi.api.survey.ExportSurveyRequestsRequest
	(*ExportSurveyRequestsResponse)(nil),                          // 63: mtechnavi.api.survey.ExportSurveyRequestsResponse
	(*ListSurveyRequestFormatsRequest)(nil),                       // 64: mtechnavi.api.survey.ListSurveyRequestFormatsRequest
	(*ListSurveyRequestFormatsResponse)(nil),                      // 65: mtechnavi.api.survey.ListSurveyRequestFormatsResponse
	(*SharedGetSurveyRequestRequest)(nil),                         // 66: mtechnavi.api.survey.SharedGetSurveyRequestRequest
	(*SharedListSurveyReplyDueDateChangeResultsRequest)(nil),      // 67: mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeResultsRequest
	(*SharedListSurveyReplyDueDateChangeResultsResponse)(nil),     // 68: mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeResultsResponse
	(*SharedGetSurveyReplyDueDateChangeResultRequest)(nil),        // 69: mtechnavi.api.survey.SharedGetSurveyReplyDueDateChangeResultRequest
	(*SharedListSurveyRemindersRequest)(nil),                      // 70: mtechnavi.api.survey.SharedListSurveyRemindersRequest
	(*SharedListSurveyRemindersResponse)(nil),                     // 71: mtechnavi.api.survey.SharedListSurveyRemindersResponse
	(*SharedGetSurveyReminderRequest)(nil),                        // 72: mtechnavi.api.survey.SharedGetSurveyReminderRequest
	(*SharedListSurveyReplyDueDateChangeRequestsRequest)(nil),     // 73: mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeRequestsRequest
	(*SharedListSurveyReplyDueDateChangeRequestsResponse)(nil),    // 74: mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeRequestsResponse
	(*SharedGetSurveyReplyDueDateChangeRequestRequest)(nil),       // 75: mtechnavi.api.survey.SharedGetSurveyReplyDueDateChangeRequestRequest
	(*SharedGetSurveyResultRequest)(nil),                          // 76: mtechnavi.api.survey.SharedGetSurveyResultRequest
	(*SharedListSurveyResultChangeRequestsRequest)(nil),           // 77: mtechnavi.api.survey.SharedListSurveyResultChangeRequestsRequest
	(*SurveyResultChangeRequestsResponse)(nil),                    // 78: mtechnavi.api.survey.SurveyResultChangeRequestsResponse
	(*SharedGetSurveyResultChangeRequestRequest)(nil),             // 79: mtechnavi.api.survey.SharedGetSurveyResultChangeRequestRequest
	(*ExpandedListSurveyRequestContentsRequest)(nil),              // 80: mtechnavi.api.survey.ExpandedListSurveyRequestContentsRequest
	(*ExpandedListSurveyRequestContentsResponse)(nil),             // 81: mtechnavi.api.survey.ExpandedListSurveyRequestContentsResponse
	(*ExpandedGetSurveyRequestContentRequest)(nil),                // 82: mtechnavi.api.survey.ExpandedGetSurveyRequestContentRequest
	(*ListSurveyBaseRequestContentsRequest)(nil),                  // 83: mtechnavi.api.survey.ListSurveyBaseRequestContentsRequest
	(*ListSurveyBaseRequestContentsResponse)(nil),                 // 84: mtechnavi.api.survey.ListSurveyBaseRequestContentsResponse
	(*GetSurveyBaseRequestContentRequest)(nil),                    // 85: mtechnavi.api.survey.GetSurveyBaseRequestContentRequest
	(*ListSurveyRequestContentsRequest)(nil),                      // 86: mtechnavi.api.survey.ListSurveyRequestContentsRequest
	(*ListSurveyRequestContentsResponse)(nil),                     // 87: mtechnavi.api.survey.ListSurveyRequestContentsResponse
	(*GetSurveyRequestContentRequest)(nil),                        // 88: mtechnavi.api.survey.GetSurveyRequestContentRequest
	(*ListSurveyReceptionContentsRequest)(nil),                    // 89: mtechnavi.api.survey.ListSurveyReceptionContentsRequest
	(*ListSurveyReceptionContentsResponse)(nil),                   // 90: mtechnavi.api.survey.ListSurveyReceptionContentsResponse
	(*GetSurveyReceptionContentRequest)(nil),                      // 91: mtechnavi.api.survey.GetSurveyReceptionContentRequest
	(*UncompletedListSurveyRequestRequest)(nil),                   // 92: mtechnavi.api.survey.UncompletedListSurveyRequestRequest
	(*UncompletedListSurveyRequestResponse)(nil),                  // 93: mtechnavi.api.survey.UncompletedListSurveyRequestResponse
	(*UnchangedListSurveyReplyDueDateChangeRequestRequest)(nil),   // 94: mtechnavi.api.survey.UnchangedListSurveyReplyDueDateChangeRequestRequest
	(*UnchangedListSurveyReplyDueDateChangeRequestResponse)(nil),  // 95: mtechnavi.api.survey.UnchangedListSurveyReplyDueDateChangeRequestResponse
	(*ExportedSurveyResultFileRequest)(nil),                       // 96: mtechnavi.api.survey.ExportedSurveyResultFileRequest
	(*ExportedSurveyResultFileResponse)(nil),                      // 97: mtechnavi.api.survey.ExportedSurveyResultFileResponse
	(*OpenSurveyRequestRequest)(nil),                              // 98: mtechnavi.api.survey.OpenSurveyRequestRequest
	(*OpenSurveyRequestResponse)(nil),                             // 99: mtechnavi.api.survey.OpenSurveyRequestResponse
	(*ExpandedListSurveyRequestContentsRequest_DataFilter)(nil),   // 100: mtechnavi.api.survey.ExpandedListSurveyRequestContentsRequest.DataFilter
	(*ListSurveyBaseRequestContentsRequest_DataFilter)(nil),       // 101: mtechnavi.api.survey.ListSurveyBaseRequestContentsRequest.DataFilter
	(*ListSurveyRequestContentsRequest_DataFilter)(nil),           // 102: mtechnavi.api.survey.ListSurveyRequestContentsRequest.DataFilter
	(*ListSurveyReceptionContentsRequest_DataFilter)(nil),         // 103: mtechnavi.api.survey.ListSurveyReceptionContentsRequest.DataFilter
	(*SurveyRequestCatalog)(nil),                                  // 104: mtechnavi.api.survey.SurveyRequestCatalog
	(*SurveyBaseRequest)(nil),                                     // 105: mtechnavi.api.survey.SurveyBaseRequest
	(*protobuf.StaffReference)(nil),                               // 106: sharelib.StaffReference
	(*protobuf.ComponentUnitReference)(nil),                       // 107: sharelib.ComponentUnitReference
	(*SurveyRequest)(nil),                                         // 108: mtechnavi.api.survey.SurveyRequest
	(*protobuf.UserReference)(nil),                                // 109: sharelib.UserReference
	(*Discard)(nil),                                               // 110: mtechnavi.api.survey.Discard
	(*Complete)(nil),                                              // 111: mtechnavi.api.survey.Complete
	(*SurveyReplyDueDateChangeResult)(nil),                        // 112: mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	(*SurveyReplyDueDateChangeRequest)(nil),                       // 113: mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	(*SurveyReception)(nil),                                       // 114: mtechnavi.api.survey.SurveyReception
	(*SurveyResult)(nil),                                          // 115: mtechnavi.api.survey.SurveyResult
	(*SurveyResultChangeRequest)(nil),                             // 116: mtechnavi.api.survey.SurveyResultChangeRequest
	(*SurveyReminder)(nil),                                        // 117: mtechnavi.api.survey.SurveyReminder
	(*History)(nil),                                               // 118: mtechnavi.api.survey.History
	(*Opened)(nil),                                                // 119: mtechnavi.api.survey.Opened
	(*protobuf.FileFormat)(nil),                                   // 120: sharelib.FileFormat
	(*SurveyRequestContent)(nil),                                  // 121: mtechnavi.api.survey.SurveyRequestContent
	(*SurveyBaseRequestContent)(nil),                              // 122: mtechnavi.api.survey.SurveyBaseRequestContent
	(*SurveyReceptionContent)(nil),                                // 123: mtechnavi.api.survey.SurveyReceptionContent
	(*emptypb.Empty)(nil),                                         // 124: google.protobuf.Empty
}
var file_survey_proto_depIdxs = []int32{
	104, // 0: mtechnavi.api.survey.CreateSurveyRequestCatalogRequest.survey_request_catalog:type_name -> mtechnavi.api.survey.SurveyRequestCatalog
	104, // 1: mtechnavi.api.survey.ListSurveyRequestCatalogsResponse.items:type_name -> mtechnavi.api.survey.SurveyRequestCatalog
	104, // 2: mtechnavi.api.survey.UpdateSurveyRequestCatalogRequest.survey_request_catalog:type_name -> mtechnavi.api.survey.SurveyRequestCatalog
	104, // 3: mtechnavi.api.survey.DeleteSurveyRequestCatalogRequest.survey_request_catalog:type_name -> mtechnavi.api.survey.SurveyRequestCatalog
	105, // 4: mtechnavi.api.survey.CreateSurveyBaseRequestRequest.survey_base_request:type_name -> mtechnavi.api.survey.SurveyBaseRequest
	105, // 5: mtechnavi.api.survey.UpdateSurveyBaseRequestRequest.survey_base_request:type_name -> mtechnavi.api.survey.SurveyBaseRequest
	105, // 6: mtechnavi.api.survey.DeleteSurveyBaseRequestRequest.survey_base_request:type_name -> mtechnavi.api.survey.SurveyBaseRequest
	106, // 7: mtechnavi.api.survey.ApprovalRequestSurveyBaseRequestRequest.approval_plan_staff:type_name -> sharelib.StaffReference
	107, // 8: mtechnavi.api.survey.ApprovalRequestSurveyBaseRequestRequest.approval_plan_organization:type_name -> sharelib.ComponentUnitReference
	108, // 9: mtechnavi.api.survey.UpdateSurveyRequestRequest.survey_request:type_name -> mtechnavi.api.survey.SurveyRequest
	109, // 10: mtechnavi.api.survey.UpdateSystemNotificationUsersInSurveyRequestRequest.system_notification_users:type_name -> sharelib.UserReference
	110, // 11: mtechnavi.api.survey.DiscardSurveyRequestResponse.discard:type_name -> mtechnavi.api.survey.Discard
	111, // 12: mtechnavi.api.survey.CompleteSurveyRequestResponse.complete:type_name -> mtechnavi.api.survey.Complete
	112, // 13: mtechnavi.api.survey.CreateSurveyReplyDueDateChangeResultRequest.survey_reply_due_date_change_result:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	112, // 14: mtechnavi.api.survey.ListSurveyReplyDueDateChangeResultsResponse.items:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	112, // 15: mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeResultRequest.survey_reply_due_date_change_result:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	113, // 16: mtechnavi.api.survey.CreateSurveyReplyDueDateChangeRequestRequest.survey_reply_due_date_change_request:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	113, // 17: mtechnavi.api.survey.ListSurveyReplyDueDateChangeRequestsResponse.items:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	113, // 18: mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeRequestRequest.survey_reply_due_date_change_request:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	114, // 19: mtechnavi.api.survey.UpdateSurveyReceptionRequest.survey_reception:type_name -> mtechnavi.api.survey.SurveyReception
	109, // 20: mtechnavi.api.survey.UpdateSystemNotificationUsersInSurveyReceptionRequest.system_notification_users:type_name -> sharelib.UserReference
	115, // 21: mtechnavi.api.survey.CreateSurveyResultRequest.survey_result:type_name -> mtechnavi.api.survey.SurveyResult
	115, // 22: mtechnavi.api.survey.SharetoSurveyResultRequest.survey_result:type_name -> mtechnavi.api.survey.SurveyResult
	116, // 23: mtechnavi.api.survey.CreateSurveyResultChangeRequestRequest.survey_result_change_request:type_name -> mtechnavi.api.survey.SurveyResultChangeRequest
	116, // 24: mtechnavi.api.survey.ListSurveyResultChangeRequestsResponse.items:type_name -> mtechnavi.api.survey.SurveyResultChangeRequest
	116, // 25: mtechnavi.api.survey.SharetoSurveyResultChangeRequestRequest.survey_result_change_request:type_name -> mtechnavi.api.survey.SurveyResultChangeRequest
	117, // 26: mtechnavi.api.survey.CreateSurveyReminderRequest.survey_reminder:type_name -> mtechnavi.api.survey.SurveyReminder
	117, // 27: mtechnavi.api.survey.ListSurveyRemindersResponse.items:type_name -> mtechnavi.api.survey.SurveyReminder
	117, // 28: mtechnavi.api.survey.SharetoSurveyReminderRequest.survey_reminder:type_name -> mtechnavi.api.survey.SurveyReminder
	118, // 29: mtechnavi.api.survey.ListHistorysResponse.items:type_name -> mtechnavi.api.survey.History
	110, // 30: mtechnavi.api.survey.SharetoDiscardRequest.discard:type_name -> mtechnavi.api.survey.Discard
	111, // 31: mtechnavi.api.survey.SharetoCompleteRequest.complete:type_name -> mtechnavi.api.survey.Complete
	119, // 32: mtechnavi.api.survey.SharetoOpenedRequest.opened:type_name -> mtechnavi.api.survey.Opened
	120, // 33: mtechnavi.api.survey.ExportSurveyRequestsRequest.file_format:type_name -> sharelib.FileFormat
	120, // 34: mtechnavi.api.survey.ListSurveyRequestFormatsResponse.items:type_name -> sharelib.FileFormat
	112, // 35: mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeResultsResponse.items:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	117, // 36: mtechnavi.api.survey.SharedListSurveyRemindersResponse.items:type_name -> mtechnavi.api.survey.SurveyReminder
	113, // 37: mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeRequestsResponse.items:type_name -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	116, // 38: mtechnavi.api.survey.SurveyResultChangeRequestsResponse.items:type_name -> mtechnavi.api.survey.SurveyResultChangeRequest
	100, // 39: mtechnavi.api.survey.ExpandedListSurveyRequestContentsRequest.data_filter:type_name -> mtechnavi.api.survey.ExpandedListSurveyRequestContentsRequest.DataFilter
	121, // 40: mtechnavi.api.survey.ExpandedListSurveyRequestContentsResponse.items:type_name -> mtechnavi.api.survey.SurveyRequestContent
	101, // 41: mtechnavi.api.survey.ListSurveyBaseRequestContentsRequest.data_filter:type_name -> mtechnavi.api.survey.ListSurveyBaseRequestContentsRequest.DataFilter
	122, // 42: mtechnavi.api.survey.ListSurveyBaseRequestContentsResponse.items:type_name -> mtechnavi.api.survey.SurveyBaseRequestContent
	102, // 43: mtechnavi.api.survey.ListSurveyRequestContentsRequest.data_filter:type_name -> mtechnavi.api.survey.ListSurveyRequestContentsRequest.DataFilter
	121, // 44: mtechnavi.api.survey.ListSurveyRequestContentsResponse.items:type_name -> mtechnavi.api.survey.SurveyRequestContent
	103, // 45: mtechnavi.api.survey.ListSurveyReceptionContentsRequest.data_filter:type_name -> mtechnavi.api.survey.ListSurveyReceptionContentsRequest.DataFilter
	123, // 46: mtechnavi.api.survey.ListSurveyReceptionContentsResponse.items:type_name -> mtechnavi.api.survey.SurveyReceptionContent
	123, // 47: mtechnavi.api.survey.UncompletedListSurveyRequestResponse.items:type_name -> mtechnavi.api.survey.SurveyReceptionContent
	121, // 48: mtechnavi.api.survey.UnchangedListSurveyReplyDueDateChangeRequestResponse.items:type_name -> mtechnavi.api.survey.SurveyRequestContent
	119, // 49: mtechnavi.api.survey.OpenSurveyRequestResponse.opened:type_name -> mtechnavi.api.survey.Opened
	54,  // 50: mtechnavi.api.survey.SurveyService.ListHistorys:input_type -> mtechnavi.api.survey.ListHistorysRequest
	56,  // 51: mtechnavi.api.survey.SurveyService.SharetoDiscard:input_type -> mtechnavi.api.survey.SharetoDiscardRequest
	58,  // 52: mtechnavi.api.survey.SurveyService.SharetoComplete:input_type -> mtechnavi.api.survey.SharetoCompleteRequest
	60,  // 53: mtechnavi.api.survey.SurveyService.SharetoOpened:input_type -> mtechnavi.api.survey.SharetoOpenedRequest
	0,   // 54: mtechnavi.api.survey.SurveySenderService.CreateSurveyRequestCatalog:input_type -> mtechnavi.api.survey.CreateSurveyRequestCatalogRequest
	1,   // 55: mtechnavi.api.survey.SurveySenderService.ListSurveyRequestCatalogs:input_type -> mtechnavi.api.survey.ListSurveyRequestCatalogsRequest
	3,   // 56: mtechnavi.api.survey.SurveySenderService.GetSurveyRequestCatalog:input_type -> mtechnavi.api.survey.GetSurveyRequestCatalogRequest
	4,   // 57: mtechnavi.api.survey.SurveySenderService.UpdateSurveyRequestCatalog:input_type -> mtechnavi.api.survey.UpdateSurveyRequestCatalogRequest
	5,   // 58: mtechnavi.api.survey.SurveySenderService.DeleteSurveyRequestCatalog:input_type -> mtechnavi.api.survey.DeleteSurveyRequestCatalogRequest
	6,   // 59: mtechnavi.api.survey.SurveySenderService.CreateSurveyBaseRequest:input_type -> mtechnavi.api.survey.CreateSurveyBaseRequestRequest
	7,   // 60: mtechnavi.api.survey.SurveySenderService.UpdateSurveyBaseRequest:input_type -> mtechnavi.api.survey.UpdateSurveyBaseRequestRequest
	8,   // 61: mtechnavi.api.survey.SurveySenderService.DeleteSurveyBaseRequest:input_type -> mtechnavi.api.survey.DeleteSurveyBaseRequestRequest
	9,   // 62: mtechnavi.api.survey.SurveySenderService.ApprovalRequestSurveyBaseRequest:input_type -> mtechnavi.api.survey.ApprovalRequestSurveyBaseRequestRequest
	11,  // 63: mtechnavi.api.survey.SurveySenderService.RejectSurveyBaseRequest:input_type -> mtechnavi.api.survey.RejectSurveyBaseRequestRequest
	13,  // 64: mtechnavi.api.survey.SurveySenderService.ApproveSurveyBaseRequest:input_type -> mtechnavi.api.survey.ApproveSurveyBaseRequestRequest
	15,  // 65: mtechnavi.api.survey.SurveySenderService.GetSurveyRequest:input_type -> mtechnavi.api.survey.GetSurveyRequestRequest
	16,  // 66: mtechnavi.api.survey.SurveySenderService.UpdateSurveyRequest:input_type -> mtechnavi.api.survey.UpdateSurveyRequestRequest
	17,  // 67: mtechnavi.api.survey.SurveySenderService.UpdateSystemNotificationUsersInSurveyRequest:input_type -> mtechnavi.api.survey.UpdateSystemNotificationUsersInSurveyRequestRequest
	18,  // 68: mtechnavi.api.survey.SurveySenderService.SharetoSurveyRequest:input_type -> mtechnavi.api.survey.SharetoSurveyRequestRequest
	20,  // 69: mtechnavi.api.survey.SurveySenderService.DiscardSurveyRequest:input_type -> mtechnavi.api.survey.DiscardSurveyRequestRequest
	22,  // 70: mtechnavi.api.survey.SurveySenderService.CompleteSurveyRequest:input_type -> mtechnavi.api.survey.CompleteSurveyRequestRequest
	24,  // 71: mtechnavi.api.survey.SurveySenderService.CreateSurveyReplyDueDateChangeResult:input_type -> mtechnavi.api.survey.CreateSurveyReplyDueDateChangeResultRequest
	25,  // 72: mtechnavi.api.survey.SurveySenderService.ListSurveyReplyDueDateChangeResults:input_type -> mtechnavi.api.survey.ListSurveyReplyDueDateChangeResultsRequest
	27,  // 73: mtechnavi.api.survey.SurveySenderService.GetSurveyReplyDueDateChangeResult:input_type -> mtechnavi.api.survey.GetSurveyReplyDueDateChangeResultRequest
	28,  // 74: mtechnavi.api.survey.SurveySenderService.SharetoSurveyReplyDueDateChangeResult:input_type -> mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeResultRequest
	42,  // 75: mtechnavi.api.survey.SurveySenderService.CreateSurveyResultChangeRequest:input_type -> mtechnavi.api.survey.CreateSurveyResultChangeRequestRequest
	43,  // 76: mtechnavi.api.survey.SurveySenderService.ListSurveyResultChangeRequests:input_type -> mtechnavi.api.survey.ListSurveyResultChangeRequestsRequest
	45,  // 77: mtechnavi.api.survey.SurveySenderService.GetSurveyResultChangeRequest:input_type -> mtechnavi.api.survey.GetSurveyResultChangeRequestRequest
	46,  // 78: mtechnavi.api.survey.SurveySenderService.SharetoSurveyResultChangeRequest:input_type -> mtechnavi.api.survey.SharetoSurveyResultChangeRequestRequest
	48,  // 79: mtechnavi.api.survey.SurveySenderService.CreateSurveyReminder:input_type -> mtechnavi.api.survey.CreateSurveyReminderRequest
	49,  // 80: mtechnavi.api.survey.SurveySenderService.ListSurveyReminders:input_type -> mtechnavi.api.survey.ListSurveyRemindersRequest
	51,  // 81: mtechnavi.api.survey.SurveySenderService.GetSurveyReminder:input_type -> mtechnavi.api.survey.GetSurveyReminderRequest
	52,  // 82: mtechnavi.api.survey.SurveySenderService.SharetoSurveyReminder:input_type -> mtechnavi.api.survey.SharetoSurveyReminderRequest
	62,  // 83: mtechnavi.api.survey.SurveySenderService.ExportSurveyRequests:input_type -> mtechnavi.api.survey.ExportSurveyRequestsRequest
	64,  // 84: mtechnavi.api.survey.SurveySenderService.ListSurveyRequestFormats:input_type -> mtechnavi.api.survey.ListSurveyRequestFormatsRequest
	73,  // 85: mtechnavi.api.survey.SurveySenderService.SharedListSurveyReplyDueDateChangeRequests:input_type -> mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeRequestsRequest
	75,  // 86: mtechnavi.api.survey.SurveySenderService.SharedGetSurveyReplyDueDateChangeRequest:input_type -> mtechnavi.api.survey.SharedGetSurveyReplyDueDateChangeRequestRequest
	76,  // 87: mtechnavi.api.survey.SurveySenderService.SharedGetSurveyResult:input_type -> mtechnavi.api.survey.SharedGetSurveyResultRequest
	77,  // 88: mtechnavi.api.survey.SurveySenderService.SharedListSurveyResultChangeRequests:input_type -> mtechnavi.api.survey.SharedListSurveyResultChangeRequestsRequest
	79,  // 89: mtechnavi.api.survey.SurveySenderService.SharedGetSurveyResultChangeRequest:input_type -> mtechnavi.api.survey.SharedGetSurveyResultChangeRequestRequest
	80,  // 90: mtechnavi.api.survey.SurveySenderService.ExpandedListSurveyRequestContents:input_type -> mtechnavi.api.survey.ExpandedListSurveyRequestContentsRequest
	82,  // 91: mtechnavi.api.survey.SurveySenderService.ExpandedGetSurveyRequestContent:input_type -> mtechnavi.api.survey.ExpandedGetSurveyRequestContentRequest
	83,  // 92: mtechnavi.api.survey.SurveySenderService.ListSurveyBaseRequestContents:input_type -> mtechnavi.api.survey.ListSurveyBaseRequestContentsRequest
	85,  // 93: mtechnavi.api.survey.SurveySenderService.GetSurveyBaseRequestContent:input_type -> mtechnavi.api.survey.GetSurveyBaseRequestContentRequest
	86,  // 94: mtechnavi.api.survey.SurveySenderService.ListSurveyRequestContents:input_type -> mtechnavi.api.survey.ListSurveyRequestContentsRequest
	88,  // 95: mtechnavi.api.survey.SurveySenderService.GetSurveyRequestContent:input_type -> mtechnavi.api.survey.GetSurveyRequestContentRequest
	96,  // 96: mtechnavi.api.survey.SurveySenderService.ExportedSurveyResultFile:input_type -> mtechnavi.api.survey.ExportedSurveyResultFileRequest
	30,  // 97: mtechnavi.api.survey.SurveyReceiverService.CreateSurveyReplyDueDateChangeRequest:input_type -> mtechnavi.api.survey.CreateSurveyReplyDueDateChangeRequestRequest
	31,  // 98: mtechnavi.api.survey.SurveyReceiverService.ListSurveyReplyDueDateChangeRequests:input_type -> mtechnavi.api.survey.ListSurveyReplyDueDateChangeRequestsRequest
	33,  // 99: mtechnavi.api.survey.SurveyReceiverService.GetSurveyReplyDueDateChangeRequest:input_type -> mtechnavi.api.survey.GetSurveyReplyDueDateChangeRequestRequest
	34,  // 100: mtechnavi.api.survey.SurveyReceiverService.SharetoSurveyReplyDueDateChangeRequest:input_type -> mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeRequestRequest
	36,  // 101: mtechnavi.api.survey.SurveyReceiverService.GetSurveyReception:input_type -> mtechnavi.api.survey.GetSurveyReceptionRequest
	37,  // 102: mtechnavi.api.survey.SurveyReceiverService.UpdateSurveyReception:input_type -> mtechnavi.api.survey.UpdateSurveyReceptionRequest
	38,  // 103: mtechnavi.api.survey.SurveyReceiverService.UpdateSystemNotificationUsersInSurveyReception:input_type -> mtechnavi.api.survey.UpdateSystemNotificationUsersInSurveyReceptionRequest
	39,  // 104: mtechnavi.api.survey.SurveyReceiverService.CreateSurveyResult:input_type -> mtechnavi.api.survey.CreateSurveyResultRequest
	40,  // 105: mtechnavi.api.survey.SurveyReceiverService.SharetoSurveyResult:input_type -> mtechnavi.api.survey.SharetoSurveyResultRequest
	66,  // 106: mtechnavi.api.survey.SurveyReceiverService.SharedGetSurveyRequest:input_type -> mtechnavi.api.survey.SharedGetSurveyRequestRequest
	67,  // 107: mtechnavi.api.survey.SurveyReceiverService.SharedListSurveyReplyDueDateChangeResults:input_type -> mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeResultsRequest
	69,  // 108: mtechnavi.api.survey.SurveyReceiverService.SharedGetSurveyReplyDueDateChangeResult:input_type -> mtechnavi.api.survey.SharedGetSurveyReplyDueDateChangeResultRequest
	70,  // 109: mtechnavi.api.survey.SurveyReceiverService.SharedListSurveyReminders:input_type -> mtechnavi.api.survey.SharedListSurveyRemindersRequest
	72,  // 110: mtechnavi.api.survey.SurveyReceiverService.SharedGetSurveyReminder:input_type -> mtechnavi.api.survey.SharedGetSurveyReminderRequest
	89,  // 111: mtechnavi.api.survey.SurveyReceiverService.ListSurveyReceptionContents:input_type -> mtechnavi.api.survey.ListSurveyReceptionContentsRequest
	91,  // 112: mtechnavi.api.survey.SurveyReceiverService.GetSurveyReceptionContent:input_type -> mtechnavi.api.survey.GetSurveyReceptionContentRequest
	98,  // 113: mtechnavi.api.survey.SurveyReceiverService.OpenSurveyRequest:input_type -> mtechnavi.api.survey.OpenSurveyRequestRequest
	92,  // 114: mtechnavi.api.survey.SurveyTaskListService.UncompletedListSurveyRequest:input_type -> mtechnavi.api.survey.UncompletedListSurveyRequestRequest
	94,  // 115: mtechnavi.api.survey.SurveyTaskListService.UnchangedListSurveyReplyDueDateChangeRequest:input_type -> mtechnavi.api.survey.UnchangedListSurveyReplyDueDateChangeRequestRequest
	55,  // 116: mtechnavi.api.survey.SurveyService.ListHistorys:output_type -> mtechnavi.api.survey.ListHistorysResponse
	57,  // 117: mtechnavi.api.survey.SurveyService.SharetoDiscard:output_type -> mtechnavi.api.survey.SharetoDiscardResponse
	59,  // 118: mtechnavi.api.survey.SurveyService.SharetoComplete:output_type -> mtechnavi.api.survey.SharetoCompleteResponse
	61,  // 119: mtechnavi.api.survey.SurveyService.SharetoOpened:output_type -> mtechnavi.api.survey.SharetoOpenedResponse
	104, // 120: mtechnavi.api.survey.SurveySenderService.CreateSurveyRequestCatalog:output_type -> mtechnavi.api.survey.SurveyRequestCatalog
	2,   // 121: mtechnavi.api.survey.SurveySenderService.ListSurveyRequestCatalogs:output_type -> mtechnavi.api.survey.ListSurveyRequestCatalogsResponse
	104, // 122: mtechnavi.api.survey.SurveySenderService.GetSurveyRequestCatalog:output_type -> mtechnavi.api.survey.SurveyRequestCatalog
	104, // 123: mtechnavi.api.survey.SurveySenderService.UpdateSurveyRequestCatalog:output_type -> mtechnavi.api.survey.SurveyRequestCatalog
	124, // 124: mtechnavi.api.survey.SurveySenderService.DeleteSurveyRequestCatalog:output_type -> google.protobuf.Empty
	105, // 125: mtechnavi.api.survey.SurveySenderService.CreateSurveyBaseRequest:output_type -> mtechnavi.api.survey.SurveyBaseRequest
	105, // 126: mtechnavi.api.survey.SurveySenderService.UpdateSurveyBaseRequest:output_type -> mtechnavi.api.survey.SurveyBaseRequest
	124, // 127: mtechnavi.api.survey.SurveySenderService.DeleteSurveyBaseRequest:output_type -> google.protobuf.Empty
	10,  // 128: mtechnavi.api.survey.SurveySenderService.ApprovalRequestSurveyBaseRequest:output_type -> mtechnavi.api.survey.ApprovalRequestSurveyBaseRequestResponse
	12,  // 129: mtechnavi.api.survey.SurveySenderService.RejectSurveyBaseRequest:output_type -> mtechnavi.api.survey.RejectSurveyBaseRequestResponse
	14,  // 130: mtechnavi.api.survey.SurveySenderService.ApproveSurveyBaseRequest:output_type -> mtechnavi.api.survey.ApproveSurveyBaseRequestResponse
	108, // 131: mtechnavi.api.survey.SurveySenderService.GetSurveyRequest:output_type -> mtechnavi.api.survey.SurveyRequest
	108, // 132: mtechnavi.api.survey.SurveySenderService.UpdateSurveyRequest:output_type -> mtechnavi.api.survey.SurveyRequest
	108, // 133: mtechnavi.api.survey.SurveySenderService.UpdateSystemNotificationUsersInSurveyRequest:output_type -> mtechnavi.api.survey.SurveyRequest
	19,  // 134: mtechnavi.api.survey.SurveySenderService.SharetoSurveyRequest:output_type -> mtechnavi.api.survey.SharetoSurveyRequestResponse
	21,  // 135: mtechnavi.api.survey.SurveySenderService.DiscardSurveyRequest:output_type -> mtechnavi.api.survey.DiscardSurveyRequestResponse
	23,  // 136: mtechnavi.api.survey.SurveySenderService.CompleteSurveyRequest:output_type -> mtechnavi.api.survey.CompleteSurveyRequestResponse
	112, // 137: mtechnavi.api.survey.SurveySenderService.CreateSurveyReplyDueDateChangeResult:output_type -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	26,  // 138: mtechnavi.api.survey.SurveySenderService.ListSurveyReplyDueDateChangeResults:output_type -> mtechnavi.api.survey.ListSurveyReplyDueDateChangeResultsResponse
	112, // 139: mtechnavi.api.survey.SurveySenderService.GetSurveyReplyDueDateChangeResult:output_type -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	29,  // 140: mtechnavi.api.survey.SurveySenderService.SharetoSurveyReplyDueDateChangeResult:output_type -> mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeResultResponse
	116, // 141: mtechnavi.api.survey.SurveySenderService.CreateSurveyResultChangeRequest:output_type -> mtechnavi.api.survey.SurveyResultChangeRequest
	44,  // 142: mtechnavi.api.survey.SurveySenderService.ListSurveyResultChangeRequests:output_type -> mtechnavi.api.survey.ListSurveyResultChangeRequestsResponse
	116, // 143: mtechnavi.api.survey.SurveySenderService.GetSurveyResultChangeRequest:output_type -> mtechnavi.api.survey.SurveyResultChangeRequest
	47,  // 144: mtechnavi.api.survey.SurveySenderService.SharetoSurveyResultChangeRequest:output_type -> mtechnavi.api.survey.SharetoSurveyResultChangeRequestResponse
	117, // 145: mtechnavi.api.survey.SurveySenderService.CreateSurveyReminder:output_type -> mtechnavi.api.survey.SurveyReminder
	50,  // 146: mtechnavi.api.survey.SurveySenderService.ListSurveyReminders:output_type -> mtechnavi.api.survey.ListSurveyRemindersResponse
	117, // 147: mtechnavi.api.survey.SurveySenderService.GetSurveyReminder:output_type -> mtechnavi.api.survey.SurveyReminder
	53,  // 148: mtechnavi.api.survey.SurveySenderService.SharetoSurveyReminder:output_type -> mtechnavi.api.survey.SharetoSurveyReminderResponse
	63,  // 149: mtechnavi.api.survey.SurveySenderService.ExportSurveyRequests:output_type -> mtechnavi.api.survey.ExportSurveyRequestsResponse
	65,  // 150: mtechnavi.api.survey.SurveySenderService.ListSurveyRequestFormats:output_type -> mtechnavi.api.survey.ListSurveyRequestFormatsResponse
	74,  // 151: mtechnavi.api.survey.SurveySenderService.SharedListSurveyReplyDueDateChangeRequests:output_type -> mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeRequestsResponse
	113, // 152: mtechnavi.api.survey.SurveySenderService.SharedGetSurveyReplyDueDateChangeRequest:output_type -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	115, // 153: mtechnavi.api.survey.SurveySenderService.SharedGetSurveyResult:output_type -> mtechnavi.api.survey.SurveyResult
	78,  // 154: mtechnavi.api.survey.SurveySenderService.SharedListSurveyResultChangeRequests:output_type -> mtechnavi.api.survey.SurveyResultChangeRequestsResponse
	116, // 155: mtechnavi.api.survey.SurveySenderService.SharedGetSurveyResultChangeRequest:output_type -> mtechnavi.api.survey.SurveyResultChangeRequest
	81,  // 156: mtechnavi.api.survey.SurveySenderService.ExpandedListSurveyRequestContents:output_type -> mtechnavi.api.survey.ExpandedListSurveyRequestContentsResponse
	121, // 157: mtechnavi.api.survey.SurveySenderService.ExpandedGetSurveyRequestContent:output_type -> mtechnavi.api.survey.SurveyRequestContent
	84,  // 158: mtechnavi.api.survey.SurveySenderService.ListSurveyBaseRequestContents:output_type -> mtechnavi.api.survey.ListSurveyBaseRequestContentsResponse
	122, // 159: mtechnavi.api.survey.SurveySenderService.GetSurveyBaseRequestContent:output_type -> mtechnavi.api.survey.SurveyBaseRequestContent
	87,  // 160: mtechnavi.api.survey.SurveySenderService.ListSurveyRequestContents:output_type -> mtechnavi.api.survey.ListSurveyRequestContentsResponse
	121, // 161: mtechnavi.api.survey.SurveySenderService.GetSurveyRequestContent:output_type -> mtechnavi.api.survey.SurveyRequestContent
	97,  // 162: mtechnavi.api.survey.SurveySenderService.ExportedSurveyResultFile:output_type -> mtechnavi.api.survey.ExportedSurveyResultFileResponse
	113, // 163: mtechnavi.api.survey.SurveyReceiverService.CreateSurveyReplyDueDateChangeRequest:output_type -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	32,  // 164: mtechnavi.api.survey.SurveyReceiverService.ListSurveyReplyDueDateChangeRequests:output_type -> mtechnavi.api.survey.ListSurveyReplyDueDateChangeRequestsResponse
	113, // 165: mtechnavi.api.survey.SurveyReceiverService.GetSurveyReplyDueDateChangeRequest:output_type -> mtechnavi.api.survey.SurveyReplyDueDateChangeRequest
	35,  // 166: mtechnavi.api.survey.SurveyReceiverService.SharetoSurveyReplyDueDateChangeRequest:output_type -> mtechnavi.api.survey.SharetoSurveyReplyDueDateChangeRequestResponse
	114, // 167: mtechnavi.api.survey.SurveyReceiverService.GetSurveyReception:output_type -> mtechnavi.api.survey.SurveyReception
	114, // 168: mtechnavi.api.survey.SurveyReceiverService.UpdateSurveyReception:output_type -> mtechnavi.api.survey.SurveyReception
	114, // 169: mtechnavi.api.survey.SurveyReceiverService.UpdateSystemNotificationUsersInSurveyReception:output_type -> mtechnavi.api.survey.SurveyReception
	115, // 170: mtechnavi.api.survey.SurveyReceiverService.CreateSurveyResult:output_type -> mtechnavi.api.survey.SurveyResult
	41,  // 171: mtechnavi.api.survey.SurveyReceiverService.SharetoSurveyResult:output_type -> mtechnavi.api.survey.SharetoSurveyResultResponse
	108, // 172: mtechnavi.api.survey.SurveyReceiverService.SharedGetSurveyRequest:output_type -> mtechnavi.api.survey.SurveyRequest
	68,  // 173: mtechnavi.api.survey.SurveyReceiverService.SharedListSurveyReplyDueDateChangeResults:output_type -> mtechnavi.api.survey.SharedListSurveyReplyDueDateChangeResultsResponse
	112, // 174: mtechnavi.api.survey.SurveyReceiverService.SharedGetSurveyReplyDueDateChangeResult:output_type -> mtechnavi.api.survey.SurveyReplyDueDateChangeResult
	71,  // 175: mtechnavi.api.survey.SurveyReceiverService.SharedListSurveyReminders:output_type -> mtechnavi.api.survey.SharedListSurveyRemindersResponse
	117, // 176: mtechnavi.api.survey.SurveyReceiverService.SharedGetSurveyReminder:output_type -> mtechnavi.api.survey.SurveyReminder
	90,  // 177: mtechnavi.api.survey.SurveyReceiverService.ListSurveyReceptionContents:output_type -> mtechnavi.api.survey.ListSurveyReceptionContentsResponse
	123, // 178: mtechnavi.api.survey.SurveyReceiverService.GetSurveyReceptionContent:output_type -> mtechnavi.api.survey.SurveyReceptionContent
	99,  // 179: mtechnavi.api.survey.SurveyReceiverService.OpenSurveyRequest:output_type -> mtechnavi.api.survey.OpenSurveyRequestResponse
	93,  // 180: mtechnavi.api.survey.SurveyTaskListService.UncompletedListSurveyRequest:output_type -> mtechnavi.api.survey.UncompletedListSurveyRequestResponse
	95,  // 181: mtechnavi.api.survey.SurveyTaskListService.UnchangedListSurveyReplyDueDateChangeRequest:output_type -> mtechnavi.api.survey.UnchangedListSurveyReplyDueDateChangeRequestResponse
	116, // [116:182] is the sub-list for method output_type
	50,  // [50:116] is the sub-list for method input_type
	50,  // [50:50] is the sub-list for extension type_name
	50,  // [50:50] is the sub-list for extension extendee
	0,   // [0:50] is the sub-list for field type_name
}

func init() { file_survey_proto_init() }
func file_survey_proto_init() {
	if File_survey_proto != nil {
		return
	}
	file_surveyrequestcatalog_proto_init()
	file_surveyrequest_proto_init()
	file_surveyresult_proto_init()
	file_surveystatus_proto_init()
	file_surveynotification_proto_init()
	file_surveycontents_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_survey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyRequestCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestCatalogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestCatalogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyRequestCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyRequestCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSurveyRequestCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalRequestSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalRequestSurveyBaseRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectSurveyBaseRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveSurveyBaseRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemNotificationUsersInSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardSurveyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteSurveyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyReplyDueDateChangeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReplyDueDateChangeResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReplyDueDateChangeResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyReplyDueDateChangeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyReplyDueDateChangeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyReplyDueDateChangeResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyReplyDueDateChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReplyDueDateChangeRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReplyDueDateChangeRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyReplyDueDateChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyReplyDueDateChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyReplyDueDateChangeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyReceptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSurveyReceptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemNotificationUsersInSurveyReceptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyResultChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyResultChangeRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyResultChangeRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyResultChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyResultChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyResultChangeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSurveyReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRemindersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRemindersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoSurveyReminderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistorysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistorysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoDiscardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoDiscardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoOpenedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoOpenedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportSurveyRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportSurveyRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyReplyDueDateChangeResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyReplyDueDateChangeResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetSurveyReplyDueDateChangeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyRemindersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyRemindersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetSurveyReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyReplyDueDateChangeRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyReplyDueDateChangeRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetSurveyReplyDueDateChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetSurveyResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListSurveyResultChangeRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyResultChangeRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetSurveyResultChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedListSurveyRequestContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedListSurveyRequestContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedGetSurveyRequestContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyBaseRequestContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyBaseRequestContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyBaseRequestContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyRequestContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReceptionContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReceptionContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSurveyReceptionContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompletedListSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompletedListSurveyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnchangedListSurveyReplyDueDateChangeRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnchangedListSurveyReplyDueDateChangeRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportedSurveyResultFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportedSurveyResultFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSurveyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedListSurveyRequestContentsRequest_DataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyBaseRequestContentsRequest_DataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyRequestContentsRequest_DataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSurveyReceptionContentsRequest_DataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_survey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   104,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_survey_proto_goTypes,
		DependencyIndexes: file_survey_proto_depIdxs,
		MessageInfos:      file_survey_proto_msgTypes,
	}.Build()
	File_survey_proto = out.File
	file_survey_proto_rawDesc = nil
	file_survey_proto_goTypes = nil
	file_survey_proto_depIdxs = nil
}
