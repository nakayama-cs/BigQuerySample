// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	// 履歴データ
	ListHistorys(ctx context.Context, in *ListHistorysRequest, opts ...grpc.CallOption) (*ListHistorysResponse, error)
	// 破棄データ を 公開 する
	SharetoDiscard(ctx context.Context, in *SharetoDiscardRequest, opts ...grpc.CallOption) (*SharetoDiscardResponse, error)
	// 終了データ を 公開 する
	SharetoComplete(ctx context.Context, in *SharetoCompleteRequest, opts ...grpc.CallOption) (*SharetoCompleteResponse, error)
	// 開府済みデータ を 公開 する
	SharetoOpened(ctx context.Context, in *SharetoOpenedRequest, opts ...grpc.CallOption) (*SharetoOpenedResponse, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) ListHistorys(ctx context.Context, in *ListHistorysRequest, opts ...grpc.CallOption) (*ListHistorysResponse, error) {
	out := new(ListHistorysResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyService/ListHistorys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SharetoDiscard(ctx context.Context, in *SharetoDiscardRequest, opts ...grpc.CallOption) (*SharetoDiscardResponse, error) {
	out := new(SharetoDiscardResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyService/SharetoDiscard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SharetoComplete(ctx context.Context, in *SharetoCompleteRequest, opts ...grpc.CallOption) (*SharetoCompleteResponse, error) {
	out := new(SharetoCompleteResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyService/SharetoComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SharetoOpened(ctx context.Context, in *SharetoOpenedRequest, opts ...grpc.CallOption) (*SharetoOpenedResponse, error) {
	out := new(SharetoOpenedResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyService/SharetoOpened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility
type SurveyServiceServer interface {
	// 履歴データ
	ListHistorys(context.Context, *ListHistorysRequest) (*ListHistorysResponse, error)
	// 破棄データ を 公開 する
	SharetoDiscard(context.Context, *SharetoDiscardRequest) (*SharetoDiscardResponse, error)
	// 終了データ を 公開 する
	SharetoComplete(context.Context, *SharetoCompleteRequest) (*SharetoCompleteResponse, error)
	// 開府済みデータ を 公開 する
	SharetoOpened(context.Context, *SharetoOpenedRequest) (*SharetoOpenedResponse, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyServiceServer struct {
}

func (UnimplementedSurveyServiceServer) ListHistorys(context.Context, *ListHistorysRequest) (*ListHistorysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistorys not implemented")
}
func (UnimplementedSurveyServiceServer) SharetoDiscard(context.Context, *SharetoDiscardRequest) (*SharetoDiscardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoDiscard not implemented")
}
func (UnimplementedSurveyServiceServer) SharetoComplete(context.Context, *SharetoCompleteRequest) (*SharetoCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoComplete not implemented")
}
func (UnimplementedSurveyServiceServer) SharetoOpened(context.Context, *SharetoOpenedRequest) (*SharetoOpenedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoOpened not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_ListHistorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistorysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).ListHistorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyService/ListHistorys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).ListHistorys(ctx, req.(*ListHistorysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SharetoDiscard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoDiscardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SharetoDiscard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyService/SharetoDiscard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SharetoDiscard(ctx, req.(*SharetoDiscardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SharetoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SharetoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyService/SharetoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SharetoComplete(ctx, req.(*SharetoCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SharetoOpened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoOpenedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SharetoOpened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyService/SharetoOpened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SharetoOpened(ctx, req.(*SharetoOpenedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.survey.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistorys",
			Handler:    _SurveyService_ListHistorys_Handler,
		},
		{
			MethodName: "SharetoDiscard",
			Handler:    _SurveyService_SharetoDiscard_Handler,
		},
		{
			MethodName: "SharetoComplete",
			Handler:    _SurveyService_SharetoComplete_Handler,
		},
		{
			MethodName: "SharetoOpened",
			Handler:    _SurveyService_SharetoOpened_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}

// SurveySenderServiceClient is the client API for SurveySenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveySenderServiceClient interface {
	// 依頼カタログマスタ
	CreateSurveyRequestCatalog(ctx context.Context, in *CreateSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*SurveyRequestCatalog, error)
	ListSurveyRequestCatalogs(ctx context.Context, in *ListSurveyRequestCatalogsRequest, opts ...grpc.CallOption) (*ListSurveyRequestCatalogsResponse, error)
	GetSurveyRequestCatalog(ctx context.Context, in *GetSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*SurveyRequestCatalog, error)
	UpdateSurveyRequestCatalog(ctx context.Context, in *UpdateSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*SurveyRequestCatalog, error)
	DeleteSurveyRequestCatalog(ctx context.Context, in *DeleteSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 依頼伝票データ
	CreateSurveyBaseRequest(ctx context.Context, in *CreateSurveyBaseRequestRequest, opts ...grpc.CallOption) (*SurveyBaseRequest, error)
	UpdateSurveyBaseRequest(ctx context.Context, in *UpdateSurveyBaseRequestRequest, opts ...grpc.CallOption) (*SurveyBaseRequest, error)
	DeleteSurveyBaseRequest(ctx context.Context, in *DeleteSurveyBaseRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 依頼伝票データ を 承認依頼 する
	ApprovalRequestSurveyBaseRequest(ctx context.Context, in *ApprovalRequestSurveyBaseRequestRequest, opts ...grpc.CallOption) (*ApprovalRequestSurveyBaseRequestResponse, error)
	// 依頼伝票データ を 却下 する
	RejectSurveyBaseRequest(ctx context.Context, in *RejectSurveyBaseRequestRequest, opts ...grpc.CallOption) (*RejectSurveyBaseRequestResponse, error)
	// 依頼伝票データ を 承認 する
	ApproveSurveyBaseRequest(ctx context.Context, in *ApproveSurveyBaseRequestRequest, opts ...grpc.CallOption) (*ApproveSurveyBaseRequestResponse, error)
	// 依頼明細データ
	GetSurveyRequest(ctx context.Context, in *GetSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error)
	UpdateSurveyRequest(ctx context.Context, in *UpdateSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error)
	// 依頼明細データ.システム通知先
	UpdateSystemNotificationUsersInSurveyRequest(ctx context.Context, in *UpdateSystemNotificationUsersInSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error)
	// 依頼明細データ を 公開 する
	//
	// Implementation Note:
	//
	//	画面で送信/承認したときに実行する 「非同期 展開処理」 の実行トリガー
	//	依頼伝票データから依頼明細データを作成し、取引先へShareする
	SharetoSurveyRequest(ctx context.Context, in *SharetoSurveyRequestRequest, opts ...grpc.CallOption) (*SharetoSurveyRequestResponse, error)
	// 依頼明細データ を 破棄 する
	DiscardSurveyRequest(ctx context.Context, in *DiscardSurveyRequestRequest, opts ...grpc.CallOption) (*DiscardSurveyRequestResponse, error)
	// 依頼明細データ を 完了 する
	CompleteSurveyRequest(ctx context.Context, in *CompleteSurveyRequestRequest, opts ...grpc.CallOption) (*CompleteSurveyRequestResponse, error)
	// 回答期日変更データ
	CreateSurveyReplyDueDateChangeResult(ctx context.Context, in *CreateSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeResult, error)
	ListSurveyReplyDueDateChangeResults(ctx context.Context, in *ListSurveyReplyDueDateChangeResultsRequest, opts ...grpc.CallOption) (*ListSurveyReplyDueDateChangeResultsResponse, error)
	GetSurveyReplyDueDateChangeResult(ctx context.Context, in *GetSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeResult, error)
	// 回答期日変更データ を 公開 する
	SharetoSurveyReplyDueDateChangeResult(ctx context.Context, in *SharetoSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SharetoSurveyReplyDueDateChangeResultResponse, error)
	// 修正依頼データ
	CreateSurveyResultChangeRequest(ctx context.Context, in *CreateSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequest, error)
	ListSurveyResultChangeRequests(ctx context.Context, in *ListSurveyResultChangeRequestsRequest, opts ...grpc.CallOption) (*ListSurveyResultChangeRequestsResponse, error)
	GetSurveyResultChangeRequest(ctx context.Context, in *GetSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequest, error)
	// 修正依頼データ を 公開 する
	SharetoSurveyResultChangeRequest(ctx context.Context, in *SharetoSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SharetoSurveyResultChangeRequestResponse, error)
	// 催促データ
	CreateSurveyReminder(ctx context.Context, in *CreateSurveyReminderRequest, opts ...grpc.CallOption) (*SurveyReminder, error)
	ListSurveyReminders(ctx context.Context, in *ListSurveyRemindersRequest, opts ...grpc.CallOption) (*ListSurveyRemindersResponse, error)
	GetSurveyReminder(ctx context.Context, in *GetSurveyReminderRequest, opts ...grpc.CallOption) (*SurveyReminder, error)
	// 催促データ を 公開 する
	SharetoSurveyReminder(ctx context.Context, in *SharetoSurveyReminderRequest, opts ...grpc.CallOption) (*SharetoSurveyReminderResponse, error)
	// 依頼管理情報出力
	ExportSurveyRequests(ctx context.Context, in *ExportSurveyRequestsRequest, opts ...grpc.CallOption) (*ExportSurveyRequestsResponse, error)
	// 依頼管理情報出力フォーマット取得
	ListSurveyRequestFormats(ctx context.Context, in *ListSurveyRequestFormatsRequest, opts ...grpc.CallOption) (*ListSurveyRequestFormatsResponse, error)
	// 公開された 回答期日変更依頼データ
	SharedListSurveyReplyDueDateChangeRequests(ctx context.Context, in *SharedListSurveyReplyDueDateChangeRequestsRequest, opts ...grpc.CallOption) (*SharedListSurveyReplyDueDateChangeRequestsResponse, error)
	SharedGetSurveyReplyDueDateChangeRequest(ctx context.Context, in *SharedGetSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeRequest, error)
	// 公開された 依頼回答データ
	SharedGetSurveyResult(ctx context.Context, in *SharedGetSurveyResultRequest, opts ...grpc.CallOption) (*SurveyResult, error)
	// 公開された 修正依頼データ
	SharedListSurveyResultChangeRequests(ctx context.Context, in *SharedListSurveyResultChangeRequestsRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequestsResponse, error)
	SharedGetSurveyResultChangeRequest(ctx context.Context, in *SharedGetSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequest, error)
	// 展開された 依頼明細コンテンツ
	ExpandedListSurveyRequestContents(ctx context.Context, in *ExpandedListSurveyRequestContentsRequest, opts ...grpc.CallOption) (*ExpandedListSurveyRequestContentsResponse, error)
	ExpandedGetSurveyRequestContent(ctx context.Context, in *ExpandedGetSurveyRequestContentRequest, opts ...grpc.CallOption) (*SurveyRequestContent, error)
	// 依頼伝票コンテンツ
	ListSurveyBaseRequestContents(ctx context.Context, in *ListSurveyBaseRequestContentsRequest, opts ...grpc.CallOption) (*ListSurveyBaseRequestContentsResponse, error)
	GetSurveyBaseRequestContent(ctx context.Context, in *GetSurveyBaseRequestContentRequest, opts ...grpc.CallOption) (*SurveyBaseRequestContent, error)
	// 依頼明細コンテンツ
	ListSurveyRequestContents(ctx context.Context, in *ListSurveyRequestContentsRequest, opts ...grpc.CallOption) (*ListSurveyRequestContentsResponse, error)
	GetSurveyRequestContent(ctx context.Context, in *GetSurveyRequestContentRequest, opts ...grpc.CallOption) (*SurveyRequestContent, error)
	// 回答ファイル出力済み
	ExportedSurveyResultFile(ctx context.Context, in *ExportedSurveyResultFileRequest, opts ...grpc.CallOption) (*ExportedSurveyResultFileResponse, error)
}

type surveySenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveySenderServiceClient(cc grpc.ClientConnInterface) SurveySenderServiceClient {
	return &surveySenderServiceClient{cc}
}

func (c *surveySenderServiceClient) CreateSurveyRequestCatalog(ctx context.Context, in *CreateSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*SurveyRequestCatalog, error) {
	out := new(SurveyRequestCatalog)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/CreateSurveyRequestCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyRequestCatalogs(ctx context.Context, in *ListSurveyRequestCatalogsRequest, opts ...grpc.CallOption) (*ListSurveyRequestCatalogsResponse, error) {
	out := new(ListSurveyRequestCatalogsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyRequestCatalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyRequestCatalog(ctx context.Context, in *GetSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*SurveyRequestCatalog, error) {
	out := new(SurveyRequestCatalog)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyRequestCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) UpdateSurveyRequestCatalog(ctx context.Context, in *UpdateSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*SurveyRequestCatalog, error) {
	out := new(SurveyRequestCatalog)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/UpdateSurveyRequestCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) DeleteSurveyRequestCatalog(ctx context.Context, in *DeleteSurveyRequestCatalogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/DeleteSurveyRequestCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) CreateSurveyBaseRequest(ctx context.Context, in *CreateSurveyBaseRequestRequest, opts ...grpc.CallOption) (*SurveyBaseRequest, error) {
	out := new(SurveyBaseRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/CreateSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) UpdateSurveyBaseRequest(ctx context.Context, in *UpdateSurveyBaseRequestRequest, opts ...grpc.CallOption) (*SurveyBaseRequest, error) {
	out := new(SurveyBaseRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/UpdateSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) DeleteSurveyBaseRequest(ctx context.Context, in *DeleteSurveyBaseRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/DeleteSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ApprovalRequestSurveyBaseRequest(ctx context.Context, in *ApprovalRequestSurveyBaseRequestRequest, opts ...grpc.CallOption) (*ApprovalRequestSurveyBaseRequestResponse, error) {
	out := new(ApprovalRequestSurveyBaseRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ApprovalRequestSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) RejectSurveyBaseRequest(ctx context.Context, in *RejectSurveyBaseRequestRequest, opts ...grpc.CallOption) (*RejectSurveyBaseRequestResponse, error) {
	out := new(RejectSurveyBaseRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/RejectSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ApproveSurveyBaseRequest(ctx context.Context, in *ApproveSurveyBaseRequestRequest, opts ...grpc.CallOption) (*ApproveSurveyBaseRequestResponse, error) {
	out := new(ApproveSurveyBaseRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ApproveSurveyBaseRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyRequest(ctx context.Context, in *GetSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error) {
	out := new(SurveyRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) UpdateSurveyRequest(ctx context.Context, in *UpdateSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error) {
	out := new(SurveyRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/UpdateSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) UpdateSystemNotificationUsersInSurveyRequest(ctx context.Context, in *UpdateSystemNotificationUsersInSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error) {
	out := new(SurveyRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/UpdateSystemNotificationUsersInSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharetoSurveyRequest(ctx context.Context, in *SharetoSurveyRequestRequest, opts ...grpc.CallOption) (*SharetoSurveyRequestResponse, error) {
	out := new(SharetoSurveyRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) DiscardSurveyRequest(ctx context.Context, in *DiscardSurveyRequestRequest, opts ...grpc.CallOption) (*DiscardSurveyRequestResponse, error) {
	out := new(DiscardSurveyRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/DiscardSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) CompleteSurveyRequest(ctx context.Context, in *CompleteSurveyRequestRequest, opts ...grpc.CallOption) (*CompleteSurveyRequestResponse, error) {
	out := new(CompleteSurveyRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/CompleteSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) CreateSurveyReplyDueDateChangeResult(ctx context.Context, in *CreateSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeResult, error) {
	out := new(SurveyReplyDueDateChangeResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/CreateSurveyReplyDueDateChangeResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyReplyDueDateChangeResults(ctx context.Context, in *ListSurveyReplyDueDateChangeResultsRequest, opts ...grpc.CallOption) (*ListSurveyReplyDueDateChangeResultsResponse, error) {
	out := new(ListSurveyReplyDueDateChangeResultsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyReplyDueDateChangeResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyReplyDueDateChangeResult(ctx context.Context, in *GetSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeResult, error) {
	out := new(SurveyReplyDueDateChangeResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyReplyDueDateChangeResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharetoSurveyReplyDueDateChangeResult(ctx context.Context, in *SharetoSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SharetoSurveyReplyDueDateChangeResultResponse, error) {
	out := new(SharetoSurveyReplyDueDateChangeResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyReplyDueDateChangeResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) CreateSurveyResultChangeRequest(ctx context.Context, in *CreateSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequest, error) {
	out := new(SurveyResultChangeRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/CreateSurveyResultChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyResultChangeRequests(ctx context.Context, in *ListSurveyResultChangeRequestsRequest, opts ...grpc.CallOption) (*ListSurveyResultChangeRequestsResponse, error) {
	out := new(ListSurveyResultChangeRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyResultChangeRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyResultChangeRequest(ctx context.Context, in *GetSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequest, error) {
	out := new(SurveyResultChangeRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyResultChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharetoSurveyResultChangeRequest(ctx context.Context, in *SharetoSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SharetoSurveyResultChangeRequestResponse, error) {
	out := new(SharetoSurveyResultChangeRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyResultChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) CreateSurveyReminder(ctx context.Context, in *CreateSurveyReminderRequest, opts ...grpc.CallOption) (*SurveyReminder, error) {
	out := new(SurveyReminder)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/CreateSurveyReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyReminders(ctx context.Context, in *ListSurveyRemindersRequest, opts ...grpc.CallOption) (*ListSurveyRemindersResponse, error) {
	out := new(ListSurveyRemindersResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyReminders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyReminder(ctx context.Context, in *GetSurveyReminderRequest, opts ...grpc.CallOption) (*SurveyReminder, error) {
	out := new(SurveyReminder)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharetoSurveyReminder(ctx context.Context, in *SharetoSurveyReminderRequest, opts ...grpc.CallOption) (*SharetoSurveyReminderResponse, error) {
	out := new(SharetoSurveyReminderResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ExportSurveyRequests(ctx context.Context, in *ExportSurveyRequestsRequest, opts ...grpc.CallOption) (*ExportSurveyRequestsResponse, error) {
	out := new(ExportSurveyRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ExportSurveyRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyRequestFormats(ctx context.Context, in *ListSurveyRequestFormatsRequest, opts ...grpc.CallOption) (*ListSurveyRequestFormatsResponse, error) {
	out := new(ListSurveyRequestFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyRequestFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharedListSurveyReplyDueDateChangeRequests(ctx context.Context, in *SharedListSurveyReplyDueDateChangeRequestsRequest, opts ...grpc.CallOption) (*SharedListSurveyReplyDueDateChangeRequestsResponse, error) {
	out := new(SharedListSurveyReplyDueDateChangeRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharedListSurveyReplyDueDateChangeRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharedGetSurveyReplyDueDateChangeRequest(ctx context.Context, in *SharedGetSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeRequest, error) {
	out := new(SurveyReplyDueDateChangeRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharedGetSurveyReplyDueDateChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharedGetSurveyResult(ctx context.Context, in *SharedGetSurveyResultRequest, opts ...grpc.CallOption) (*SurveyResult, error) {
	out := new(SurveyResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharedGetSurveyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharedListSurveyResultChangeRequests(ctx context.Context, in *SharedListSurveyResultChangeRequestsRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequestsResponse, error) {
	out := new(SurveyResultChangeRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharedListSurveyResultChangeRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) SharedGetSurveyResultChangeRequest(ctx context.Context, in *SharedGetSurveyResultChangeRequestRequest, opts ...grpc.CallOption) (*SurveyResultChangeRequest, error) {
	out := new(SurveyResultChangeRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/SharedGetSurveyResultChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ExpandedListSurveyRequestContents(ctx context.Context, in *ExpandedListSurveyRequestContentsRequest, opts ...grpc.CallOption) (*ExpandedListSurveyRequestContentsResponse, error) {
	out := new(ExpandedListSurveyRequestContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ExpandedListSurveyRequestContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ExpandedGetSurveyRequestContent(ctx context.Context, in *ExpandedGetSurveyRequestContentRequest, opts ...grpc.CallOption) (*SurveyRequestContent, error) {
	out := new(SurveyRequestContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ExpandedGetSurveyRequestContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyBaseRequestContents(ctx context.Context, in *ListSurveyBaseRequestContentsRequest, opts ...grpc.CallOption) (*ListSurveyBaseRequestContentsResponse, error) {
	out := new(ListSurveyBaseRequestContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyBaseRequestContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyBaseRequestContent(ctx context.Context, in *GetSurveyBaseRequestContentRequest, opts ...grpc.CallOption) (*SurveyBaseRequestContent, error) {
	out := new(SurveyBaseRequestContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyBaseRequestContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ListSurveyRequestContents(ctx context.Context, in *ListSurveyRequestContentsRequest, opts ...grpc.CallOption) (*ListSurveyRequestContentsResponse, error) {
	out := new(ListSurveyRequestContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ListSurveyRequestContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) GetSurveyRequestContent(ctx context.Context, in *GetSurveyRequestContentRequest, opts ...grpc.CallOption) (*SurveyRequestContent, error) {
	out := new(SurveyRequestContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/GetSurveyRequestContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveySenderServiceClient) ExportedSurveyResultFile(ctx context.Context, in *ExportedSurveyResultFileRequest, opts ...grpc.CallOption) (*ExportedSurveyResultFileResponse, error) {
	out := new(ExportedSurveyResultFileResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveySenderService/ExportedSurveyResultFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveySenderServiceServer is the server API for SurveySenderService service.
// All implementations must embed UnimplementedSurveySenderServiceServer
// for forward compatibility
type SurveySenderServiceServer interface {
	// 依頼カタログマスタ
	CreateSurveyRequestCatalog(context.Context, *CreateSurveyRequestCatalogRequest) (*SurveyRequestCatalog, error)
	ListSurveyRequestCatalogs(context.Context, *ListSurveyRequestCatalogsRequest) (*ListSurveyRequestCatalogsResponse, error)
	GetSurveyRequestCatalog(context.Context, *GetSurveyRequestCatalogRequest) (*SurveyRequestCatalog, error)
	UpdateSurveyRequestCatalog(context.Context, *UpdateSurveyRequestCatalogRequest) (*SurveyRequestCatalog, error)
	DeleteSurveyRequestCatalog(context.Context, *DeleteSurveyRequestCatalogRequest) (*emptypb.Empty, error)
	// 依頼伝票データ
	CreateSurveyBaseRequest(context.Context, *CreateSurveyBaseRequestRequest) (*SurveyBaseRequest, error)
	UpdateSurveyBaseRequest(context.Context, *UpdateSurveyBaseRequestRequest) (*SurveyBaseRequest, error)
	DeleteSurveyBaseRequest(context.Context, *DeleteSurveyBaseRequestRequest) (*emptypb.Empty, error)
	// 依頼伝票データ を 承認依頼 する
	ApprovalRequestSurveyBaseRequest(context.Context, *ApprovalRequestSurveyBaseRequestRequest) (*ApprovalRequestSurveyBaseRequestResponse, error)
	// 依頼伝票データ を 却下 する
	RejectSurveyBaseRequest(context.Context, *RejectSurveyBaseRequestRequest) (*RejectSurveyBaseRequestResponse, error)
	// 依頼伝票データ を 承認 する
	ApproveSurveyBaseRequest(context.Context, *ApproveSurveyBaseRequestRequest) (*ApproveSurveyBaseRequestResponse, error)
	// 依頼明細データ
	GetSurveyRequest(context.Context, *GetSurveyRequestRequest) (*SurveyRequest, error)
	UpdateSurveyRequest(context.Context, *UpdateSurveyRequestRequest) (*SurveyRequest, error)
	// 依頼明細データ.システム通知先
	UpdateSystemNotificationUsersInSurveyRequest(context.Context, *UpdateSystemNotificationUsersInSurveyRequestRequest) (*SurveyRequest, error)
	// 依頼明細データ を 公開 する
	//
	// Implementation Note:
	//
	//	画面で送信/承認したときに実行する 「非同期 展開処理」 の実行トリガー
	//	依頼伝票データから依頼明細データを作成し、取引先へShareする
	SharetoSurveyRequest(context.Context, *SharetoSurveyRequestRequest) (*SharetoSurveyRequestResponse, error)
	// 依頼明細データ を 破棄 する
	DiscardSurveyRequest(context.Context, *DiscardSurveyRequestRequest) (*DiscardSurveyRequestResponse, error)
	// 依頼明細データ を 完了 する
	CompleteSurveyRequest(context.Context, *CompleteSurveyRequestRequest) (*CompleteSurveyRequestResponse, error)
	// 回答期日変更データ
	CreateSurveyReplyDueDateChangeResult(context.Context, *CreateSurveyReplyDueDateChangeResultRequest) (*SurveyReplyDueDateChangeResult, error)
	ListSurveyReplyDueDateChangeResults(context.Context, *ListSurveyReplyDueDateChangeResultsRequest) (*ListSurveyReplyDueDateChangeResultsResponse, error)
	GetSurveyReplyDueDateChangeResult(context.Context, *GetSurveyReplyDueDateChangeResultRequest) (*SurveyReplyDueDateChangeResult, error)
	// 回答期日変更データ を 公開 する
	SharetoSurveyReplyDueDateChangeResult(context.Context, *SharetoSurveyReplyDueDateChangeResultRequest) (*SharetoSurveyReplyDueDateChangeResultResponse, error)
	// 修正依頼データ
	CreateSurveyResultChangeRequest(context.Context, *CreateSurveyResultChangeRequestRequest) (*SurveyResultChangeRequest, error)
	ListSurveyResultChangeRequests(context.Context, *ListSurveyResultChangeRequestsRequest) (*ListSurveyResultChangeRequestsResponse, error)
	GetSurveyResultChangeRequest(context.Context, *GetSurveyResultChangeRequestRequest) (*SurveyResultChangeRequest, error)
	// 修正依頼データ を 公開 する
	SharetoSurveyResultChangeRequest(context.Context, *SharetoSurveyResultChangeRequestRequest) (*SharetoSurveyResultChangeRequestResponse, error)
	// 催促データ
	CreateSurveyReminder(context.Context, *CreateSurveyReminderRequest) (*SurveyReminder, error)
	ListSurveyReminders(context.Context, *ListSurveyRemindersRequest) (*ListSurveyRemindersResponse, error)
	GetSurveyReminder(context.Context, *GetSurveyReminderRequest) (*SurveyReminder, error)
	// 催促データ を 公開 する
	SharetoSurveyReminder(context.Context, *SharetoSurveyReminderRequest) (*SharetoSurveyReminderResponse, error)
	// 依頼管理情報出力
	ExportSurveyRequests(context.Context, *ExportSurveyRequestsRequest) (*ExportSurveyRequestsResponse, error)
	// 依頼管理情報出力フォーマット取得
	ListSurveyRequestFormats(context.Context, *ListSurveyRequestFormatsRequest) (*ListSurveyRequestFormatsResponse, error)
	// 公開された 回答期日変更依頼データ
	SharedListSurveyReplyDueDateChangeRequests(context.Context, *SharedListSurveyReplyDueDateChangeRequestsRequest) (*SharedListSurveyReplyDueDateChangeRequestsResponse, error)
	SharedGetSurveyReplyDueDateChangeRequest(context.Context, *SharedGetSurveyReplyDueDateChangeRequestRequest) (*SurveyReplyDueDateChangeRequest, error)
	// 公開された 依頼回答データ
	SharedGetSurveyResult(context.Context, *SharedGetSurveyResultRequest) (*SurveyResult, error)
	// 公開された 修正依頼データ
	SharedListSurveyResultChangeRequests(context.Context, *SharedListSurveyResultChangeRequestsRequest) (*SurveyResultChangeRequestsResponse, error)
	SharedGetSurveyResultChangeRequest(context.Context, *SharedGetSurveyResultChangeRequestRequest) (*SurveyResultChangeRequest, error)
	// 展開された 依頼明細コンテンツ
	ExpandedListSurveyRequestContents(context.Context, *ExpandedListSurveyRequestContentsRequest) (*ExpandedListSurveyRequestContentsResponse, error)
	ExpandedGetSurveyRequestContent(context.Context, *ExpandedGetSurveyRequestContentRequest) (*SurveyRequestContent, error)
	// 依頼伝票コンテンツ
	ListSurveyBaseRequestContents(context.Context, *ListSurveyBaseRequestContentsRequest) (*ListSurveyBaseRequestContentsResponse, error)
	GetSurveyBaseRequestContent(context.Context, *GetSurveyBaseRequestContentRequest) (*SurveyBaseRequestContent, error)
	// 依頼明細コンテンツ
	ListSurveyRequestContents(context.Context, *ListSurveyRequestContentsRequest) (*ListSurveyRequestContentsResponse, error)
	GetSurveyRequestContent(context.Context, *GetSurveyRequestContentRequest) (*SurveyRequestContent, error)
	// 回答ファイル出力済み
	ExportedSurveyResultFile(context.Context, *ExportedSurveyResultFileRequest) (*ExportedSurveyResultFileResponse, error)
	mustEmbedUnimplementedSurveySenderServiceServer()
}

// UnimplementedSurveySenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveySenderServiceServer struct {
}

func (UnimplementedSurveySenderServiceServer) CreateSurveyRequestCatalog(context.Context, *CreateSurveyRequestCatalogRequest) (*SurveyRequestCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyRequestCatalog not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyRequestCatalogs(context.Context, *ListSurveyRequestCatalogsRequest) (*ListSurveyRequestCatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyRequestCatalogs not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyRequestCatalog(context.Context, *GetSurveyRequestCatalogRequest) (*SurveyRequestCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyRequestCatalog not implemented")
}
func (UnimplementedSurveySenderServiceServer) UpdateSurveyRequestCatalog(context.Context, *UpdateSurveyRequestCatalogRequest) (*SurveyRequestCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyRequestCatalog not implemented")
}
func (UnimplementedSurveySenderServiceServer) DeleteSurveyRequestCatalog(context.Context, *DeleteSurveyRequestCatalogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSurveyRequestCatalog not implemented")
}
func (UnimplementedSurveySenderServiceServer) CreateSurveyBaseRequest(context.Context, *CreateSurveyBaseRequestRequest) (*SurveyBaseRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyBaseRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) UpdateSurveyBaseRequest(context.Context, *UpdateSurveyBaseRequestRequest) (*SurveyBaseRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyBaseRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) DeleteSurveyBaseRequest(context.Context, *DeleteSurveyBaseRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSurveyBaseRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) ApprovalRequestSurveyBaseRequest(context.Context, *ApprovalRequestSurveyBaseRequestRequest) (*ApprovalRequestSurveyBaseRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalRequestSurveyBaseRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) RejectSurveyBaseRequest(context.Context, *RejectSurveyBaseRequestRequest) (*RejectSurveyBaseRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSurveyBaseRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) ApproveSurveyBaseRequest(context.Context, *ApproveSurveyBaseRequestRequest) (*ApproveSurveyBaseRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveSurveyBaseRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyRequest(context.Context, *GetSurveyRequestRequest) (*SurveyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) UpdateSurveyRequest(context.Context, *UpdateSurveyRequestRequest) (*SurveyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) UpdateSystemNotificationUsersInSurveyRequest(context.Context, *UpdateSystemNotificationUsersInSurveyRequestRequest) (*SurveyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemNotificationUsersInSurveyRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharetoSurveyRequest(context.Context, *SharetoSurveyRequestRequest) (*SharetoSurveyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoSurveyRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) DiscardSurveyRequest(context.Context, *DiscardSurveyRequestRequest) (*DiscardSurveyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardSurveyRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) CompleteSurveyRequest(context.Context, *CompleteSurveyRequestRequest) (*CompleteSurveyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSurveyRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) CreateSurveyReplyDueDateChangeResult(context.Context, *CreateSurveyReplyDueDateChangeResultRequest) (*SurveyReplyDueDateChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyReplyDueDateChangeResult not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyReplyDueDateChangeResults(context.Context, *ListSurveyReplyDueDateChangeResultsRequest) (*ListSurveyReplyDueDateChangeResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyReplyDueDateChangeResults not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyReplyDueDateChangeResult(context.Context, *GetSurveyReplyDueDateChangeResultRequest) (*SurveyReplyDueDateChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyReplyDueDateChangeResult not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharetoSurveyReplyDueDateChangeResult(context.Context, *SharetoSurveyReplyDueDateChangeResultRequest) (*SharetoSurveyReplyDueDateChangeResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoSurveyReplyDueDateChangeResult not implemented")
}
func (UnimplementedSurveySenderServiceServer) CreateSurveyResultChangeRequest(context.Context, *CreateSurveyResultChangeRequestRequest) (*SurveyResultChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyResultChangeRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyResultChangeRequests(context.Context, *ListSurveyResultChangeRequestsRequest) (*ListSurveyResultChangeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyResultChangeRequests not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyResultChangeRequest(context.Context, *GetSurveyResultChangeRequestRequest) (*SurveyResultChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyResultChangeRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharetoSurveyResultChangeRequest(context.Context, *SharetoSurveyResultChangeRequestRequest) (*SharetoSurveyResultChangeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoSurveyResultChangeRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) CreateSurveyReminder(context.Context, *CreateSurveyReminderRequest) (*SurveyReminder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyReminder not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyReminders(context.Context, *ListSurveyRemindersRequest) (*ListSurveyRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyReminders not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyReminder(context.Context, *GetSurveyReminderRequest) (*SurveyReminder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyReminder not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharetoSurveyReminder(context.Context, *SharetoSurveyReminderRequest) (*SharetoSurveyReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoSurveyReminder not implemented")
}
func (UnimplementedSurveySenderServiceServer) ExportSurveyRequests(context.Context, *ExportSurveyRequestsRequest) (*ExportSurveyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSurveyRequests not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyRequestFormats(context.Context, *ListSurveyRequestFormatsRequest) (*ListSurveyRequestFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyRequestFormats not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharedListSurveyReplyDueDateChangeRequests(context.Context, *SharedListSurveyReplyDueDateChangeRequestsRequest) (*SharedListSurveyReplyDueDateChangeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListSurveyReplyDueDateChangeRequests not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharedGetSurveyReplyDueDateChangeRequest(context.Context, *SharedGetSurveyReplyDueDateChangeRequestRequest) (*SurveyReplyDueDateChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetSurveyReplyDueDateChangeRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharedGetSurveyResult(context.Context, *SharedGetSurveyResultRequest) (*SurveyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetSurveyResult not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharedListSurveyResultChangeRequests(context.Context, *SharedListSurveyResultChangeRequestsRequest) (*SurveyResultChangeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListSurveyResultChangeRequests not implemented")
}
func (UnimplementedSurveySenderServiceServer) SharedGetSurveyResultChangeRequest(context.Context, *SharedGetSurveyResultChangeRequestRequest) (*SurveyResultChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetSurveyResultChangeRequest not implemented")
}
func (UnimplementedSurveySenderServiceServer) ExpandedListSurveyRequestContents(context.Context, *ExpandedListSurveyRequestContentsRequest) (*ExpandedListSurveyRequestContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandedListSurveyRequestContents not implemented")
}
func (UnimplementedSurveySenderServiceServer) ExpandedGetSurveyRequestContent(context.Context, *ExpandedGetSurveyRequestContentRequest) (*SurveyRequestContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandedGetSurveyRequestContent not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyBaseRequestContents(context.Context, *ListSurveyBaseRequestContentsRequest) (*ListSurveyBaseRequestContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyBaseRequestContents not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyBaseRequestContent(context.Context, *GetSurveyBaseRequestContentRequest) (*SurveyBaseRequestContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyBaseRequestContent not implemented")
}
func (UnimplementedSurveySenderServiceServer) ListSurveyRequestContents(context.Context, *ListSurveyRequestContentsRequest) (*ListSurveyRequestContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyRequestContents not implemented")
}
func (UnimplementedSurveySenderServiceServer) GetSurveyRequestContent(context.Context, *GetSurveyRequestContentRequest) (*SurveyRequestContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyRequestContent not implemented")
}
func (UnimplementedSurveySenderServiceServer) ExportedSurveyResultFile(context.Context, *ExportedSurveyResultFileRequest) (*ExportedSurveyResultFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportedSurveyResultFile not implemented")
}
func (UnimplementedSurveySenderServiceServer) mustEmbedUnimplementedSurveySenderServiceServer() {}

// UnsafeSurveySenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveySenderServiceServer will
// result in compilation errors.
type UnsafeSurveySenderServiceServer interface {
	mustEmbedUnimplementedSurveySenderServiceServer()
}

func RegisterSurveySenderServiceServer(s grpc.ServiceRegistrar, srv SurveySenderServiceServer) {
	s.RegisterService(&SurveySenderService_ServiceDesc, srv)
}

func _SurveySenderService_CreateSurveyRequestCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyRequestCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).CreateSurveyRequestCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/CreateSurveyRequestCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).CreateSurveyRequestCatalog(ctx, req.(*CreateSurveyRequestCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyRequestCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyRequestCatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyRequestCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyRequestCatalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyRequestCatalogs(ctx, req.(*ListSurveyRequestCatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyRequestCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyRequestCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyRequestCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyRequestCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyRequestCatalog(ctx, req.(*GetSurveyRequestCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_UpdateSurveyRequestCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyRequestCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).UpdateSurveyRequestCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/UpdateSurveyRequestCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).UpdateSurveyRequestCatalog(ctx, req.(*UpdateSurveyRequestCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_DeleteSurveyRequestCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSurveyRequestCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).DeleteSurveyRequestCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/DeleteSurveyRequestCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).DeleteSurveyRequestCatalog(ctx, req.(*DeleteSurveyRequestCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_CreateSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).CreateSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/CreateSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).CreateSurveyBaseRequest(ctx, req.(*CreateSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_UpdateSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).UpdateSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/UpdateSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).UpdateSurveyBaseRequest(ctx, req.(*UpdateSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_DeleteSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).DeleteSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/DeleteSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).DeleteSurveyBaseRequest(ctx, req.(*DeleteSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ApprovalRequestSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequestSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ApprovalRequestSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ApprovalRequestSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ApprovalRequestSurveyBaseRequest(ctx, req.(*ApprovalRequestSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_RejectSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).RejectSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/RejectSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).RejectSurveyBaseRequest(ctx, req.(*RejectSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ApproveSurveyBaseRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveSurveyBaseRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ApproveSurveyBaseRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ApproveSurveyBaseRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ApproveSurveyBaseRequest(ctx, req.(*ApproveSurveyBaseRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyRequest(ctx, req.(*GetSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_UpdateSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).UpdateSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/UpdateSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).UpdateSurveyRequest(ctx, req.(*UpdateSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_UpdateSystemNotificationUsersInSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemNotificationUsersInSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).UpdateSystemNotificationUsersInSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/UpdateSystemNotificationUsersInSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).UpdateSystemNotificationUsersInSurveyRequest(ctx, req.(*UpdateSystemNotificationUsersInSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharetoSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharetoSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharetoSurveyRequest(ctx, req.(*SharetoSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_DiscardSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).DiscardSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/DiscardSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).DiscardSurveyRequest(ctx, req.(*DiscardSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_CompleteSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).CompleteSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/CompleteSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).CompleteSurveyRequest(ctx, req.(*CompleteSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_CreateSurveyReplyDueDateChangeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyReplyDueDateChangeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).CreateSurveyReplyDueDateChangeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/CreateSurveyReplyDueDateChangeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).CreateSurveyReplyDueDateChangeResult(ctx, req.(*CreateSurveyReplyDueDateChangeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyReplyDueDateChangeResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyReplyDueDateChangeResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyReplyDueDateChangeResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyReplyDueDateChangeResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyReplyDueDateChangeResults(ctx, req.(*ListSurveyReplyDueDateChangeResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyReplyDueDateChangeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyReplyDueDateChangeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyReplyDueDateChangeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyReplyDueDateChangeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyReplyDueDateChangeResult(ctx, req.(*GetSurveyReplyDueDateChangeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharetoSurveyReplyDueDateChangeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoSurveyReplyDueDateChangeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharetoSurveyReplyDueDateChangeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyReplyDueDateChangeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharetoSurveyReplyDueDateChangeResult(ctx, req.(*SharetoSurveyReplyDueDateChangeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_CreateSurveyResultChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyResultChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).CreateSurveyResultChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/CreateSurveyResultChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).CreateSurveyResultChangeRequest(ctx, req.(*CreateSurveyResultChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyResultChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyResultChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyResultChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyResultChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyResultChangeRequests(ctx, req.(*ListSurveyResultChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyResultChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyResultChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyResultChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyResultChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyResultChangeRequest(ctx, req.(*GetSurveyResultChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharetoSurveyResultChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoSurveyResultChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharetoSurveyResultChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyResultChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharetoSurveyResultChangeRequest(ctx, req.(*SharetoSurveyResultChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_CreateSurveyReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).CreateSurveyReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/CreateSurveyReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).CreateSurveyReminder(ctx, req.(*CreateSurveyReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyRemindersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyReminders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyReminders(ctx, req.(*ListSurveyRemindersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyReminder(ctx, req.(*GetSurveyReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharetoSurveyReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoSurveyReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharetoSurveyReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharetoSurveyReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharetoSurveyReminder(ctx, req.(*SharetoSurveyReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ExportSurveyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSurveyRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ExportSurveyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ExportSurveyRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ExportSurveyRequests(ctx, req.(*ExportSurveyRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyRequestFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyRequestFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyRequestFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyRequestFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyRequestFormats(ctx, req.(*ListSurveyRequestFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharedListSurveyReplyDueDateChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListSurveyReplyDueDateChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharedListSurveyReplyDueDateChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharedListSurveyReplyDueDateChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharedListSurveyReplyDueDateChangeRequests(ctx, req.(*SharedListSurveyReplyDueDateChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharedGetSurveyReplyDueDateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetSurveyReplyDueDateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharedGetSurveyReplyDueDateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharedGetSurveyReplyDueDateChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharedGetSurveyReplyDueDateChangeRequest(ctx, req.(*SharedGetSurveyReplyDueDateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharedGetSurveyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetSurveyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharedGetSurveyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharedGetSurveyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharedGetSurveyResult(ctx, req.(*SharedGetSurveyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharedListSurveyResultChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListSurveyResultChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharedListSurveyResultChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharedListSurveyResultChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharedListSurveyResultChangeRequests(ctx, req.(*SharedListSurveyResultChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_SharedGetSurveyResultChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetSurveyResultChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).SharedGetSurveyResultChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/SharedGetSurveyResultChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).SharedGetSurveyResultChangeRequest(ctx, req.(*SharedGetSurveyResultChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ExpandedListSurveyRequestContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandedListSurveyRequestContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ExpandedListSurveyRequestContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ExpandedListSurveyRequestContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ExpandedListSurveyRequestContents(ctx, req.(*ExpandedListSurveyRequestContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ExpandedGetSurveyRequestContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandedGetSurveyRequestContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ExpandedGetSurveyRequestContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ExpandedGetSurveyRequestContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ExpandedGetSurveyRequestContent(ctx, req.(*ExpandedGetSurveyRequestContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyBaseRequestContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyBaseRequestContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyBaseRequestContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyBaseRequestContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyBaseRequestContents(ctx, req.(*ListSurveyBaseRequestContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyBaseRequestContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyBaseRequestContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyBaseRequestContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyBaseRequestContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyBaseRequestContent(ctx, req.(*GetSurveyBaseRequestContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ListSurveyRequestContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyRequestContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ListSurveyRequestContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ListSurveyRequestContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ListSurveyRequestContents(ctx, req.(*ListSurveyRequestContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_GetSurveyRequestContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyRequestContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).GetSurveyRequestContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/GetSurveyRequestContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).GetSurveyRequestContent(ctx, req.(*GetSurveyRequestContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveySenderService_ExportedSurveyResultFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportedSurveyResultFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveySenderServiceServer).ExportedSurveyResultFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveySenderService/ExportedSurveyResultFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveySenderServiceServer).ExportedSurveyResultFile(ctx, req.(*ExportedSurveyResultFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveySenderService_ServiceDesc is the grpc.ServiceDesc for SurveySenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveySenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.survey.SurveySenderService",
	HandlerType: (*SurveySenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurveyRequestCatalog",
			Handler:    _SurveySenderService_CreateSurveyRequestCatalog_Handler,
		},
		{
			MethodName: "ListSurveyRequestCatalogs",
			Handler:    _SurveySenderService_ListSurveyRequestCatalogs_Handler,
		},
		{
			MethodName: "GetSurveyRequestCatalog",
			Handler:    _SurveySenderService_GetSurveyRequestCatalog_Handler,
		},
		{
			MethodName: "UpdateSurveyRequestCatalog",
			Handler:    _SurveySenderService_UpdateSurveyRequestCatalog_Handler,
		},
		{
			MethodName: "DeleteSurveyRequestCatalog",
			Handler:    _SurveySenderService_DeleteSurveyRequestCatalog_Handler,
		},
		{
			MethodName: "CreateSurveyBaseRequest",
			Handler:    _SurveySenderService_CreateSurveyBaseRequest_Handler,
		},
		{
			MethodName: "UpdateSurveyBaseRequest",
			Handler:    _SurveySenderService_UpdateSurveyBaseRequest_Handler,
		},
		{
			MethodName: "DeleteSurveyBaseRequest",
			Handler:    _SurveySenderService_DeleteSurveyBaseRequest_Handler,
		},
		{
			MethodName: "ApprovalRequestSurveyBaseRequest",
			Handler:    _SurveySenderService_ApprovalRequestSurveyBaseRequest_Handler,
		},
		{
			MethodName: "RejectSurveyBaseRequest",
			Handler:    _SurveySenderService_RejectSurveyBaseRequest_Handler,
		},
		{
			MethodName: "ApproveSurveyBaseRequest",
			Handler:    _SurveySenderService_ApproveSurveyBaseRequest_Handler,
		},
		{
			MethodName: "GetSurveyRequest",
			Handler:    _SurveySenderService_GetSurveyRequest_Handler,
		},
		{
			MethodName: "UpdateSurveyRequest",
			Handler:    _SurveySenderService_UpdateSurveyRequest_Handler,
		},
		{
			MethodName: "UpdateSystemNotificationUsersInSurveyRequest",
			Handler:    _SurveySenderService_UpdateSystemNotificationUsersInSurveyRequest_Handler,
		},
		{
			MethodName: "SharetoSurveyRequest",
			Handler:    _SurveySenderService_SharetoSurveyRequest_Handler,
		},
		{
			MethodName: "DiscardSurveyRequest",
			Handler:    _SurveySenderService_DiscardSurveyRequest_Handler,
		},
		{
			MethodName: "CompleteSurveyRequest",
			Handler:    _SurveySenderService_CompleteSurveyRequest_Handler,
		},
		{
			MethodName: "CreateSurveyReplyDueDateChangeResult",
			Handler:    _SurveySenderService_CreateSurveyReplyDueDateChangeResult_Handler,
		},
		{
			MethodName: "ListSurveyReplyDueDateChangeResults",
			Handler:    _SurveySenderService_ListSurveyReplyDueDateChangeResults_Handler,
		},
		{
			MethodName: "GetSurveyReplyDueDateChangeResult",
			Handler:    _SurveySenderService_GetSurveyReplyDueDateChangeResult_Handler,
		},
		{
			MethodName: "SharetoSurveyReplyDueDateChangeResult",
			Handler:    _SurveySenderService_SharetoSurveyReplyDueDateChangeResult_Handler,
		},
		{
			MethodName: "CreateSurveyResultChangeRequest",
			Handler:    _SurveySenderService_CreateSurveyResultChangeRequest_Handler,
		},
		{
			MethodName: "ListSurveyResultChangeRequests",
			Handler:    _SurveySenderService_ListSurveyResultChangeRequests_Handler,
		},
		{
			MethodName: "GetSurveyResultChangeRequest",
			Handler:    _SurveySenderService_GetSurveyResultChangeRequest_Handler,
		},
		{
			MethodName: "SharetoSurveyResultChangeRequest",
			Handler:    _SurveySenderService_SharetoSurveyResultChangeRequest_Handler,
		},
		{
			MethodName: "CreateSurveyReminder",
			Handler:    _SurveySenderService_CreateSurveyReminder_Handler,
		},
		{
			MethodName: "ListSurveyReminders",
			Handler:    _SurveySenderService_ListSurveyReminders_Handler,
		},
		{
			MethodName: "GetSurveyReminder",
			Handler:    _SurveySenderService_GetSurveyReminder_Handler,
		},
		{
			MethodName: "SharetoSurveyReminder",
			Handler:    _SurveySenderService_SharetoSurveyReminder_Handler,
		},
		{
			MethodName: "ExportSurveyRequests",
			Handler:    _SurveySenderService_ExportSurveyRequests_Handler,
		},
		{
			MethodName: "ListSurveyRequestFormats",
			Handler:    _SurveySenderService_ListSurveyRequestFormats_Handler,
		},
		{
			MethodName: "SharedListSurveyReplyDueDateChangeRequests",
			Handler:    _SurveySenderService_SharedListSurveyReplyDueDateChangeRequests_Handler,
		},
		{
			MethodName: "SharedGetSurveyReplyDueDateChangeRequest",
			Handler:    _SurveySenderService_SharedGetSurveyReplyDueDateChangeRequest_Handler,
		},
		{
			MethodName: "SharedGetSurveyResult",
			Handler:    _SurveySenderService_SharedGetSurveyResult_Handler,
		},
		{
			MethodName: "SharedListSurveyResultChangeRequests",
			Handler:    _SurveySenderService_SharedListSurveyResultChangeRequests_Handler,
		},
		{
			MethodName: "SharedGetSurveyResultChangeRequest",
			Handler:    _SurveySenderService_SharedGetSurveyResultChangeRequest_Handler,
		},
		{
			MethodName: "ExpandedListSurveyRequestContents",
			Handler:    _SurveySenderService_ExpandedListSurveyRequestContents_Handler,
		},
		{
			MethodName: "ExpandedGetSurveyRequestContent",
			Handler:    _SurveySenderService_ExpandedGetSurveyRequestContent_Handler,
		},
		{
			MethodName: "ListSurveyBaseRequestContents",
			Handler:    _SurveySenderService_ListSurveyBaseRequestContents_Handler,
		},
		{
			MethodName: "GetSurveyBaseRequestContent",
			Handler:    _SurveySenderService_GetSurveyBaseRequestContent_Handler,
		},
		{
			MethodName: "ListSurveyRequestContents",
			Handler:    _SurveySenderService_ListSurveyRequestContents_Handler,
		},
		{
			MethodName: "GetSurveyRequestContent",
			Handler:    _SurveySenderService_GetSurveyRequestContent_Handler,
		},
		{
			MethodName: "ExportedSurveyResultFile",
			Handler:    _SurveySenderService_ExportedSurveyResultFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}

// SurveyReceiverServiceClient is the client API for SurveyReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyReceiverServiceClient interface {
	// 回答期日変更依頼データ
	CreateSurveyReplyDueDateChangeRequest(ctx context.Context, in *CreateSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeRequest, error)
	ListSurveyReplyDueDateChangeRequests(ctx context.Context, in *ListSurveyReplyDueDateChangeRequestsRequest, opts ...grpc.CallOption) (*ListSurveyReplyDueDateChangeRequestsResponse, error)
	GetSurveyReplyDueDateChangeRequest(ctx context.Context, in *GetSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeRequest, error)
	// 回答期日変更依頼データ を 公開 する
	SharetoSurveyReplyDueDateChangeRequest(ctx context.Context, in *SharetoSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SharetoSurveyReplyDueDateChangeRequestResponse, error)
	// 依頼受信データ
	GetSurveyReception(ctx context.Context, in *GetSurveyReceptionRequest, opts ...grpc.CallOption) (*SurveyReception, error)
	UpdateSurveyReception(ctx context.Context, in *UpdateSurveyReceptionRequest, opts ...grpc.CallOption) (*SurveyReception, error)
	// 依頼受信データ.システム通知先
	UpdateSystemNotificationUsersInSurveyReception(ctx context.Context, in *UpdateSystemNotificationUsersInSurveyReceptionRequest, opts ...grpc.CallOption) (*SurveyReception, error)
	// 依頼回答データ
	CreateSurveyResult(ctx context.Context, in *CreateSurveyResultRequest, opts ...grpc.CallOption) (*SurveyResult, error)
	// 依頼回答データ を 公開 する
	SharetoSurveyResult(ctx context.Context, in *SharetoSurveyResultRequest, opts ...grpc.CallOption) (*SharetoSurveyResultResponse, error)
	// 公開された 依頼明細データ
	SharedGetSurveyRequest(ctx context.Context, in *SharedGetSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error)
	// 公開された 回答期日変更データ
	SharedListSurveyReplyDueDateChangeResults(ctx context.Context, in *SharedListSurveyReplyDueDateChangeResultsRequest, opts ...grpc.CallOption) (*SharedListSurveyReplyDueDateChangeResultsResponse, error)
	SharedGetSurveyReplyDueDateChangeResult(ctx context.Context, in *SharedGetSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeResult, error)
	// 公開された 催促データ
	SharedListSurveyReminders(ctx context.Context, in *SharedListSurveyRemindersRequest, opts ...grpc.CallOption) (*SharedListSurveyRemindersResponse, error)
	SharedGetSurveyReminder(ctx context.Context, in *SharedGetSurveyReminderRequest, opts ...grpc.CallOption) (*SurveyReminder, error)
	// 依頼受信コンテンツ
	ListSurveyReceptionContents(ctx context.Context, in *ListSurveyReceptionContentsRequest, opts ...grpc.CallOption) (*ListSurveyReceptionContentsResponse, error)
	GetSurveyReceptionContent(ctx context.Context, in *GetSurveyReceptionContentRequest, opts ...grpc.CallOption) (*SurveyReceptionContent, error)
	// 依頼明細データ を 開封済みにする
	OpenSurveyRequest(ctx context.Context, in *OpenSurveyRequestRequest, opts ...grpc.CallOption) (*OpenSurveyRequestResponse, error)
}

type surveyReceiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyReceiverServiceClient(cc grpc.ClientConnInterface) SurveyReceiverServiceClient {
	return &surveyReceiverServiceClient{cc}
}

func (c *surveyReceiverServiceClient) CreateSurveyReplyDueDateChangeRequest(ctx context.Context, in *CreateSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeRequest, error) {
	out := new(SurveyReplyDueDateChangeRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/CreateSurveyReplyDueDateChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) ListSurveyReplyDueDateChangeRequests(ctx context.Context, in *ListSurveyReplyDueDateChangeRequestsRequest, opts ...grpc.CallOption) (*ListSurveyReplyDueDateChangeRequestsResponse, error) {
	out := new(ListSurveyReplyDueDateChangeRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/ListSurveyReplyDueDateChangeRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) GetSurveyReplyDueDateChangeRequest(ctx context.Context, in *GetSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeRequest, error) {
	out := new(SurveyReplyDueDateChangeRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/GetSurveyReplyDueDateChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharetoSurveyReplyDueDateChangeRequest(ctx context.Context, in *SharetoSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*SharetoSurveyReplyDueDateChangeRequestResponse, error) {
	out := new(SharetoSurveyReplyDueDateChangeRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharetoSurveyReplyDueDateChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) GetSurveyReception(ctx context.Context, in *GetSurveyReceptionRequest, opts ...grpc.CallOption) (*SurveyReception, error) {
	out := new(SurveyReception)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/GetSurveyReception", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) UpdateSurveyReception(ctx context.Context, in *UpdateSurveyReceptionRequest, opts ...grpc.CallOption) (*SurveyReception, error) {
	out := new(SurveyReception)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/UpdateSurveyReception", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) UpdateSystemNotificationUsersInSurveyReception(ctx context.Context, in *UpdateSystemNotificationUsersInSurveyReceptionRequest, opts ...grpc.CallOption) (*SurveyReception, error) {
	out := new(SurveyReception)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/UpdateSystemNotificationUsersInSurveyReception", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) CreateSurveyResult(ctx context.Context, in *CreateSurveyResultRequest, opts ...grpc.CallOption) (*SurveyResult, error) {
	out := new(SurveyResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/CreateSurveyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharetoSurveyResult(ctx context.Context, in *SharetoSurveyResultRequest, opts ...grpc.CallOption) (*SharetoSurveyResultResponse, error) {
	out := new(SharetoSurveyResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharetoSurveyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharedGetSurveyRequest(ctx context.Context, in *SharedGetSurveyRequestRequest, opts ...grpc.CallOption) (*SurveyRequest, error) {
	out := new(SurveyRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharedGetSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharedListSurveyReplyDueDateChangeResults(ctx context.Context, in *SharedListSurveyReplyDueDateChangeResultsRequest, opts ...grpc.CallOption) (*SharedListSurveyReplyDueDateChangeResultsResponse, error) {
	out := new(SharedListSurveyReplyDueDateChangeResultsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharedListSurveyReplyDueDateChangeResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharedGetSurveyReplyDueDateChangeResult(ctx context.Context, in *SharedGetSurveyReplyDueDateChangeResultRequest, opts ...grpc.CallOption) (*SurveyReplyDueDateChangeResult, error) {
	out := new(SurveyReplyDueDateChangeResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharedGetSurveyReplyDueDateChangeResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharedListSurveyReminders(ctx context.Context, in *SharedListSurveyRemindersRequest, opts ...grpc.CallOption) (*SharedListSurveyRemindersResponse, error) {
	out := new(SharedListSurveyRemindersResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharedListSurveyReminders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) SharedGetSurveyReminder(ctx context.Context, in *SharedGetSurveyReminderRequest, opts ...grpc.CallOption) (*SurveyReminder, error) {
	out := new(SurveyReminder)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/SharedGetSurveyReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) ListSurveyReceptionContents(ctx context.Context, in *ListSurveyReceptionContentsRequest, opts ...grpc.CallOption) (*ListSurveyReceptionContentsResponse, error) {
	out := new(ListSurveyReceptionContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/ListSurveyReceptionContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) GetSurveyReceptionContent(ctx context.Context, in *GetSurveyReceptionContentRequest, opts ...grpc.CallOption) (*SurveyReceptionContent, error) {
	out := new(SurveyReceptionContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/GetSurveyReceptionContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyReceiverServiceClient) OpenSurveyRequest(ctx context.Context, in *OpenSurveyRequestRequest, opts ...grpc.CallOption) (*OpenSurveyRequestResponse, error) {
	out := new(OpenSurveyRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyReceiverService/OpenSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyReceiverServiceServer is the server API for SurveyReceiverService service.
// All implementations must embed UnimplementedSurveyReceiverServiceServer
// for forward compatibility
type SurveyReceiverServiceServer interface {
	// 回答期日変更依頼データ
	CreateSurveyReplyDueDateChangeRequest(context.Context, *CreateSurveyReplyDueDateChangeRequestRequest) (*SurveyReplyDueDateChangeRequest, error)
	ListSurveyReplyDueDateChangeRequests(context.Context, *ListSurveyReplyDueDateChangeRequestsRequest) (*ListSurveyReplyDueDateChangeRequestsResponse, error)
	GetSurveyReplyDueDateChangeRequest(context.Context, *GetSurveyReplyDueDateChangeRequestRequest) (*SurveyReplyDueDateChangeRequest, error)
	// 回答期日変更依頼データ を 公開 する
	SharetoSurveyReplyDueDateChangeRequest(context.Context, *SharetoSurveyReplyDueDateChangeRequestRequest) (*SharetoSurveyReplyDueDateChangeRequestResponse, error)
	// 依頼受信データ
	GetSurveyReception(context.Context, *GetSurveyReceptionRequest) (*SurveyReception, error)
	UpdateSurveyReception(context.Context, *UpdateSurveyReceptionRequest) (*SurveyReception, error)
	// 依頼受信データ.システム通知先
	UpdateSystemNotificationUsersInSurveyReception(context.Context, *UpdateSystemNotificationUsersInSurveyReceptionRequest) (*SurveyReception, error)
	// 依頼回答データ
	CreateSurveyResult(context.Context, *CreateSurveyResultRequest) (*SurveyResult, error)
	// 依頼回答データ を 公開 する
	SharetoSurveyResult(context.Context, *SharetoSurveyResultRequest) (*SharetoSurveyResultResponse, error)
	// 公開された 依頼明細データ
	SharedGetSurveyRequest(context.Context, *SharedGetSurveyRequestRequest) (*SurveyRequest, error)
	// 公開された 回答期日変更データ
	SharedListSurveyReplyDueDateChangeResults(context.Context, *SharedListSurveyReplyDueDateChangeResultsRequest) (*SharedListSurveyReplyDueDateChangeResultsResponse, error)
	SharedGetSurveyReplyDueDateChangeResult(context.Context, *SharedGetSurveyReplyDueDateChangeResultRequest) (*SurveyReplyDueDateChangeResult, error)
	// 公開された 催促データ
	SharedListSurveyReminders(context.Context, *SharedListSurveyRemindersRequest) (*SharedListSurveyRemindersResponse, error)
	SharedGetSurveyReminder(context.Context, *SharedGetSurveyReminderRequest) (*SurveyReminder, error)
	// 依頼受信コンテンツ
	ListSurveyReceptionContents(context.Context, *ListSurveyReceptionContentsRequest) (*ListSurveyReceptionContentsResponse, error)
	GetSurveyReceptionContent(context.Context, *GetSurveyReceptionContentRequest) (*SurveyReceptionContent, error)
	// 依頼明細データ を 開封済みにする
	OpenSurveyRequest(context.Context, *OpenSurveyRequestRequest) (*OpenSurveyRequestResponse, error)
	mustEmbedUnimplementedSurveyReceiverServiceServer()
}

// UnimplementedSurveyReceiverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyReceiverServiceServer struct {
}

func (UnimplementedSurveyReceiverServiceServer) CreateSurveyReplyDueDateChangeRequest(context.Context, *CreateSurveyReplyDueDateChangeRequestRequest) (*SurveyReplyDueDateChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyReplyDueDateChangeRequest not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) ListSurveyReplyDueDateChangeRequests(context.Context, *ListSurveyReplyDueDateChangeRequestsRequest) (*ListSurveyReplyDueDateChangeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyReplyDueDateChangeRequests not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) GetSurveyReplyDueDateChangeRequest(context.Context, *GetSurveyReplyDueDateChangeRequestRequest) (*SurveyReplyDueDateChangeRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyReplyDueDateChangeRequest not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharetoSurveyReplyDueDateChangeRequest(context.Context, *SharetoSurveyReplyDueDateChangeRequestRequest) (*SharetoSurveyReplyDueDateChangeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoSurveyReplyDueDateChangeRequest not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) GetSurveyReception(context.Context, *GetSurveyReceptionRequest) (*SurveyReception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyReception not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) UpdateSurveyReception(context.Context, *UpdateSurveyReceptionRequest) (*SurveyReception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyReception not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) UpdateSystemNotificationUsersInSurveyReception(context.Context, *UpdateSystemNotificationUsersInSurveyReceptionRequest) (*SurveyReception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemNotificationUsersInSurveyReception not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) CreateSurveyResult(context.Context, *CreateSurveyResultRequest) (*SurveyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyResult not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharetoSurveyResult(context.Context, *SharetoSurveyResultRequest) (*SharetoSurveyResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoSurveyResult not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharedGetSurveyRequest(context.Context, *SharedGetSurveyRequestRequest) (*SurveyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetSurveyRequest not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharedListSurveyReplyDueDateChangeResults(context.Context, *SharedListSurveyReplyDueDateChangeResultsRequest) (*SharedListSurveyReplyDueDateChangeResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListSurveyReplyDueDateChangeResults not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharedGetSurveyReplyDueDateChangeResult(context.Context, *SharedGetSurveyReplyDueDateChangeResultRequest) (*SurveyReplyDueDateChangeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetSurveyReplyDueDateChangeResult not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharedListSurveyReminders(context.Context, *SharedListSurveyRemindersRequest) (*SharedListSurveyRemindersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListSurveyReminders not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) SharedGetSurveyReminder(context.Context, *SharedGetSurveyReminderRequest) (*SurveyReminder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetSurveyReminder not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) ListSurveyReceptionContents(context.Context, *ListSurveyReceptionContentsRequest) (*ListSurveyReceptionContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSurveyReceptionContents not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) GetSurveyReceptionContent(context.Context, *GetSurveyReceptionContentRequest) (*SurveyReceptionContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyReceptionContent not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) OpenSurveyRequest(context.Context, *OpenSurveyRequestRequest) (*OpenSurveyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSurveyRequest not implemented")
}
func (UnimplementedSurveyReceiverServiceServer) mustEmbedUnimplementedSurveyReceiverServiceServer() {}

// UnsafeSurveyReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyReceiverServiceServer will
// result in compilation errors.
type UnsafeSurveyReceiverServiceServer interface {
	mustEmbedUnimplementedSurveyReceiverServiceServer()
}

func RegisterSurveyReceiverServiceServer(s grpc.ServiceRegistrar, srv SurveyReceiverServiceServer) {
	s.RegisterService(&SurveyReceiverService_ServiceDesc, srv)
}

func _SurveyReceiverService_CreateSurveyReplyDueDateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyReplyDueDateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).CreateSurveyReplyDueDateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/CreateSurveyReplyDueDateChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).CreateSurveyReplyDueDateChangeRequest(ctx, req.(*CreateSurveyReplyDueDateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_ListSurveyReplyDueDateChangeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyReplyDueDateChangeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).ListSurveyReplyDueDateChangeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/ListSurveyReplyDueDateChangeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).ListSurveyReplyDueDateChangeRequests(ctx, req.(*ListSurveyReplyDueDateChangeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_GetSurveyReplyDueDateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyReplyDueDateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).GetSurveyReplyDueDateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/GetSurveyReplyDueDateChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).GetSurveyReplyDueDateChangeRequest(ctx, req.(*GetSurveyReplyDueDateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharetoSurveyReplyDueDateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoSurveyReplyDueDateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharetoSurveyReplyDueDateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharetoSurveyReplyDueDateChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharetoSurveyReplyDueDateChangeRequest(ctx, req.(*SharetoSurveyReplyDueDateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_GetSurveyReception_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyReceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).GetSurveyReception(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/GetSurveyReception",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).GetSurveyReception(ctx, req.(*GetSurveyReceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_UpdateSurveyReception_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSurveyReceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).UpdateSurveyReception(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/UpdateSurveyReception",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).UpdateSurveyReception(ctx, req.(*UpdateSurveyReceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_UpdateSystemNotificationUsersInSurveyReception_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemNotificationUsersInSurveyReceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).UpdateSystemNotificationUsersInSurveyReception(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/UpdateSystemNotificationUsersInSurveyReception",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).UpdateSystemNotificationUsersInSurveyReception(ctx, req.(*UpdateSystemNotificationUsersInSurveyReceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_CreateSurveyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurveyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).CreateSurveyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/CreateSurveyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).CreateSurveyResult(ctx, req.(*CreateSurveyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharetoSurveyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoSurveyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharetoSurveyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharetoSurveyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharetoSurveyResult(ctx, req.(*SharetoSurveyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharedGetSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharedGetSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharedGetSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharedGetSurveyRequest(ctx, req.(*SharedGetSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharedListSurveyReplyDueDateChangeResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListSurveyReplyDueDateChangeResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharedListSurveyReplyDueDateChangeResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharedListSurveyReplyDueDateChangeResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharedListSurveyReplyDueDateChangeResults(ctx, req.(*SharedListSurveyReplyDueDateChangeResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharedGetSurveyReplyDueDateChangeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetSurveyReplyDueDateChangeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharedGetSurveyReplyDueDateChangeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharedGetSurveyReplyDueDateChangeResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharedGetSurveyReplyDueDateChangeResult(ctx, req.(*SharedGetSurveyReplyDueDateChangeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharedListSurveyReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListSurveyRemindersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharedListSurveyReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharedListSurveyReminders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharedListSurveyReminders(ctx, req.(*SharedListSurveyRemindersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_SharedGetSurveyReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetSurveyReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).SharedGetSurveyReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/SharedGetSurveyReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).SharedGetSurveyReminder(ctx, req.(*SharedGetSurveyReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_ListSurveyReceptionContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSurveyReceptionContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).ListSurveyReceptionContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/ListSurveyReceptionContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).ListSurveyReceptionContents(ctx, req.(*ListSurveyReceptionContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_GetSurveyReceptionContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSurveyReceptionContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).GetSurveyReceptionContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/GetSurveyReceptionContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).GetSurveyReceptionContent(ctx, req.(*GetSurveyReceptionContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyReceiverService_OpenSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyReceiverServiceServer).OpenSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyReceiverService/OpenSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyReceiverServiceServer).OpenSurveyRequest(ctx, req.(*OpenSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyReceiverService_ServiceDesc is the grpc.ServiceDesc for SurveyReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.survey.SurveyReceiverService",
	HandlerType: (*SurveyReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurveyReplyDueDateChangeRequest",
			Handler:    _SurveyReceiverService_CreateSurveyReplyDueDateChangeRequest_Handler,
		},
		{
			MethodName: "ListSurveyReplyDueDateChangeRequests",
			Handler:    _SurveyReceiverService_ListSurveyReplyDueDateChangeRequests_Handler,
		},
		{
			MethodName: "GetSurveyReplyDueDateChangeRequest",
			Handler:    _SurveyReceiverService_GetSurveyReplyDueDateChangeRequest_Handler,
		},
		{
			MethodName: "SharetoSurveyReplyDueDateChangeRequest",
			Handler:    _SurveyReceiverService_SharetoSurveyReplyDueDateChangeRequest_Handler,
		},
		{
			MethodName: "GetSurveyReception",
			Handler:    _SurveyReceiverService_GetSurveyReception_Handler,
		},
		{
			MethodName: "UpdateSurveyReception",
			Handler:    _SurveyReceiverService_UpdateSurveyReception_Handler,
		},
		{
			MethodName: "UpdateSystemNotificationUsersInSurveyReception",
			Handler:    _SurveyReceiverService_UpdateSystemNotificationUsersInSurveyReception_Handler,
		},
		{
			MethodName: "CreateSurveyResult",
			Handler:    _SurveyReceiverService_CreateSurveyResult_Handler,
		},
		{
			MethodName: "SharetoSurveyResult",
			Handler:    _SurveyReceiverService_SharetoSurveyResult_Handler,
		},
		{
			MethodName: "SharedGetSurveyRequest",
			Handler:    _SurveyReceiverService_SharedGetSurveyRequest_Handler,
		},
		{
			MethodName: "SharedListSurveyReplyDueDateChangeResults",
			Handler:    _SurveyReceiverService_SharedListSurveyReplyDueDateChangeResults_Handler,
		},
		{
			MethodName: "SharedGetSurveyReplyDueDateChangeResult",
			Handler:    _SurveyReceiverService_SharedGetSurveyReplyDueDateChangeResult_Handler,
		},
		{
			MethodName: "SharedListSurveyReminders",
			Handler:    _SurveyReceiverService_SharedListSurveyReminders_Handler,
		},
		{
			MethodName: "SharedGetSurveyReminder",
			Handler:    _SurveyReceiverService_SharedGetSurveyReminder_Handler,
		},
		{
			MethodName: "ListSurveyReceptionContents",
			Handler:    _SurveyReceiverService_ListSurveyReceptionContents_Handler,
		},
		{
			MethodName: "GetSurveyReceptionContent",
			Handler:    _SurveyReceiverService_GetSurveyReceptionContent_Handler,
		},
		{
			MethodName: "OpenSurveyRequest",
			Handler:    _SurveyReceiverService_OpenSurveyRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}

// SurveyTaskListServiceClient is the client API for SurveyTaskListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyTaskListServiceClient interface {
	// 調査依頼完了
	UncompletedListSurveyRequest(ctx context.Context, in *UncompletedListSurveyRequestRequest, opts ...grpc.CallOption) (*UncompletedListSurveyRequestResponse, error)
	// 回答期日変更
	UnchangedListSurveyReplyDueDateChangeRequest(ctx context.Context, in *UnchangedListSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*UnchangedListSurveyReplyDueDateChangeRequestResponse, error)
}

type surveyTaskListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyTaskListServiceClient(cc grpc.ClientConnInterface) SurveyTaskListServiceClient {
	return &surveyTaskListServiceClient{cc}
}

func (c *surveyTaskListServiceClient) UncompletedListSurveyRequest(ctx context.Context, in *UncompletedListSurveyRequestRequest, opts ...grpc.CallOption) (*UncompletedListSurveyRequestResponse, error) {
	out := new(UncompletedListSurveyRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyTaskListService/UncompletedListSurveyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyTaskListServiceClient) UnchangedListSurveyReplyDueDateChangeRequest(ctx context.Context, in *UnchangedListSurveyReplyDueDateChangeRequestRequest, opts ...grpc.CallOption) (*UnchangedListSurveyReplyDueDateChangeRequestResponse, error) {
	out := new(UnchangedListSurveyReplyDueDateChangeRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.survey.SurveyTaskListService/UnchangedListSurveyReplyDueDateChangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyTaskListServiceServer is the server API for SurveyTaskListService service.
// All implementations must embed UnimplementedSurveyTaskListServiceServer
// for forward compatibility
type SurveyTaskListServiceServer interface {
	// 調査依頼完了
	UncompletedListSurveyRequest(context.Context, *UncompletedListSurveyRequestRequest) (*UncompletedListSurveyRequestResponse, error)
	// 回答期日変更
	UnchangedListSurveyReplyDueDateChangeRequest(context.Context, *UnchangedListSurveyReplyDueDateChangeRequestRequest) (*UnchangedListSurveyReplyDueDateChangeRequestResponse, error)
	mustEmbedUnimplementedSurveyTaskListServiceServer()
}

// UnimplementedSurveyTaskListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyTaskListServiceServer struct {
}

func (UnimplementedSurveyTaskListServiceServer) UncompletedListSurveyRequest(context.Context, *UncompletedListSurveyRequestRequest) (*UncompletedListSurveyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompletedListSurveyRequest not implemented")
}
func (UnimplementedSurveyTaskListServiceServer) UnchangedListSurveyReplyDueDateChangeRequest(context.Context, *UnchangedListSurveyReplyDueDateChangeRequestRequest) (*UnchangedListSurveyReplyDueDateChangeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnchangedListSurveyReplyDueDateChangeRequest not implemented")
}
func (UnimplementedSurveyTaskListServiceServer) mustEmbedUnimplementedSurveyTaskListServiceServer() {}

// UnsafeSurveyTaskListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyTaskListServiceServer will
// result in compilation errors.
type UnsafeSurveyTaskListServiceServer interface {
	mustEmbedUnimplementedSurveyTaskListServiceServer()
}

func RegisterSurveyTaskListServiceServer(s grpc.ServiceRegistrar, srv SurveyTaskListServiceServer) {
	s.RegisterService(&SurveyTaskListService_ServiceDesc, srv)
}

func _SurveyTaskListService_UncompletedListSurveyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompletedListSurveyRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyTaskListServiceServer).UncompletedListSurveyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyTaskListService/UncompletedListSurveyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyTaskListServiceServer).UncompletedListSurveyRequest(ctx, req.(*UncompletedListSurveyRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyTaskListService_UnchangedListSurveyReplyDueDateChangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnchangedListSurveyReplyDueDateChangeRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyTaskListServiceServer).UnchangedListSurveyReplyDueDateChangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.survey.SurveyTaskListService/UnchangedListSurveyReplyDueDateChangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyTaskListServiceServer).UnchangedListSurveyReplyDueDateChangeRequest(ctx, req.(*UnchangedListSurveyReplyDueDateChangeRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyTaskListService_ServiceDesc is the grpc.ServiceDesc for SurveyTaskListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyTaskListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.survey.SurveyTaskListService",
	HandlerType: (*SurveyTaskListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UncompletedListSurveyRequest",
			Handler:    _SurveyTaskListService_UncompletedListSurveyRequest_Handler,
		},
		{
			MethodName: "UnchangedListSurveyReplyDueDateChangeRequest",
			Handler:    _SurveyTaskListService_UnchangedListSurveyReplyDueDateChangeRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}
