// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: survey.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSurveyRequestCatalogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateSurveyRequestCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurveyRequestCatalogRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateSurveyRequestCatalogRequestMultiError, or nil if none found.
func (m *CreateSurveyRequestCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyRequestCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyRequestCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyRequestCatalogRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyRequestCatalogRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequestCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyRequestCatalogRequestValidationError{
				field:  "SurveyRequestCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyRequestCatalogRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyRequestCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateSurveyRequestCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSurveyRequestCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyRequestCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyRequestCatalogRequestMultiError) AllErrors() []error { return m }

// CreateSurveyRequestCatalogRequestValidationError is the validation error
// returned by CreateSurveyRequestCatalogRequest.Validate if the designated
// constraints aren't met.
type CreateSurveyRequestCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyRequestCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyRequestCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyRequestCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyRequestCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyRequestCatalogRequestValidationError) ErrorName() string {
	return "CreateSurveyRequestCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyRequestCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyRequestCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyRequestCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyRequestCatalogRequestValidationError{}

// Validate checks the field values on ListSurveyRequestCatalogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyRequestCatalogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRequestCatalogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSurveyRequestCatalogsRequestMultiError, or nil if none found.
func (m *ListSurveyRequestCatalogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestCatalogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRequestCatalogsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyRequestCatalogsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyRequestCatalogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyRequestCatalogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestCatalogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestCatalogsRequestMultiError) AllErrors() []error { return m }

// ListSurveyRequestCatalogsRequestValidationError is the validation error
// returned by ListSurveyRequestCatalogsRequest.Validate if the designated
// constraints aren't met.
type ListSurveyRequestCatalogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestCatalogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestCatalogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestCatalogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestCatalogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestCatalogsRequestValidationError) ErrorName() string {
	return "ListSurveyRequestCatalogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestCatalogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestCatalogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestCatalogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestCatalogsRequestValidationError{}

// Validate checks the field values on ListSurveyRequestCatalogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyRequestCatalogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRequestCatalogsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyRequestCatalogsResponseMultiError, or nil if none found.
func (m *ListSurveyRequestCatalogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestCatalogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyRequestCatalogsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyRequestCatalogsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyRequestCatalogsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRequestCatalogsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyRequestCatalogsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyRequestCatalogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyRequestCatalogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestCatalogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestCatalogsResponseMultiError) AllErrors() []error { return m }

// ListSurveyRequestCatalogsResponseValidationError is the validation error
// returned by ListSurveyRequestCatalogsResponse.Validate if the designated
// constraints aren't met.
type ListSurveyRequestCatalogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestCatalogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestCatalogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestCatalogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestCatalogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestCatalogsResponseValidationError) ErrorName() string {
	return "ListSurveyRequestCatalogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestCatalogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestCatalogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestCatalogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestCatalogsResponseValidationError{}

// Validate checks the field values on GetSurveyRequestCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSurveyRequestCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyRequestCatalogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSurveyRequestCatalogRequestMultiError, or nil if none found.
func (m *GetSurveyRequestCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyRequestCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestCatalogId

	if len(errors) > 0 {
		return GetSurveyRequestCatalogRequestMultiError(errors)
	}

	return nil
}

// GetSurveyRequestCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by GetSurveyRequestCatalogRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSurveyRequestCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyRequestCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyRequestCatalogRequestMultiError) AllErrors() []error { return m }

// GetSurveyRequestCatalogRequestValidationError is the validation error
// returned by GetSurveyRequestCatalogRequest.Validate if the designated
// constraints aren't met.
type GetSurveyRequestCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyRequestCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyRequestCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyRequestCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyRequestCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyRequestCatalogRequestValidationError) ErrorName() string {
	return "GetSurveyRequestCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyRequestCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyRequestCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyRequestCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyRequestCatalogRequestValidationError{}

// Validate checks the field values on UpdateSurveyRequestCatalogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateSurveyRequestCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurveyRequestCatalogRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateSurveyRequestCatalogRequestMultiError, or nil if none found.
func (m *UpdateSurveyRequestCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurveyRequestCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyRequestCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSurveyRequestCatalogRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSurveyRequestCatalogRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequestCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSurveyRequestCatalogRequestValidationError{
				field:  "SurveyRequestCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSurveyRequestCatalogRequestMultiError(errors)
	}

	return nil
}

// UpdateSurveyRequestCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSurveyRequestCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSurveyRequestCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurveyRequestCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurveyRequestCatalogRequestMultiError) AllErrors() []error { return m }

// UpdateSurveyRequestCatalogRequestValidationError is the validation error
// returned by UpdateSurveyRequestCatalogRequest.Validate if the designated
// constraints aren't met.
type UpdateSurveyRequestCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurveyRequestCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurveyRequestCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurveyRequestCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurveyRequestCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurveyRequestCatalogRequestValidationError) ErrorName() string {
	return "UpdateSurveyRequestCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurveyRequestCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurveyRequestCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurveyRequestCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurveyRequestCatalogRequestValidationError{}

// Validate checks the field values on DeleteSurveyRequestCatalogRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteSurveyRequestCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSurveyRequestCatalogRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteSurveyRequestCatalogRequestMultiError, or nil if none found.
func (m *DeleteSurveyRequestCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSurveyRequestCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyRequestCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSurveyRequestCatalogRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSurveyRequestCatalogRequestValidationError{
					field:  "SurveyRequestCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequestCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSurveyRequestCatalogRequestValidationError{
				field:  "SurveyRequestCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSurveyRequestCatalogRequestMultiError(errors)
	}

	return nil
}

// DeleteSurveyRequestCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteSurveyRequestCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSurveyRequestCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSurveyRequestCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSurveyRequestCatalogRequestMultiError) AllErrors() []error { return m }

// DeleteSurveyRequestCatalogRequestValidationError is the validation error
// returned by DeleteSurveyRequestCatalogRequest.Validate if the designated
// constraints aren't met.
type DeleteSurveyRequestCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSurveyRequestCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSurveyRequestCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSurveyRequestCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSurveyRequestCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSurveyRequestCatalogRequestValidationError) ErrorName() string {
	return "DeleteSurveyRequestCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSurveyRequestCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSurveyRequestCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSurveyRequestCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSurveyRequestCatalogRequestValidationError{}

// Validate checks the field values on CreateSurveyBaseRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurveyBaseRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *CreateSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyBaseRequestRequestValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyBaseRequestRequestValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyBaseRequestRequestValidationError{
				field:  "SurveyBaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyBaseRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSurveyBaseRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// CreateSurveyBaseRequestRequestValidationError is the validation error
// returned by CreateSurveyBaseRequestRequest.Validate if the designated
// constraints aren't met.
type CreateSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "CreateSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on UpdateSurveyBaseRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurveyBaseRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *UpdateSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSurveyBaseRequestRequestValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSurveyBaseRequestRequestValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSurveyBaseRequestRequestValidationError{
				field:  "SurveyBaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateSurveyBaseRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSurveyBaseRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// UpdateSurveyBaseRequestRequestValidationError is the validation error
// returned by UpdateSurveyBaseRequestRequest.Validate if the designated
// constraints aren't met.
type UpdateSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "UpdateSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on DeleteSurveyBaseRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSurveyBaseRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *DeleteSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyBaseRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSurveyBaseRequestRequestValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSurveyBaseRequestRequestValidationError{
					field:  "SurveyBaseRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyBaseRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSurveyBaseRequestRequestValidationError{
				field:  "SurveyBaseRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// DeleteSurveyBaseRequestRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteSurveyBaseRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// DeleteSurveyBaseRequestRequestValidationError is the validation error
// returned by DeleteSurveyBaseRequestRequest.Validate if the designated
// constraints aren't met.
type DeleteSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "DeleteSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on ApprovalRequestSurveyBaseRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApprovalRequestSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApprovalRequestSurveyBaseRequestRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ApprovalRequestSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *ApprovalRequestSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	if all {
		switch v := interface{}(m.GetApprovalPlanStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestSurveyBaseRequestRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestSurveyBaseRequestRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestSurveyBaseRequestRequestValidationError{
				field:  "ApprovalPlanStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalPlanOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestSurveyBaseRequestRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestSurveyBaseRequestRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestSurveyBaseRequestRequestValidationError{
				field:  "ApprovalPlanOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApprovalRequestSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// ApprovalRequestSurveyBaseRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// ApprovalRequestSurveyBaseRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type ApprovalRequestSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// ApprovalRequestSurveyBaseRequestRequestValidationError is the validation
// error returned by ApprovalRequestSurveyBaseRequestRequest.Validate if the
// designated constraints aren't met.
type ApprovalRequestSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "ApprovalRequestSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on ApprovalRequestSurveyBaseRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApprovalRequestSurveyBaseRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApprovalRequestSurveyBaseRequestResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ApprovalRequestSurveyBaseRequestResponseMultiError, or nil if none found.
func (m *ApprovalRequestSurveyBaseRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestSurveyBaseRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApprovalRequestSurveyBaseRequestResponseMultiError(errors)
	}

	return nil
}

// ApprovalRequestSurveyBaseRequestResponseMultiError is an error wrapping
// multiple validation errors returned by
// ApprovalRequestSurveyBaseRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type ApprovalRequestSurveyBaseRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestSurveyBaseRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestSurveyBaseRequestResponseMultiError) AllErrors() []error { return m }

// ApprovalRequestSurveyBaseRequestResponseValidationError is the validation
// error returned by ApprovalRequestSurveyBaseRequestResponse.Validate if the
// designated constraints aren't met.
type ApprovalRequestSurveyBaseRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestSurveyBaseRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestSurveyBaseRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestSurveyBaseRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestSurveyBaseRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestSurveyBaseRequestResponseValidationError) ErrorName() string {
	return "ApprovalRequestSurveyBaseRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestSurveyBaseRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestSurveyBaseRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestSurveyBaseRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestSurveyBaseRequestResponseValidationError{}

// Validate checks the field values on RejectSurveyBaseRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectSurveyBaseRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *RejectSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	// no validation rules for Comment

	if len(errors) > 0 {
		return RejectSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// RejectSurveyBaseRequestRequestMultiError is an error wrapping multiple
// validation errors returned by RejectSurveyBaseRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type RejectSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// RejectSurveyBaseRequestRequestValidationError is the validation error
// returned by RejectSurveyBaseRequestRequest.Validate if the designated
// constraints aren't met.
type RejectSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "RejectSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on RejectSurveyBaseRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectSurveyBaseRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectSurveyBaseRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectSurveyBaseRequestResponseMultiError, or nil if none found.
func (m *RejectSurveyBaseRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectSurveyBaseRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RejectSurveyBaseRequestResponseMultiError(errors)
	}

	return nil
}

// RejectSurveyBaseRequestResponseMultiError is an error wrapping multiple
// validation errors returned by RejectSurveyBaseRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type RejectSurveyBaseRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectSurveyBaseRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectSurveyBaseRequestResponseMultiError) AllErrors() []error { return m }

// RejectSurveyBaseRequestResponseValidationError is the validation error
// returned by RejectSurveyBaseRequestResponse.Validate if the designated
// constraints aren't met.
type RejectSurveyBaseRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectSurveyBaseRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectSurveyBaseRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectSurveyBaseRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectSurveyBaseRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectSurveyBaseRequestResponseValidationError) ErrorName() string {
	return "RejectSurveyBaseRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectSurveyBaseRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectSurveyBaseRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectSurveyBaseRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectSurveyBaseRequestResponseValidationError{}

// Validate checks the field values on ApproveSurveyBaseRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveSurveyBaseRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *ApproveSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApproveSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// ApproveSurveyBaseRequestRequestMultiError is an error wrapping multiple
// validation errors returned by ApproveSurveyBaseRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type ApproveSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// ApproveSurveyBaseRequestRequestValidationError is the validation error
// returned by ApproveSurveyBaseRequestRequest.Validate if the designated
// constraints aren't met.
type ApproveSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "ApproveSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on ApproveSurveyBaseRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApproveSurveyBaseRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveSurveyBaseRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveSurveyBaseRequestResponseMultiError, or nil if none found.
func (m *ApproveSurveyBaseRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveSurveyBaseRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveSurveyBaseRequestResponseMultiError(errors)
	}

	return nil
}

// ApproveSurveyBaseRequestResponseMultiError is an error wrapping multiple
// validation errors returned by
// ApproveSurveyBaseRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveSurveyBaseRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveSurveyBaseRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveSurveyBaseRequestResponseMultiError) AllErrors() []error { return m }

// ApproveSurveyBaseRequestResponseValidationError is the validation error
// returned by ApproveSurveyBaseRequestResponse.Validate if the designated
// constraints aren't met.
type ApproveSurveyBaseRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveSurveyBaseRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveSurveyBaseRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveSurveyBaseRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveSurveyBaseRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveSurveyBaseRequestResponseValidationError) ErrorName() string {
	return "ApproveSurveyBaseRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveSurveyBaseRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveSurveyBaseRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveSurveyBaseRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveSurveyBaseRequestResponseValidationError{}

// Validate checks the field values on GetSurveyRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSurveyRequestRequestMultiError, or nil if none found.
func (m *GetSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	if len(errors) > 0 {
		return GetSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// GetSurveyRequestRequestMultiError is an error wrapping multiple validation
// errors returned by GetSurveyRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyRequestRequestMultiError) AllErrors() []error { return m }

// GetSurveyRequestRequestValidationError is the validation error returned by
// GetSurveyRequestRequest.Validate if the designated constraints aren't met.
type GetSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyRequestRequestValidationError) ErrorName() string {
	return "GetSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyRequestRequestValidationError{}

// Validate checks the field values on UpdateSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSurveyRequestRequestMultiError, or nil if none found.
func (m *UpdateSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSurveyRequestRequestValidationError{
					field:  "SurveyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSurveyRequestRequestValidationError{
					field:  "SurveyRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSurveyRequestRequestValidationError{
				field:  "SurveyRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSurveyRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurveyRequestRequestMultiError) AllErrors() []error { return m }

// UpdateSurveyRequestRequestValidationError is the validation error returned
// by UpdateSurveyRequestRequest.Validate if the designated constraints aren't met.
type UpdateSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurveyRequestRequestValidationError) ErrorName() string {
	return "UpdateSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurveyRequestRequestValidationError{}

// Validate checks the field values on
// UpdateSystemNotificationUsersInSurveyRequestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemNotificationUsersInSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateSystemNotificationUsersInSurveyRequestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateSystemNotificationUsersInSurveyRequestRequestMultiError, or nil if
// none found.
func (m *UpdateSystemNotificationUsersInSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemNotificationUsersInSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSystemNotificationUsersInSurveyRequestRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSystemNotificationUsersInSurveyRequestRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSystemNotificationUsersInSurveyRequestRequestValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UpdateSystemNotificationUsersInSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateSystemNotificationUsersInSurveyRequestRequestMultiError is an error
// wrapping multiple validation errors returned by
// UpdateSystemNotificationUsersInSurveyRequestRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSystemNotificationUsersInSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemNotificationUsersInSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemNotificationUsersInSurveyRequestRequestMultiError) AllErrors() []error { return m }

// UpdateSystemNotificationUsersInSurveyRequestRequestValidationError is the
// validation error returned by
// UpdateSystemNotificationUsersInSurveyRequestRequest.Validate if the
// designated constraints aren't met.
type UpdateSystemNotificationUsersInSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemNotificationUsersInSurveyRequestRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateSystemNotificationUsersInSurveyRequestRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateSystemNotificationUsersInSurveyRequestRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateSystemNotificationUsersInSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemNotificationUsersInSurveyRequestRequestValidationError) ErrorName() string {
	return "UpdateSystemNotificationUsersInSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemNotificationUsersInSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemNotificationUsersInSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemNotificationUsersInSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemNotificationUsersInSurveyRequestRequestValidationError{}

// Validate checks the field values on SharetoSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoSurveyRequestRequestMultiError, or nil if none found.
func (m *SharetoSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	if len(errors) > 0 {
		return SharetoSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type SharetoSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyRequestRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyRequestRequestValidationError is the validation error returned
// by SharetoSurveyRequestRequest.Validate if the designated constraints
// aren't met.
type SharetoSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyRequestRequestValidationError) ErrorName() string {
	return "SharetoSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyRequestRequestValidationError{}

// Validate checks the field values on SharetoSurveyRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoSurveyRequestResponseMultiError, or nil if none found.
func (m *SharetoSurveyRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoSurveyRequestResponseMultiError(errors)
	}

	return nil
}

// SharetoSurveyRequestResponseMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type SharetoSurveyRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyRequestResponseMultiError) AllErrors() []error { return m }

// SharetoSurveyRequestResponseValidationError is the validation error returned
// by SharetoSurveyRequestResponse.Validate if the designated constraints
// aren't met.
type SharetoSurveyRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyRequestResponseValidationError) ErrorName() string {
	return "SharetoSurveyRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyRequestResponseValidationError{}

// Validate checks the field values on DiscardSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscardSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscardSurveyRequestRequestMultiError, or nil if none found.
func (m *DiscardSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	// no validation rules for Comment

	if len(errors) > 0 {
		return DiscardSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// DiscardSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by DiscardSurveyRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type DiscardSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardSurveyRequestRequestMultiError) AllErrors() []error { return m }

// DiscardSurveyRequestRequestValidationError is the validation error returned
// by DiscardSurveyRequestRequest.Validate if the designated constraints
// aren't met.
type DiscardSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardSurveyRequestRequestValidationError) ErrorName() string {
	return "DiscardSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardSurveyRequestRequestValidationError{}

// Validate checks the field values on DiscardSurveyRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscardSurveyRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardSurveyRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscardSurveyRequestResponseMultiError, or nil if none found.
func (m *DiscardSurveyRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardSurveyRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDiscard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscardSurveyRequestResponseValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscardSurveyRequestResponseValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscardSurveyRequestResponseValidationError{
				field:  "Discard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscardSurveyRequestResponseMultiError(errors)
	}

	return nil
}

// DiscardSurveyRequestResponseMultiError is an error wrapping multiple
// validation errors returned by DiscardSurveyRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type DiscardSurveyRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardSurveyRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardSurveyRequestResponseMultiError) AllErrors() []error { return m }

// DiscardSurveyRequestResponseValidationError is the validation error returned
// by DiscardSurveyRequestResponse.Validate if the designated constraints
// aren't met.
type DiscardSurveyRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardSurveyRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardSurveyRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardSurveyRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardSurveyRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardSurveyRequestResponseValidationError) ErrorName() string {
	return "DiscardSurveyRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardSurveyRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardSurveyRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardSurveyRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardSurveyRequestResponseValidationError{}

// Validate checks the field values on CompleteSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteSurveyRequestRequestMultiError, or nil if none found.
func (m *CompleteSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	if len(errors) > 0 {
		return CompleteSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// CompleteSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CompleteSurveyRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type CompleteSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteSurveyRequestRequestMultiError) AllErrors() []error { return m }

// CompleteSurveyRequestRequestValidationError is the validation error returned
// by CompleteSurveyRequestRequest.Validate if the designated constraints
// aren't met.
type CompleteSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteSurveyRequestRequestValidationError) ErrorName() string {
	return "CompleteSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteSurveyRequestRequestValidationError{}

// Validate checks the field values on CompleteSurveyRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteSurveyRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteSurveyRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteSurveyRequestResponseMultiError, or nil if none found.
func (m *CompleteSurveyRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteSurveyRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComplete()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteSurveyRequestResponseValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteSurveyRequestResponseValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComplete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteSurveyRequestResponseValidationError{
				field:  "Complete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompleteSurveyRequestResponseMultiError(errors)
	}

	return nil
}

// CompleteSurveyRequestResponseMultiError is an error wrapping multiple
// validation errors returned by CompleteSurveyRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type CompleteSurveyRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteSurveyRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteSurveyRequestResponseMultiError) AllErrors() []error { return m }

// CompleteSurveyRequestResponseValidationError is the validation error
// returned by CompleteSurveyRequestResponse.Validate if the designated
// constraints aren't met.
type CompleteSurveyRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteSurveyRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteSurveyRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteSurveyRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteSurveyRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteSurveyRequestResponseValidationError) ErrorName() string {
	return "CompleteSurveyRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteSurveyRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteSurveyRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteSurveyRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteSurveyRequestResponseValidationError{}

// Validate checks the field values on
// CreateSurveyReplyDueDateChangeResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSurveyReplyDueDateChangeResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateSurveyReplyDueDateChangeResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateSurveyReplyDueDateChangeResultRequestMultiError, or nil if none found.
func (m *CreateSurveyReplyDueDateChangeResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyReplyDueDateChangeResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReplyDueDateChangeResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyReplyDueDateChangeResultRequestValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyReplyDueDateChangeResultRequestValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReplyDueDateChangeResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyReplyDueDateChangeResultRequestValidationError{
				field:  "SurveyReplyDueDateChangeResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyReplyDueDateChangeResultRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyReplyDueDateChangeResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateSurveyReplyDueDateChangeResultRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSurveyReplyDueDateChangeResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyReplyDueDateChangeResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyReplyDueDateChangeResultRequestMultiError) AllErrors() []error { return m }

// CreateSurveyReplyDueDateChangeResultRequestValidationError is the validation
// error returned by CreateSurveyReplyDueDateChangeResultRequest.Validate if
// the designated constraints aren't met.
type CreateSurveyReplyDueDateChangeResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyReplyDueDateChangeResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyReplyDueDateChangeResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyReplyDueDateChangeResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyReplyDueDateChangeResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyReplyDueDateChangeResultRequestValidationError) ErrorName() string {
	return "CreateSurveyReplyDueDateChangeResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyReplyDueDateChangeResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyReplyDueDateChangeResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyReplyDueDateChangeResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyReplyDueDateChangeResultRequestValidationError{}

// Validate checks the field values on
// ListSurveyReplyDueDateChangeResultsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyReplyDueDateChangeResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyReplyDueDateChangeResultsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSurveyReplyDueDateChangeResultsRequestMultiError, or nil if none found.
func (m *ListSurveyReplyDueDateChangeResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReplyDueDateChangeResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyReplyDueDateChangeResultsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyReplyDueDateChangeResultsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyReplyDueDateChangeResultsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyReplyDueDateChangeResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReplyDueDateChangeResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReplyDueDateChangeResultsRequestMultiError) AllErrors() []error { return m }

// ListSurveyReplyDueDateChangeResultsRequestValidationError is the validation
// error returned by ListSurveyReplyDueDateChangeResultsRequest.Validate if
// the designated constraints aren't met.
type ListSurveyReplyDueDateChangeResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReplyDueDateChangeResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReplyDueDateChangeResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyReplyDueDateChangeResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReplyDueDateChangeResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReplyDueDateChangeResultsRequestValidationError) ErrorName() string {
	return "ListSurveyReplyDueDateChangeResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReplyDueDateChangeResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReplyDueDateChangeResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReplyDueDateChangeResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReplyDueDateChangeResultsRequestValidationError{}

// Validate checks the field values on
// ListSurveyReplyDueDateChangeResultsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyReplyDueDateChangeResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyReplyDueDateChangeResultsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSurveyReplyDueDateChangeResultsResponseMultiError, or nil if none found.
func (m *ListSurveyReplyDueDateChangeResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReplyDueDateChangeResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyReplyDueDateChangeResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyReplyDueDateChangeResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyReplyDueDateChangeResultsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyReplyDueDateChangeResultsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyReplyDueDateChangeResultsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyReplyDueDateChangeResultsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyReplyDueDateChangeResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReplyDueDateChangeResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReplyDueDateChangeResultsResponseMultiError) AllErrors() []error { return m }

// ListSurveyReplyDueDateChangeResultsResponseValidationError is the validation
// error returned by ListSurveyReplyDueDateChangeResultsResponse.Validate if
// the designated constraints aren't met.
type ListSurveyReplyDueDateChangeResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReplyDueDateChangeResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReplyDueDateChangeResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyReplyDueDateChangeResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReplyDueDateChangeResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReplyDueDateChangeResultsResponseValidationError) ErrorName() string {
	return "ListSurveyReplyDueDateChangeResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReplyDueDateChangeResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReplyDueDateChangeResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReplyDueDateChangeResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReplyDueDateChangeResultsResponseValidationError{}

// Validate checks the field values on GetSurveyReplyDueDateChangeResultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetSurveyReplyDueDateChangeResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSurveyReplyDueDateChangeResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetSurveyReplyDueDateChangeResultRequestMultiError, or nil if none found.
func (m *GetSurveyReplyDueDateChangeResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyReplyDueDateChangeResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReplyDueDateChangeResultId

	if len(errors) > 0 {
		return GetSurveyReplyDueDateChangeResultRequestMultiError(errors)
	}

	return nil
}

// GetSurveyReplyDueDateChangeResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetSurveyReplyDueDateChangeResultRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyReplyDueDateChangeResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyReplyDueDateChangeResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyReplyDueDateChangeResultRequestMultiError) AllErrors() []error { return m }

// GetSurveyReplyDueDateChangeResultRequestValidationError is the validation
// error returned by GetSurveyReplyDueDateChangeResultRequest.Validate if the
// designated constraints aren't met.
type GetSurveyReplyDueDateChangeResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyReplyDueDateChangeResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyReplyDueDateChangeResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyReplyDueDateChangeResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyReplyDueDateChangeResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyReplyDueDateChangeResultRequestValidationError) ErrorName() string {
	return "GetSurveyReplyDueDateChangeResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyReplyDueDateChangeResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyReplyDueDateChangeResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyReplyDueDateChangeResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyReplyDueDateChangeResultRequestValidationError{}

// Validate checks the field values on
// SharetoSurveyReplyDueDateChangeResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReplyDueDateChangeResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyReplyDueDateChangeResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoSurveyReplyDueDateChangeResultRequestMultiError, or nil if none found.
func (m *SharetoSurveyReplyDueDateChangeResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReplyDueDateChangeResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReplyDueDateChangeResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoSurveyReplyDueDateChangeResultRequestValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoSurveyReplyDueDateChangeResultRequestValidationError{
					field:  "SurveyReplyDueDateChangeResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReplyDueDateChangeResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoSurveyReplyDueDateChangeResultRequestValidationError{
				field:  "SurveyReplyDueDateChangeResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoSurveyReplyDueDateChangeResultRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyReplyDueDateChangeResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoSurveyReplyDueDateChangeResultRequest.ValidateAll() if the
// designated constraints aren't met.
type SharetoSurveyReplyDueDateChangeResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReplyDueDateChangeResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReplyDueDateChangeResultRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyReplyDueDateChangeResultRequestValidationError is the
// validation error returned by
// SharetoSurveyReplyDueDateChangeResultRequest.Validate if the designated
// constraints aren't met.
type SharetoSurveyReplyDueDateChangeResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReplyDueDateChangeResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReplyDueDateChangeResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyReplyDueDateChangeResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReplyDueDateChangeResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReplyDueDateChangeResultRequestValidationError) ErrorName() string {
	return "SharetoSurveyReplyDueDateChangeResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReplyDueDateChangeResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReplyDueDateChangeResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReplyDueDateChangeResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReplyDueDateChangeResultRequestValidationError{}

// Validate checks the field values on
// SharetoSurveyReplyDueDateChangeResultResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReplyDueDateChangeResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyReplyDueDateChangeResultResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoSurveyReplyDueDateChangeResultResponseMultiError, or nil if none found.
func (m *SharetoSurveyReplyDueDateChangeResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReplyDueDateChangeResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoSurveyReplyDueDateChangeResultResponseMultiError(errors)
	}

	return nil
}

// SharetoSurveyReplyDueDateChangeResultResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharetoSurveyReplyDueDateChangeResultResponse.ValidateAll() if the
// designated constraints aren't met.
type SharetoSurveyReplyDueDateChangeResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReplyDueDateChangeResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReplyDueDateChangeResultResponseMultiError) AllErrors() []error { return m }

// SharetoSurveyReplyDueDateChangeResultResponseValidationError is the
// validation error returned by
// SharetoSurveyReplyDueDateChangeResultResponse.Validate if the designated
// constraints aren't met.
type SharetoSurveyReplyDueDateChangeResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReplyDueDateChangeResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReplyDueDateChangeResultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharetoSurveyReplyDueDateChangeResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReplyDueDateChangeResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReplyDueDateChangeResultResponseValidationError) ErrorName() string {
	return "SharetoSurveyReplyDueDateChangeResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReplyDueDateChangeResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReplyDueDateChangeResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReplyDueDateChangeResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReplyDueDateChangeResultResponseValidationError{}

// Validate checks the field values on
// CreateSurveyReplyDueDateChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateSurveyReplyDueDateChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateSurveyReplyDueDateChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateSurveyReplyDueDateChangeRequestRequestMultiError, or nil if none found.
func (m *CreateSurveyReplyDueDateChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyReplyDueDateChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReplyDueDateChangeRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyReplyDueDateChangeRequestRequestValidationError{
					field:  "SurveyReplyDueDateChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyReplyDueDateChangeRequestRequestValidationError{
					field:  "SurveyReplyDueDateChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReplyDueDateChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyReplyDueDateChangeRequestRequestValidationError{
				field:  "SurveyReplyDueDateChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyReplyDueDateChangeRequestRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyReplyDueDateChangeRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateSurveyReplyDueDateChangeRequestRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateSurveyReplyDueDateChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyReplyDueDateChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyReplyDueDateChangeRequestRequestMultiError) AllErrors() []error { return m }

// CreateSurveyReplyDueDateChangeRequestRequestValidationError is the
// validation error returned by
// CreateSurveyReplyDueDateChangeRequestRequest.Validate if the designated
// constraints aren't met.
type CreateSurveyReplyDueDateChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyReplyDueDateChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyReplyDueDateChangeRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyReplyDueDateChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyReplyDueDateChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyReplyDueDateChangeRequestRequestValidationError) ErrorName() string {
	return "CreateSurveyReplyDueDateChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyReplyDueDateChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyReplyDueDateChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyReplyDueDateChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyReplyDueDateChangeRequestRequestValidationError{}

// Validate checks the field values on
// ListSurveyReplyDueDateChangeRequestsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyReplyDueDateChangeRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyReplyDueDateChangeRequestsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSurveyReplyDueDateChangeRequestsRequestMultiError, or nil if none found.
func (m *ListSurveyReplyDueDateChangeRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReplyDueDateChangeRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyReplyDueDateChangeRequestsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyReplyDueDateChangeRequestsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyReplyDueDateChangeRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyReplyDueDateChangeRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReplyDueDateChangeRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReplyDueDateChangeRequestsRequestMultiError) AllErrors() []error { return m }

// ListSurveyReplyDueDateChangeRequestsRequestValidationError is the validation
// error returned by ListSurveyReplyDueDateChangeRequestsRequest.Validate if
// the designated constraints aren't met.
type ListSurveyReplyDueDateChangeRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReplyDueDateChangeRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReplyDueDateChangeRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyReplyDueDateChangeRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReplyDueDateChangeRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReplyDueDateChangeRequestsRequestValidationError) ErrorName() string {
	return "ListSurveyReplyDueDateChangeRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReplyDueDateChangeRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReplyDueDateChangeRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReplyDueDateChangeRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReplyDueDateChangeRequestsRequestValidationError{}

// Validate checks the field values on
// ListSurveyReplyDueDateChangeRequestsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyReplyDueDateChangeRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyReplyDueDateChangeRequestsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSurveyReplyDueDateChangeRequestsResponseMultiError, or nil if none found.
func (m *ListSurveyReplyDueDateChangeRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReplyDueDateChangeRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyReplyDueDateChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyReplyDueDateChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyReplyDueDateChangeRequestsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyReplyDueDateChangeRequestsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyReplyDueDateChangeRequestsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyReplyDueDateChangeRequestsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListSurveyReplyDueDateChangeRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReplyDueDateChangeRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReplyDueDateChangeRequestsResponseMultiError) AllErrors() []error { return m }

// ListSurveyReplyDueDateChangeRequestsResponseValidationError is the
// validation error returned by
// ListSurveyReplyDueDateChangeRequestsResponse.Validate if the designated
// constraints aren't met.
type ListSurveyReplyDueDateChangeRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReplyDueDateChangeRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReplyDueDateChangeRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyReplyDueDateChangeRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReplyDueDateChangeRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReplyDueDateChangeRequestsResponseValidationError) ErrorName() string {
	return "ListSurveyReplyDueDateChangeRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReplyDueDateChangeRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReplyDueDateChangeRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReplyDueDateChangeRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReplyDueDateChangeRequestsResponseValidationError{}

// Validate checks the field values on
// GetSurveyReplyDueDateChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSurveyReplyDueDateChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetSurveyReplyDueDateChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetSurveyReplyDueDateChangeRequestRequestMultiError, or nil if none found.
func (m *GetSurveyReplyDueDateChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyReplyDueDateChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReplyDueDateChangeRequestId

	if len(errors) > 0 {
		return GetSurveyReplyDueDateChangeRequestRequestMultiError(errors)
	}

	return nil
}

// GetSurveyReplyDueDateChangeRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetSurveyReplyDueDateChangeRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyReplyDueDateChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyReplyDueDateChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyReplyDueDateChangeRequestRequestMultiError) AllErrors() []error { return m }

// GetSurveyReplyDueDateChangeRequestRequestValidationError is the validation
// error returned by GetSurveyReplyDueDateChangeRequestRequest.Validate if the
// designated constraints aren't met.
type GetSurveyReplyDueDateChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyReplyDueDateChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyReplyDueDateChangeRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyReplyDueDateChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyReplyDueDateChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyReplyDueDateChangeRequestRequestValidationError) ErrorName() string {
	return "GetSurveyReplyDueDateChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyReplyDueDateChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyReplyDueDateChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyReplyDueDateChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyReplyDueDateChangeRequestRequestValidationError{}

// Validate checks the field values on
// SharetoSurveyReplyDueDateChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReplyDueDateChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyReplyDueDateChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoSurveyReplyDueDateChangeRequestRequestMultiError, or nil if none found.
func (m *SharetoSurveyReplyDueDateChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReplyDueDateChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReplyDueDateChangeRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoSurveyReplyDueDateChangeRequestRequestValidationError{
					field:  "SurveyReplyDueDateChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoSurveyReplyDueDateChangeRequestRequestValidationError{
					field:  "SurveyReplyDueDateChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReplyDueDateChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoSurveyReplyDueDateChangeRequestRequestValidationError{
				field:  "SurveyReplyDueDateChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoSurveyReplyDueDateChangeRequestRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyReplyDueDateChangeRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoSurveyReplyDueDateChangeRequestRequest.ValidateAll() if the
// designated constraints aren't met.
type SharetoSurveyReplyDueDateChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReplyDueDateChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReplyDueDateChangeRequestRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyReplyDueDateChangeRequestRequestValidationError is the
// validation error returned by
// SharetoSurveyReplyDueDateChangeRequestRequest.Validate if the designated
// constraints aren't met.
type SharetoSurveyReplyDueDateChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReplyDueDateChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReplyDueDateChangeRequestRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharetoSurveyReplyDueDateChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReplyDueDateChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReplyDueDateChangeRequestRequestValidationError) ErrorName() string {
	return "SharetoSurveyReplyDueDateChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReplyDueDateChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReplyDueDateChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReplyDueDateChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReplyDueDateChangeRequestRequestValidationError{}

// Validate checks the field values on
// SharetoSurveyReplyDueDateChangeRequestResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReplyDueDateChangeRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyReplyDueDateChangeRequestResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharetoSurveyReplyDueDateChangeRequestResponseMultiError, or nil if none found.
func (m *SharetoSurveyReplyDueDateChangeRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReplyDueDateChangeRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoSurveyReplyDueDateChangeRequestResponseMultiError(errors)
	}

	return nil
}

// SharetoSurveyReplyDueDateChangeRequestResponseMultiError is an error
// wrapping multiple validation errors returned by
// SharetoSurveyReplyDueDateChangeRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type SharetoSurveyReplyDueDateChangeRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReplyDueDateChangeRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReplyDueDateChangeRequestResponseMultiError) AllErrors() []error { return m }

// SharetoSurveyReplyDueDateChangeRequestResponseValidationError is the
// validation error returned by
// SharetoSurveyReplyDueDateChangeRequestResponse.Validate if the designated
// constraints aren't met.
type SharetoSurveyReplyDueDateChangeRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReplyDueDateChangeRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReplyDueDateChangeRequestResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharetoSurveyReplyDueDateChangeRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReplyDueDateChangeRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReplyDueDateChangeRequestResponseValidationError) ErrorName() string {
	return "SharetoSurveyReplyDueDateChangeRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReplyDueDateChangeRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReplyDueDateChangeRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReplyDueDateChangeRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReplyDueDateChangeRequestResponseValidationError{}

// Validate checks the field values on GetSurveyReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSurveyReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyReceptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSurveyReceptionRequestMultiError, or nil if none found.
func (m *GetSurveyReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReceptionId

	if len(errors) > 0 {
		return GetSurveyReceptionRequestMultiError(errors)
	}

	return nil
}

// GetSurveyReceptionRequestMultiError is an error wrapping multiple validation
// errors returned by GetSurveyReceptionRequest.ValidateAll() if the
// designated constraints aren't met.
type GetSurveyReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyReceptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyReceptionRequestMultiError) AllErrors() []error { return m }

// GetSurveyReceptionRequestValidationError is the validation error returned by
// GetSurveyReceptionRequest.Validate if the designated constraints aren't met.
type GetSurveyReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyReceptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyReceptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyReceptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyReceptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyReceptionRequestValidationError) ErrorName() string {
	return "GetSurveyReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyReceptionRequestValidationError{}

// Validate checks the field values on UpdateSurveyReceptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSurveyReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSurveyReceptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSurveyReceptionRequestMultiError, or nil if none found.
func (m *UpdateSurveyReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSurveyReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReception()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSurveyReceptionRequestValidationError{
					field:  "SurveyReception",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSurveyReceptionRequestValidationError{
					field:  "SurveyReception",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReception()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSurveyReceptionRequestValidationError{
				field:  "SurveyReception",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSurveyReceptionRequestMultiError(errors)
	}

	return nil
}

// UpdateSurveyReceptionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSurveyReceptionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSurveyReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSurveyReceptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSurveyReceptionRequestMultiError) AllErrors() []error { return m }

// UpdateSurveyReceptionRequestValidationError is the validation error returned
// by UpdateSurveyReceptionRequest.Validate if the designated constraints
// aren't met.
type UpdateSurveyReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSurveyReceptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSurveyReceptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSurveyReceptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSurveyReceptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSurveyReceptionRequestValidationError) ErrorName() string {
	return "UpdateSurveyReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSurveyReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSurveyReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSurveyReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSurveyReceptionRequestValidationError{}

// Validate checks the field values on
// UpdateSystemNotificationUsersInSurveyReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemNotificationUsersInSurveyReceptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateSystemNotificationUsersInSurveyReceptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemNotificationUsersInSurveyReceptionRequestMultiError, or nil if
// none found.
func (m *UpdateSystemNotificationUsersInSurveyReceptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemNotificationUsersInSurveyReceptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReceptionId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UpdateSystemNotificationUsersInSurveyReceptionRequestMultiError(errors)
	}

	return nil
}

// UpdateSystemNotificationUsersInSurveyReceptionRequestMultiError is an error
// wrapping multiple validation errors returned by
// UpdateSystemNotificationUsersInSurveyReceptionRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSystemNotificationUsersInSurveyReceptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemNotificationUsersInSurveyReceptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemNotificationUsersInSurveyReceptionRequestMultiError) AllErrors() []error {
	return m
}

// UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError is the
// validation error returned by
// UpdateSystemNotificationUsersInSurveyReceptionRequest.Validate if the
// designated constraints aren't met.
type UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError) ErrorName() string {
	return "UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemNotificationUsersInSurveyReceptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemNotificationUsersInSurveyReceptionRequestValidationError{}

// Validate checks the field values on CreateSurveyResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSurveyResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurveyResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSurveyResultRequestMultiError, or nil if none found.
func (m *CreateSurveyResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyResultRequestValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyResultRequestValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyResultRequestValidationError{
				field:  "SurveyResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyResultRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyResultRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSurveyResultRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateSurveyResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyResultRequestMultiError) AllErrors() []error { return m }

// CreateSurveyResultRequestValidationError is the validation error returned by
// CreateSurveyResultRequest.Validate if the designated constraints aren't met.
type CreateSurveyResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyResultRequestValidationError) ErrorName() string {
	return "CreateSurveyResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyResultRequestValidationError{}

// Validate checks the field values on SharetoSurveyResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoSurveyResultRequestMultiError, or nil if none found.
func (m *SharetoSurveyResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoSurveyResultRequestValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoSurveyResultRequestValidationError{
					field:  "SurveyResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoSurveyResultRequestValidationError{
				field:  "SurveyResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoSurveyResultRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyResultRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyResultRequest.ValidateAll() if
// the designated constraints aren't met.
type SharetoSurveyResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyResultRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyResultRequestValidationError is the validation error returned
// by SharetoSurveyResultRequest.Validate if the designated constraints aren't met.
type SharetoSurveyResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyResultRequestValidationError) ErrorName() string {
	return "SharetoSurveyResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyResultRequestValidationError{}

// Validate checks the field values on SharetoSurveyResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoSurveyResultResponseMultiError, or nil if none found.
func (m *SharetoSurveyResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoSurveyResultResponseMultiError(errors)
	}

	return nil
}

// SharetoSurveyResultResponseMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyResultResponse.ValidateAll() if
// the designated constraints aren't met.
type SharetoSurveyResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyResultResponseMultiError) AllErrors() []error { return m }

// SharetoSurveyResultResponseValidationError is the validation error returned
// by SharetoSurveyResultResponse.Validate if the designated constraints
// aren't met.
type SharetoSurveyResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyResultResponseValidationError) ErrorName() string {
	return "SharetoSurveyResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyResultResponseValidationError{}

// Validate checks the field values on CreateSurveyResultChangeRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateSurveyResultChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateSurveyResultChangeRequestRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateSurveyResultChangeRequestRequestMultiError, or nil if none found.
func (m *CreateSurveyResultChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyResultChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyResultChangeRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyResultChangeRequestRequestValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyResultChangeRequestRequestValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResultChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyResultChangeRequestRequestValidationError{
				field:  "SurveyResultChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyResultChangeRequestRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyResultChangeRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateSurveyResultChangeRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSurveyResultChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyResultChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyResultChangeRequestRequestMultiError) AllErrors() []error { return m }

// CreateSurveyResultChangeRequestRequestValidationError is the validation
// error returned by CreateSurveyResultChangeRequestRequest.Validate if the
// designated constraints aren't met.
type CreateSurveyResultChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyResultChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyResultChangeRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyResultChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyResultChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyResultChangeRequestRequestValidationError) ErrorName() string {
	return "CreateSurveyResultChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyResultChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyResultChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyResultChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyResultChangeRequestRequestValidationError{}

// Validate checks the field values on ListSurveyResultChangeRequestsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSurveyResultChangeRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyResultChangeRequestsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyResultChangeRequestsRequestMultiError, or nil if none found.
func (m *ListSurveyResultChangeRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyResultChangeRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyResultChangeRequestsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyResultChangeRequestsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyResultChangeRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyResultChangeRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyResultChangeRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyResultChangeRequestsRequestMultiError) AllErrors() []error { return m }

// ListSurveyResultChangeRequestsRequestValidationError is the validation error
// returned by ListSurveyResultChangeRequestsRequest.Validate if the
// designated constraints aren't met.
type ListSurveyResultChangeRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyResultChangeRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyResultChangeRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyResultChangeRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyResultChangeRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyResultChangeRequestsRequestValidationError) ErrorName() string {
	return "ListSurveyResultChangeRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyResultChangeRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyResultChangeRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyResultChangeRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyResultChangeRequestsRequestValidationError{}

// Validate checks the field values on ListSurveyResultChangeRequestsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSurveyResultChangeRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyResultChangeRequestsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListSurveyResultChangeRequestsResponseMultiError, or nil if none found.
func (m *ListSurveyResultChangeRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyResultChangeRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyResultChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyResultChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyResultChangeRequestsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyResultChangeRequestsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyResultChangeRequestsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyResultChangeRequestsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyResultChangeRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyResultChangeRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyResultChangeRequestsResponseMultiError) AllErrors() []error { return m }

// ListSurveyResultChangeRequestsResponseValidationError is the validation
// error returned by ListSurveyResultChangeRequestsResponse.Validate if the
// designated constraints aren't met.
type ListSurveyResultChangeRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyResultChangeRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyResultChangeRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyResultChangeRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyResultChangeRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyResultChangeRequestsResponseValidationError) ErrorName() string {
	return "ListSurveyResultChangeRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyResultChangeRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyResultChangeRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyResultChangeRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyResultChangeRequestsResponseValidationError{}

// Validate checks the field values on GetSurveyResultChangeRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSurveyResultChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyResultChangeRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSurveyResultChangeRequestRequestMultiError, or nil if none found.
func (m *GetSurveyResultChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyResultChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyResultChangeRequestId

	if len(errors) > 0 {
		return GetSurveyResultChangeRequestRequestMultiError(errors)
	}

	return nil
}

// GetSurveyResultChangeRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSurveyResultChangeRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyResultChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyResultChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyResultChangeRequestRequestMultiError) AllErrors() []error { return m }

// GetSurveyResultChangeRequestRequestValidationError is the validation error
// returned by GetSurveyResultChangeRequestRequest.Validate if the designated
// constraints aren't met.
type GetSurveyResultChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyResultChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyResultChangeRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyResultChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyResultChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyResultChangeRequestRequestValidationError) ErrorName() string {
	return "GetSurveyResultChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyResultChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyResultChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyResultChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyResultChangeRequestRequestValidationError{}

// Validate checks the field values on SharetoSurveyResultChangeRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoSurveyResultChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyResultChangeRequestRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharetoSurveyResultChangeRequestRequestMultiError, or nil if none found.
func (m *SharetoSurveyResultChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyResultChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyResultChangeRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoSurveyResultChangeRequestRequestValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoSurveyResultChangeRequestRequestValidationError{
					field:  "SurveyResultChangeRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyResultChangeRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoSurveyResultChangeRequestRequestValidationError{
				field:  "SurveyResultChangeRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoSurveyResultChangeRequestRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyResultChangeRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoSurveyResultChangeRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoSurveyResultChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyResultChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyResultChangeRequestRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyResultChangeRequestRequestValidationError is the validation
// error returned by SharetoSurveyResultChangeRequestRequest.Validate if the
// designated constraints aren't met.
type SharetoSurveyResultChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyResultChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyResultChangeRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyResultChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyResultChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyResultChangeRequestRequestValidationError) ErrorName() string {
	return "SharetoSurveyResultChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyResultChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyResultChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyResultChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyResultChangeRequestRequestValidationError{}

// Validate checks the field values on SharetoSurveyResultChangeRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoSurveyResultChangeRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyResultChangeRequestResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoSurveyResultChangeRequestResponseMultiError, or nil if none found.
func (m *SharetoSurveyResultChangeRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyResultChangeRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoSurveyResultChangeRequestResponseMultiError(errors)
	}

	return nil
}

// SharetoSurveyResultChangeRequestResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharetoSurveyResultChangeRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoSurveyResultChangeRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyResultChangeRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyResultChangeRequestResponseMultiError) AllErrors() []error { return m }

// SharetoSurveyResultChangeRequestResponseValidationError is the validation
// error returned by SharetoSurveyResultChangeRequestResponse.Validate if the
// designated constraints aren't met.
type SharetoSurveyResultChangeRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyResultChangeRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyResultChangeRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyResultChangeRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyResultChangeRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyResultChangeRequestResponseValidationError) ErrorName() string {
	return "SharetoSurveyResultChangeRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyResultChangeRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyResultChangeRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyResultChangeRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyResultChangeRequestResponseValidationError{}

// Validate checks the field values on CreateSurveyReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSurveyReminderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSurveyReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSurveyReminderRequestMultiError, or nil if none found.
func (m *CreateSurveyReminderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSurveyReminderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReminder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSurveyReminderRequestValidationError{
					field:  "SurveyReminder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSurveyReminderRequestValidationError{
					field:  "SurveyReminder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReminder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSurveyReminderRequestValidationError{
				field:  "SurveyReminder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSurveyReminderRequestMultiError(errors)
	}

	return nil
}

// CreateSurveyReminderRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSurveyReminderRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSurveyReminderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSurveyReminderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSurveyReminderRequestMultiError) AllErrors() []error { return m }

// CreateSurveyReminderRequestValidationError is the validation error returned
// by CreateSurveyReminderRequest.Validate if the designated constraints
// aren't met.
type CreateSurveyReminderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSurveyReminderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSurveyReminderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSurveyReminderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSurveyReminderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSurveyReminderRequestValidationError) ErrorName() string {
	return "CreateSurveyReminderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSurveyReminderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSurveyReminderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSurveyReminderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSurveyReminderRequestValidationError{}

// Validate checks the field values on ListSurveyRemindersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSurveyRemindersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRemindersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSurveyRemindersRequestMultiError, or nil if none found.
func (m *ListSurveyRemindersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRemindersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRemindersRequestMultiError(errors)
	}

	return nil
}

// ListSurveyRemindersRequestMultiError is an error wrapping multiple
// validation errors returned by ListSurveyRemindersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSurveyRemindersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRemindersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRemindersRequestMultiError) AllErrors() []error { return m }

// ListSurveyRemindersRequestValidationError is the validation error returned
// by ListSurveyRemindersRequest.Validate if the designated constraints aren't met.
type ListSurveyRemindersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRemindersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRemindersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRemindersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRemindersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRemindersRequestValidationError) ErrorName() string {
	return "ListSurveyRemindersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRemindersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRemindersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRemindersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRemindersRequestValidationError{}

// Validate checks the field values on ListSurveyRemindersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSurveyRemindersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRemindersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSurveyRemindersResponseMultiError, or nil if none found.
func (m *ListSurveyRemindersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRemindersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyRemindersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyRemindersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyRemindersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRemindersResponseMultiError(errors)
	}

	return nil
}

// ListSurveyRemindersResponseMultiError is an error wrapping multiple
// validation errors returned by ListSurveyRemindersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSurveyRemindersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRemindersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRemindersResponseMultiError) AllErrors() []error { return m }

// ListSurveyRemindersResponseValidationError is the validation error returned
// by ListSurveyRemindersResponse.Validate if the designated constraints
// aren't met.
type ListSurveyRemindersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRemindersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRemindersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRemindersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRemindersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRemindersResponseValidationError) ErrorName() string {
	return "ListSurveyRemindersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRemindersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRemindersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRemindersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRemindersResponseValidationError{}

// Validate checks the field values on GetSurveyReminderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSurveyReminderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSurveyReminderRequestMultiError, or nil if none found.
func (m *GetSurveyReminderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyReminderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReminderId

	if len(errors) > 0 {
		return GetSurveyReminderRequestMultiError(errors)
	}

	return nil
}

// GetSurveyReminderRequestMultiError is an error wrapping multiple validation
// errors returned by GetSurveyReminderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyReminderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyReminderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyReminderRequestMultiError) AllErrors() []error { return m }

// GetSurveyReminderRequestValidationError is the validation error returned by
// GetSurveyReminderRequest.Validate if the designated constraints aren't met.
type GetSurveyReminderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyReminderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyReminderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyReminderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyReminderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyReminderRequestValidationError) ErrorName() string {
	return "GetSurveyReminderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyReminderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyReminderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyReminderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyReminderRequestValidationError{}

// Validate checks the field values on SharetoSurveyReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReminderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoSurveyReminderRequestMultiError, or nil if none found.
func (m *SharetoSurveyReminderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReminderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSurveyReminder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoSurveyReminderRequestValidationError{
					field:  "SurveyReminder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoSurveyReminderRequestValidationError{
					field:  "SurveyReminder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSurveyReminder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoSurveyReminderRequestValidationError{
				field:  "SurveyReminder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoSurveyReminderRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyReminderRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyReminderRequest.ValidateAll() if
// the designated constraints aren't met.
type SharetoSurveyReminderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReminderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReminderRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyReminderRequestValidationError is the validation error returned
// by SharetoSurveyReminderRequest.Validate if the designated constraints
// aren't met.
type SharetoSurveyReminderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReminderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReminderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyReminderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReminderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReminderRequestValidationError) ErrorName() string {
	return "SharetoSurveyReminderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReminderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReminderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReminderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReminderRequestValidationError{}

// Validate checks the field values on SharetoSurveyReminderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReminderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyReminderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoSurveyReminderResponseMultiError, or nil if none found.
func (m *SharetoSurveyReminderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReminderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoSurveyReminderResponseMultiError(errors)
	}

	return nil
}

// SharetoSurveyReminderResponseMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyReminderResponse.ValidateAll()
// if the designated constraints aren't met.
type SharetoSurveyReminderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReminderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReminderResponseMultiError) AllErrors() []error { return m }

// SharetoSurveyReminderResponseValidationError is the validation error
// returned by SharetoSurveyReminderResponse.Validate if the designated
// constraints aren't met.
type SharetoSurveyReminderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReminderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReminderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyReminderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReminderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReminderResponseValidationError) ErrorName() string {
	return "SharetoSurveyReminderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReminderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReminderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReminderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReminderResponseValidationError{}

// Validate checks the field values on ListHistorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistorysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistorysRequestMultiError, or nil if none found.
func (m *ListHistorysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistorysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ListHistorysRequestMultiError(errors)
	}

	return nil
}

// ListHistorysRequestMultiError is an error wrapping multiple validation
// errors returned by ListHistorysRequest.ValidateAll() if the designated
// constraints aren't met.
type ListHistorysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistorysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistorysRequestMultiError) AllErrors() []error { return m }

// ListHistorysRequestValidationError is the validation error returned by
// ListHistorysRequest.Validate if the designated constraints aren't met.
type ListHistorysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistorysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistorysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistorysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistorysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistorysRequestValidationError) ErrorName() string {
	return "ListHistorysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistorysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistorysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistorysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistorysRequestValidationError{}

// Validate checks the field values on ListHistorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistorysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistorysResponseMultiError, or nil if none found.
func (m *ListHistorysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistorysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHistorysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHistorysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHistorysResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListHistorysResponseMultiError(errors)
	}

	return nil
}

// ListHistorysResponseMultiError is an error wrapping multiple validation
// errors returned by ListHistorysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListHistorysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistorysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistorysResponseMultiError) AllErrors() []error { return m }

// ListHistorysResponseValidationError is the validation error returned by
// ListHistorysResponse.Validate if the designated constraints aren't met.
type ListHistorysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistorysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistorysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistorysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistorysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistorysResponseValidationError) ErrorName() string {
	return "ListHistorysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistorysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistorysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistorysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistorysResponseValidationError{}

// Validate checks the field values on SharetoDiscardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoDiscardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoDiscardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoDiscardRequestMultiError, or nil if none found.
func (m *SharetoDiscardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoDiscardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDiscard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoDiscardRequestValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoDiscardRequestValidationError{
					field:  "Discard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoDiscardRequestValidationError{
				field:  "Discard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoDiscardRequestMultiError(errors)
	}

	return nil
}

// SharetoDiscardRequestMultiError is an error wrapping multiple validation
// errors returned by SharetoDiscardRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoDiscardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoDiscardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoDiscardRequestMultiError) AllErrors() []error { return m }

// SharetoDiscardRequestValidationError is the validation error returned by
// SharetoDiscardRequest.Validate if the designated constraints aren't met.
type SharetoDiscardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoDiscardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoDiscardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoDiscardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoDiscardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoDiscardRequestValidationError) ErrorName() string {
	return "SharetoDiscardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoDiscardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoDiscardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoDiscardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoDiscardRequestValidationError{}

// Validate checks the field values on SharetoDiscardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoDiscardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoDiscardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoDiscardResponseMultiError, or nil if none found.
func (m *SharetoDiscardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoDiscardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoDiscardResponseMultiError(errors)
	}

	return nil
}

// SharetoDiscardResponseMultiError is an error wrapping multiple validation
// errors returned by SharetoDiscardResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoDiscardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoDiscardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoDiscardResponseMultiError) AllErrors() []error { return m }

// SharetoDiscardResponseValidationError is the validation error returned by
// SharetoDiscardResponse.Validate if the designated constraints aren't met.
type SharetoDiscardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoDiscardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoDiscardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoDiscardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoDiscardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoDiscardResponseValidationError) ErrorName() string {
	return "SharetoDiscardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoDiscardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoDiscardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoDiscardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoDiscardResponseValidationError{}

// Validate checks the field values on SharetoCompleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoCompleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoCompleteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoCompleteRequestMultiError, or nil if none found.
func (m *SharetoCompleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoCompleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComplete()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoCompleteRequestValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoCompleteRequestValidationError{
					field:  "Complete",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComplete()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoCompleteRequestValidationError{
				field:  "Complete",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoCompleteRequestMultiError(errors)
	}

	return nil
}

// SharetoCompleteRequestMultiError is an error wrapping multiple validation
// errors returned by SharetoCompleteRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoCompleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoCompleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoCompleteRequestMultiError) AllErrors() []error { return m }

// SharetoCompleteRequestValidationError is the validation error returned by
// SharetoCompleteRequest.Validate if the designated constraints aren't met.
type SharetoCompleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoCompleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoCompleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoCompleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoCompleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoCompleteRequestValidationError) ErrorName() string {
	return "SharetoCompleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoCompleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoCompleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoCompleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoCompleteRequestValidationError{}

// Validate checks the field values on SharetoCompleteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoCompleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoCompleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoCompleteResponseMultiError, or nil if none found.
func (m *SharetoCompleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoCompleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoCompleteResponseMultiError(errors)
	}

	return nil
}

// SharetoCompleteResponseMultiError is an error wrapping multiple validation
// errors returned by SharetoCompleteResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoCompleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoCompleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoCompleteResponseMultiError) AllErrors() []error { return m }

// SharetoCompleteResponseValidationError is the validation error returned by
// SharetoCompleteResponse.Validate if the designated constraints aren't met.
type SharetoCompleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoCompleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoCompleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoCompleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoCompleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoCompleteResponseValidationError) ErrorName() string {
	return "SharetoCompleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoCompleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoCompleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoCompleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoCompleteResponseValidationError{}

// Validate checks the field values on SharetoOpenedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoOpenedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoOpenedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoOpenedRequestMultiError, or nil if none found.
func (m *SharetoOpenedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoOpenedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpened()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoOpenedRequestValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoOpenedRequestValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpened()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoOpenedRequestValidationError{
				field:  "Opened",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoOpenedRequestMultiError(errors)
	}

	return nil
}

// SharetoOpenedRequestMultiError is an error wrapping multiple validation
// errors returned by SharetoOpenedRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoOpenedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoOpenedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoOpenedRequestMultiError) AllErrors() []error { return m }

// SharetoOpenedRequestValidationError is the validation error returned by
// SharetoOpenedRequest.Validate if the designated constraints aren't met.
type SharetoOpenedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoOpenedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoOpenedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoOpenedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoOpenedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoOpenedRequestValidationError) ErrorName() string {
	return "SharetoOpenedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoOpenedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoOpenedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoOpenedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoOpenedRequestValidationError{}

// Validate checks the field values on SharetoOpenedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoOpenedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoOpenedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoOpenedResponseMultiError, or nil if none found.
func (m *SharetoOpenedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoOpenedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoOpenedResponseMultiError(errors)
	}

	return nil
}

// SharetoOpenedResponseMultiError is an error wrapping multiple validation
// errors returned by SharetoOpenedResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoOpenedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoOpenedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoOpenedResponseMultiError) AllErrors() []error { return m }

// SharetoOpenedResponseValidationError is the validation error returned by
// SharetoOpenedResponse.Validate if the designated constraints aren't met.
type SharetoOpenedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoOpenedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoOpenedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoOpenedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoOpenedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoOpenedResponseValidationError) ErrorName() string {
	return "SharetoOpenedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoOpenedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoOpenedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoOpenedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoOpenedResponseValidationError{}

// Validate checks the field values on ExportSurveyRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportSurveyRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportSurveyRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportSurveyRequestsRequestMultiError, or nil if none found.
func (m *ExportSurveyRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportSurveyRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportSurveyRequestsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportSurveyRequestsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportSurveyRequestsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportSurveyRequestsRequestMultiError(errors)
	}

	return nil
}

// ExportSurveyRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by ExportSurveyRequestsRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportSurveyRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportSurveyRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportSurveyRequestsRequestMultiError) AllErrors() []error { return m }

// ExportSurveyRequestsRequestValidationError is the validation error returned
// by ExportSurveyRequestsRequest.Validate if the designated constraints
// aren't met.
type ExportSurveyRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportSurveyRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportSurveyRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportSurveyRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportSurveyRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportSurveyRequestsRequestValidationError) ErrorName() string {
	return "ExportSurveyRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportSurveyRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportSurveyRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportSurveyRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportSurveyRequestsRequestValidationError{}

// Validate checks the field values on ExportSurveyRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportSurveyRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportSurveyRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportSurveyRequestsResponseMultiError, or nil if none found.
func (m *ExportSurveyRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportSurveyRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportSurveyRequestsResponseMultiError(errors)
	}

	return nil
}

// ExportSurveyRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by ExportSurveyRequestsResponse.ValidateAll() if
// the designated constraints aren't met.
type ExportSurveyRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportSurveyRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportSurveyRequestsResponseMultiError) AllErrors() []error { return m }

// ExportSurveyRequestsResponseValidationError is the validation error returned
// by ExportSurveyRequestsResponse.Validate if the designated constraints
// aren't met.
type ExportSurveyRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportSurveyRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportSurveyRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportSurveyRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportSurveyRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportSurveyRequestsResponseValidationError) ErrorName() string {
	return "ExportSurveyRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportSurveyRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportSurveyRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportSurveyRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportSurveyRequestsResponseValidationError{}

// Validate checks the field values on ListSurveyRequestFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSurveyRequestFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRequestFormatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSurveyRequestFormatsRequestMultiError, or nil if none found.
func (m *ListSurveyRequestFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRequestFormatsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyRequestFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by ListSurveyRequestFormatsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListSurveyRequestFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestFormatsRequestMultiError) AllErrors() []error { return m }

// ListSurveyRequestFormatsRequestValidationError is the validation error
// returned by ListSurveyRequestFormatsRequest.Validate if the designated
// constraints aren't met.
type ListSurveyRequestFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestFormatsRequestValidationError) ErrorName() string {
	return "ListSurveyRequestFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestFormatsRequestValidationError{}

// Validate checks the field values on ListSurveyRequestFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyRequestFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRequestFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSurveyRequestFormatsResponseMultiError, or nil if none found.
func (m *ListSurveyRequestFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyRequestFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyRequestFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyRequestFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRequestFormatsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyRequestFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyRequestFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyRequestFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestFormatsResponseMultiError) AllErrors() []error { return m }

// ListSurveyRequestFormatsResponseValidationError is the validation error
// returned by ListSurveyRequestFormatsResponse.Validate if the designated
// constraints aren't met.
type ListSurveyRequestFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestFormatsResponseValidationError) ErrorName() string {
	return "ListSurveyRequestFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestFormatsResponseValidationError{}

// Validate checks the field values on SharedGetSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharedGetSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetSurveyRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharedGetSurveyRequestRequestMultiError, or nil if none found.
func (m *SharedGetSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	if len(errors) > 0 {
		return SharedGetSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// SharedGetSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by SharedGetSurveyRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type SharedGetSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetSurveyRequestRequestMultiError) AllErrors() []error { return m }

// SharedGetSurveyRequestRequestValidationError is the validation error
// returned by SharedGetSurveyRequestRequest.Validate if the designated
// constraints aren't met.
type SharedGetSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetSurveyRequestRequestValidationError) ErrorName() string {
	return "SharedGetSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetSurveyRequestRequestValidationError{}

// Validate checks the field values on
// SharedListSurveyReplyDueDateChangeResultsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListSurveyReplyDueDateChangeResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListSurveyReplyDueDateChangeResultsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharedListSurveyReplyDueDateChangeResultsRequestMultiError, or nil if none found.
func (m *SharedListSurveyReplyDueDateChangeResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyReplyDueDateChangeResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyReplyDueDateChangeResultsRequestMultiError(errors)
	}

	return nil
}

// SharedListSurveyReplyDueDateChangeResultsRequestMultiError is an error
// wrapping multiple validation errors returned by
// SharedListSurveyReplyDueDateChangeResultsRequest.ValidateAll() if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyReplyDueDateChangeResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyReplyDueDateChangeResultsRequestMultiError) AllErrors() []error { return m }

// SharedListSurveyReplyDueDateChangeResultsRequestValidationError is the
// validation error returned by
// SharedListSurveyReplyDueDateChangeResultsRequest.Validate if the designated
// constraints aren't met.
type SharedListSurveyReplyDueDateChangeResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyReplyDueDateChangeResultsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedListSurveyReplyDueDateChangeResultsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedListSurveyReplyDueDateChangeResultsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharedListSurveyReplyDueDateChangeResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyReplyDueDateChangeResultsRequestValidationError) ErrorName() string {
	return "SharedListSurveyReplyDueDateChangeResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyReplyDueDateChangeResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyReplyDueDateChangeResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyReplyDueDateChangeResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyReplyDueDateChangeResultsRequestValidationError{}

// Validate checks the field values on
// SharedListSurveyReplyDueDateChangeResultsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListSurveyReplyDueDateChangeResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListSurveyReplyDueDateChangeResultsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharedListSurveyReplyDueDateChangeResultsResponseMultiError, or nil if none found.
func (m *SharedListSurveyReplyDueDateChangeResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyReplyDueDateChangeResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListSurveyReplyDueDateChangeResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListSurveyReplyDueDateChangeResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListSurveyReplyDueDateChangeResultsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyReplyDueDateChangeResultsResponseMultiError(errors)
	}

	return nil
}

// SharedListSurveyReplyDueDateChangeResultsResponseMultiError is an error
// wrapping multiple validation errors returned by
// SharedListSurveyReplyDueDateChangeResultsResponse.ValidateAll() if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyReplyDueDateChangeResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyReplyDueDateChangeResultsResponseMultiError) AllErrors() []error { return m }

// SharedListSurveyReplyDueDateChangeResultsResponseValidationError is the
// validation error returned by
// SharedListSurveyReplyDueDateChangeResultsResponse.Validate if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyReplyDueDateChangeResultsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedListSurveyReplyDueDateChangeResultsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedListSurveyReplyDueDateChangeResultsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharedListSurveyReplyDueDateChangeResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyReplyDueDateChangeResultsResponseValidationError) ErrorName() string {
	return "SharedListSurveyReplyDueDateChangeResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyReplyDueDateChangeResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyReplyDueDateChangeResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyReplyDueDateChangeResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyReplyDueDateChangeResultsResponseValidationError{}

// Validate checks the field values on
// SharedGetSurveyReplyDueDateChangeResultRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedGetSurveyReplyDueDateChangeResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedGetSurveyReplyDueDateChangeResultRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharedGetSurveyReplyDueDateChangeResultRequestMultiError, or nil if none found.
func (m *SharedGetSurveyReplyDueDateChangeResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetSurveyReplyDueDateChangeResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReplyDueDateChangeResultId

	if len(errors) > 0 {
		return SharedGetSurveyReplyDueDateChangeResultRequestMultiError(errors)
	}

	return nil
}

// SharedGetSurveyReplyDueDateChangeResultRequestMultiError is an error
// wrapping multiple validation errors returned by
// SharedGetSurveyReplyDueDateChangeResultRequest.ValidateAll() if the
// designated constraints aren't met.
type SharedGetSurveyReplyDueDateChangeResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetSurveyReplyDueDateChangeResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetSurveyReplyDueDateChangeResultRequestMultiError) AllErrors() []error { return m }

// SharedGetSurveyReplyDueDateChangeResultRequestValidationError is the
// validation error returned by
// SharedGetSurveyReplyDueDateChangeResultRequest.Validate if the designated
// constraints aren't met.
type SharedGetSurveyReplyDueDateChangeResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetSurveyReplyDueDateChangeResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetSurveyReplyDueDateChangeResultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedGetSurveyReplyDueDateChangeResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetSurveyReplyDueDateChangeResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetSurveyReplyDueDateChangeResultRequestValidationError) ErrorName() string {
	return "SharedGetSurveyReplyDueDateChangeResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetSurveyReplyDueDateChangeResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetSurveyReplyDueDateChangeResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetSurveyReplyDueDateChangeResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetSurveyReplyDueDateChangeResultRequestValidationError{}

// Validate checks the field values on SharedListSurveyRemindersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedListSurveyRemindersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListSurveyRemindersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharedListSurveyRemindersRequestMultiError, or nil if none found.
func (m *SharedListSurveyRemindersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyRemindersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyRemindersRequestMultiError(errors)
	}

	return nil
}

// SharedListSurveyRemindersRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedListSurveyRemindersRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListSurveyRemindersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyRemindersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyRemindersRequestMultiError) AllErrors() []error { return m }

// SharedListSurveyRemindersRequestValidationError is the validation error
// returned by SharedListSurveyRemindersRequest.Validate if the designated
// constraints aren't met.
type SharedListSurveyRemindersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyRemindersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListSurveyRemindersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListSurveyRemindersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListSurveyRemindersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyRemindersRequestValidationError) ErrorName() string {
	return "SharedListSurveyRemindersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyRemindersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyRemindersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyRemindersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyRemindersRequestValidationError{}

// Validate checks the field values on SharedListSurveyRemindersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedListSurveyRemindersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListSurveyRemindersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListSurveyRemindersResponseMultiError, or nil if none found.
func (m *SharedListSurveyRemindersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyRemindersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListSurveyRemindersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListSurveyRemindersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListSurveyRemindersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyRemindersResponseMultiError(errors)
	}

	return nil
}

// SharedListSurveyRemindersResponseMultiError is an error wrapping multiple
// validation errors returned by
// SharedListSurveyRemindersResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListSurveyRemindersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyRemindersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyRemindersResponseMultiError) AllErrors() []error { return m }

// SharedListSurveyRemindersResponseValidationError is the validation error
// returned by SharedListSurveyRemindersResponse.Validate if the designated
// constraints aren't met.
type SharedListSurveyRemindersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyRemindersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListSurveyRemindersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListSurveyRemindersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListSurveyRemindersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyRemindersResponseValidationError) ErrorName() string {
	return "SharedListSurveyRemindersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyRemindersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyRemindersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyRemindersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyRemindersResponseValidationError{}

// Validate checks the field values on SharedGetSurveyReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharedGetSurveyReminderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetSurveyReminderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharedGetSurveyReminderRequestMultiError, or nil if none found.
func (m *SharedGetSurveyReminderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetSurveyReminderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReminderId

	if len(errors) > 0 {
		return SharedGetSurveyReminderRequestMultiError(errors)
	}

	return nil
}

// SharedGetSurveyReminderRequestMultiError is an error wrapping multiple
// validation errors returned by SharedGetSurveyReminderRequest.ValidateAll()
// if the designated constraints aren't met.
type SharedGetSurveyReminderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetSurveyReminderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetSurveyReminderRequestMultiError) AllErrors() []error { return m }

// SharedGetSurveyReminderRequestValidationError is the validation error
// returned by SharedGetSurveyReminderRequest.Validate if the designated
// constraints aren't met.
type SharedGetSurveyReminderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetSurveyReminderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetSurveyReminderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetSurveyReminderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetSurveyReminderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetSurveyReminderRequestValidationError) ErrorName() string {
	return "SharedGetSurveyReminderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetSurveyReminderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetSurveyReminderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetSurveyReminderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetSurveyReminderRequestValidationError{}

// Validate checks the field values on
// SharedListSurveyReplyDueDateChangeRequestsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListSurveyReplyDueDateChangeRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListSurveyReplyDueDateChangeRequestsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharedListSurveyReplyDueDateChangeRequestsRequestMultiError, or nil if none found.
func (m *SharedListSurveyReplyDueDateChangeRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyReplyDueDateChangeRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyReplyDueDateChangeRequestsRequestMultiError(errors)
	}

	return nil
}

// SharedListSurveyReplyDueDateChangeRequestsRequestMultiError is an error
// wrapping multiple validation errors returned by
// SharedListSurveyReplyDueDateChangeRequestsRequest.ValidateAll() if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyReplyDueDateChangeRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyReplyDueDateChangeRequestsRequestMultiError) AllErrors() []error { return m }

// SharedListSurveyReplyDueDateChangeRequestsRequestValidationError is the
// validation error returned by
// SharedListSurveyReplyDueDateChangeRequestsRequest.Validate if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyReplyDueDateChangeRequestsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedListSurveyReplyDueDateChangeRequestsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedListSurveyReplyDueDateChangeRequestsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharedListSurveyReplyDueDateChangeRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyReplyDueDateChangeRequestsRequestValidationError) ErrorName() string {
	return "SharedListSurveyReplyDueDateChangeRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyReplyDueDateChangeRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyReplyDueDateChangeRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyReplyDueDateChangeRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyReplyDueDateChangeRequestsRequestValidationError{}

// Validate checks the field values on
// SharedListSurveyReplyDueDateChangeRequestsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharedListSurveyReplyDueDateChangeRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListSurveyReplyDueDateChangeRequestsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharedListSurveyReplyDueDateChangeRequestsResponseMultiError, or nil if
// none found.
func (m *SharedListSurveyReplyDueDateChangeRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyReplyDueDateChangeRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListSurveyReplyDueDateChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListSurveyReplyDueDateChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListSurveyReplyDueDateChangeRequestsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyReplyDueDateChangeRequestsResponseMultiError(errors)
	}

	return nil
}

// SharedListSurveyReplyDueDateChangeRequestsResponseMultiError is an error
// wrapping multiple validation errors returned by
// SharedListSurveyReplyDueDateChangeRequestsResponse.ValidateAll() if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyReplyDueDateChangeRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyReplyDueDateChangeRequestsResponseMultiError) AllErrors() []error { return m }

// SharedListSurveyReplyDueDateChangeRequestsResponseValidationError is the
// validation error returned by
// SharedListSurveyReplyDueDateChangeRequestsResponse.Validate if the
// designated constraints aren't met.
type SharedListSurveyReplyDueDateChangeRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyReplyDueDateChangeRequestsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedListSurveyReplyDueDateChangeRequestsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedListSurveyReplyDueDateChangeRequestsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharedListSurveyReplyDueDateChangeRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyReplyDueDateChangeRequestsResponseValidationError) ErrorName() string {
	return "SharedListSurveyReplyDueDateChangeRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyReplyDueDateChangeRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyReplyDueDateChangeRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyReplyDueDateChangeRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyReplyDueDateChangeRequestsResponseValidationError{}

// Validate checks the field values on
// SharedGetSurveyReplyDueDateChangeRequestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedGetSurveyReplyDueDateChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedGetSurveyReplyDueDateChangeRequestRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharedGetSurveyReplyDueDateChangeRequestRequestMultiError, or nil if none found.
func (m *SharedGetSurveyReplyDueDateChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetSurveyReplyDueDateChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReplyDueDateChangeRequestId

	if len(errors) > 0 {
		return SharedGetSurveyReplyDueDateChangeRequestRequestMultiError(errors)
	}

	return nil
}

// SharedGetSurveyReplyDueDateChangeRequestRequestMultiError is an error
// wrapping multiple validation errors returned by
// SharedGetSurveyReplyDueDateChangeRequestRequest.ValidateAll() if the
// designated constraints aren't met.
type SharedGetSurveyReplyDueDateChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetSurveyReplyDueDateChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetSurveyReplyDueDateChangeRequestRequestMultiError) AllErrors() []error { return m }

// SharedGetSurveyReplyDueDateChangeRequestRequestValidationError is the
// validation error returned by
// SharedGetSurveyReplyDueDateChangeRequestRequest.Validate if the designated
// constraints aren't met.
type SharedGetSurveyReplyDueDateChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetSurveyReplyDueDateChangeRequestRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedGetSurveyReplyDueDateChangeRequestRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedGetSurveyReplyDueDateChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetSurveyReplyDueDateChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetSurveyReplyDueDateChangeRequestRequestValidationError) ErrorName() string {
	return "SharedGetSurveyReplyDueDateChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetSurveyReplyDueDateChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetSurveyReplyDueDateChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetSurveyReplyDueDateChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetSurveyReplyDueDateChangeRequestRequestValidationError{}

// Validate checks the field values on SharedGetSurveyResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharedGetSurveyResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetSurveyResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharedGetSurveyResultRequestMultiError, or nil if none found.
func (m *SharedGetSurveyResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetSurveyResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyResultId

	if len(errors) > 0 {
		return SharedGetSurveyResultRequestMultiError(errors)
	}

	return nil
}

// SharedGetSurveyResultRequestMultiError is an error wrapping multiple
// validation errors returned by SharedGetSurveyResultRequest.ValidateAll() if
// the designated constraints aren't met.
type SharedGetSurveyResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetSurveyResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetSurveyResultRequestMultiError) AllErrors() []error { return m }

// SharedGetSurveyResultRequestValidationError is the validation error returned
// by SharedGetSurveyResultRequest.Validate if the designated constraints
// aren't met.
type SharedGetSurveyResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetSurveyResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetSurveyResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetSurveyResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetSurveyResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetSurveyResultRequestValidationError) ErrorName() string {
	return "SharedGetSurveyResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetSurveyResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetSurveyResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetSurveyResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetSurveyResultRequestValidationError{}

// Validate checks the field values on
// SharedListSurveyResultChangeRequestsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListSurveyResultChangeRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListSurveyResultChangeRequestsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListSurveyResultChangeRequestsRequestMultiError, or nil if none found.
func (m *SharedListSurveyResultChangeRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListSurveyResultChangeRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListSurveyResultChangeRequestsRequestMultiError(errors)
	}

	return nil
}

// SharedListSurveyResultChangeRequestsRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListSurveyResultChangeRequestsRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListSurveyResultChangeRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListSurveyResultChangeRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListSurveyResultChangeRequestsRequestMultiError) AllErrors() []error { return m }

// SharedListSurveyResultChangeRequestsRequestValidationError is the validation
// error returned by SharedListSurveyResultChangeRequestsRequest.Validate if
// the designated constraints aren't met.
type SharedListSurveyResultChangeRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListSurveyResultChangeRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListSurveyResultChangeRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListSurveyResultChangeRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListSurveyResultChangeRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListSurveyResultChangeRequestsRequestValidationError) ErrorName() string {
	return "SharedListSurveyResultChangeRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListSurveyResultChangeRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListSurveyResultChangeRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListSurveyResultChangeRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListSurveyResultChangeRequestsRequestValidationError{}

// Validate checks the field values on SurveyResultChangeRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SurveyResultChangeRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SurveyResultChangeRequestsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SurveyResultChangeRequestsResponseMultiError, or nil if none found.
func (m *SurveyResultChangeRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SurveyResultChangeRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SurveyResultChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SurveyResultChangeRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SurveyResultChangeRequestsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SurveyResultChangeRequestsResponseMultiError(errors)
	}

	return nil
}

// SurveyResultChangeRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by
// SurveyResultChangeRequestsResponse.ValidateAll() if the designated
// constraints aren't met.
type SurveyResultChangeRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SurveyResultChangeRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SurveyResultChangeRequestsResponseMultiError) AllErrors() []error { return m }

// SurveyResultChangeRequestsResponseValidationError is the validation error
// returned by SurveyResultChangeRequestsResponse.Validate if the designated
// constraints aren't met.
type SurveyResultChangeRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SurveyResultChangeRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SurveyResultChangeRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SurveyResultChangeRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SurveyResultChangeRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SurveyResultChangeRequestsResponseValidationError) ErrorName() string {
	return "SurveyResultChangeRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SurveyResultChangeRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSurveyResultChangeRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SurveyResultChangeRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SurveyResultChangeRequestsResponseValidationError{}

// Validate checks the field values on
// SharedGetSurveyResultChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedGetSurveyResultChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedGetSurveyResultChangeRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedGetSurveyResultChangeRequestRequestMultiError, or nil if none found.
func (m *SharedGetSurveyResultChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetSurveyResultChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyResultChangeRequestId

	if len(errors) > 0 {
		return SharedGetSurveyResultChangeRequestRequestMultiError(errors)
	}

	return nil
}

// SharedGetSurveyResultChangeRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedGetSurveyResultChangeRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetSurveyResultChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetSurveyResultChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetSurveyResultChangeRequestRequestMultiError) AllErrors() []error { return m }

// SharedGetSurveyResultChangeRequestRequestValidationError is the validation
// error returned by SharedGetSurveyResultChangeRequestRequest.Validate if the
// designated constraints aren't met.
type SharedGetSurveyResultChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetSurveyResultChangeRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetSurveyResultChangeRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetSurveyResultChangeRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetSurveyResultChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetSurveyResultChangeRequestRequestValidationError) ErrorName() string {
	return "SharedGetSurveyResultChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetSurveyResultChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetSurveyResultChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetSurveyResultChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetSurveyResultChangeRequestRequestValidationError{}

// Validate checks the field values on ExpandedListSurveyRequestContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExpandedListSurveyRequestContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExpandedListSurveyRequestContentsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ExpandedListSurveyRequestContentsRequestMultiError, or nil if none found.
func (m *ExpandedListSurveyRequestContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandedListSurveyRequestContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for SurveyBaseRequestId

	if all {
		switch v := interface{}(m.GetDataFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExpandedListSurveyRequestContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExpandedListSurveyRequestContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExpandedListSurveyRequestContentsRequestValidationError{
				field:  "DataFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExpandedListSurveyRequestContentsRequestMultiError(errors)
	}

	return nil
}

// ExpandedListSurveyRequestContentsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ExpandedListSurveyRequestContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ExpandedListSurveyRequestContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandedListSurveyRequestContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandedListSurveyRequestContentsRequestMultiError) AllErrors() []error { return m }

// ExpandedListSurveyRequestContentsRequestValidationError is the validation
// error returned by ExpandedListSurveyRequestContentsRequest.Validate if the
// designated constraints aren't met.
type ExpandedListSurveyRequestContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandedListSurveyRequestContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandedListSurveyRequestContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandedListSurveyRequestContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandedListSurveyRequestContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandedListSurveyRequestContentsRequestValidationError) ErrorName() string {
	return "ExpandedListSurveyRequestContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpandedListSurveyRequestContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandedListSurveyRequestContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandedListSurveyRequestContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandedListSurveyRequestContentsRequestValidationError{}

// Validate checks the field values on
// ExpandedListSurveyRequestContentsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExpandedListSurveyRequestContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExpandedListSurveyRequestContentsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ExpandedListSurveyRequestContentsResponseMultiError, or nil if none found.
func (m *ExpandedListSurveyRequestContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandedListSurveyRequestContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpandedListSurveyRequestContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpandedListSurveyRequestContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpandedListSurveyRequestContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ExpandedListSurveyRequestContentsResponseMultiError(errors)
	}

	return nil
}

// ExpandedListSurveyRequestContentsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ExpandedListSurveyRequestContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ExpandedListSurveyRequestContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandedListSurveyRequestContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandedListSurveyRequestContentsResponseMultiError) AllErrors() []error { return m }

// ExpandedListSurveyRequestContentsResponseValidationError is the validation
// error returned by ExpandedListSurveyRequestContentsResponse.Validate if the
// designated constraints aren't met.
type ExpandedListSurveyRequestContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandedListSurveyRequestContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandedListSurveyRequestContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandedListSurveyRequestContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandedListSurveyRequestContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandedListSurveyRequestContentsResponseValidationError) ErrorName() string {
	return "ExpandedListSurveyRequestContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExpandedListSurveyRequestContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandedListSurveyRequestContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandedListSurveyRequestContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandedListSurveyRequestContentsResponseValidationError{}

// Validate checks the field values on ExpandedGetSurveyRequestContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExpandedGetSurveyRequestContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExpandedGetSurveyRequestContentRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ExpandedGetSurveyRequestContentRequestMultiError, or nil if none found.
func (m *ExpandedGetSurveyRequestContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandedGetSurveyRequestContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	// no validation rules for BusinessUnitManagementId

	if len(errors) > 0 {
		return ExpandedGetSurveyRequestContentRequestMultiError(errors)
	}

	return nil
}

// ExpandedGetSurveyRequestContentRequestMultiError is an error wrapping
// multiple validation errors returned by
// ExpandedGetSurveyRequestContentRequest.ValidateAll() if the designated
// constraints aren't met.
type ExpandedGetSurveyRequestContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandedGetSurveyRequestContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandedGetSurveyRequestContentRequestMultiError) AllErrors() []error { return m }

// ExpandedGetSurveyRequestContentRequestValidationError is the validation
// error returned by ExpandedGetSurveyRequestContentRequest.Validate if the
// designated constraints aren't met.
type ExpandedGetSurveyRequestContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandedGetSurveyRequestContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpandedGetSurveyRequestContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpandedGetSurveyRequestContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpandedGetSurveyRequestContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandedGetSurveyRequestContentRequestValidationError) ErrorName() string {
	return "ExpandedGetSurveyRequestContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExpandedGetSurveyRequestContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandedGetSurveyRequestContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandedGetSurveyRequestContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandedGetSurveyRequestContentRequestValidationError{}

// Validate checks the field values on ListSurveyBaseRequestContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSurveyBaseRequestContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyBaseRequestContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyBaseRequestContentsRequestMultiError, or nil if none found.
func (m *ListSurveyBaseRequestContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyBaseRequestContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetDataFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSurveyBaseRequestContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSurveyBaseRequestContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSurveyBaseRequestContentsRequestValidationError{
				field:  "DataFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSurveyBaseRequestContentsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyBaseRequestContentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyBaseRequestContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyBaseRequestContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyBaseRequestContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyBaseRequestContentsRequestMultiError) AllErrors() []error { return m }

// ListSurveyBaseRequestContentsRequestValidationError is the validation error
// returned by ListSurveyBaseRequestContentsRequest.Validate if the designated
// constraints aren't met.
type ListSurveyBaseRequestContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyBaseRequestContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyBaseRequestContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyBaseRequestContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyBaseRequestContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyBaseRequestContentsRequestValidationError) ErrorName() string {
	return "ListSurveyBaseRequestContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyBaseRequestContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyBaseRequestContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyBaseRequestContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyBaseRequestContentsRequestValidationError{}

// Validate checks the field values on ListSurveyBaseRequestContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSurveyBaseRequestContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyBaseRequestContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyBaseRequestContentsResponseMultiError, or nil if none found.
func (m *ListSurveyBaseRequestContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyBaseRequestContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyBaseRequestContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyBaseRequestContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyBaseRequestContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyBaseRequestContentsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyBaseRequestContentsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyBaseRequestContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyBaseRequestContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyBaseRequestContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyBaseRequestContentsResponseMultiError) AllErrors() []error { return m }

// ListSurveyBaseRequestContentsResponseValidationError is the validation error
// returned by ListSurveyBaseRequestContentsResponse.Validate if the
// designated constraints aren't met.
type ListSurveyBaseRequestContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyBaseRequestContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyBaseRequestContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyBaseRequestContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyBaseRequestContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyBaseRequestContentsResponseValidationError) ErrorName() string {
	return "ListSurveyBaseRequestContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyBaseRequestContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyBaseRequestContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyBaseRequestContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyBaseRequestContentsResponseValidationError{}

// Validate checks the field values on GetSurveyBaseRequestContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSurveyBaseRequestContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyBaseRequestContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetSurveyBaseRequestContentRequestMultiError, or nil if none found.
func (m *GetSurveyBaseRequestContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyBaseRequestContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyBaseRequestId

	if len(errors) > 0 {
		return GetSurveyBaseRequestContentRequestMultiError(errors)
	}

	return nil
}

// GetSurveyBaseRequestContentRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSurveyBaseRequestContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyBaseRequestContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyBaseRequestContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyBaseRequestContentRequestMultiError) AllErrors() []error { return m }

// GetSurveyBaseRequestContentRequestValidationError is the validation error
// returned by GetSurveyBaseRequestContentRequest.Validate if the designated
// constraints aren't met.
type GetSurveyBaseRequestContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyBaseRequestContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyBaseRequestContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyBaseRequestContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyBaseRequestContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyBaseRequestContentRequestValidationError) ErrorName() string {
	return "GetSurveyBaseRequestContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyBaseRequestContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyBaseRequestContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyBaseRequestContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyBaseRequestContentRequestValidationError{}

// Validate checks the field values on ListSurveyRequestContentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyRequestContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRequestContentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSurveyRequestContentsRequestMultiError, or nil if none found.
func (m *ListSurveyRequestContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetDataFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSurveyRequestContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSurveyRequestContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSurveyRequestContentsRequestValidationError{
				field:  "DataFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSurveyRequestContentsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyRequestContentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyRequestContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyRequestContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestContentsRequestMultiError) AllErrors() []error { return m }

// ListSurveyRequestContentsRequestValidationError is the validation error
// returned by ListSurveyRequestContentsRequest.Validate if the designated
// constraints aren't met.
type ListSurveyRequestContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestContentsRequestValidationError) ErrorName() string {
	return "ListSurveyRequestContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestContentsRequestValidationError{}

// Validate checks the field values on ListSurveyRequestContentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyRequestContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyRequestContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyRequestContentsResponseMultiError, or nil if none found.
func (m *ListSurveyRequestContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyRequestContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyRequestContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyRequestContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyRequestContentsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyRequestContentsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyRequestContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyRequestContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestContentsResponseMultiError) AllErrors() []error { return m }

// ListSurveyRequestContentsResponseValidationError is the validation error
// returned by ListSurveyRequestContentsResponse.Validate if the designated
// constraints aren't met.
type ListSurveyRequestContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestContentsResponseValidationError) ErrorName() string {
	return "ListSurveyRequestContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestContentsResponseValidationError{}

// Validate checks the field values on GetSurveyRequestContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSurveyRequestContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyRequestContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSurveyRequestContentRequestMultiError, or nil if none found.
func (m *GetSurveyRequestContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyRequestContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	if len(errors) > 0 {
		return GetSurveyRequestContentRequestMultiError(errors)
	}

	return nil
}

// GetSurveyRequestContentRequestMultiError is an error wrapping multiple
// validation errors returned by GetSurveyRequestContentRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSurveyRequestContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyRequestContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyRequestContentRequestMultiError) AllErrors() []error { return m }

// GetSurveyRequestContentRequestValidationError is the validation error
// returned by GetSurveyRequestContentRequest.Validate if the designated
// constraints aren't met.
type GetSurveyRequestContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyRequestContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyRequestContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyRequestContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyRequestContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyRequestContentRequestValidationError) ErrorName() string {
	return "GetSurveyRequestContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyRequestContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyRequestContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyRequestContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyRequestContentRequestValidationError{}

// Validate checks the field values on ListSurveyReceptionContentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyReceptionContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyReceptionContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyReceptionContentsRequestMultiError, or nil if none found.
func (m *ListSurveyReceptionContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReceptionContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetDataFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSurveyReceptionContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSurveyReceptionContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSurveyReceptionContentsRequestValidationError{
				field:  "DataFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSurveyReceptionContentsRequestMultiError(errors)
	}

	return nil
}

// ListSurveyReceptionContentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyReceptionContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyReceptionContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReceptionContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReceptionContentsRequestMultiError) AllErrors() []error { return m }

// ListSurveyReceptionContentsRequestValidationError is the validation error
// returned by ListSurveyReceptionContentsRequest.Validate if the designated
// constraints aren't met.
type ListSurveyReceptionContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReceptionContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReceptionContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyReceptionContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReceptionContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReceptionContentsRequestValidationError) ErrorName() string {
	return "ListSurveyReceptionContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReceptionContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReceptionContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReceptionContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReceptionContentsRequestValidationError{}

// Validate checks the field values on ListSurveyReceptionContentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSurveyReceptionContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSurveyReceptionContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSurveyReceptionContentsResponseMultiError, or nil if none found.
func (m *ListSurveyReceptionContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReceptionContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSurveyReceptionContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSurveyReceptionContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSurveyReceptionContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListSurveyReceptionContentsResponseMultiError(errors)
	}

	return nil
}

// ListSurveyReceptionContentsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListSurveyReceptionContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyReceptionContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReceptionContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReceptionContentsResponseMultiError) AllErrors() []error { return m }

// ListSurveyReceptionContentsResponseValidationError is the validation error
// returned by ListSurveyReceptionContentsResponse.Validate if the designated
// constraints aren't met.
type ListSurveyReceptionContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReceptionContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReceptionContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyReceptionContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReceptionContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReceptionContentsResponseValidationError) ErrorName() string {
	return "ListSurveyReceptionContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReceptionContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReceptionContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReceptionContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReceptionContentsResponseValidationError{}

// Validate checks the field values on GetSurveyReceptionContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetSurveyReceptionContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSurveyReceptionContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSurveyReceptionContentRequestMultiError, or nil if none found.
func (m *GetSurveyReceptionContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSurveyReceptionContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyReceptionId

	if len(errors) > 0 {
		return GetSurveyReceptionContentRequestMultiError(errors)
	}

	return nil
}

// GetSurveyReceptionContentRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetSurveyReceptionContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSurveyReceptionContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSurveyReceptionContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSurveyReceptionContentRequestMultiError) AllErrors() []error { return m }

// GetSurveyReceptionContentRequestValidationError is the validation error
// returned by GetSurveyReceptionContentRequest.Validate if the designated
// constraints aren't met.
type GetSurveyReceptionContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSurveyReceptionContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSurveyReceptionContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSurveyReceptionContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSurveyReceptionContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSurveyReceptionContentRequestValidationError) ErrorName() string {
	return "GetSurveyReceptionContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSurveyReceptionContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSurveyReceptionContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSurveyReceptionContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSurveyReceptionContentRequestValidationError{}

// Validate checks the field values on UncompletedListSurveyRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UncompletedListSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompletedListSurveyRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompletedListSurveyRequestRequestMultiError, or nil if none found.
func (m *UncompletedListSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompletedListSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UncompletedListSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// UncompletedListSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// UncompletedListSurveyRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type UncompletedListSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompletedListSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompletedListSurveyRequestRequestMultiError) AllErrors() []error { return m }

// UncompletedListSurveyRequestRequestValidationError is the validation error
// returned by UncompletedListSurveyRequestRequest.Validate if the designated
// constraints aren't met.
type UncompletedListSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompletedListSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompletedListSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompletedListSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompletedListSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompletedListSurveyRequestRequestValidationError) ErrorName() string {
	return "UncompletedListSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompletedListSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompletedListSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompletedListSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompletedListSurveyRequestRequestValidationError{}

// Validate checks the field values on UncompletedListSurveyRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UncompletedListSurveyRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompletedListSurveyRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompletedListSurveyRequestResponseMultiError, or nil if none found.
func (m *UncompletedListSurveyRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompletedListSurveyRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UncompletedListSurveyRequestResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UncompletedListSurveyRequestResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UncompletedListSurveyRequestResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UncompletedListSurveyRequestResponseMultiError(errors)
	}

	return nil
}

// UncompletedListSurveyRequestResponseMultiError is an error wrapping multiple
// validation errors returned by
// UncompletedListSurveyRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompletedListSurveyRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompletedListSurveyRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompletedListSurveyRequestResponseMultiError) AllErrors() []error { return m }

// UncompletedListSurveyRequestResponseValidationError is the validation error
// returned by UncompletedListSurveyRequestResponse.Validate if the designated
// constraints aren't met.
type UncompletedListSurveyRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompletedListSurveyRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompletedListSurveyRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompletedListSurveyRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompletedListSurveyRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompletedListSurveyRequestResponseValidationError) ErrorName() string {
	return "UncompletedListSurveyRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompletedListSurveyRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompletedListSurveyRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompletedListSurveyRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompletedListSurveyRequestResponseValidationError{}

// Validate checks the field values on
// UnchangedListSurveyReplyDueDateChangeRequestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnchangedListSurveyReplyDueDateChangeRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnchangedListSurveyReplyDueDateChangeRequestRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UnchangedListSurveyReplyDueDateChangeRequestRequestMultiError, or nil if
// none found.
func (m *UnchangedListSurveyReplyDueDateChangeRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnchangedListSurveyReplyDueDateChangeRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UnchangedListSurveyReplyDueDateChangeRequestRequestMultiError(errors)
	}

	return nil
}

// UnchangedListSurveyReplyDueDateChangeRequestRequestMultiError is an error
// wrapping multiple validation errors returned by
// UnchangedListSurveyReplyDueDateChangeRequestRequest.ValidateAll() if the
// designated constraints aren't met.
type UnchangedListSurveyReplyDueDateChangeRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnchangedListSurveyReplyDueDateChangeRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnchangedListSurveyReplyDueDateChangeRequestRequestMultiError) AllErrors() []error { return m }

// UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError is the
// validation error returned by
// UnchangedListSurveyReplyDueDateChangeRequestRequest.Validate if the
// designated constraints aren't met.
type UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError) ErrorName() string {
	return "UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnchangedListSurveyReplyDueDateChangeRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnchangedListSurveyReplyDueDateChangeRequestRequestValidationError{}

// Validate checks the field values on
// UnchangedListSurveyReplyDueDateChangeRequestResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnchangedListSurveyReplyDueDateChangeRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UnchangedListSurveyReplyDueDateChangeRequestResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UnchangedListSurveyReplyDueDateChangeRequestResponseMultiError, or nil if
// none found.
func (m *UnchangedListSurveyReplyDueDateChangeRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnchangedListSurveyReplyDueDateChangeRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UnchangedListSurveyReplyDueDateChangeRequestResponseMultiError(errors)
	}

	return nil
}

// UnchangedListSurveyReplyDueDateChangeRequestResponseMultiError is an error
// wrapping multiple validation errors returned by
// UnchangedListSurveyReplyDueDateChangeRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type UnchangedListSurveyReplyDueDateChangeRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnchangedListSurveyReplyDueDateChangeRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnchangedListSurveyReplyDueDateChangeRequestResponseMultiError) AllErrors() []error { return m }

// UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError is the
// validation error returned by
// UnchangedListSurveyReplyDueDateChangeRequestResponse.Validate if the
// designated constraints aren't met.
type UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError) ErrorName() string {
	return "UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnchangedListSurveyReplyDueDateChangeRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnchangedListSurveyReplyDueDateChangeRequestResponseValidationError{}

// Validate checks the field values on ExportedSurveyResultFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportedSurveyResultFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportedSurveyResultFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportedSurveyResultFileRequestMultiError, or nil if none found.
func (m *ExportedSurveyResultFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportedSurveyResultFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyResultId

	if len(errors) > 0 {
		return ExportedSurveyResultFileRequestMultiError(errors)
	}

	return nil
}

// ExportedSurveyResultFileRequestMultiError is an error wrapping multiple
// validation errors returned by ExportedSurveyResultFileRequest.ValidateAll()
// if the designated constraints aren't met.
type ExportedSurveyResultFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportedSurveyResultFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportedSurveyResultFileRequestMultiError) AllErrors() []error { return m }

// ExportedSurveyResultFileRequestValidationError is the validation error
// returned by ExportedSurveyResultFileRequest.Validate if the designated
// constraints aren't met.
type ExportedSurveyResultFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportedSurveyResultFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportedSurveyResultFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportedSurveyResultFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportedSurveyResultFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportedSurveyResultFileRequestValidationError) ErrorName() string {
	return "ExportedSurveyResultFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportedSurveyResultFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportedSurveyResultFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportedSurveyResultFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportedSurveyResultFileRequestValidationError{}

// Validate checks the field values on ExportedSurveyResultFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportedSurveyResultFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportedSurveyResultFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportedSurveyResultFileResponseMultiError, or nil if none found.
func (m *ExportedSurveyResultFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportedSurveyResultFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExportedSurveyResultFileResponseMultiError(errors)
	}

	return nil
}

// ExportedSurveyResultFileResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExportedSurveyResultFileResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportedSurveyResultFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportedSurveyResultFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportedSurveyResultFileResponseMultiError) AllErrors() []error { return m }

// ExportedSurveyResultFileResponseValidationError is the validation error
// returned by ExportedSurveyResultFileResponse.Validate if the designated
// constraints aren't met.
type ExportedSurveyResultFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportedSurveyResultFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportedSurveyResultFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportedSurveyResultFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportedSurveyResultFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportedSurveyResultFileResponseValidationError) ErrorName() string {
	return "ExportedSurveyResultFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportedSurveyResultFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportedSurveyResultFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportedSurveyResultFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportedSurveyResultFileResponseValidationError{}

// Validate checks the field values on OpenSurveyRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSurveyRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSurveyRequestRequestMultiError, or nil if none found.
func (m *OpenSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SurveyRequestId

	if len(errors) > 0 {
		return OpenSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// OpenSurveyRequestRequestMultiError is an error wrapping multiple validation
// errors returned by OpenSurveyRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type OpenSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSurveyRequestRequestMultiError) AllErrors() []error { return m }

// OpenSurveyRequestRequestValidationError is the validation error returned by
// OpenSurveyRequestRequest.Validate if the designated constraints aren't met.
type OpenSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSurveyRequestRequestValidationError) ErrorName() string {
	return "OpenSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSurveyRequestRequestValidationError{}

// Validate checks the field values on OpenSurveyRequestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OpenSurveyRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpenSurveyRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OpenSurveyRequestResponseMultiError, or nil if none found.
func (m *OpenSurveyRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OpenSurveyRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOpened()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OpenSurveyRequestResponseValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OpenSurveyRequestResponseValidationError{
					field:  "Opened",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpened()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OpenSurveyRequestResponseValidationError{
				field:  "Opened",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OpenSurveyRequestResponseMultiError(errors)
	}

	return nil
}

// OpenSurveyRequestResponseMultiError is an error wrapping multiple validation
// errors returned by OpenSurveyRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type OpenSurveyRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpenSurveyRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpenSurveyRequestResponseMultiError) AllErrors() []error { return m }

// OpenSurveyRequestResponseValidationError is the validation error returned by
// OpenSurveyRequestResponse.Validate if the designated constraints aren't met.
type OpenSurveyRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenSurveyRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenSurveyRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenSurveyRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenSurveyRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenSurveyRequestResponseValidationError) ErrorName() string {
	return "OpenSurveyRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpenSurveyRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenSurveyRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenSurveyRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenSurveyRequestResponseValidationError{}

// Validate checks the field values on
// ExpandedListSurveyRequestContentsRequest_DataFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExpandedListSurveyRequestContentsRequest_DataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExpandedListSurveyRequestContentsRequest_DataFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ExpandedListSurveyRequestContentsRequest_DataFilterMultiError, or nil if
// none found.
func (m *ExpandedListSurveyRequestContentsRequest_DataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ExpandedListSurveyRequestContentsRequest_DataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SendedAtFrom

	// no validation rules for SendedAtTo

	if len(errors) > 0 {
		return ExpandedListSurveyRequestContentsRequest_DataFilterMultiError(errors)
	}

	return nil
}

// ExpandedListSurveyRequestContentsRequest_DataFilterMultiError is an error
// wrapping multiple validation errors returned by
// ExpandedListSurveyRequestContentsRequest_DataFilter.ValidateAll() if the
// designated constraints aren't met.
type ExpandedListSurveyRequestContentsRequest_DataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpandedListSurveyRequestContentsRequest_DataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpandedListSurveyRequestContentsRequest_DataFilterMultiError) AllErrors() []error { return m }

// ExpandedListSurveyRequestContentsRequest_DataFilterValidationError is the
// validation error returned by
// ExpandedListSurveyRequestContentsRequest_DataFilter.Validate if the
// designated constraints aren't met.
type ExpandedListSurveyRequestContentsRequest_DataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpandedListSurveyRequestContentsRequest_DataFilterValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ExpandedListSurveyRequestContentsRequest_DataFilterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExpandedListSurveyRequestContentsRequest_DataFilterValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ExpandedListSurveyRequestContentsRequest_DataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpandedListSurveyRequestContentsRequest_DataFilterValidationError) ErrorName() string {
	return "ExpandedListSurveyRequestContentsRequest_DataFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ExpandedListSurveyRequestContentsRequest_DataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpandedListSurveyRequestContentsRequest_DataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpandedListSurveyRequestContentsRequest_DataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpandedListSurveyRequestContentsRequest_DataFilterValidationError{}

// Validate checks the field values on
// ListSurveyBaseRequestContentsRequest_DataFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyBaseRequestContentsRequest_DataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyBaseRequestContentsRequest_DataFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListSurveyBaseRequestContentsRequest_DataFilterMultiError, or nil if none found.
func (m *ListSurveyBaseRequestContentsRequest_DataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyBaseRequestContentsRequest_DataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SendedAtFrom

	// no validation rules for SendedAtTo

	if len(errors) > 0 {
		return ListSurveyBaseRequestContentsRequest_DataFilterMultiError(errors)
	}

	return nil
}

// ListSurveyBaseRequestContentsRequest_DataFilterMultiError is an error
// wrapping multiple validation errors returned by
// ListSurveyBaseRequestContentsRequest_DataFilter.ValidateAll() if the
// designated constraints aren't met.
type ListSurveyBaseRequestContentsRequest_DataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyBaseRequestContentsRequest_DataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyBaseRequestContentsRequest_DataFilterMultiError) AllErrors() []error { return m }

// ListSurveyBaseRequestContentsRequest_DataFilterValidationError is the
// validation error returned by
// ListSurveyBaseRequestContentsRequest_DataFilter.Validate if the designated
// constraints aren't met.
type ListSurveyBaseRequestContentsRequest_DataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyBaseRequestContentsRequest_DataFilterValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListSurveyBaseRequestContentsRequest_DataFilterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListSurveyBaseRequestContentsRequest_DataFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyBaseRequestContentsRequest_DataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyBaseRequestContentsRequest_DataFilterValidationError) ErrorName() string {
	return "ListSurveyBaseRequestContentsRequest_DataFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyBaseRequestContentsRequest_DataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyBaseRequestContentsRequest_DataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyBaseRequestContentsRequest_DataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyBaseRequestContentsRequest_DataFilterValidationError{}

// Validate checks the field values on
// ListSurveyRequestContentsRequest_DataFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyRequestContentsRequest_DataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyRequestContentsRequest_DataFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSurveyRequestContentsRequest_DataFilterMultiError, or nil if none found.
func (m *ListSurveyRequestContentsRequest_DataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyRequestContentsRequest_DataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SendedAtFrom

	// no validation rules for SendedAtTo

	if len(errors) > 0 {
		return ListSurveyRequestContentsRequest_DataFilterMultiError(errors)
	}

	return nil
}

// ListSurveyRequestContentsRequest_DataFilterMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyRequestContentsRequest_DataFilter.ValidateAll() if the designated
// constraints aren't met.
type ListSurveyRequestContentsRequest_DataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyRequestContentsRequest_DataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyRequestContentsRequest_DataFilterMultiError) AllErrors() []error { return m }

// ListSurveyRequestContentsRequest_DataFilterValidationError is the validation
// error returned by ListSurveyRequestContentsRequest_DataFilter.Validate if
// the designated constraints aren't met.
type ListSurveyRequestContentsRequest_DataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyRequestContentsRequest_DataFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyRequestContentsRequest_DataFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSurveyRequestContentsRequest_DataFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyRequestContentsRequest_DataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyRequestContentsRequest_DataFilterValidationError) ErrorName() string {
	return "ListSurveyRequestContentsRequest_DataFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyRequestContentsRequest_DataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyRequestContentsRequest_DataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyRequestContentsRequest_DataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyRequestContentsRequest_DataFilterValidationError{}

// Validate checks the field values on
// ListSurveyReceptionContentsRequest_DataFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSurveyReceptionContentsRequest_DataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSurveyReceptionContentsRequest_DataFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSurveyReceptionContentsRequest_DataFilterMultiError, or nil if none found.
func (m *ListSurveyReceptionContentsRequest_DataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSurveyReceptionContentsRequest_DataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReceiptedAtFrom

	// no validation rules for ReceiptedAtTo

	if len(errors) > 0 {
		return ListSurveyReceptionContentsRequest_DataFilterMultiError(errors)
	}

	return nil
}

// ListSurveyReceptionContentsRequest_DataFilterMultiError is an error wrapping
// multiple validation errors returned by
// ListSurveyReceptionContentsRequest_DataFilter.ValidateAll() if the
// designated constraints aren't met.
type ListSurveyReceptionContentsRequest_DataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSurveyReceptionContentsRequest_DataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSurveyReceptionContentsRequest_DataFilterMultiError) AllErrors() []error { return m }

// ListSurveyReceptionContentsRequest_DataFilterValidationError is the
// validation error returned by
// ListSurveyReceptionContentsRequest_DataFilter.Validate if the designated
// constraints aren't met.
type ListSurveyReceptionContentsRequest_DataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSurveyReceptionContentsRequest_DataFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSurveyReceptionContentsRequest_DataFilterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListSurveyReceptionContentsRequest_DataFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSurveyReceptionContentsRequest_DataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSurveyReceptionContentsRequest_DataFilterValidationError) ErrorName() string {
	return "ListSurveyReceptionContentsRequest_DataFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListSurveyReceptionContentsRequest_DataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSurveyReceptionContentsRequest_DataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSurveyReceptionContentsRequest_DataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSurveyReceptionContentsRequest_DataFilterValidationError{}
