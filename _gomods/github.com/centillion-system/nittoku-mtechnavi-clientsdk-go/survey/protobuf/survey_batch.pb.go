// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: survey_batch.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	protobuf1 "mtechnavi/systemreport/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 非同期 展開処理
// required tenant_id
// required survey_base_request_id
// required business_unit_management_id
// required survey_request_detail_auto_name
type TaskExpandCreateSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,2,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,3,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// 依頼明細番号
	SurveyRequestDetailAutoName int64 `protobuf:"varint,4,opt,name=survey_request_detail_auto_name,json=surveyRequestDetailAutoName,proto3" json:"survey_request_detail_auto_name,omitempty"`
}

func (x *TaskExpandCreateSurveyRequestRequest) Reset() {
	*x = TaskExpandCreateSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExpandCreateSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExpandCreateSurveyRequestRequest) ProtoMessage() {}

func (x *TaskExpandCreateSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExpandCreateSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*TaskExpandCreateSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{0}
}

func (x *TaskExpandCreateSurveyRequestRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskExpandCreateSurveyRequestRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

func (x *TaskExpandCreateSurveyRequestRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *TaskExpandCreateSurveyRequestRequest) GetSurveyRequestDetailAutoName() int64 {
	if x != nil {
		return x.SurveyRequestDetailAutoName
	}
	return 0
}

// 非同期 依頼伝票削除
// required tenant_id
// required survey_base_request_id
type TaskDeleteSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 依頼伝票ID
	SurveyBaseRequestId string `protobuf:"bytes,2,opt,name=survey_base_request_id,json=surveyBaseRequestId,proto3" json:"survey_base_request_id,omitempty"`
}

func (x *TaskDeleteSurveyBaseRequestRequest) Reset() {
	*x = TaskDeleteSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleteSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleteSurveyBaseRequestRequest) ProtoMessage() {}

func (x *TaskDeleteSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleteSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*TaskDeleteSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{1}
}

func (x *TaskDeleteSurveyBaseRequestRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskDeleteSurveyBaseRequestRequest) GetSurveyBaseRequestId() string {
	if x != nil {
		return x.SurveyBaseRequestId
	}
	return ""
}

// 非同期 履歴作成
// required tenant_id
// required history_category_name
// required content_name
// required occurred_at
// required type_name
// required record_id
type TaskCreateHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 分類
	HistoryCategoryName string `protobuf:"bytes,2,opt,name=history_category_name,json=historyCategoryName,proto3" json:"history_category_name,omitempty"`
	// 内容
	ContentName string `protobuf:"bytes,3,opt,name=content_name,json=contentName,proto3" json:"content_name,omitempty"`
	// 内容パラメータ
	ContentParamaters []string `protobuf:"bytes,4,rep,name=content_paramaters,json=contentParamaters,proto3" json:"content_paramaters,omitempty"`
	// 発生日
	OccurredAt int64 `protobuf:"varint,5,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// 通知レベル
	Level int64 `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	// 伝票種類
	TypeName string `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// 伝票ID
	RecordId string `protobuf:"bytes,8,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (x *TaskCreateHistoryRequest) Reset() {
	*x = TaskCreateHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateHistoryRequest) ProtoMessage() {}

func (x *TaskCreateHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateHistoryRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateHistoryRequest) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{2}
}

func (x *TaskCreateHistoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetHistoryCategoryName() string {
	if x != nil {
		return x.HistoryCategoryName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetContentName() string {
	if x != nil {
		return x.ContentName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetContentParamaters() []string {
	if x != nil {
		return x.ContentParamaters
	}
	return nil
}

func (x *TaskCreateHistoryRequest) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *TaskCreateHistoryRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TaskCreateHistoryRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

// 日次メール作成処理
// （分類 依頼伝票 コード：SurveyBaseRequest)
// required tenant_id
// required user_id
// required operated_at
type TaskCreateDailyMailSurveyBaseRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// アカウントID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,3,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
}

func (x *TaskCreateDailyMailSurveyBaseRequestRequest) Reset() {
	*x = TaskCreateDailyMailSurveyBaseRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailSurveyBaseRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailSurveyBaseRequestRequest) ProtoMessage() {}

func (x *TaskCreateDailyMailSurveyBaseRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailSurveyBaseRequestRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailSurveyBaseRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{3}
}

func (x *TaskCreateDailyMailSurveyBaseRequestRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateDailyMailSurveyBaseRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskCreateDailyMailSurveyBaseRequestRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

type TaskCreateDailyMailSurveyBaseRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通知内容
	NotificationSettings []*protobuf.NotificationSetting `protobuf:"bytes,1,rep,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	// 単発メール管理
	OneOffMailManagements []*protobuf1.OneOffMailManagement `protobuf:"bytes,2,rep,name=one_off_mail_managements,json=oneOffMailManagements,proto3" json:"one_off_mail_managements,omitempty"`
}

func (x *TaskCreateDailyMailSurveyBaseRequestResponse) Reset() {
	*x = TaskCreateDailyMailSurveyBaseRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailSurveyBaseRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailSurveyBaseRequestResponse) ProtoMessage() {}

func (x *TaskCreateDailyMailSurveyBaseRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailSurveyBaseRequestResponse.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailSurveyBaseRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{4}
}

func (x *TaskCreateDailyMailSurveyBaseRequestResponse) GetNotificationSettings() []*protobuf.NotificationSetting {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *TaskCreateDailyMailSurveyBaseRequestResponse) GetOneOffMailManagements() []*protobuf1.OneOffMailManagement {
	if x != nil {
		return x.OneOffMailManagements
	}
	return nil
}

// 日次メール作成処理
// （分類 依頼明細 コード：SurveyRequest)
// required tenant_id
// required user_id
// required operated_at
type TaskCreateDailyMailSurveyRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// アカウントID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,3,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
}

func (x *TaskCreateDailyMailSurveyRequestRequest) Reset() {
	*x = TaskCreateDailyMailSurveyRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailSurveyRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailSurveyRequestRequest) ProtoMessage() {}

func (x *TaskCreateDailyMailSurveyRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailSurveyRequestRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailSurveyRequestRequest) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{5}
}

func (x *TaskCreateDailyMailSurveyRequestRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateDailyMailSurveyRequestRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskCreateDailyMailSurveyRequestRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

type TaskCreateDailyMailSurveyRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通知内容
	NotificationSettings []*protobuf.NotificationSetting `protobuf:"bytes,1,rep,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	// 単発メール管理
	OneOffMailManagements []*protobuf1.OneOffMailManagement `protobuf:"bytes,2,rep,name=one_off_mail_managements,json=oneOffMailManagements,proto3" json:"one_off_mail_managements,omitempty"`
}

func (x *TaskCreateDailyMailSurveyRequestResponse) Reset() {
	*x = TaskCreateDailyMailSurveyRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailSurveyRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailSurveyRequestResponse) ProtoMessage() {}

func (x *TaskCreateDailyMailSurveyRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailSurveyRequestResponse.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailSurveyRequestResponse) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{6}
}

func (x *TaskCreateDailyMailSurveyRequestResponse) GetNotificationSettings() []*protobuf.NotificationSetting {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *TaskCreateDailyMailSurveyRequestResponse) GetOneOffMailManagements() []*protobuf1.OneOffMailManagement {
	if x != nil {
		return x.OneOffMailManagements
	}
	return nil
}

// 非同期 日次自動催促処理
// required operated_at
type TaskShareReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,2,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
}

func (x *TaskShareReminderRequest) Reset() {
	*x = TaskShareReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_survey_batch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskShareReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskShareReminderRequest) ProtoMessage() {}

func (x *TaskShareReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_survey_batch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskShareReminderRequest.ProtoReflect.Descriptor instead.
func (*TaskShareReminderRequest) Descriptor() ([]byte, []int) {
	return file_survey_batch_proto_rawDescGZIP(), []int{7}
}

func (x *TaskShareReminderRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskShareReminderRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

var File_survey_batch_proto protoreflect.FileDescriptor

var file_survey_batch_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x24, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x1f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x22, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xae, 0x02,
	0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x2b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x2c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x18, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x27, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x28, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x18, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d,
	0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0x88,
	0x06, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1d, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x1b, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xad, 0x01, 0x0a, 0x24, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x20, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x11,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x1b, 0x5a, 0x19, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_survey_batch_proto_rawDescOnce sync.Once
	file_survey_batch_proto_rawDescData = file_survey_batch_proto_rawDesc
)

func file_survey_batch_proto_rawDescGZIP() []byte {
	file_survey_batch_proto_rawDescOnce.Do(func() {
		file_survey_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_survey_batch_proto_rawDescData)
	})
	return file_survey_batch_proto_rawDescData
}

var file_survey_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_survey_batch_proto_goTypes = []interface{}{
	(*TaskExpandCreateSurveyRequestRequest)(nil),         // 0: mtechnavi.api.survey.TaskExpandCreateSurveyRequestRequest
	(*TaskDeleteSurveyBaseRequestRequest)(nil),           // 1: mtechnavi.api.survey.TaskDeleteSurveyBaseRequestRequest
	(*TaskCreateHistoryRequest)(nil),                     // 2: mtechnavi.api.survey.TaskCreateHistoryRequest
	(*TaskCreateDailyMailSurveyBaseRequestRequest)(nil),  // 3: mtechnavi.api.survey.TaskCreateDailyMailSurveyBaseRequestRequest
	(*TaskCreateDailyMailSurveyBaseRequestResponse)(nil), // 4: mtechnavi.api.survey.TaskCreateDailyMailSurveyBaseRequestResponse
	(*TaskCreateDailyMailSurveyRequestRequest)(nil),      // 5: mtechnavi.api.survey.TaskCreateDailyMailSurveyRequestRequest
	(*TaskCreateDailyMailSurveyRequestResponse)(nil),     // 6: mtechnavi.api.survey.TaskCreateDailyMailSurveyRequestResponse
	(*TaskShareReminderRequest)(nil),                     // 7: mtechnavi.api.survey.TaskShareReminderRequest
	(*protobuf.NotificationSetting)(nil),                 // 8: sharelib.NotificationSetting
	(*protobuf1.OneOffMailManagement)(nil),               // 9: mtechnavi.api.systemreport.OneOffMailManagement
	(*emptypb.Empty)(nil),                                // 10: google.protobuf.Empty
}
var file_survey_batch_proto_depIdxs = []int32{
	8,  // 0: mtechnavi.api.survey.TaskCreateDailyMailSurveyBaseRequestResponse.notification_settings:type_name -> sharelib.NotificationSetting
	9,  // 1: mtechnavi.api.survey.TaskCreateDailyMailSurveyBaseRequestResponse.one_off_mail_managements:type_name -> mtechnavi.api.systemreport.OneOffMailManagement
	8,  // 2: mtechnavi.api.survey.TaskCreateDailyMailSurveyRequestResponse.notification_settings:type_name -> sharelib.NotificationSetting
	9,  // 3: mtechnavi.api.survey.TaskCreateDailyMailSurveyRequestResponse.one_off_mail_managements:type_name -> mtechnavi.api.systemreport.OneOffMailManagement
	0,  // 4: mtechnavi.api.survey.surveyBatchService.TaskExpandCreateSurveyRequest:input_type -> mtechnavi.api.survey.TaskExpandCreateSurveyRequestRequest
	1,  // 5: mtechnavi.api.survey.surveyBatchService.TaskDeleteSurveyBaseRequest:input_type -> mtechnavi.api.survey.TaskDeleteSurveyBaseRequestRequest
	2,  // 6: mtechnavi.api.survey.surveyBatchService.TaskCreateHistory:input_type -> mtechnavi.api.survey.TaskCreateHistoryRequest
	3,  // 7: mtechnavi.api.survey.surveyBatchService.TaskCreateDailyMailSurveyBaseRequest:input_type -> mtechnavi.api.survey.TaskCreateDailyMailSurveyBaseRequestRequest
	5,  // 8: mtechnavi.api.survey.surveyBatchService.TaskCreateDailyMailSurveyRequest:input_type -> mtechnavi.api.survey.TaskCreateDailyMailSurveyRequestRequest
	7,  // 9: mtechnavi.api.survey.surveyBatchService.TaskShareReminder:input_type -> mtechnavi.api.survey.TaskShareReminderRequest
	10, // 10: mtechnavi.api.survey.surveyBatchService.TaskExpandCreateSurveyRequest:output_type -> google.protobuf.Empty
	10, // 11: mtechnavi.api.survey.surveyBatchService.TaskDeleteSurveyBaseRequest:output_type -> google.protobuf.Empty
	10, // 12: mtechnavi.api.survey.surveyBatchService.TaskCreateHistory:output_type -> google.protobuf.Empty
	4,  // 13: mtechnavi.api.survey.surveyBatchService.TaskCreateDailyMailSurveyBaseRequest:output_type -> mtechnavi.api.survey.TaskCreateDailyMailSurveyBaseRequestResponse
	6,  // 14: mtechnavi.api.survey.surveyBatchService.TaskCreateDailyMailSurveyRequest:output_type -> mtechnavi.api.survey.TaskCreateDailyMailSurveyRequestResponse
	10, // 15: mtechnavi.api.survey.surveyBatchService.TaskShareReminder:output_type -> google.protobuf.Empty
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_survey_batch_proto_init() }
func file_survey_batch_proto_init() {
	if File_survey_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_survey_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExpandCreateSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDeleteSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailSurveyBaseRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailSurveyBaseRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailSurveyRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailSurveyRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_survey_batch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskShareReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_survey_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_survey_batch_proto_goTypes,
		DependencyIndexes: file_survey_batch_proto_depIdxs,
		MessageInfos:      file_survey_batch_proto_msgTypes,
	}.Build()
	File_survey_batch_proto = out.File
	file_survey_batch_proto_rawDesc = nil
	file_survey_batch_proto_goTypes = nil
	file_survey_batch_proto_depIdxs = nil
}
