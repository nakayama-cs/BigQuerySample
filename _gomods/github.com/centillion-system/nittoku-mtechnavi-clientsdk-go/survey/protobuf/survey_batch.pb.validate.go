// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: survey_batch.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TaskExpandCreateSurveyRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TaskExpandCreateSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskExpandCreateSurveyRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TaskExpandCreateSurveyRequestRequestMultiError, or nil if none found.
func (m *TaskExpandCreateSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskExpandCreateSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for SurveyBaseRequestId

	// no validation rules for BusinessUnitManagementId

	// no validation rules for SurveyRequestDetailAutoName

	if len(errors) > 0 {
		return TaskExpandCreateSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// TaskExpandCreateSurveyRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// TaskExpandCreateSurveyRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskExpandCreateSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskExpandCreateSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskExpandCreateSurveyRequestRequestMultiError) AllErrors() []error { return m }

// TaskExpandCreateSurveyRequestRequestValidationError is the validation error
// returned by TaskExpandCreateSurveyRequestRequest.Validate if the designated
// constraints aren't met.
type TaskExpandCreateSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskExpandCreateSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskExpandCreateSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskExpandCreateSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskExpandCreateSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskExpandCreateSurveyRequestRequestValidationError) ErrorName() string {
	return "TaskExpandCreateSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskExpandCreateSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskExpandCreateSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskExpandCreateSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskExpandCreateSurveyRequestRequestValidationError{}

// Validate checks the field values on TaskDeleteSurveyBaseRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TaskDeleteSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskDeleteSurveyBaseRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TaskDeleteSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *TaskDeleteSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskDeleteSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for SurveyBaseRequestId

	if len(errors) > 0 {
		return TaskDeleteSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// TaskDeleteSurveyBaseRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// TaskDeleteSurveyBaseRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskDeleteSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskDeleteSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskDeleteSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// TaskDeleteSurveyBaseRequestRequestValidationError is the validation error
// returned by TaskDeleteSurveyBaseRequestRequest.Validate if the designated
// constraints aren't met.
type TaskDeleteSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskDeleteSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskDeleteSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskDeleteSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskDeleteSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskDeleteSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "TaskDeleteSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskDeleteSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskDeleteSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskDeleteSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskDeleteSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on TaskCreateHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskCreateHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskCreateHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskCreateHistoryRequestMultiError, or nil if none found.
func (m *TaskCreateHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for HistoryCategoryName

	// no validation rules for ContentName

	// no validation rules for OccurredAt

	// no validation rules for Level

	// no validation rules for TypeName

	// no validation rules for RecordId

	if len(errors) > 0 {
		return TaskCreateHistoryRequestMultiError(errors)
	}

	return nil
}

// TaskCreateHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by TaskCreateHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskCreateHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateHistoryRequestMultiError) AllErrors() []error { return m }

// TaskCreateHistoryRequestValidationError is the validation error returned by
// TaskCreateHistoryRequest.Validate if the designated constraints aren't met.
type TaskCreateHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateHistoryRequestValidationError) ErrorName() string {
	return "TaskCreateHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateHistoryRequestValidationError{}

// Validate checks the field values on
// TaskCreateDailyMailSurveyBaseRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskCreateDailyMailSurveyBaseRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TaskCreateDailyMailSurveyBaseRequestRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TaskCreateDailyMailSurveyBaseRequestRequestMultiError, or nil if none found.
func (m *TaskCreateDailyMailSurveyBaseRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateDailyMailSurveyBaseRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for OperatedAt

	if len(errors) > 0 {
		return TaskCreateDailyMailSurveyBaseRequestRequestMultiError(errors)
	}

	return nil
}

// TaskCreateDailyMailSurveyBaseRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// TaskCreateDailyMailSurveyBaseRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskCreateDailyMailSurveyBaseRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateDailyMailSurveyBaseRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateDailyMailSurveyBaseRequestRequestMultiError) AllErrors() []error { return m }

// TaskCreateDailyMailSurveyBaseRequestRequestValidationError is the validation
// error returned by TaskCreateDailyMailSurveyBaseRequestRequest.Validate if
// the designated constraints aren't met.
type TaskCreateDailyMailSurveyBaseRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateDailyMailSurveyBaseRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateDailyMailSurveyBaseRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateDailyMailSurveyBaseRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateDailyMailSurveyBaseRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateDailyMailSurveyBaseRequestRequestValidationError) ErrorName() string {
	return "TaskCreateDailyMailSurveyBaseRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateDailyMailSurveyBaseRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateDailyMailSurveyBaseRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateDailyMailSurveyBaseRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateDailyMailSurveyBaseRequestRequestValidationError{}

// Validate checks the field values on
// TaskCreateDailyMailSurveyBaseRequestResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskCreateDailyMailSurveyBaseRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TaskCreateDailyMailSurveyBaseRequestResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TaskCreateDailyMailSurveyBaseRequestResponseMultiError, or nil if none found.
func (m *TaskCreateDailyMailSurveyBaseRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateDailyMailSurveyBaseRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotificationSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyBaseRequestResponseValidationError{
						field:  fmt.Sprintf("NotificationSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyBaseRequestResponseValidationError{
						field:  fmt.Sprintf("NotificationSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskCreateDailyMailSurveyBaseRequestResponseValidationError{
					field:  fmt.Sprintf("NotificationSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOneOffMailManagements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyBaseRequestResponseValidationError{
						field:  fmt.Sprintf("OneOffMailManagements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyBaseRequestResponseValidationError{
						field:  fmt.Sprintf("OneOffMailManagements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskCreateDailyMailSurveyBaseRequestResponseValidationError{
					field:  fmt.Sprintf("OneOffMailManagements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskCreateDailyMailSurveyBaseRequestResponseMultiError(errors)
	}

	return nil
}

// TaskCreateDailyMailSurveyBaseRequestResponseMultiError is an error wrapping
// multiple validation errors returned by
// TaskCreateDailyMailSurveyBaseRequestResponse.ValidateAll() if the
// designated constraints aren't met.
type TaskCreateDailyMailSurveyBaseRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateDailyMailSurveyBaseRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateDailyMailSurveyBaseRequestResponseMultiError) AllErrors() []error { return m }

// TaskCreateDailyMailSurveyBaseRequestResponseValidationError is the
// validation error returned by
// TaskCreateDailyMailSurveyBaseRequestResponse.Validate if the designated
// constraints aren't met.
type TaskCreateDailyMailSurveyBaseRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateDailyMailSurveyBaseRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateDailyMailSurveyBaseRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateDailyMailSurveyBaseRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateDailyMailSurveyBaseRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateDailyMailSurveyBaseRequestResponseValidationError) ErrorName() string {
	return "TaskCreateDailyMailSurveyBaseRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateDailyMailSurveyBaseRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateDailyMailSurveyBaseRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateDailyMailSurveyBaseRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateDailyMailSurveyBaseRequestResponseValidationError{}

// Validate checks the field values on TaskCreateDailyMailSurveyRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TaskCreateDailyMailSurveyRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TaskCreateDailyMailSurveyRequestRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TaskCreateDailyMailSurveyRequestRequestMultiError, or nil if none found.
func (m *TaskCreateDailyMailSurveyRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateDailyMailSurveyRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for UserId

	// no validation rules for OperatedAt

	if len(errors) > 0 {
		return TaskCreateDailyMailSurveyRequestRequestMultiError(errors)
	}

	return nil
}

// TaskCreateDailyMailSurveyRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// TaskCreateDailyMailSurveyRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskCreateDailyMailSurveyRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateDailyMailSurveyRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateDailyMailSurveyRequestRequestMultiError) AllErrors() []error { return m }

// TaskCreateDailyMailSurveyRequestRequestValidationError is the validation
// error returned by TaskCreateDailyMailSurveyRequestRequest.Validate if the
// designated constraints aren't met.
type TaskCreateDailyMailSurveyRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateDailyMailSurveyRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateDailyMailSurveyRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateDailyMailSurveyRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateDailyMailSurveyRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateDailyMailSurveyRequestRequestValidationError) ErrorName() string {
	return "TaskCreateDailyMailSurveyRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateDailyMailSurveyRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateDailyMailSurveyRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateDailyMailSurveyRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateDailyMailSurveyRequestRequestValidationError{}

// Validate checks the field values on TaskCreateDailyMailSurveyRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TaskCreateDailyMailSurveyRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TaskCreateDailyMailSurveyRequestResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TaskCreateDailyMailSurveyRequestResponseMultiError, or nil if none found.
func (m *TaskCreateDailyMailSurveyRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateDailyMailSurveyRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotificationSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyRequestResponseValidationError{
						field:  fmt.Sprintf("NotificationSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyRequestResponseValidationError{
						field:  fmt.Sprintf("NotificationSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskCreateDailyMailSurveyRequestResponseValidationError{
					field:  fmt.Sprintf("NotificationSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOneOffMailManagements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyRequestResponseValidationError{
						field:  fmt.Sprintf("OneOffMailManagements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskCreateDailyMailSurveyRequestResponseValidationError{
						field:  fmt.Sprintf("OneOffMailManagements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskCreateDailyMailSurveyRequestResponseValidationError{
					field:  fmt.Sprintf("OneOffMailManagements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskCreateDailyMailSurveyRequestResponseMultiError(errors)
	}

	return nil
}

// TaskCreateDailyMailSurveyRequestResponseMultiError is an error wrapping
// multiple validation errors returned by
// TaskCreateDailyMailSurveyRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type TaskCreateDailyMailSurveyRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateDailyMailSurveyRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateDailyMailSurveyRequestResponseMultiError) AllErrors() []error { return m }

// TaskCreateDailyMailSurveyRequestResponseValidationError is the validation
// error returned by TaskCreateDailyMailSurveyRequestResponse.Validate if the
// designated constraints aren't met.
type TaskCreateDailyMailSurveyRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateDailyMailSurveyRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateDailyMailSurveyRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateDailyMailSurveyRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateDailyMailSurveyRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateDailyMailSurveyRequestResponseValidationError) ErrorName() string {
	return "TaskCreateDailyMailSurveyRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateDailyMailSurveyRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateDailyMailSurveyRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateDailyMailSurveyRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateDailyMailSurveyRequestResponseValidationError{}

// Validate checks the field values on TaskShareReminderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskShareReminderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskShareReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskShareReminderRequestMultiError, or nil if none found.
func (m *TaskShareReminderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskShareReminderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for OperatedAt

	if len(errors) > 0 {
		return TaskShareReminderRequestMultiError(errors)
	}

	return nil
}

// TaskShareReminderRequestMultiError is an error wrapping multiple validation
// errors returned by TaskShareReminderRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskShareReminderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskShareReminderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskShareReminderRequestMultiError) AllErrors() []error { return m }

// TaskShareReminderRequestValidationError is the validation error returned by
// TaskShareReminderRequest.Validate if the designated constraints aren't met.
type TaskShareReminderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskShareReminderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskShareReminderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskShareReminderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskShareReminderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskShareReminderRequestValidationError) ErrorName() string {
	return "TaskShareReminderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskShareReminderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskShareReminderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskShareReminderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskShareReminderRequestValidationError{}
