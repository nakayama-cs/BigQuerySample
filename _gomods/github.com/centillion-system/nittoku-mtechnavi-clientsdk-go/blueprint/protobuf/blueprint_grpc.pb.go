// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionUnitServiceClient is the client API for TransactionUnitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionUnitServiceClient interface {
	CreateTransactionUnit(ctx context.Context, in *CreateTransactionUnitRequest, opts ...grpc.CallOption) (*TransactionUnit, error)
	ListTransactionUnits(ctx context.Context, in *ListTransactionUnitsRequest, opts ...grpc.CallOption) (*ListTransactionUnitsResponse, error)
	GetTransactionUnit(ctx context.Context, in *GetTransactionUnitRequest, opts ...grpc.CallOption) (*TransactionUnit, error)
	UpdateTransactionUnit(ctx context.Context, in *UpdateTransactionUnitRequest, opts ...grpc.CallOption) (*TransactionUnit, error)
	DeleteTransactionUnit(ctx context.Context, in *DeleteTransactionUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 項目取込
	ImportTransactionUnits(ctx context.Context, in *ImportTransactionUnitsRequest, opts ...grpc.CallOption) (*ImportTransactionUnitsResponse, error)
	// 取込フォーマット出力
	ExportTransactionUnits(ctx context.Context, in *ExportTransactionUnitsRequest, opts ...grpc.CallOption) (*ExportTransactionUnitsResponse, error)
	// 取込フォーマット取得
	ListTransactionUnitFormats(ctx context.Context, in *ListTransactionUnitFormatsRequest, opts ...grpc.CallOption) (*ListTransactionUnitFormatsResponse, error)
}

type transactionUnitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionUnitServiceClient(cc grpc.ClientConnInterface) TransactionUnitServiceClient {
	return &transactionUnitServiceClient{cc}
}

func (c *transactionUnitServiceClient) CreateTransactionUnit(ctx context.Context, in *CreateTransactionUnitRequest, opts ...grpc.CallOption) (*TransactionUnit, error) {
	out := new(TransactionUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/CreateTransactionUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) ListTransactionUnits(ctx context.Context, in *ListTransactionUnitsRequest, opts ...grpc.CallOption) (*ListTransactionUnitsResponse, error) {
	out := new(ListTransactionUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/ListTransactionUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) GetTransactionUnit(ctx context.Context, in *GetTransactionUnitRequest, opts ...grpc.CallOption) (*TransactionUnit, error) {
	out := new(TransactionUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/GetTransactionUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) UpdateTransactionUnit(ctx context.Context, in *UpdateTransactionUnitRequest, opts ...grpc.CallOption) (*TransactionUnit, error) {
	out := new(TransactionUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/UpdateTransactionUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) DeleteTransactionUnit(ctx context.Context, in *DeleteTransactionUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/DeleteTransactionUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) ImportTransactionUnits(ctx context.Context, in *ImportTransactionUnitsRequest, opts ...grpc.CallOption) (*ImportTransactionUnitsResponse, error) {
	out := new(ImportTransactionUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/ImportTransactionUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) ExportTransactionUnits(ctx context.Context, in *ExportTransactionUnitsRequest, opts ...grpc.CallOption) (*ExportTransactionUnitsResponse, error) {
	out := new(ExportTransactionUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/ExportTransactionUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionUnitServiceClient) ListTransactionUnitFormats(ctx context.Context, in *ListTransactionUnitFormatsRequest, opts ...grpc.CallOption) (*ListTransactionUnitFormatsResponse, error) {
	out := new(ListTransactionUnitFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.TransactionUnitService/ListTransactionUnitFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionUnitServiceServer is the server API for TransactionUnitService service.
// All implementations must embed UnimplementedTransactionUnitServiceServer
// for forward compatibility
type TransactionUnitServiceServer interface {
	CreateTransactionUnit(context.Context, *CreateTransactionUnitRequest) (*TransactionUnit, error)
	ListTransactionUnits(context.Context, *ListTransactionUnitsRequest) (*ListTransactionUnitsResponse, error)
	GetTransactionUnit(context.Context, *GetTransactionUnitRequest) (*TransactionUnit, error)
	UpdateTransactionUnit(context.Context, *UpdateTransactionUnitRequest) (*TransactionUnit, error)
	DeleteTransactionUnit(context.Context, *DeleteTransactionUnitRequest) (*emptypb.Empty, error)
	// 項目取込
	ImportTransactionUnits(context.Context, *ImportTransactionUnitsRequest) (*ImportTransactionUnitsResponse, error)
	// 取込フォーマット出力
	ExportTransactionUnits(context.Context, *ExportTransactionUnitsRequest) (*ExportTransactionUnitsResponse, error)
	// 取込フォーマット取得
	ListTransactionUnitFormats(context.Context, *ListTransactionUnitFormatsRequest) (*ListTransactionUnitFormatsResponse, error)
	mustEmbedUnimplementedTransactionUnitServiceServer()
}

// UnimplementedTransactionUnitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionUnitServiceServer struct {
}

func (UnimplementedTransactionUnitServiceServer) CreateTransactionUnit(context.Context, *CreateTransactionUnitRequest) (*TransactionUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionUnit not implemented")
}
func (UnimplementedTransactionUnitServiceServer) ListTransactionUnits(context.Context, *ListTransactionUnitsRequest) (*ListTransactionUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionUnits not implemented")
}
func (UnimplementedTransactionUnitServiceServer) GetTransactionUnit(context.Context, *GetTransactionUnitRequest) (*TransactionUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionUnit not implemented")
}
func (UnimplementedTransactionUnitServiceServer) UpdateTransactionUnit(context.Context, *UpdateTransactionUnitRequest) (*TransactionUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionUnit not implemented")
}
func (UnimplementedTransactionUnitServiceServer) DeleteTransactionUnit(context.Context, *DeleteTransactionUnitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionUnit not implemented")
}
func (UnimplementedTransactionUnitServiceServer) ImportTransactionUnits(context.Context, *ImportTransactionUnitsRequest) (*ImportTransactionUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTransactionUnits not implemented")
}
func (UnimplementedTransactionUnitServiceServer) ExportTransactionUnits(context.Context, *ExportTransactionUnitsRequest) (*ExportTransactionUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTransactionUnits not implemented")
}
func (UnimplementedTransactionUnitServiceServer) ListTransactionUnitFormats(context.Context, *ListTransactionUnitFormatsRequest) (*ListTransactionUnitFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionUnitFormats not implemented")
}
func (UnimplementedTransactionUnitServiceServer) mustEmbedUnimplementedTransactionUnitServiceServer() {
}

// UnsafeTransactionUnitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionUnitServiceServer will
// result in compilation errors.
type UnsafeTransactionUnitServiceServer interface {
	mustEmbedUnimplementedTransactionUnitServiceServer()
}

func RegisterTransactionUnitServiceServer(s grpc.ServiceRegistrar, srv TransactionUnitServiceServer) {
	s.RegisterService(&TransactionUnitService_ServiceDesc, srv)
}

func _TransactionUnitService_CreateTransactionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).CreateTransactionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/CreateTransactionUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).CreateTransactionUnit(ctx, req.(*CreateTransactionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_ListTransactionUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).ListTransactionUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/ListTransactionUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).ListTransactionUnits(ctx, req.(*ListTransactionUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_GetTransactionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).GetTransactionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/GetTransactionUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).GetTransactionUnit(ctx, req.(*GetTransactionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_UpdateTransactionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).UpdateTransactionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/UpdateTransactionUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).UpdateTransactionUnit(ctx, req.(*UpdateTransactionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_DeleteTransactionUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).DeleteTransactionUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/DeleteTransactionUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).DeleteTransactionUnit(ctx, req.(*DeleteTransactionUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_ImportTransactionUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTransactionUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).ImportTransactionUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/ImportTransactionUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).ImportTransactionUnits(ctx, req.(*ImportTransactionUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_ExportTransactionUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTransactionUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).ExportTransactionUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/ExportTransactionUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).ExportTransactionUnits(ctx, req.(*ExportTransactionUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionUnitService_ListTransactionUnitFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionUnitFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionUnitServiceServer).ListTransactionUnitFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.TransactionUnitService/ListTransactionUnitFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionUnitServiceServer).ListTransactionUnitFormats(ctx, req.(*ListTransactionUnitFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionUnitService_ServiceDesc is the grpc.ServiceDesc for TransactionUnitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionUnitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.blueprint.TransactionUnitService",
	HandlerType: (*TransactionUnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransactionUnit",
			Handler:    _TransactionUnitService_CreateTransactionUnit_Handler,
		},
		{
			MethodName: "ListTransactionUnits",
			Handler:    _TransactionUnitService_ListTransactionUnits_Handler,
		},
		{
			MethodName: "GetTransactionUnit",
			Handler:    _TransactionUnitService_GetTransactionUnit_Handler,
		},
		{
			MethodName: "UpdateTransactionUnit",
			Handler:    _TransactionUnitService_UpdateTransactionUnit_Handler,
		},
		{
			MethodName: "DeleteTransactionUnit",
			Handler:    _TransactionUnitService_DeleteTransactionUnit_Handler,
		},
		{
			MethodName: "ImportTransactionUnits",
			Handler:    _TransactionUnitService_ImportTransactionUnits_Handler,
		},
		{
			MethodName: "ExportTransactionUnits",
			Handler:    _TransactionUnitService_ExportTransactionUnits_Handler,
		},
		{
			MethodName: "ListTransactionUnitFormats",
			Handler:    _TransactionUnitService_ListTransactionUnitFormats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blueprint.proto",
}

// BlueprintServiceClient is the client API for BlueprintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlueprintServiceClient interface {
	CreateBlueprint(ctx context.Context, in *CreateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	ListBlueprints(ctx context.Context, in *ListBlueprintsRequest, opts ...grpc.CallOption) (*ListBlueprintsResponse, error)
	GetBlueprint(ctx context.Context, in *GetBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	UpdateBlueprint(ctx context.Context, in *UpdateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error)
	DeleteBlueprint(ctx context.Context, in *DeleteBlueprintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 図面取込
	ImportBlueprints(ctx context.Context, in *ImportBlueprintsRequest, opts ...grpc.CallOption) (*ImportBlueprintsResponse, error)
	// 取込フォーマット出力
	ExportBlueprints(ctx context.Context, in *ExportBlueprintsRequest, opts ...grpc.CallOption) (*ExportBlueprintsResponse, error)
	// 取込フォーマット取得
	ListBlueprintFormats(ctx context.Context, in *ListBlueprintFormatsRequest, opts ...grpc.CallOption) (*ListBlueprintFormatsResponse, error)
	// 図面紐付け処理
	LinkAssetToBlueprint(ctx context.Context, in *LinkAssetToBlueprintRequest, opts ...grpc.CallOption) (*LinkAssetToBlueprintResponse, error)
}

type blueprintServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlueprintServiceClient(cc grpc.ClientConnInterface) BlueprintServiceClient {
	return &blueprintServiceClient{cc}
}

func (c *blueprintServiceClient) CreateBlueprint(ctx context.Context, in *CreateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/CreateBlueprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) ListBlueprints(ctx context.Context, in *ListBlueprintsRequest, opts ...grpc.CallOption) (*ListBlueprintsResponse, error) {
	out := new(ListBlueprintsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/ListBlueprints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) GetBlueprint(ctx context.Context, in *GetBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/GetBlueprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) UpdateBlueprint(ctx context.Context, in *UpdateBlueprintRequest, opts ...grpc.CallOption) (*Blueprint, error) {
	out := new(Blueprint)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/UpdateBlueprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) DeleteBlueprint(ctx context.Context, in *DeleteBlueprintRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/DeleteBlueprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) ImportBlueprints(ctx context.Context, in *ImportBlueprintsRequest, opts ...grpc.CallOption) (*ImportBlueprintsResponse, error) {
	out := new(ImportBlueprintsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/ImportBlueprints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) ExportBlueprints(ctx context.Context, in *ExportBlueprintsRequest, opts ...grpc.CallOption) (*ExportBlueprintsResponse, error) {
	out := new(ExportBlueprintsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/ExportBlueprints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) ListBlueprintFormats(ctx context.Context, in *ListBlueprintFormatsRequest, opts ...grpc.CallOption) (*ListBlueprintFormatsResponse, error) {
	out := new(ListBlueprintFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/ListBlueprintFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blueprintServiceClient) LinkAssetToBlueprint(ctx context.Context, in *LinkAssetToBlueprintRequest, opts ...grpc.CallOption) (*LinkAssetToBlueprintResponse, error) {
	out := new(LinkAssetToBlueprintResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.blueprint.BlueprintService/LinkAssetToBlueprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlueprintServiceServer is the server API for BlueprintService service.
// All implementations must embed UnimplementedBlueprintServiceServer
// for forward compatibility
type BlueprintServiceServer interface {
	CreateBlueprint(context.Context, *CreateBlueprintRequest) (*Blueprint, error)
	ListBlueprints(context.Context, *ListBlueprintsRequest) (*ListBlueprintsResponse, error)
	GetBlueprint(context.Context, *GetBlueprintRequest) (*Blueprint, error)
	UpdateBlueprint(context.Context, *UpdateBlueprintRequest) (*Blueprint, error)
	DeleteBlueprint(context.Context, *DeleteBlueprintRequest) (*emptypb.Empty, error)
	// 図面取込
	ImportBlueprints(context.Context, *ImportBlueprintsRequest) (*ImportBlueprintsResponse, error)
	// 取込フォーマット出力
	ExportBlueprints(context.Context, *ExportBlueprintsRequest) (*ExportBlueprintsResponse, error)
	// 取込フォーマット取得
	ListBlueprintFormats(context.Context, *ListBlueprintFormatsRequest) (*ListBlueprintFormatsResponse, error)
	// 図面紐付け処理
	LinkAssetToBlueprint(context.Context, *LinkAssetToBlueprintRequest) (*LinkAssetToBlueprintResponse, error)
	mustEmbedUnimplementedBlueprintServiceServer()
}

// UnimplementedBlueprintServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlueprintServiceServer struct {
}

func (UnimplementedBlueprintServiceServer) CreateBlueprint(context.Context, *CreateBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlueprint not implemented")
}
func (UnimplementedBlueprintServiceServer) ListBlueprints(context.Context, *ListBlueprintsRequest) (*ListBlueprintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlueprints not implemented")
}
func (UnimplementedBlueprintServiceServer) GetBlueprint(context.Context, *GetBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlueprint not implemented")
}
func (UnimplementedBlueprintServiceServer) UpdateBlueprint(context.Context, *UpdateBlueprintRequest) (*Blueprint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlueprint not implemented")
}
func (UnimplementedBlueprintServiceServer) DeleteBlueprint(context.Context, *DeleteBlueprintRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlueprint not implemented")
}
func (UnimplementedBlueprintServiceServer) ImportBlueprints(context.Context, *ImportBlueprintsRequest) (*ImportBlueprintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBlueprints not implemented")
}
func (UnimplementedBlueprintServiceServer) ExportBlueprints(context.Context, *ExportBlueprintsRequest) (*ExportBlueprintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBlueprints not implemented")
}
func (UnimplementedBlueprintServiceServer) ListBlueprintFormats(context.Context, *ListBlueprintFormatsRequest) (*ListBlueprintFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlueprintFormats not implemented")
}
func (UnimplementedBlueprintServiceServer) LinkAssetToBlueprint(context.Context, *LinkAssetToBlueprintRequest) (*LinkAssetToBlueprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAssetToBlueprint not implemented")
}
func (UnimplementedBlueprintServiceServer) mustEmbedUnimplementedBlueprintServiceServer() {}

// UnsafeBlueprintServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlueprintServiceServer will
// result in compilation errors.
type UnsafeBlueprintServiceServer interface {
	mustEmbedUnimplementedBlueprintServiceServer()
}

func RegisterBlueprintServiceServer(s grpc.ServiceRegistrar, srv BlueprintServiceServer) {
	s.RegisterService(&BlueprintService_ServiceDesc, srv)
}

func _BlueprintService_CreateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).CreateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/CreateBlueprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).CreateBlueprint(ctx, req.(*CreateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_ListBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).ListBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/ListBlueprints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).ListBlueprints(ctx, req.(*ListBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_GetBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).GetBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/GetBlueprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).GetBlueprint(ctx, req.(*GetBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_UpdateBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).UpdateBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/UpdateBlueprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).UpdateBlueprint(ctx, req.(*UpdateBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_DeleteBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).DeleteBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/DeleteBlueprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).DeleteBlueprint(ctx, req.(*DeleteBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_ImportBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).ImportBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/ImportBlueprints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).ImportBlueprints(ctx, req.(*ImportBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_ExportBlueprints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBlueprintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).ExportBlueprints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/ExportBlueprints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).ExportBlueprints(ctx, req.(*ExportBlueprintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_ListBlueprintFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlueprintFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).ListBlueprintFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/ListBlueprintFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).ListBlueprintFormats(ctx, req.(*ListBlueprintFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlueprintService_LinkAssetToBlueprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAssetToBlueprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlueprintServiceServer).LinkAssetToBlueprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.blueprint.BlueprintService/LinkAssetToBlueprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlueprintServiceServer).LinkAssetToBlueprint(ctx, req.(*LinkAssetToBlueprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlueprintService_ServiceDesc is the grpc.ServiceDesc for BlueprintService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlueprintService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.blueprint.BlueprintService",
	HandlerType: (*BlueprintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlueprint",
			Handler:    _BlueprintService_CreateBlueprint_Handler,
		},
		{
			MethodName: "ListBlueprints",
			Handler:    _BlueprintService_ListBlueprints_Handler,
		},
		{
			MethodName: "GetBlueprint",
			Handler:    _BlueprintService_GetBlueprint_Handler,
		},
		{
			MethodName: "UpdateBlueprint",
			Handler:    _BlueprintService_UpdateBlueprint_Handler,
		},
		{
			MethodName: "DeleteBlueprint",
			Handler:    _BlueprintService_DeleteBlueprint_Handler,
		},
		{
			MethodName: "ImportBlueprints",
			Handler:    _BlueprintService_ImportBlueprints_Handler,
		},
		{
			MethodName: "ExportBlueprints",
			Handler:    _BlueprintService_ExportBlueprints_Handler,
		},
		{
			MethodName: "ListBlueprintFormats",
			Handler:    _BlueprintService_ListBlueprintFormats_Handler,
		},
		{
			MethodName: "LinkAssetToBlueprint",
			Handler:    _BlueprintService_LinkAssetToBlueprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blueprint.proto",
}
