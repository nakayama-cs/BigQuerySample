// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: uicontroller.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PresetMenu with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PresetMenu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresetMenu with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PresetMenuMultiError, or
// nil if none found.
func (m *PresetMenu) ValidateAll() error {
	return m.validate(true)
}

func (m *PresetMenu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PresetMenuId

	// no validation rules for ParentPresetMenuId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	switch m.Value.(type) {

	case *PresetMenu_Container:

		if all {
			switch v := interface{}(m.GetContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PresetMenuValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PresetMenuValidationError{
						field:  "Container",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PresetMenuValidationError{
					field:  "Container",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PresetMenu_Item:

		if all {
			switch v := interface{}(m.GetItem()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PresetMenuValidationError{
						field:  "Item",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PresetMenuValidationError{
						field:  "Item",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PresetMenuValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := PresetMenuValidationError{
			field:  "Value",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return PresetMenuMultiError(errors)
	}

	return nil
}

// PresetMenuMultiError is an error wrapping multiple validation errors
// returned by PresetMenu.ValidateAll() if the designated constraints aren't met.
type PresetMenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresetMenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresetMenuMultiError) AllErrors() []error { return m }

// PresetMenuValidationError is the validation error returned by
// PresetMenu.Validate if the designated constraints aren't met.
type PresetMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresetMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresetMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresetMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresetMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresetMenuValidationError) ErrorName() string { return "PresetMenuValidationError" }

// Error satisfies the builtin error interface
func (e PresetMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresetMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresetMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresetMenuValidationError{}

// Validate checks the field values on PresetMenuContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PresetMenuContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresetMenuContainer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PresetMenuContainerMultiError, or nil if none found.
func (m *PresetMenuContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *PresetMenuContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := PresetMenuContainerValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PresetMenuContainerMultiError(errors)
	}

	return nil
}

// PresetMenuContainerMultiError is an error wrapping multiple validation
// errors returned by PresetMenuContainer.ValidateAll() if the designated
// constraints aren't met.
type PresetMenuContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresetMenuContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresetMenuContainerMultiError) AllErrors() []error { return m }

// PresetMenuContainerValidationError is the validation error returned by
// PresetMenuContainer.Validate if the designated constraints aren't met.
type PresetMenuContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresetMenuContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresetMenuContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresetMenuContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresetMenuContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresetMenuContainerValidationError) ErrorName() string {
	return "PresetMenuContainerValidationError"
}

// Error satisfies the builtin error interface
func (e PresetMenuContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresetMenuContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresetMenuContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresetMenuContainerValidationError{}

// Validate checks the field values on PresetMenuItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PresetMenuItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PresetMenuItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PresetMenuItemMultiError,
// or nil if none found.
func (m *PresetMenuItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PresetMenuItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PresetId

	if len(errors) > 0 {
		return PresetMenuItemMultiError(errors)
	}

	return nil
}

// PresetMenuItemMultiError is an error wrapping multiple validation errors
// returned by PresetMenuItem.ValidateAll() if the designated constraints
// aren't met.
type PresetMenuItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresetMenuItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresetMenuItemMultiError) AllErrors() []error { return m }

// PresetMenuItemValidationError is the validation error returned by
// PresetMenuItem.Validate if the designated constraints aren't met.
type PresetMenuItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresetMenuItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresetMenuItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresetMenuItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresetMenuItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresetMenuItemValidationError) ErrorName() string { return "PresetMenuItemValidationError" }

// Error satisfies the builtin error interface
func (e PresetMenuItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPresetMenuItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresetMenuItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresetMenuItemValidationError{}

// Validate checks the field values on Preset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Preset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Preset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PresetMultiError, or nil if none found.
func (m *Preset) ValidateAll() error {
	return m.validate(true)
}

func (m *Preset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PresetId

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := PresetValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ViewId

	// no validation rules for InternalData

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return PresetMultiError(errors)
	}

	return nil
}

// PresetMultiError is an error wrapping multiple validation errors returned by
// Preset.ValidateAll() if the designated constraints aren't met.
type PresetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PresetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PresetMultiError) AllErrors() []error { return m }

// PresetValidationError is the validation error returned by Preset.Validate if
// the designated constraints aren't met.
type PresetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PresetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PresetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PresetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PresetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PresetValidationError) ErrorName() string { return "PresetValidationError" }

// Error satisfies the builtin error interface
func (e PresetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PresetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PresetValidationError{}

// Validate checks the field values on CreatePresetMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePresetMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePresetMenuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePresetMenuRequestMultiError, or nil if none found.
func (m *CreatePresetMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePresetMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPresetMenu() == nil {
		err := CreatePresetMenuRequestValidationError{
			field:  "PresetMenu",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPresetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePresetMenuRequestValidationError{
					field:  "PresetMenu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePresetMenuRequestValidationError{
					field:  "PresetMenu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPresetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePresetMenuRequestValidationError{
				field:  "PresetMenu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePresetMenuRequestMultiError(errors)
	}

	return nil
}

// CreatePresetMenuRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePresetMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePresetMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePresetMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePresetMenuRequestMultiError) AllErrors() []error { return m }

// CreatePresetMenuRequestValidationError is the validation error returned by
// CreatePresetMenuRequest.Validate if the designated constraints aren't met.
type CreatePresetMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePresetMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePresetMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePresetMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePresetMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePresetMenuRequestValidationError) ErrorName() string {
	return "CreatePresetMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePresetMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePresetMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePresetMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePresetMenuRequestValidationError{}

// Validate checks the field values on ListPresetMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPresetMenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPresetMenusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPresetMenusRequestMultiError, or nil if none found.
func (m *ListPresetMenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPresetMenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPresetMenusRequestMultiError(errors)
	}

	return nil
}

// ListPresetMenusRequestMultiError is an error wrapping multiple validation
// errors returned by ListPresetMenusRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPresetMenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPresetMenusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPresetMenusRequestMultiError) AllErrors() []error { return m }

// ListPresetMenusRequestValidationError is the validation error returned by
// ListPresetMenusRequest.Validate if the designated constraints aren't met.
type ListPresetMenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresetMenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresetMenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresetMenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresetMenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresetMenusRequestValidationError) ErrorName() string {
	return "ListPresetMenusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresetMenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresetMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresetMenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresetMenusRequestValidationError{}

// Validate checks the field values on ListPresetMenusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPresetMenusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPresetMenusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPresetMenusResponseMultiError, or nil if none found.
func (m *ListPresetMenusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPresetMenusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresetMenusResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresetMenusResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresetMenusResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPresetMenusResponseMultiError(errors)
	}

	return nil
}

// ListPresetMenusResponseMultiError is an error wrapping multiple validation
// errors returned by ListPresetMenusResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPresetMenusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPresetMenusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPresetMenusResponseMultiError) AllErrors() []error { return m }

// ListPresetMenusResponseValidationError is the validation error returned by
// ListPresetMenusResponse.Validate if the designated constraints aren't met.
type ListPresetMenusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresetMenusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresetMenusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresetMenusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresetMenusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresetMenusResponseValidationError) ErrorName() string {
	return "ListPresetMenusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresetMenusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresetMenusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresetMenusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresetMenusResponseValidationError{}

// Validate checks the field values on GetPresetMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPresetMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPresetMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPresetMenuRequestMultiError, or nil if none found.
func (m *GetPresetMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPresetMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PresetMenuId

	if len(errors) > 0 {
		return GetPresetMenuRequestMultiError(errors)
	}

	return nil
}

// GetPresetMenuRequestMultiError is an error wrapping multiple validation
// errors returned by GetPresetMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPresetMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPresetMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPresetMenuRequestMultiError) AllErrors() []error { return m }

// GetPresetMenuRequestValidationError is the validation error returned by
// GetPresetMenuRequest.Validate if the designated constraints aren't met.
type GetPresetMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPresetMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPresetMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPresetMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPresetMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPresetMenuRequestValidationError) ErrorName() string {
	return "GetPresetMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPresetMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPresetMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPresetMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPresetMenuRequestValidationError{}

// Validate checks the field values on UpdatePresetMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePresetMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePresetMenuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePresetMenuRequestMultiError, or nil if none found.
func (m *UpdatePresetMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePresetMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPresetMenu() == nil {
		err := UpdatePresetMenuRequestValidationError{
			field:  "PresetMenu",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPresetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePresetMenuRequestValidationError{
					field:  "PresetMenu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePresetMenuRequestValidationError{
					field:  "PresetMenu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPresetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePresetMenuRequestValidationError{
				field:  "PresetMenu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePresetMenuRequestMultiError(errors)
	}

	return nil
}

// UpdatePresetMenuRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePresetMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePresetMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePresetMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePresetMenuRequestMultiError) AllErrors() []error { return m }

// UpdatePresetMenuRequestValidationError is the validation error returned by
// UpdatePresetMenuRequest.Validate if the designated constraints aren't met.
type UpdatePresetMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePresetMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePresetMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePresetMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePresetMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePresetMenuRequestValidationError) ErrorName() string {
	return "UpdatePresetMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePresetMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePresetMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePresetMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePresetMenuRequestValidationError{}

// Validate checks the field values on DeletePresetMenuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePresetMenuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePresetMenuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePresetMenuRequestMultiError, or nil if none found.
func (m *DeletePresetMenuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePresetMenuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPresetMenu() == nil {
		err := DeletePresetMenuRequestValidationError{
			field:  "PresetMenu",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPresetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePresetMenuRequestValidationError{
					field:  "PresetMenu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePresetMenuRequestValidationError{
					field:  "PresetMenu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPresetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePresetMenuRequestValidationError{
				field:  "PresetMenu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePresetMenuRequestMultiError(errors)
	}

	return nil
}

// DeletePresetMenuRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePresetMenuRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePresetMenuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePresetMenuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePresetMenuRequestMultiError) AllErrors() []error { return m }

// DeletePresetMenuRequestValidationError is the validation error returned by
// DeletePresetMenuRequest.Validate if the designated constraints aren't met.
type DeletePresetMenuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePresetMenuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePresetMenuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePresetMenuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePresetMenuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePresetMenuRequestValidationError) ErrorName() string {
	return "DeletePresetMenuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePresetMenuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePresetMenuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePresetMenuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePresetMenuRequestValidationError{}

// Validate checks the field values on CreatePresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePresetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePresetRequestMultiError, or nil if none found.
func (m *CreatePresetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePresetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPreset() == nil {
		err := CreatePresetRequestValidationError{
			field:  "Preset",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPreset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePresetRequestValidationError{
					field:  "Preset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePresetRequestValidationError{
					field:  "Preset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePresetRequestValidationError{
				field:  "Preset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePresetRequestMultiError(errors)
	}

	return nil
}

// CreatePresetRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePresetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePresetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePresetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePresetRequestMultiError) AllErrors() []error { return m }

// CreatePresetRequestValidationError is the validation error returned by
// CreatePresetRequest.Validate if the designated constraints aren't met.
type CreatePresetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePresetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePresetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePresetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePresetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePresetRequestValidationError) ErrorName() string {
	return "CreatePresetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePresetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePresetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePresetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePresetRequestValidationError{}

// Validate checks the field values on ListPresetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPresetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPresetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPresetsRequestMultiError, or nil if none found.
func (m *ListPresetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPresetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPresetsRequestMultiError(errors)
	}

	return nil
}

// ListPresetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListPresetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPresetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPresetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPresetsRequestMultiError) AllErrors() []error { return m }

// ListPresetsRequestValidationError is the validation error returned by
// ListPresetsRequest.Validate if the designated constraints aren't met.
type ListPresetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresetsRequestValidationError) ErrorName() string {
	return "ListPresetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresetsRequestValidationError{}

// Validate checks the field values on ListPresetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPresetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPresetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPresetsResponseMultiError, or nil if none found.
func (m *ListPresetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPresetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPresetsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPresetsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPresetsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPresetsResponseMultiError(errors)
	}

	return nil
}

// ListPresetsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPresetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPresetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPresetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPresetsResponseMultiError) AllErrors() []error { return m }

// ListPresetsResponseValidationError is the validation error returned by
// ListPresetsResponse.Validate if the designated constraints aren't met.
type ListPresetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPresetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPresetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPresetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPresetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPresetsResponseValidationError) ErrorName() string {
	return "ListPresetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPresetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPresetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPresetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPresetsResponseValidationError{}

// Validate checks the field values on GetPresetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPresetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPresetRequestMultiError, or nil if none found.
func (m *GetPresetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPresetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PresetId

	if len(errors) > 0 {
		return GetPresetRequestMultiError(errors)
	}

	return nil
}

// GetPresetRequestMultiError is an error wrapping multiple validation errors
// returned by GetPresetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPresetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPresetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPresetRequestMultiError) AllErrors() []error { return m }

// GetPresetRequestValidationError is the validation error returned by
// GetPresetRequest.Validate if the designated constraints aren't met.
type GetPresetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPresetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPresetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPresetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPresetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPresetRequestValidationError) ErrorName() string { return "GetPresetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPresetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPresetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPresetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPresetRequestValidationError{}

// Validate checks the field values on UpdatePresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePresetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePresetRequestMultiError, or nil if none found.
func (m *UpdatePresetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePresetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPreset() == nil {
		err := UpdatePresetRequestValidationError{
			field:  "Preset",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPreset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePresetRequestValidationError{
					field:  "Preset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePresetRequestValidationError{
					field:  "Preset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePresetRequestValidationError{
				field:  "Preset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePresetRequestMultiError(errors)
	}

	return nil
}

// UpdatePresetRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePresetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePresetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePresetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePresetRequestMultiError) AllErrors() []error { return m }

// UpdatePresetRequestValidationError is the validation error returned by
// UpdatePresetRequest.Validate if the designated constraints aren't met.
type UpdatePresetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePresetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePresetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePresetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePresetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePresetRequestValidationError) ErrorName() string {
	return "UpdatePresetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePresetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePresetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePresetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePresetRequestValidationError{}

// Validate checks the field values on DeletePresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePresetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePresetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePresetRequestMultiError, or nil if none found.
func (m *DeletePresetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePresetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPreset() == nil {
		err := DeletePresetRequestValidationError{
			field:  "Preset",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPreset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePresetRequestValidationError{
					field:  "Preset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePresetRequestValidationError{
					field:  "Preset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePresetRequestValidationError{
				field:  "Preset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePresetRequestMultiError(errors)
	}

	return nil
}

// DeletePresetRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePresetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePresetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePresetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePresetRequestMultiError) AllErrors() []error { return m }

// DeletePresetRequestValidationError is the validation error returned by
// DeletePresetRequest.Validate if the designated constraints aren't met.
type DeletePresetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePresetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePresetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePresetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePresetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePresetRequestValidationError) ErrorName() string {
	return "DeletePresetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePresetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePresetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePresetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePresetRequestValidationError{}
