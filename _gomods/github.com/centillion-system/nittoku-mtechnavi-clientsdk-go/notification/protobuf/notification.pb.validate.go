// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notification.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmailMultiError, or nil if none found.
func (m *Email) ValidateAll() error {
	return m.validate(true)
}

func (m *Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if err := m._validateEmail(m.GetFrom()); err != nil {
		err = EmailValidationError{
			field:  "From",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTo() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = EmailValidationError{
				field:  fmt.Sprintf("To[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetCc() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = EmailValidationError{
				field:  fmt.Sprintf("Cc[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetBcc() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = EmailValidationError{
				field:  fmt.Sprintf("Bcc[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Parameters

	// no validation rules for SendAt

	if len(errors) > 0 {
		return EmailMultiError(errors)
	}

	return nil
}

func (m *Email) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Email) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// EmailMultiError is an error wrapping multiple validation errors returned by
// Email.ValidateAll() if the designated constraints aren't met.
type EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailMultiError) AllErrors() []error { return m }

// EmailValidationError is the validation error returned by Email.Validate if
// the designated constraints aren't met.
type EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidationError) ErrorName() string { return "EmailValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidationError{}

// Validate checks the field values on NotifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyRequestMultiError, or
// nil if none found.
func (m *NotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Request.(type) {

	case *NotifyRequest_Email:

		if all {
			switch v := interface{}(m.GetEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyRequestValidationError{
						field:  "Email",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyRequestValidationError{
						field:  "Email",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyRequestValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyRequest_Channel:

		if all {
			switch v := interface{}(m.GetChannel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyRequestValidationError{
						field:  "Channel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyRequestValidationError{
						field:  "Channel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChannel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyRequestValidationError{
					field:  "Channel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotifyRequestMultiError(errors)
	}

	return nil
}

// NotifyRequestMultiError is an error wrapping multiple validation errors
// returned by NotifyRequest.ValidateAll() if the designated constraints
// aren't met.
type NotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyRequestMultiError) AllErrors() []error { return m }

// NotifyRequestValidationError is the validation error returned by
// NotifyRequest.Validate if the designated constraints aren't met.
type NotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRequestValidationError) ErrorName() string { return "NotifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e NotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRequestValidationError{}

// Validate checks the field values on PasswordResetParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordResetParameter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordResetParameter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordResetParameterMultiError, or nil if none found.
func (m *PasswordResetParameter) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordResetParameter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetResetUrl()); err != nil {
		err = PasswordResetParameterValidationError{
			field:  "ResetUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := PasswordResetParameterValidationError{
			field:  "ResetUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ResetUrlExpiredAt

	if len(errors) > 0 {
		return PasswordResetParameterMultiError(errors)
	}

	return nil
}

// PasswordResetParameterMultiError is an error wrapping multiple validation
// errors returned by PasswordResetParameter.ValidateAll() if the designated
// constraints aren't met.
type PasswordResetParameterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordResetParameterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordResetParameterMultiError) AllErrors() []error { return m }

// PasswordResetParameterValidationError is the validation error returned by
// PasswordResetParameter.Validate if the designated constraints aren't met.
type PasswordResetParameterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordResetParameterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordResetParameterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordResetParameterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordResetParameterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordResetParameterValidationError) ErrorName() string {
	return "PasswordResetParameterValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordResetParameterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordResetParameter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordResetParameterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordResetParameterValidationError{}

// Validate checks the field values on SendHeader with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendHeader with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendHeaderMultiError, or
// nil if none found.
func (m *SendHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *SendHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTo() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = SendHeaderValidationError{
				field:  fmt.Sprintf("To[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetCc() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = SendHeaderValidationError{
				field:  fmt.Sprintf("Cc[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetBcc() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = SendHeaderValidationError{
				field:  fmt.Sprintf("Bcc[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for SendAt

	if len(errors) > 0 {
		return SendHeaderMultiError(errors)
	}

	return nil
}

func (m *SendHeader) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SendHeader) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SendHeaderMultiError is an error wrapping multiple validation errors
// returned by SendHeader.ValidateAll() if the designated constraints aren't met.
type SendHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendHeaderMultiError) AllErrors() []error { return m }

// SendHeaderValidationError is the validation error returned by
// SendHeader.Validate if the designated constraints aren't met.
type SendHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendHeaderValidationError) ErrorName() string { return "SendHeaderValidationError" }

// Error satisfies the builtin error interface
func (e SendHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendHeaderValidationError{}

// Validate checks the field values on NotifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyEmailRequestMultiError, or nil if none found.
func (m *NotifyEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmailId

	if all {
		switch v := interface{}(m.GetHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyEmailRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyEmailRequestValidationError{
					field:  "Header",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyEmailRequestValidationError{
				field:  "Header",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Template.(type) {

	case *NotifyEmailRequest_TenantCreatedEmail:

		if all {
			switch v := interface{}(m.GetTenantCreatedEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "TenantCreatedEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "TenantCreatedEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTenantCreatedEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "TenantCreatedEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyEmailRequest_AccountCreatedEmail:

		if all {
			switch v := interface{}(m.GetAccountCreatedEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "AccountCreatedEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "AccountCreatedEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccountCreatedEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "AccountCreatedEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyEmailRequest_PasswordResetEmail:

		if all {
			switch v := interface{}(m.GetPasswordResetEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "PasswordResetEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "PasswordResetEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPasswordResetEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "PasswordResetEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyEmailRequest_AddressChangeProhibitionEmail:

		if all {
			switch v := interface{}(m.GetAddressChangeProhibitionEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "AddressChangeProhibitionEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "AddressChangeProhibitionEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAddressChangeProhibitionEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "AddressChangeProhibitionEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyEmailRequest_FreeStyleEmail:

		if all {
			switch v := interface{}(m.GetFreeStyleEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "FreeStyleEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "FreeStyleEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFreeStyleEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "FreeStyleEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyEmailRequest_VerifyTenantRequestEmail:

		if all {
			switch v := interface{}(m.GetVerifyTenantRequestEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "VerifyTenantRequestEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "VerifyTenantRequestEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVerifyTenantRequestEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "VerifyTenantRequestEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NotifyEmailRequest_TenantInvitationEmail:

		if all {
			switch v := interface{}(m.GetTenantInvitationEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "TenantInvitationEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotifyEmailRequestValidationError{
						field:  "TenantInvitationEmail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTenantInvitationEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotifyEmailRequestValidationError{
					field:  "TenantInvitationEmail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := NotifyEmailRequestValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return NotifyEmailRequestMultiError(errors)
	}

	return nil
}

// NotifyEmailRequestMultiError is an error wrapping multiple validation errors
// returned by NotifyEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type NotifyEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyEmailRequestMultiError) AllErrors() []error { return m }

// NotifyEmailRequestValidationError is the validation error returned by
// NotifyEmailRequest.Validate if the designated constraints aren't met.
type NotifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyEmailRequestValidationError) ErrorName() string {
	return "NotifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyEmailRequestValidationError{}

// Validate checks the field values on TenantCreatedEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantCreatedEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantCreatedEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantCreatedEmailTemplateMultiError, or nil if none found.
func (m *TenantCreatedEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantCreatedEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantDisplayName

	// no validation rules for AdminDisplayName

	if uri, err := url.Parse(m.GetTenantSpaceUrl()); err != nil {
		err = TenantCreatedEmailTemplateValidationError{
			field:  "TenantSpaceUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := TenantCreatedEmailTemplateValidationError{
			field:  "TenantSpaceUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return TenantCreatedEmailTemplateMultiError(errors)
	}

	return nil
}

// TenantCreatedEmailTemplateMultiError is an error wrapping multiple
// validation errors returned by TenantCreatedEmailTemplate.ValidateAll() if
// the designated constraints aren't met.
type TenantCreatedEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantCreatedEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantCreatedEmailTemplateMultiError) AllErrors() []error { return m }

// TenantCreatedEmailTemplateValidationError is the validation error returned
// by TenantCreatedEmailTemplate.Validate if the designated constraints aren't met.
type TenantCreatedEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantCreatedEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantCreatedEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantCreatedEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantCreatedEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantCreatedEmailTemplateValidationError) ErrorName() string {
	return "TenantCreatedEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e TenantCreatedEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantCreatedEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantCreatedEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantCreatedEmailTemplateValidationError{}

// Validate checks the field values on AccountCreatedEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccountCreatedEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountCreatedEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccountCreatedEmailTemplateMultiError, or nil if none found.
func (m *AccountCreatedEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountCreatedEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetTenantSpaceUrl()); err != nil {
		err = AccountCreatedEmailTemplateValidationError{
			field:  "TenantSpaceUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := AccountCreatedEmailTemplateValidationError{
			field:  "TenantSpaceUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Password

	if len(errors) > 0 {
		return AccountCreatedEmailTemplateMultiError(errors)
	}

	return nil
}

// AccountCreatedEmailTemplateMultiError is an error wrapping multiple
// validation errors returned by AccountCreatedEmailTemplate.ValidateAll() if
// the designated constraints aren't met.
type AccountCreatedEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountCreatedEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountCreatedEmailTemplateMultiError) AllErrors() []error { return m }

// AccountCreatedEmailTemplateValidationError is the validation error returned
// by AccountCreatedEmailTemplate.Validate if the designated constraints
// aren't met.
type AccountCreatedEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountCreatedEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountCreatedEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountCreatedEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountCreatedEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountCreatedEmailTemplateValidationError) ErrorName() string {
	return "AccountCreatedEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e AccountCreatedEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountCreatedEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountCreatedEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountCreatedEmailTemplateValidationError{}

// Validate checks the field values on PasswordResetEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PasswordResetEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PasswordResetEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PasswordResetEmailTemplateMultiError, or nil if none found.
func (m *PasswordResetEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *PasswordResetEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantName

	if all {
		switch v := interface{}(m.GetPasswordResetParam()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PasswordResetEmailTemplateValidationError{
					field:  "PasswordResetParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PasswordResetEmailTemplateValidationError{
					field:  "PasswordResetParam",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordResetParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PasswordResetEmailTemplateValidationError{
				field:  "PasswordResetParam",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PasswordResetEmailTemplateMultiError(errors)
	}

	return nil
}

// PasswordResetEmailTemplateMultiError is an error wrapping multiple
// validation errors returned by PasswordResetEmailTemplate.ValidateAll() if
// the designated constraints aren't met.
type PasswordResetEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PasswordResetEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PasswordResetEmailTemplateMultiError) AllErrors() []error { return m }

// PasswordResetEmailTemplateValidationError is the validation error returned
// by PasswordResetEmailTemplate.Validate if the designated constraints aren't met.
type PasswordResetEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PasswordResetEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PasswordResetEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PasswordResetEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PasswordResetEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PasswordResetEmailTemplateValidationError) ErrorName() string {
	return "PasswordResetEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e PasswordResetEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPasswordResetEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PasswordResetEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PasswordResetEmailTemplateValidationError{}

// Validate checks the field values on AddressChangeProhibitionEmailTemplate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddressChangeProhibitionEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddressChangeProhibitionEmailTemplate
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddressChangeProhibitionEmailTemplateMultiError, or nil if none found.
func (m *AddressChangeProhibitionEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *AddressChangeProhibitionEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddressChangeProhibitionEmailTemplateMultiError(errors)
	}

	return nil
}

// AddressChangeProhibitionEmailTemplateMultiError is an error wrapping
// multiple validation errors returned by
// AddressChangeProhibitionEmailTemplate.ValidateAll() if the designated
// constraints aren't met.
type AddressChangeProhibitionEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressChangeProhibitionEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressChangeProhibitionEmailTemplateMultiError) AllErrors() []error { return m }

// AddressChangeProhibitionEmailTemplateValidationError is the validation error
// returned by AddressChangeProhibitionEmailTemplate.Validate if the
// designated constraints aren't met.
type AddressChangeProhibitionEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressChangeProhibitionEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressChangeProhibitionEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressChangeProhibitionEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressChangeProhibitionEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressChangeProhibitionEmailTemplateValidationError) ErrorName() string {
	return "AddressChangeProhibitionEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e AddressChangeProhibitionEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddressChangeProhibitionEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressChangeProhibitionEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressChangeProhibitionEmailTemplateValidationError{}

// Validate checks the field values on FreeStyleEmailTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FreeStyleEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeStyleEmailTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreeStyleEmailTemplateMultiError, or nil if none found.
func (m *FreeStyleEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeStyleEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for ContentHeader

	// no validation rules for ContentBody

	// no validation rules for ContentFooter

	if len(errors) > 0 {
		return FreeStyleEmailTemplateMultiError(errors)
	}

	return nil
}

// FreeStyleEmailTemplateMultiError is an error wrapping multiple validation
// errors returned by FreeStyleEmailTemplate.ValidateAll() if the designated
// constraints aren't met.
type FreeStyleEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeStyleEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeStyleEmailTemplateMultiError) AllErrors() []error { return m }

// FreeStyleEmailTemplateValidationError is the validation error returned by
// FreeStyleEmailTemplate.Validate if the designated constraints aren't met.
type FreeStyleEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeStyleEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeStyleEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeStyleEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeStyleEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeStyleEmailTemplateValidationError) ErrorName() string {
	return "FreeStyleEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e FreeStyleEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeStyleEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeStyleEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeStyleEmailTemplateValidationError{}

// Validate checks the field values on VerifyTenantRequestEmailTemplate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VerifyTenantRequestEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyTenantRequestEmailTemplate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VerifyTenantRequestEmailTemplateMultiError, or nil if none found.
func (m *VerifyTenantRequestEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyTenantRequestEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantDisplayName

	// no validation rules for AdminDisplayName

	// no validation rules for RequestVerifiedAt

	// no validation rules for ApplyTenantRequestUrl

	if len(errors) > 0 {
		return VerifyTenantRequestEmailTemplateMultiError(errors)
	}

	return nil
}

// VerifyTenantRequestEmailTemplateMultiError is an error wrapping multiple
// validation errors returned by
// VerifyTenantRequestEmailTemplate.ValidateAll() if the designated
// constraints aren't met.
type VerifyTenantRequestEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyTenantRequestEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyTenantRequestEmailTemplateMultiError) AllErrors() []error { return m }

// VerifyTenantRequestEmailTemplateValidationError is the validation error
// returned by VerifyTenantRequestEmailTemplate.Validate if the designated
// constraints aren't met.
type VerifyTenantRequestEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyTenantRequestEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyTenantRequestEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyTenantRequestEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyTenantRequestEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyTenantRequestEmailTemplateValidationError) ErrorName() string {
	return "VerifyTenantRequestEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyTenantRequestEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyTenantRequestEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyTenantRequestEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyTenantRequestEmailTemplateValidationError{}

// Validate checks the field values on TenantInvitationEmailTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantInvitationEmailTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantInvitationEmailTemplate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TenantInvitationEmailTemplateMultiError, or nil if none found.
func (m *TenantInvitationEmailTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantInvitationEmailTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantDisplayName

	// no validation rules for AdminDisplayName

	// no validation rules for IndividualMessage

	// no validation rules for TenantRequestUrl

	// no validation rules for ContactInformationMessage

	if len(errors) > 0 {
		return TenantInvitationEmailTemplateMultiError(errors)
	}

	return nil
}

// TenantInvitationEmailTemplateMultiError is an error wrapping multiple
// validation errors returned by TenantInvitationEmailTemplate.ValidateAll()
// if the designated constraints aren't met.
type TenantInvitationEmailTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantInvitationEmailTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantInvitationEmailTemplateMultiError) AllErrors() []error { return m }

// TenantInvitationEmailTemplateValidationError is the validation error
// returned by TenantInvitationEmailTemplate.Validate if the designated
// constraints aren't met.
type TenantInvitationEmailTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantInvitationEmailTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantInvitationEmailTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantInvitationEmailTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantInvitationEmailTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantInvitationEmailTemplateValidationError) ErrorName() string {
	return "TenantInvitationEmailTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e TenantInvitationEmailTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantInvitationEmailTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantInvitationEmailTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantInvitationEmailTemplateValidationError{}

// Validate checks the field values on NotifyChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyChannelRequestMultiError, or nil if none found.
func (m *NotifyChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return NotifyChannelRequestMultiError(errors)
	}

	return nil
}

// NotifyChannelRequestMultiError is an error wrapping multiple validation
// errors returned by NotifyChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type NotifyChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyChannelRequestMultiError) AllErrors() []error { return m }

// NotifyChannelRequestValidationError is the validation error returned by
// NotifyChannelRequest.Validate if the designated constraints aren't met.
type NotifyChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyChannelRequestValidationError) ErrorName() string {
	return "NotifyChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyChannelRequestValidationError{}

// Validate checks the field values on NotifyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyResponseMultiError,
// or nil if none found.
func (m *NotifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotifyResponseMultiError(errors)
	}

	return nil
}

// NotifyResponseMultiError is an error wrapping multiple validation errors
// returned by NotifyResponse.ValidateAll() if the designated constraints
// aren't met.
type NotifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyResponseMultiError) AllErrors() []error { return m }

// NotifyResponseValidationError is the validation error returned by
// NotifyResponse.Validate if the designated constraints aren't met.
type NotifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyResponseValidationError) ErrorName() string { return "NotifyResponseValidationError" }

// Error satisfies the builtin error interface
func (e NotifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyResponseValidationError{}

// Validate checks the field values on ListenChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListenChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListenChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListenChannelRequestMultiError, or nil if none found.
func (m *ListenChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListenChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ListenChannelRequestMultiError(errors)
	}

	return nil
}

// ListenChannelRequestMultiError is an error wrapping multiple validation
// errors returned by ListenChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type ListenChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListenChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListenChannelRequestMultiError) AllErrors() []error { return m }

// ListenChannelRequestValidationError is the validation error returned by
// ListenChannelRequest.Validate if the designated constraints aren't met.
type ListenChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenChannelRequestValidationError) ErrorName() string {
	return "ListenChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListenChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenChannelRequestValidationError{}

// Validate checks the field values on ListenChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListenChannelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListenChannelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListenChannelResponseMultiError, or nil if none found.
func (m *ListenChannelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListenChannelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirestoreProjectId

	// no validation rules for FirestoreCollectionPath

	if len(errors) > 0 {
		return ListenChannelResponseMultiError(errors)
	}

	return nil
}

// ListenChannelResponseMultiError is an error wrapping multiple validation
// errors returned by ListenChannelResponse.ValidateAll() if the designated
// constraints aren't met.
type ListenChannelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListenChannelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListenChannelResponseMultiError) AllErrors() []error { return m }

// ListenChannelResponseValidationError is the validation error returned by
// ListenChannelResponse.Validate if the designated constraints aren't met.
type ListenChannelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenChannelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenChannelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenChannelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenChannelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenChannelResponseValidationError) ErrorName() string {
	return "ListenChannelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListenChannelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenChannelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenChannelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenChannelResponseValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EventId

	// no validation rules for EventName

	// no validation rules for TenantId

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetParameters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "Parameters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParameters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "Parameters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}
