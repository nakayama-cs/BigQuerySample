// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: company_datatype.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 企業ステータス
type CompanyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ステータス
	// 状態（category）と状態の詳細（detail）の組み合わせを専用に表現したもの
	//
	// 名称マスタにおける種別 A0010001 (企業ステータス) を参照
	Status *protobuf.NameOption `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// 状態
	// 名称マスタにおける種別 A0010002 (企業ステータス（状態）) を参照
	Category *protobuf.NameOption `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// 状態の詳細
	// 名称マスタにおける種別 A0010003 (企業ステータス（状態の詳細）) を参照
	Detail *protobuf.NameOption `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CompanyStatus) Reset() {
	*x = CompanyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyStatus) ProtoMessage() {}

func (x *CompanyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyStatus.ProtoReflect.Descriptor instead.
func (*CompanyStatus) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyStatus) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CompanyStatus) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *CompanyStatus) GetDetail() *protobuf.NameOption {
	if x != nil {
		return x.Detail
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会社URL
	WebsiteUrl string `protobuf:"bytes,1,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	// 代表電話番号（ハイフン付き）
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// 住所
	Address *protobuf.Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// 代表者
	Representative *Profile_Representative `protobuf:"bytes,4,opt,name=representative,proto3" json:"representative,omitempty"`
	// 資本金
	CapitalStock *protobuf.MonetaryAmount `protobuf:"bytes,5,opt,name=capital_stock,json=capitalStock,proto3" json:"capital_stock,omitempty"`
	// 業種名称
	Industry string `protobuf:"bytes,6,opt,name=industry,proto3" json:"industry,omitempty"`
	// 主な事業内容
	MainBusiness string `protobuf:"bytes,7,opt,name=main_business,json=mainBusiness,proto3" json:"main_business,omitempty"`
	// 公開コメント
	PublicComment string `protobuf:"bytes,8,opt,name=public_comment,json=publicComment,proto3" json:"public_comment,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetWebsiteUrl() string {
	if x != nil {
		return x.WebsiteUrl
	}
	return ""
}

func (x *Profile) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Profile) GetAddress() *protobuf.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Profile) GetRepresentative() *Profile_Representative {
	if x != nil {
		return x.Representative
	}
	return nil
}

func (x *Profile) GetCapitalStock() *protobuf.MonetaryAmount {
	if x != nil {
		return x.CapitalStock
	}
	return nil
}

func (x *Profile) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *Profile) GetMainBusiness() string {
	if x != nil {
		return x.MainBusiness
	}
	return ""
}

func (x *Profile) GetPublicComment() string {
	if x != nil {
		return x.PublicComment
	}
	return ""
}

// 法令情報
type CompanyLegalProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 法律によって決められる項目
	// 法人コード
	CompanyNumber string `protobuf:"bytes,1,opt,name=company_number,json=companyNumber,proto3" json:"company_number,omitempty"`
	// 適格請求書認定番号
	EligibleInvoiceAuthorizationNumber string `protobuf:"bytes,2,opt,name=eligible_invoice_authorization_number,json=eligibleInvoiceAuthorizationNumber,proto3" json:"eligible_invoice_authorization_number,omitempty"`
}

func (x *CompanyLegalProperties) Reset() {
	*x = CompanyLegalProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyLegalProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyLegalProperties) ProtoMessage() {}

func (x *CompanyLegalProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyLegalProperties.ProtoReflect.Descriptor instead.
func (*CompanyLegalProperties) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyLegalProperties) GetCompanyNumber() string {
	if x != nil {
		return x.CompanyNumber
	}
	return ""
}

func (x *CompanyLegalProperties) GetEligibleInvoiceAuthorizationNumber() string {
	if x != nil {
		return x.EligibleInvoiceAuthorizationNumber
	}
	return ""
}

type PostUnitProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PostUnitProperties) Reset() {
	*x = PostUnitProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUnitProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUnitProperties) ProtoMessage() {}

func (x *PostUnitProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUnitProperties.ProtoReflect.Descriptor instead.
func (*PostUnitProperties) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{3}
}

type OrganizationUnitProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrganizationUnitProperties) Reset() {
	*x = OrganizationUnitProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationUnitProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationUnitProperties) ProtoMessage() {}

func (x *OrganizationUnitProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationUnitProperties.ProtoReflect.Descriptor instead.
func (*OrganizationUnitProperties) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{4}
}

type DeliveryPointProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeliveryPointProperties) Reset() {
	*x = DeliveryPointProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryPointProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryPointProperties) ProtoMessage() {}

func (x *DeliveryPointProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryPointProperties.ProtoReflect.Descriptor instead.
func (*DeliveryPointProperties) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{5}
}

type OfficeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 事業所に関する項目
	// 名称マスタにおける種別 A0000003 (事業所ランク) を参照
	OfficeRank *protobuf.NameOption `protobuf:"bytes,1,opt,name=office_rank,json=officeRank,proto3" json:"office_rank,omitempty"`
}

func (x *OfficeProperties) Reset() {
	*x = OfficeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfficeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfficeProperties) ProtoMessage() {}

func (x *OfficeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfficeProperties.ProtoReflect.Descriptor instead.
func (*OfficeProperties) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{6}
}

func (x *OfficeProperties) GetOfficeRank() *protobuf.NameOption {
	if x != nil {
		return x.OfficeRank
	}
	return nil
}

type ImageFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// アセットID
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// メタデータ
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ImageFile) Reset() {
	*x = ImageFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFile) ProtoMessage() {}

func (x *ImageFile) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFile.ProtoReflect.Descriptor instead.
func (*ImageFile) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{7}
}

func (x *ImageFile) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *ImageFile) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PostUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// マークつける対象の管理場所ID
	ComponentUnitId string `protobuf:"bytes,1,opt,name=component_unit_id,json=componentUnitId,proto3" json:"component_unit_id,omitempty"`
	// 社内管理用コード
	PostUnitCode string `protobuf:"bytes,2,opt,name=post_unit_code,json=postUnitCode,proto3" json:"post_unit_code,omitempty"`
	// 社内管理用名称
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 取引先種別
	// 複数選択可能（見積先...）
	// 名称マスタにおける種別 A0000004 (取引先種別) を参照
	PostUnitType []*protobuf.NameOption `protobuf:"bytes,4,rep,name=post_unit_type,json=postUnitType,proto3" json:"post_unit_type,omitempty"`
	// 社内管理用備考
	Remarks string `protobuf:"bytes,5,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// 管理場所分類
	ComponentUnitCategory string `protobuf:"bytes,6,opt,name=component_unit_category,json=componentUnitCategory,proto3" json:"component_unit_category,omitempty"`
	// 連携項目
	LinkageItem []string `protobuf:"bytes,7,rep,name=linkage_item,json=linkageItem,proto3" json:"linkage_item,omitempty"`
	// 使用
	//
	//	名称マスタにおける種別 A0000001 (使用) を参照
	Usable *protobuf.NameOption `protobuf:"bytes,8,opt,name=usable,proto3" json:"usable,omitempty"`
}

func (x *PostUnit) Reset() {
	*x = PostUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUnit) ProtoMessage() {}

func (x *PostUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUnit.ProtoReflect.Descriptor instead.
func (*PostUnit) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{8}
}

func (x *PostUnit) GetComponentUnitId() string {
	if x != nil {
		return x.ComponentUnitId
	}
	return ""
}

func (x *PostUnit) GetPostUnitCode() string {
	if x != nil {
		return x.PostUnitCode
	}
	return ""
}

func (x *PostUnit) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *PostUnit) GetPostUnitType() []*protobuf.NameOption {
	if x != nil {
		return x.PostUnitType
	}
	return nil
}

func (x *PostUnit) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *PostUnit) GetComponentUnitCategory() string {
	if x != nil {
		return x.ComponentUnitCategory
	}
	return ""
}

func (x *PostUnit) GetLinkageItem() []string {
	if x != nil {
		return x.LinkageItem
	}
	return nil
}

func (x *PostUnit) GetUsable() *protobuf.NameOption {
	if x != nil {
		return x.Usable
	}
	return nil
}

// 実行情報
type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 実行日時
	ProcessedAt int64 `protobuf:"varint,1,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	// 実行ユーザー
	ProcessedBy *protobuf.EmbeddedUser `protobuf:"bytes,2,opt,name=processed_by,json=processedBy,proto3" json:"processed_by,omitempty"`
	// 実行コメント
	ProcessedComment string `protobuf:"bytes,3,opt,name=processed_comment,json=processedComment,proto3" json:"processed_comment,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{9}
}

func (x *Process) GetProcessedAt() int64 {
	if x != nil {
		return x.ProcessedAt
	}
	return 0
}

func (x *Process) GetProcessedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.ProcessedBy
	}
	return nil
}

func (x *Process) GetProcessedComment() string {
	if x != nil {
		return x.ProcessedComment
	}
	return ""
}

// 住所
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 所在国
	// 名称マスタ A0000041 (国)
	Country *protobuf.NameOption `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	// 郵便番号
	PostalCode string `protobuf:"bytes,2,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// 地域
	// 名称マスタ A0000042 (地域)
	Region *protobuf.NameOption `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 住所
	AddressLines []string `protobuf:"bytes,4,rep,name=address_lines,json=addressLines,proto3" json:"address_lines,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{10}
}

func (x *Address) GetCountry() *protobuf.NameOption {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetRegion() *protobuf.NameOption {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *Address) GetAddressLines() []string {
	if x != nil {
		return x.AddressLines
	}
	return nil
}

// 基本情報
type CompanyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 企業名
	DisplayNameLang map[string]string `protobuf:"bytes,1,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 法令情報
	CompanyLegalProperties *CompanyLegalProperties `protobuf:"bytes,2,opt,name=company_legal_properties,json=companyLegalProperties,proto3" json:"company_legal_properties,omitempty"`
	// ホームページURL
	WebsiteUrl string `protobuf:"bytes,3,opt,name=website_url,json=websiteUrl,proto3" json:"website_url,omitempty"`
	// 代表者
	Representative *CompanyProfile_Representative `protobuf:"bytes,4,opt,name=representative,proto3" json:"representative,omitempty"`
	// 本社住所情報
	Address *Address `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// 本社(電話番号)
	PhoneNumber string `protobuf:"bytes,6,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// 従業員
	Employees *CompanyProfile_Employees `protobuf:"bytes,7,opt,name=employees,proto3" json:"employees,omitempty"`
	// 資本金(百万円)
	CapitalStock *protobuf.MonetaryAmount `protobuf:"bytes,8,opt,name=capital_stock,json=capitalStock,proto3" json:"capital_stock,omitempty"`
	// 主要株主
	MainShareholder string `protobuf:"bytes,9,opt,name=main_shareholder,json=mainShareholder,proto3" json:"main_shareholder,omitempty"`
	// 主要取引銀行
	MainBank string `protobuf:"bytes,10,opt,name=main_bank,json=mainBank,proto3" json:"main_bank,omitempty"`
	// 主要仕入先
	MainSupplier string `protobuf:"bytes,11,opt,name=main_supplier,json=mainSupplier,proto3" json:"main_supplier,omitempty"`
	// 主要納入先
	MainCustomer string `protobuf:"bytes,12,opt,name=main_customer,json=mainCustomer,proto3" json:"main_customer,omitempty"`
	// 事業内容
	MainBusiness string `protobuf:"bytes,13,opt,name=main_business,json=mainBusiness,proto3" json:"main_business,omitempty"`
}

func (x *CompanyProfile) Reset() {
	*x = CompanyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProfile) ProtoMessage() {}

func (x *CompanyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProfile.ProtoReflect.Descriptor instead.
func (*CompanyProfile) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{11}
}

func (x *CompanyProfile) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *CompanyProfile) GetCompanyLegalProperties() *CompanyLegalProperties {
	if x != nil {
		return x.CompanyLegalProperties
	}
	return nil
}

func (x *CompanyProfile) GetWebsiteUrl() string {
	if x != nil {
		return x.WebsiteUrl
	}
	return ""
}

func (x *CompanyProfile) GetRepresentative() *CompanyProfile_Representative {
	if x != nil {
		return x.Representative
	}
	return nil
}

func (x *CompanyProfile) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CompanyProfile) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *CompanyProfile) GetEmployees() *CompanyProfile_Employees {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *CompanyProfile) GetCapitalStock() *protobuf.MonetaryAmount {
	if x != nil {
		return x.CapitalStock
	}
	return nil
}

func (x *CompanyProfile) GetMainShareholder() string {
	if x != nil {
		return x.MainShareholder
	}
	return ""
}

func (x *CompanyProfile) GetMainBank() string {
	if x != nil {
		return x.MainBank
	}
	return ""
}

func (x *CompanyProfile) GetMainSupplier() string {
	if x != nil {
		return x.MainSupplier
	}
	return ""
}

func (x *CompanyProfile) GetMainCustomer() string {
	if x != nil {
		return x.MainCustomer
	}
	return ""
}

func (x *CompanyProfile) GetMainBusiness() string {
	if x != nil {
		return x.MainBusiness
	}
	return ""
}

// ItemValue
type ItemValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 項目名
	ItemKey string `protobuf:"bytes,1,opt,name=item_key,json=itemKey,proto3" json:"item_key,omitempty"`
	// 項目値
	ItemValue string `protobuf:"bytes,2,opt,name=item_value,json=itemValue,proto3" json:"item_value,omitempty"`
	// 識別コード
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ItemValue) Reset() {
	*x = ItemValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemValue) ProtoMessage() {}

func (x *ItemValue) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemValue.ProtoReflect.Descriptor instead.
func (*ItemValue) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{12}
}

func (x *ItemValue) GetItemKey() string {
	if x != nil {
		return x.ItemKey
	}
	return ""
}

func (x *ItemValue) GetItemValue() string {
	if x != nil {
		return x.ItemValue
	}
	return ""
}

func (x *ItemValue) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// 比較項目
type ComparisonItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 比較項目
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// 表示項目
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *ComparisonItem) Reset() {
	*x = ComparisonItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonItem) ProtoMessage() {}

func (x *ComparisonItem) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonItem.ProtoReflect.Descriptor instead.
func (*ComparisonItem) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{13}
}

func (x *ComparisonItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ComparisonItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// 比較用データ型（基本情報）
type DiffItemBusinessUnitProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// キー項目[-]
	KeyValue string `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// 企業名
	DisplayNameLangJa *ComparisonItem `protobuf:"bytes,2,opt,name=display_name_lang_ja,json=displayNameLangJa,proto3" json:"display_name_lang_ja,omitempty"`
	// 法人コード
	CompanyNumber *ComparisonItem `protobuf:"bytes,3,opt,name=company_number,json=companyNumber,proto3" json:"company_number,omitempty"`
	// 代表者名
	RepresentativeDisplayNameLangJa *ComparisonItem `protobuf:"bytes,4,opt,name=representative_display_name_lang_ja,json=representativeDisplayNameLangJa,proto3" json:"representative_display_name_lang_ja,omitempty"`
	// 本社（郵便番号）
	PostalCode *ComparisonItem `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// 本社（住所）
	Address *ComparisonItem `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// 資本金（百万円）
	CapitalStock *ComparisonItem `protobuf:"bytes,7,opt,name=capital_stock,json=capitalStock,proto3" json:"capital_stock,omitempty"`
}

func (x *DiffItemBusinessUnitProfile) Reset() {
	*x = DiffItemBusinessUnitProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffItemBusinessUnitProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffItemBusinessUnitProfile) ProtoMessage() {}

func (x *DiffItemBusinessUnitProfile) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffItemBusinessUnitProfile.ProtoReflect.Descriptor instead.
func (*DiffItemBusinessUnitProfile) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{14}
}

func (x *DiffItemBusinessUnitProfile) GetKeyValue() string {
	if x != nil {
		return x.KeyValue
	}
	return ""
}

func (x *DiffItemBusinessUnitProfile) GetDisplayNameLangJa() *ComparisonItem {
	if x != nil {
		return x.DisplayNameLangJa
	}
	return nil
}

func (x *DiffItemBusinessUnitProfile) GetCompanyNumber() *ComparisonItem {
	if x != nil {
		return x.CompanyNumber
	}
	return nil
}

func (x *DiffItemBusinessUnitProfile) GetRepresentativeDisplayNameLangJa() *ComparisonItem {
	if x != nil {
		return x.RepresentativeDisplayNameLangJa
	}
	return nil
}

func (x *DiffItemBusinessUnitProfile) GetPostalCode() *ComparisonItem {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *DiffItemBusinessUnitProfile) GetAddress() *ComparisonItem {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DiffItemBusinessUnitProfile) GetCapitalStock() *ComparisonItem {
	if x != nil {
		return x.CapitalStock
	}
	return nil
}

// 比較用データ型（拠点）
type DiffItemBusinessUnitBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// キー項目[-]
	KeyValue string `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// 住所
	Address *ComparisonItem `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// 電話番号
	PhoneNumber *ComparisonItem `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// FAX
	FaxNumber *ComparisonItem `protobuf:"bytes,4,opt,name=fax_number,json=faxNumber,proto3" json:"fax_number,omitempty"`
}

func (x *DiffItemBusinessUnitBranch) Reset() {
	*x = DiffItemBusinessUnitBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffItemBusinessUnitBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffItemBusinessUnitBranch) ProtoMessage() {}

func (x *DiffItemBusinessUnitBranch) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffItemBusinessUnitBranch.ProtoReflect.Descriptor instead.
func (*DiffItemBusinessUnitBranch) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{15}
}

func (x *DiffItemBusinessUnitBranch) GetKeyValue() string {
	if x != nil {
		return x.KeyValue
	}
	return ""
}

func (x *DiffItemBusinessUnitBranch) GetAddress() *ComparisonItem {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DiffItemBusinessUnitBranch) GetPhoneNumber() *ComparisonItem {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *DiffItemBusinessUnitBranch) GetFaxNumber() *ComparisonItem {
	if x != nil {
		return x.FaxNumber
	}
	return nil
}

// 比較用データ型（認証）
type DiffItemBusinessUnitCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// キー項目[認証名]
	KeyValue string `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// 取得済み
	Obtained *ComparisonItem `protobuf:"bytes,2,opt,name=obtained,proto3" json:"obtained,omitempty"`
	// 認証番号
	CertificateNumber *ComparisonItem `protobuf:"bytes,3,opt,name=certificate_number,json=certificateNumber,proto3" json:"certificate_number,omitempty"`
	// 証明書
	Attachment *ComparisonItem `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// 取得年月日
	ObtainedDt *ComparisonItem `protobuf:"bytes,5,opt,name=obtained_dt,json=obtainedDt,proto3" json:"obtained_dt,omitempty"`
	// 有効期限
	ExpirationDt *ComparisonItem `protobuf:"bytes,6,opt,name=expiration_dt,json=expirationDt,proto3" json:"expiration_dt,omitempty"`
	// 取得予定日
	ObtainPlanDt *ComparisonItem `protobuf:"bytes,7,opt,name=obtain_plan_dt,json=obtainPlanDt,proto3" json:"obtain_plan_dt,omitempty"`
	// 次回取得予定
	ObtainPlan *ComparisonItem `protobuf:"bytes,8,opt,name=obtain_plan,json=obtainPlan,proto3" json:"obtain_plan,omitempty"`
	// 取得予定なしの理由
	Comment *ComparisonItem `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	// 適用範囲(対象製品)
	ScopeProduct *ComparisonItem `protobuf:"bytes,10,opt,name=scope_product,json=scopeProduct,proto3" json:"scope_product,omitempty"`
	// 適用範囲(対象拠点/対象設備)
	ScopeBranch *ComparisonItem `protobuf:"bytes,11,opt,name=scope_branch,json=scopeBranch,proto3" json:"scope_branch,omitempty"`
}

func (x *DiffItemBusinessUnitCertificate) Reset() {
	*x = DiffItemBusinessUnitCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffItemBusinessUnitCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffItemBusinessUnitCertificate) ProtoMessage() {}

func (x *DiffItemBusinessUnitCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffItemBusinessUnitCertificate.ProtoReflect.Descriptor instead.
func (*DiffItemBusinessUnitCertificate) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{16}
}

func (x *DiffItemBusinessUnitCertificate) GetKeyValue() string {
	if x != nil {
		return x.KeyValue
	}
	return ""
}

func (x *DiffItemBusinessUnitCertificate) GetObtained() *ComparisonItem {
	if x != nil {
		return x.Obtained
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetCertificateNumber() *ComparisonItem {
	if x != nil {
		return x.CertificateNumber
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetAttachment() *ComparisonItem {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetObtainedDt() *ComparisonItem {
	if x != nil {
		return x.ObtainedDt
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetExpirationDt() *ComparisonItem {
	if x != nil {
		return x.ExpirationDt
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetObtainPlanDt() *ComparisonItem {
	if x != nil {
		return x.ObtainPlanDt
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetObtainPlan() *ComparisonItem {
	if x != nil {
		return x.ObtainPlan
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetComment() *ComparisonItem {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetScopeProduct() *ComparisonItem {
	if x != nil {
		return x.ScopeProduct
	}
	return nil
}

func (x *DiffItemBusinessUnitCertificate) GetScopeBranch() *ComparisonItem {
	if x != nil {
		return x.ScopeBranch
	}
	return nil
}

// 比較用データ型（連絡先）
type DiffItemBusinessUnitContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// キー項目[連絡先名]
	KeyValue string `protobuf:"bytes,1,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// 拠点名
	BusinessUnitBranchDisplayName *ComparisonItem `protobuf:"bytes,2,opt,name=business_unit_branch_display_name,json=businessUnitBranchDisplayName,proto3" json:"business_unit_branch_display_name,omitempty"`
	// 住所
	Address *ComparisonItem `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// 電話番号
	PhoneNumber *ComparisonItem `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// FAX
	FaxNumber *ComparisonItem `protobuf:"bytes,5,opt,name=fax_number,json=faxNumber,proto3" json:"fax_number,omitempty"`
	// 宛名
	Alias *ComparisonItem `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	// 相手先担当
	NotificationUsers *ComparisonItem `protobuf:"bytes,7,opt,name=notification_users,json=notificationUsers,proto3" json:"notification_users,omitempty"`
}

func (x *DiffItemBusinessUnitContact) Reset() {
	*x = DiffItemBusinessUnitContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffItemBusinessUnitContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffItemBusinessUnitContact) ProtoMessage() {}

func (x *DiffItemBusinessUnitContact) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffItemBusinessUnitContact.ProtoReflect.Descriptor instead.
func (*DiffItemBusinessUnitContact) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{17}
}

func (x *DiffItemBusinessUnitContact) GetKeyValue() string {
	if x != nil {
		return x.KeyValue
	}
	return ""
}

func (x *DiffItemBusinessUnitContact) GetBusinessUnitBranchDisplayName() *ComparisonItem {
	if x != nil {
		return x.BusinessUnitBranchDisplayName
	}
	return nil
}

func (x *DiffItemBusinessUnitContact) GetAddress() *ComparisonItem {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DiffItemBusinessUnitContact) GetPhoneNumber() *ComparisonItem {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *DiffItemBusinessUnitContact) GetFaxNumber() *ComparisonItem {
	if x != nil {
		return x.FaxNumber
	}
	return nil
}

func (x *DiffItemBusinessUnitContact) GetAlias() *ComparisonItem {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *DiffItemBusinessUnitContact) GetNotificationUsers() *ComparisonItem {
	if x != nil {
		return x.NotificationUsers
	}
	return nil
}

// 取引先管理（拠点）情報
type BusinessUnitBranchProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（拠点）ID
	BusinessUnitBranchId string `protobuf:"bytes,6,opt,name=business_unit_branch_id,json=businessUnitBranchId,proto3" json:"business_unit_branch_id,omitempty"`
	// 拠点名
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 住所情報
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// 電話番号
	PhoneNumber string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// FAX
	FaxNumber string `protobuf:"bytes,5,opt,name=fax_number,json=faxNumber,proto3" json:"fax_number,omitempty"`
}

func (x *BusinessUnitBranchProperties) Reset() {
	*x = BusinessUnitBranchProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitBranchProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitBranchProperties) ProtoMessage() {}

func (x *BusinessUnitBranchProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitBranchProperties.ProtoReflect.Descriptor instead.
func (*BusinessUnitBranchProperties) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{18}
}

func (x *BusinessUnitBranchProperties) GetBusinessUnitBranchId() string {
	if x != nil {
		return x.BusinessUnitBranchId
	}
	return ""
}

func (x *BusinessUnitBranchProperties) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitBranchProperties) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BusinessUnitBranchProperties) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BusinessUnitBranchProperties) GetFaxNumber() string {
	if x != nil {
		return x.FaxNumber
	}
	return ""
}

type Profile_Representative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代表者名
	DisplayNameLang map[string]string `protobuf:"bytes,1,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 代表者役職
	Position string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *Profile_Representative) Reset() {
	*x = Profile_Representative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile_Representative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile_Representative) ProtoMessage() {}

func (x *Profile_Representative) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile_Representative.ProtoReflect.Descriptor instead.
func (*Profile_Representative) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Profile_Representative) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *Profile_Representative) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type CompanyProfile_Representative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代表者名
	DisplayNameLang map[string]string `protobuf:"bytes,1,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 代表者(役職)
	Position string `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// 代表者(生年月日)
	BirthDate *protobuf.Date `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
}

func (x *CompanyProfile_Representative) Reset() {
	*x = CompanyProfile_Representative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProfile_Representative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProfile_Representative) ProtoMessage() {}

func (x *CompanyProfile_Representative) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProfile_Representative.ProtoReflect.Descriptor instead.
func (*CompanyProfile_Representative) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{11, 1}
}

func (x *CompanyProfile_Representative) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *CompanyProfile_Representative) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *CompanyProfile_Representative) GetBirthDate() *protobuf.Date {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

type CompanyProfile_Employees struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 従業員(人数)
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// 従業員(平均年齢)
	AverageAge *protobuf.Amount `protobuf:"bytes,2,opt,name=average_age,json=averageAge,proto3" json:"average_age,omitempty"`
}

func (x *CompanyProfile_Employees) Reset() {
	*x = CompanyProfile_Employees{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_datatype_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyProfile_Employees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProfile_Employees) ProtoMessage() {}

func (x *CompanyProfile_Employees) ProtoReflect() protoreflect.Message {
	mi := &file_company_datatype_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProfile_Employees.ProtoReflect.Descriptor instead.
func (*CompanyProfile_Employees) Descriptor() ([]byte, []int) {
	return file_company_datatype_proto_rawDescGZIP(), []int{11, 2}
}

func (x *CompanyProfile_Employees) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CompanyProfile_Employees) GetAverageAge() *protobuf.Amount {
	if x != nil {
		return x.AverageAge
	}
	return nil
}

var File_company_datatype_proto protoreflect.FileDescriptor

var file_company_datatype_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a,
	0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x22, 0xab, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x27, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0a, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x03, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x2d, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0xf0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x42,
	0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x25,
	0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x03, 0x52, 0x22, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x1c, 0x0a,
	0x1a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x10, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xaf, 0x01, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x02, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x0e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c,
	0x0a, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa4, 0x01, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x22, 0xc9, 0x0a, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52,
	0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x03, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x64, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52,
	0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x31, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x0d, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb4, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x7d, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x62, 0x0a, 0x09, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x03, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65, 0x22,
	0x71, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x04,
	0x0a, 0x1b, 0x44, 0x69, 0x66, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x5f,
	0x6a, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67,
	0x4a, 0x61, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x73, 0x0a, 0x23, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x6a, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x1f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x4a, 0x61, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4a,
	0x0a, 0x0d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x8a, 0x02, 0x0a, 0x1a, 0x44,
	0x69, 0x66, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0a, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x66, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e, 0x06, 0x0a, 0x1f, 0x44, 0x69, 0x66, 0x66,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x74,
	0x12, 0x4a, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x12, 0x4b, 0x0a, 0x0e,
	0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x6f, 0x62, 0x74,
	0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x48,
	0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x8f, 0x04, 0x0a, 0x1b, 0x44, 0x69, 0x66,
	0x66, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x21, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x1d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0a, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x66, 0x61,
	0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x1c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x17, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x03, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0a, 0x66, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x09,
	0x66, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x42,
	0x1c, 0x5a, 0x1a, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_datatype_proto_rawDescOnce sync.Once
	file_company_datatype_proto_rawDescData = file_company_datatype_proto_rawDesc
)

func file_company_datatype_proto_rawDescGZIP() []byte {
	file_company_datatype_proto_rawDescOnce.Do(func() {
		file_company_datatype_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_datatype_proto_rawDescData)
	})
	return file_company_datatype_proto_rawDescData
}

var file_company_datatype_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_company_datatype_proto_goTypes = []interface{}{
	(*CompanyStatus)(nil),                   // 0: mtechnavi.api.company.CompanyStatus
	(*Profile)(nil),                         // 1: mtechnavi.api.company.Profile
	(*CompanyLegalProperties)(nil),          // 2: mtechnavi.api.company.CompanyLegalProperties
	(*PostUnitProperties)(nil),              // 3: mtechnavi.api.company.PostUnitProperties
	(*OrganizationUnitProperties)(nil),      // 4: mtechnavi.api.company.OrganizationUnitProperties
	(*DeliveryPointProperties)(nil),         // 5: mtechnavi.api.company.DeliveryPointProperties
	(*OfficeProperties)(nil),                // 6: mtechnavi.api.company.OfficeProperties
	(*ImageFile)(nil),                       // 7: mtechnavi.api.company.ImageFile
	(*PostUnit)(nil),                        // 8: mtechnavi.api.company.PostUnit
	(*Process)(nil),                         // 9: mtechnavi.api.company.Process
	(*Address)(nil),                         // 10: mtechnavi.api.company.Address
	(*CompanyProfile)(nil),                  // 11: mtechnavi.api.company.CompanyProfile
	(*ItemValue)(nil),                       // 12: mtechnavi.api.company.ItemValue
	(*ComparisonItem)(nil),                  // 13: mtechnavi.api.company.ComparisonItem
	(*DiffItemBusinessUnitProfile)(nil),     // 14: mtechnavi.api.company.DiffItemBusinessUnitProfile
	(*DiffItemBusinessUnitBranch)(nil),      // 15: mtechnavi.api.company.DiffItemBusinessUnitBranch
	(*DiffItemBusinessUnitCertificate)(nil), // 16: mtechnavi.api.company.DiffItemBusinessUnitCertificate
	(*DiffItemBusinessUnitContact)(nil),     // 17: mtechnavi.api.company.DiffItemBusinessUnitContact
	(*BusinessUnitBranchProperties)(nil),    // 18: mtechnavi.api.company.BusinessUnitBranchProperties
	(*Profile_Representative)(nil),          // 19: mtechnavi.api.company.Profile.Representative
	nil,                                     // 20: mtechnavi.api.company.Profile.Representative.DisplayNameLangEntry
	nil,                                     // 21: mtechnavi.api.company.ImageFile.MetadataEntry
	nil,                                     // 22: mtechnavi.api.company.CompanyProfile.DisplayNameLangEntry
	(*CompanyProfile_Representative)(nil),   // 23: mtechnavi.api.company.CompanyProfile.Representative
	(*CompanyProfile_Employees)(nil),        // 24: mtechnavi.api.company.CompanyProfile.Employees
	nil,                                     // 25: mtechnavi.api.company.CompanyProfile.Representative.DisplayNameLangEntry
	(*protobuf.NameOption)(nil),             // 26: sharelib.NameOption
	(*protobuf.Address)(nil),                // 27: sharelib.Address
	(*protobuf.MonetaryAmount)(nil),         // 28: sharelib.MonetaryAmount
	(*protobuf.EmbeddedUser)(nil),           // 29: sharelib.EmbeddedUser
	(*protobuf.Date)(nil),                   // 30: sharelib.Date
	(*protobuf.Amount)(nil),                 // 31: sharelib.Amount
}
var file_company_datatype_proto_depIdxs = []int32{
	26, // 0: mtechnavi.api.company.CompanyStatus.status:type_name -> sharelib.NameOption
	26, // 1: mtechnavi.api.company.CompanyStatus.category:type_name -> sharelib.NameOption
	26, // 2: mtechnavi.api.company.CompanyStatus.detail:type_name -> sharelib.NameOption
	27, // 3: mtechnavi.api.company.Profile.address:type_name -> sharelib.Address
	19, // 4: mtechnavi.api.company.Profile.representative:type_name -> mtechnavi.api.company.Profile.Representative
	28, // 5: mtechnavi.api.company.Profile.capital_stock:type_name -> sharelib.MonetaryAmount
	26, // 6: mtechnavi.api.company.OfficeProperties.office_rank:type_name -> sharelib.NameOption
	21, // 7: mtechnavi.api.company.ImageFile.metadata:type_name -> mtechnavi.api.company.ImageFile.MetadataEntry
	26, // 8: mtechnavi.api.company.PostUnit.post_unit_type:type_name -> sharelib.NameOption
	26, // 9: mtechnavi.api.company.PostUnit.usable:type_name -> sharelib.NameOption
	29, // 10: mtechnavi.api.company.Process.processed_by:type_name -> sharelib.EmbeddedUser
	26, // 11: mtechnavi.api.company.Address.country:type_name -> sharelib.NameOption
	26, // 12: mtechnavi.api.company.Address.region:type_name -> sharelib.NameOption
	22, // 13: mtechnavi.api.company.CompanyProfile.display_name_lang:type_name -> mtechnavi.api.company.CompanyProfile.DisplayNameLangEntry
	2,  // 14: mtechnavi.api.company.CompanyProfile.company_legal_properties:type_name -> mtechnavi.api.company.CompanyLegalProperties
	23, // 15: mtechnavi.api.company.CompanyProfile.representative:type_name -> mtechnavi.api.company.CompanyProfile.Representative
	10, // 16: mtechnavi.api.company.CompanyProfile.address:type_name -> mtechnavi.api.company.Address
	24, // 17: mtechnavi.api.company.CompanyProfile.employees:type_name -> mtechnavi.api.company.CompanyProfile.Employees
	28, // 18: mtechnavi.api.company.CompanyProfile.capital_stock:type_name -> sharelib.MonetaryAmount
	13, // 19: mtechnavi.api.company.DiffItemBusinessUnitProfile.display_name_lang_ja:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 20: mtechnavi.api.company.DiffItemBusinessUnitProfile.company_number:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 21: mtechnavi.api.company.DiffItemBusinessUnitProfile.representative_display_name_lang_ja:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 22: mtechnavi.api.company.DiffItemBusinessUnitProfile.postal_code:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 23: mtechnavi.api.company.DiffItemBusinessUnitProfile.address:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 24: mtechnavi.api.company.DiffItemBusinessUnitProfile.capital_stock:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 25: mtechnavi.api.company.DiffItemBusinessUnitBranch.address:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 26: mtechnavi.api.company.DiffItemBusinessUnitBranch.phone_number:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 27: mtechnavi.api.company.DiffItemBusinessUnitBranch.fax_number:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 28: mtechnavi.api.company.DiffItemBusinessUnitCertificate.obtained:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 29: mtechnavi.api.company.DiffItemBusinessUnitCertificate.certificate_number:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 30: mtechnavi.api.company.DiffItemBusinessUnitCertificate.attachment:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 31: mtechnavi.api.company.DiffItemBusinessUnitCertificate.obtained_dt:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 32: mtechnavi.api.company.DiffItemBusinessUnitCertificate.expiration_dt:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 33: mtechnavi.api.company.DiffItemBusinessUnitCertificate.obtain_plan_dt:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 34: mtechnavi.api.company.DiffItemBusinessUnitCertificate.obtain_plan:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 35: mtechnavi.api.company.DiffItemBusinessUnitCertificate.comment:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 36: mtechnavi.api.company.DiffItemBusinessUnitCertificate.scope_product:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 37: mtechnavi.api.company.DiffItemBusinessUnitCertificate.scope_branch:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 38: mtechnavi.api.company.DiffItemBusinessUnitContact.business_unit_branch_display_name:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 39: mtechnavi.api.company.DiffItemBusinessUnitContact.address:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 40: mtechnavi.api.company.DiffItemBusinessUnitContact.phone_number:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 41: mtechnavi.api.company.DiffItemBusinessUnitContact.fax_number:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 42: mtechnavi.api.company.DiffItemBusinessUnitContact.alias:type_name -> mtechnavi.api.company.ComparisonItem
	13, // 43: mtechnavi.api.company.DiffItemBusinessUnitContact.notification_users:type_name -> mtechnavi.api.company.ComparisonItem
	10, // 44: mtechnavi.api.company.BusinessUnitBranchProperties.address:type_name -> mtechnavi.api.company.Address
	20, // 45: mtechnavi.api.company.Profile.Representative.display_name_lang:type_name -> mtechnavi.api.company.Profile.Representative.DisplayNameLangEntry
	25, // 46: mtechnavi.api.company.CompanyProfile.Representative.display_name_lang:type_name -> mtechnavi.api.company.CompanyProfile.Representative.DisplayNameLangEntry
	30, // 47: mtechnavi.api.company.CompanyProfile.Representative.birth_date:type_name -> sharelib.Date
	31, // 48: mtechnavi.api.company.CompanyProfile.Employees.average_age:type_name -> sharelib.Amount
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_company_datatype_proto_init() }
func file_company_datatype_proto_init() {
	if File_company_datatype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_company_datatype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyLegalProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUnitProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationUnitProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryPointProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfficeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffItemBusinessUnitProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffItemBusinessUnitBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffItemBusinessUnitCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffItemBusinessUnitContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitBranchProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile_Representative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProfile_Representative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_datatype_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyProfile_Employees); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_datatype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_company_datatype_proto_goTypes,
		DependencyIndexes: file_company_datatype_proto_depIdxs,
		MessageInfos:      file_company_datatype_proto_msgTypes,
	}.Build()
	File_company_datatype_proto = out.File
	file_company_datatype_proto_rawDesc = nil
	file_company_datatype_proto_goTypes = nil
	file_company_datatype_proto_depIdxs = nil
}
