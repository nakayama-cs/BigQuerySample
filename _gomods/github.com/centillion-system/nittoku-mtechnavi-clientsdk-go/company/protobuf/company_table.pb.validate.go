// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: company_table.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Company) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CompanyMultiError, or nil if none found.
func (m *Company) ValidateAll() error {
	return m.validate(true)
}

func (m *Company) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for DisplayNameLang

	if all {
		switch v := interface{}(m.GetCompanyLegalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyValidationError{
					field:  "CompanyLegalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyValidationError{
					field:  "CompanyLegalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompanyLegalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyValidationError{
				field:  "CompanyLegalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompanyStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyValidationError{
					field:  "CompanyStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyValidationError{
					field:  "CompanyStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompanyStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyValidationError{
				field:  "CompanyStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TimezoneName

	// no validation rules for Published

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CompanyMultiError(errors)
	}

	return nil
}

// CompanyMultiError is an error wrapping multiple validation errors returned
// by Company.ValidateAll() if the designated constraints aren't met.
type CompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyMultiError) AllErrors() []error { return m }

// CompanyValidationError is the validation error returned by Company.Validate
// if the designated constraints aren't met.
type CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyValidationError) ErrorName() string { return "CompanyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyValidationError{}

// Validate checks the field values on ComponentUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComponentUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentUnit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComponentUnitMultiError, or
// nil if none found.
func (m *ComponentUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentUnitId

	// no validation rules for CompanyId

	// no validation rules for ComponentUnitCode

	// no validation rules for DisplayNameLang

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlaceProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "PlaceProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "PlaceProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaceProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "PlaceProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPostUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "PostUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "PostUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "PostUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPostUnitProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "PostUnitProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "PostUnitProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostUnitProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "PostUnitProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "OrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrganizationUnitProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "OrganizationUnitProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "OrganizationUnitProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnitProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "OrganizationUnitProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeliveryPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "DeliveryPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "DeliveryPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "DeliveryPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeliveryPointProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "DeliveryPointProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "DeliveryPointProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryPointProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "DeliveryPointProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOffice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "Office",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOfficeProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "OfficeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "OfficeProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOfficeProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "OfficeProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "Usable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnitValidationError{
					field:  "Usable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnitValidationError{
				field:  "Usable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ComponentUnitMultiError(errors)
	}

	return nil
}

// ComponentUnitMultiError is an error wrapping multiple validation errors
// returned by ComponentUnit.ValidateAll() if the designated constraints
// aren't met.
type ComponentUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentUnitMultiError) AllErrors() []error { return m }

// ComponentUnitValidationError is the validation error returned by
// ComponentUnit.Validate if the designated constraints aren't met.
type ComponentUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentUnitValidationError) ErrorName() string { return "ComponentUnitValidationError" }

// Error satisfies the builtin error interface
func (e ComponentUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentUnitValidationError{}

// Validate checks the field values on Staff with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Staff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Staff with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StaffMultiError, or nil if none found.
func (m *Staff) ValidateAll() error {
	return m.validate(true)
}

func (m *Staff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StaffId

	// no validation rules for StaffCode

	// no validation rules for DisplayName

	// no validation rules for ComponentUnitId

	// no validation rules for PhoneNumber

	// no validation rules for ContactEmail

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetUsable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StaffValidationError{
					field:  "Usable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StaffValidationError{
					field:  "Usable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StaffValidationError{
				field:  "Usable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return StaffMultiError(errors)
	}

	return nil
}

// StaffMultiError is an error wrapping multiple validation errors returned by
// Staff.ValidateAll() if the designated constraints aren't met.
type StaffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaffMultiError) AllErrors() []error { return m }

// StaffValidationError is the validation error returned by Staff.Validate if
// the designated constraints aren't met.
type StaffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaffValidationError) ErrorName() string { return "StaffValidationError" }

// Error satisfies the builtin error interface
func (e StaffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaffValidationError{}

// Validate checks the field values on BusinessUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BusinessUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessUnitMultiError, or
// nil if none found.
func (m *BusinessUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitId

	// no validation rules for CompanyId

	// no validation rules for BusinessUnitCode

	// no validation rules for DisplayName

	// no validation rules for BusinessUnitCategory

	// no validation rules for Remarks

	for idx, item := range m.GetPostUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitValidationError{
						field:  fmt.Sprintf("PostUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitValidationError{
						field:  fmt.Sprintf("PostUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitValidationError{
					field:  fmt.Sprintf("PostUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAggregatedPostUnitTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitValidationError{
						field:  fmt.Sprintf("AggregatedPostUnitTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitValidationError{
						field:  fmt.Sprintf("AggregatedPostUnitTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitValidationError{
					field:  fmt.Sprintf("AggregatedPostUnitTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BusinessUnitMultiError(errors)
	}

	return nil
}

// BusinessUnitMultiError is an error wrapping multiple validation errors
// returned by BusinessUnit.ValidateAll() if the designated constraints aren't met.
type BusinessUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitMultiError) AllErrors() []error { return m }

// BusinessUnitValidationError is the validation error returned by
// BusinessUnit.Validate if the designated constraints aren't met.
type BusinessUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitValidationError) ErrorName() string { return "BusinessUnitValidationError" }

// Error satisfies the builtin error interface
func (e BusinessUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitValidationError{}

// Validate checks the field values on BusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitRequestMultiError, or nil if none found.
func (m *BusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitRequestId

	if utf8.RuneCountInString(m.GetCompanyId()) < 1 {
		err := BusinessUnitRequestValidationError{
			field:  "CompanyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceCompanyId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BusinessUnitRequestMultiError(errors)
	}

	return nil
}

// BusinessUnitRequestMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitRequest.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitRequestMultiError) AllErrors() []error { return m }

// BusinessUnitRequestValidationError is the validation error returned by
// BusinessUnitRequest.Validate if the designated constraints aren't met.
type BusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitRequestValidationError) ErrorName() string {
	return "BusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitRequestValidationError{}

// Validate checks the field values on BusinessUnitRequestResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitRequestResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitRequestResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitRequestResultMultiError, or nil if none found.
func (m *BusinessUnitRequestResult) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitRequestResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitRequestResultId

	if all {
		switch v := interface{}(m.GetBusinessUnitRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitRequestResultValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitRequestResultValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitRequestResultValidationError{
				field:  "BusinessUnitRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BusinessUnitRequestResultMultiError(errors)
	}

	return nil
}

// BusinessUnitRequestResultMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitRequestResult.ValidateAll() if the
// designated constraints aren't met.
type BusinessUnitRequestResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitRequestResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitRequestResultMultiError) AllErrors() []error { return m }

// BusinessUnitRequestResultValidationError is the validation error returned by
// BusinessUnitRequestResult.Validate if the designated constraints aren't met.
type BusinessUnitRequestResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitRequestResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitRequestResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitRequestResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitRequestResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitRequestResultValidationError) ErrorName() string {
	return "BusinessUnitRequestResultValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitRequestResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitRequestResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitRequestResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitRequestResultValidationError{}

// Validate checks the field values on BusinessUnitManagement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitManagement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitManagement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitManagementMultiError, or nil if none found.
func (m *BusinessUnitManagement) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitManagement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CompanyId

	if all {
		switch v := interface{}(m.GetTenantLinkProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "TenantLinkProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "TenantLinkProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenantLinkProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementValidationError{
				field:  "TenantLinkProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTenantInviteProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "TenantInviteProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "TenantInviteProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenantInviteProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementValidationError{
				field:  "TenantInviteProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	// no validation rules for DisplayName

	for idx, item := range m.GetMainContact() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("MainContact[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("MainContact[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("MainContact[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMainContactAssistant() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("MainContactAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("MainContactAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("MainContactAssistant[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStaff() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("Staff[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("Staff[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("Staff[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStaffAssistant() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("StaffAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("StaffAssistant[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("StaffAssistant[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItemValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("ItemValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInvitees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("Invitees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementValidationError{
						field:  fmt.Sprintf("Invitees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementValidationError{
					field:  fmt.Sprintf("Invitees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BusinessUnitManagementMultiError(errors)
	}

	return nil
}

// BusinessUnitManagementMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitManagement.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitManagementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitManagementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitManagementMultiError) AllErrors() []error { return m }

// BusinessUnitManagementValidationError is the validation error returned by
// BusinessUnitManagement.Validate if the designated constraints aren't met.
type BusinessUnitManagementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitManagementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitManagementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitManagementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitManagementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitManagementValidationError) ErrorName() string {
	return "BusinessUnitManagementValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitManagementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitManagement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitManagementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitManagementValidationError{}

// Validate checks the field values on BusinessUnitProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitProfileMultiError, or nil if none found.
func (m *BusinessUnitProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitProfileId

	// no validation rules for CompanyId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitProfileValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitProfileValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitProfileValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitProfileValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitProfileValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitProfileValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitProfileValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitProfileValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitProfileValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitProfileValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitProfileValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitProfileValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitProfileMultiError(errors)
	}

	return nil
}

// BusinessUnitProfileMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitProfile.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitProfileMultiError) AllErrors() []error { return m }

// BusinessUnitProfileValidationError is the validation error returned by
// BusinessUnitProfile.Validate if the designated constraints aren't met.
type BusinessUnitProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitProfileValidationError) ErrorName() string {
	return "BusinessUnitProfileValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitProfileValidationError{}

// Validate checks the field values on BusinessUnitFinancial with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitFinancial) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitFinancial with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitFinancialMultiError, or nil if none found.
func (m *BusinessUnitFinancial) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitFinancial) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitFinancialId

	// no validation rules for CompanyId

	if all {
		switch v := interface{}(m.GetPeriodStartDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "PeriodStartDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "PeriodStartDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodStartDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "PeriodStartDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodEndDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "PeriodEndDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "PeriodEndDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodEndDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "PeriodEndDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNetSales()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "NetSales",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "NetSales",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetSales()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "NetSales",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOperatingProfit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "OperatingProfit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "OperatingProfit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperatingProfit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "OperatingProfit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrdinaryIncome()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "OrdinaryIncome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "OrdinaryIncome",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrdinaryIncome()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "OrdinaryIncome",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFinancialValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFinancialValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitFinancialMultiError(errors)
	}

	return nil
}

// BusinessUnitFinancialMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitFinancial.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitFinancialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitFinancialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitFinancialMultiError) AllErrors() []error { return m }

// BusinessUnitFinancialValidationError is the validation error returned by
// BusinessUnitFinancial.Validate if the designated constraints aren't met.
type BusinessUnitFinancialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitFinancialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitFinancialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitFinancialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitFinancialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitFinancialValidationError) ErrorName() string {
	return "BusinessUnitFinancialValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitFinancialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitFinancial.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitFinancialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitFinancialValidationError{}

// Validate checks the field values on BusinessUnitBranch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitBranch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitBranch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitBranchMultiError, or nil if none found.
func (m *BusinessUnitBranch) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitBranch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitBranchId

	// no validation rules for CompanyId

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitBranchValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitBranchValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitBranchValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	// no validation rules for FaxNumber

	// no validation rules for Overview

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitBranchValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitBranchValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitBranchValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitBranchValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitBranchValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitBranchValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitBranchMultiError(errors)
	}

	return nil
}

// BusinessUnitBranchMultiError is an error wrapping multiple validation errors
// returned by BusinessUnitBranch.ValidateAll() if the designated constraints
// aren't met.
type BusinessUnitBranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitBranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitBranchMultiError) AllErrors() []error { return m }

// BusinessUnitBranchValidationError is the validation error returned by
// BusinessUnitBranch.Validate if the designated constraints aren't met.
type BusinessUnitBranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitBranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitBranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitBranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitBranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitBranchValidationError) ErrorName() string {
	return "BusinessUnitBranchValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitBranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitBranch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitBranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitBranchValidationError{}

// Validate checks the field values on BusinessUnitFacilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitFacilities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitFacilities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitFacilitiesMultiError, or nil if none found.
func (m *BusinessUnitFacilities) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitFacilities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitFacilitiesId

	// no validation rules for CompanyId

	// no validation rules for BusinessUnitBranchId

	for idx, item := range m.GetCategorys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitFacilitiesValidationError{
						field:  fmt.Sprintf("Categorys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitFacilitiesValidationError{
						field:  fmt.Sprintf("Categorys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitFacilitiesValidationError{
					field:  fmt.Sprintf("Categorys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Manufacture

	// no validation rules for ModelNumber

	// no validation rules for AssetsAmount

	if all {
		switch v := interface{}(m.GetAccuracy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "Accuracy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "Accuracy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccuracy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFacilitiesValidationError{
				field:  "Accuracy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProcessableTon

	// no validation rules for SizeX

	// no validation rules for SizeY

	// no validation rules for SizeZ

	// no validation rules for SizeT

	// no validation rules for Diameter

	if all {
		switch v := interface{}(m.GetProcessableMaterial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "ProcessableMaterial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "ProcessableMaterial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessableMaterial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFacilitiesValidationError{
				field:  "ProcessableMaterial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFacilitiesValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitFacilitiesValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitFacilitiesValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitFacilitiesMultiError(errors)
	}

	return nil
}

// BusinessUnitFacilitiesMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitFacilities.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitFacilitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitFacilitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitFacilitiesMultiError) AllErrors() []error { return m }

// BusinessUnitFacilitiesValidationError is the validation error returned by
// BusinessUnitFacilities.Validate if the designated constraints aren't met.
type BusinessUnitFacilitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitFacilitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitFacilitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitFacilitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitFacilitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitFacilitiesValidationError) ErrorName() string {
	return "BusinessUnitFacilitiesValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitFacilitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitFacilities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitFacilitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitFacilitiesValidationError{}

// Validate checks the field values on BusinessUnitCertificate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitCertificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitCertificate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitCertificateMultiError, or nil if none found.
func (m *BusinessUnitCertificate) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitCertificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitCertificateId

	// no validation rules for CompanyId

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Obtained

	// no validation rules for DisplayName

	// no validation rules for CertificateNumber

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObtainedDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "ObtainedDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "ObtainedDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObtainedDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "ObtainedDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpirationDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "ExpirationDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "ExpirationDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "ExpirationDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ObtainPlan

	if all {
		switch v := interface{}(m.GetObtainPlanDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "ObtainPlanDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "ObtainPlanDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObtainPlanDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "ObtainPlanDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	// no validation rules for ScopeProduct

	// no validation rules for ScopeBranch

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitCertificateValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitCertificateValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitCertificateMultiError(errors)
	}

	return nil
}

// BusinessUnitCertificateMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitCertificate.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitCertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitCertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitCertificateMultiError) AllErrors() []error { return m }

// BusinessUnitCertificateValidationError is the validation error returned by
// BusinessUnitCertificate.Validate if the designated constraints aren't met.
type BusinessUnitCertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitCertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitCertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitCertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitCertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitCertificateValidationError) ErrorName() string {
	return "BusinessUnitCertificateValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitCertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitCertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitCertificateValidationError{}

// Validate checks the field values on BusinessUnitStrength with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitStrength) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitStrength with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitStrengthMultiError, or nil if none found.
func (m *BusinessUnitStrength) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitStrength) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitStrengthId

	// no validation rules for CompanyId

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitStrengthValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetLinkProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "LinkProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "LinkProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinkProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitStrengthValidationError{
				field:  "LinkProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitStrengthValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitStrengthValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitStrengthValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitStrengthMultiError(errors)
	}

	return nil
}

// BusinessUnitStrengthMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitStrength.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitStrengthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitStrengthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitStrengthMultiError) AllErrors() []error { return m }

// BusinessUnitStrengthValidationError is the validation error returned by
// BusinessUnitStrength.Validate if the designated constraints aren't met.
type BusinessUnitStrengthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitStrengthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitStrengthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitStrengthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitStrengthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitStrengthValidationError) ErrorName() string {
	return "BusinessUnitStrengthValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitStrengthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitStrength.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitStrengthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitStrengthValidationError{}

// Validate checks the field values on BusinessUnitSkill with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitSkill) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitSkill with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitSkillMultiError, or nil if none found.
func (m *BusinessUnitSkill) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitSkill) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitSkillId

	// no validation rules for CompanyId

	// no validation rules for OtherSkill

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitSkillValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitSkillValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitSkillValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitSkillValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitSkillValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitSkillValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitSkillMultiError(errors)
	}

	return nil
}

// BusinessUnitSkillMultiError is an error wrapping multiple validation errors
// returned by BusinessUnitSkill.ValidateAll() if the designated constraints
// aren't met.
type BusinessUnitSkillMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitSkillMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitSkillMultiError) AllErrors() []error { return m }

// BusinessUnitSkillValidationError is the validation error returned by
// BusinessUnitSkill.Validate if the designated constraints aren't met.
type BusinessUnitSkillValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitSkillValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitSkillValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitSkillValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitSkillValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitSkillValidationError) ErrorName() string {
	return "BusinessUnitSkillValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitSkillValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitSkill.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitSkillValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitSkillValidationError{}

// Validate checks the field values on BusinessUnitContactHeader with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitContactHeader) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitContactHeader with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitContactHeaderMultiError, or nil if none found.
func (m *BusinessUnitContactHeader) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitContactHeader) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactHeaderId

	// no validation rules for BusinessUnitManagementId

	// no validation rules for CompanyId

	// no validation rules for DisplayName

	// no validation rules for DocumentRecipientAddress

	// no validation rules for NotificationUser

	if all {
		switch v := interface{}(m.GetRequestProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactHeaderValidationError{
					field:  "RequestProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactHeaderValidationError{
					field:  "RequestProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactHeaderValidationError{
				field:  "RequestProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactHeaderValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactHeaderValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactHeaderValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitContactHeaderMultiError(errors)
	}

	return nil
}

// BusinessUnitContactHeaderMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitContactHeader.ValidateAll() if the
// designated constraints aren't met.
type BusinessUnitContactHeaderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitContactHeaderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitContactHeaderMultiError) AllErrors() []error { return m }

// BusinessUnitContactHeaderValidationError is the validation error returned by
// BusinessUnitContactHeader.Validate if the designated constraints aren't met.
type BusinessUnitContactHeaderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitContactHeaderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitContactHeaderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitContactHeaderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitContactHeaderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitContactHeaderValidationError) ErrorName() string {
	return "BusinessUnitContactHeaderValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitContactHeaderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitContactHeader.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitContactHeaderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitContactHeaderValidationError{}

// Validate checks the field values on BusinessUnitContact with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitContact with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitContactMultiError, or nil if none found.
func (m *BusinessUnitContact) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactId

	// no validation rules for BusinessUnitManagementId

	// no validation rules for CompanyId

	// no validation rules for BusinessUnitContactHeaderId

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetBusinessUnitBranchProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactValidationError{
					field:  "BusinessUnitBranchProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactValidationError{
					field:  "BusinessUnitBranchProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitBranchProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactValidationError{
				field:  "BusinessUnitBranchProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Alias

	for idx, item := range m.GetNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitContactValidationError{
						field:  fmt.Sprintf("NotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitContactValidationError{
						field:  fmt.Sprintf("NotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitContactValidationError{
					field:  fmt.Sprintf("NotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MainContact

	if all {
		switch v := interface{}(m.GetSendProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactValidationError{
					field:  "SendProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactValidationError{
					field:  "SendProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactValidationError{
				field:  "SendProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitContactMultiError(errors)
	}

	return nil
}

// BusinessUnitContactMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitContact.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitContactMultiError) AllErrors() []error { return m }

// BusinessUnitContactValidationError is the validation error returned by
// BusinessUnitContact.Validate if the designated constraints aren't met.
type BusinessUnitContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitContactValidationError) ErrorName() string {
	return "BusinessUnitContactValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitContactValidationError{}

// Validate checks the field values on BusinessUnitContactAttribute with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitContactAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitContactAttribute with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitContactAttributeMultiError, or nil if none found.
func (m *BusinessUnitContactAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitContactAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactAttributeId

	// no validation rules for BusinessUnitManagementId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for Code

	// no validation rules for DisplayName

	// no validation rules for Remarks

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitContactAttributeMultiError(errors)
	}

	return nil
}

// BusinessUnitContactAttributeMultiError is an error wrapping multiple
// validation errors returned by BusinessUnitContactAttribute.ValidateAll() if
// the designated constraints aren't met.
type BusinessUnitContactAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitContactAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitContactAttributeMultiError) AllErrors() []error { return m }

// BusinessUnitContactAttributeValidationError is the validation error returned
// by BusinessUnitContactAttribute.Validate if the designated constraints
// aren't met.
type BusinessUnitContactAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitContactAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitContactAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitContactAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitContactAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitContactAttributeValidationError) ErrorName() string {
	return "BusinessUnitContactAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitContactAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitContactAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitContactAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitContactAttributeValidationError{}

// Validate checks the field values on BusinessUnitDocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitDocument) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitDocument with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitDocumentMultiError, or nil if none found.
func (m *BusinessUnitDocument) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitDocument) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitDocumentId

	// no validation rules for BusinessUnitManagementId

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitDocumentValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitDocumentValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitDocumentValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitDocumentValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitDocumentValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitDocumentValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitDocumentValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitDocumentValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitDocumentValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitDocumentMultiError(errors)
	}

	return nil
}

// BusinessUnitDocumentMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitDocument.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitDocumentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitDocumentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitDocumentMultiError) AllErrors() []error { return m }

// BusinessUnitDocumentValidationError is the validation error returned by
// BusinessUnitDocument.Validate if the designated constraints aren't met.
type BusinessUnitDocumentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitDocumentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitDocumentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitDocumentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitDocumentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitDocumentValidationError) ErrorName() string {
	return "BusinessUnitDocumentValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitDocumentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitDocument.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitDocumentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitDocumentValidationError{}

// Validate checks the field values on BusinessUnitActiveControl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitActiveControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitActiveControl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitActiveControlMultiError, or nil if none found.
func (m *BusinessUnitActiveControl) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitActiveControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitActiveControlId

	// no validation rules for CompanyId

	// no validation rules for Active

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitActiveControlValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitActiveControlValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitActiveControlValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitActiveControlValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitActiveControlValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitActiveControlValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitActiveControlMultiError(errors)
	}

	return nil
}

// BusinessUnitActiveControlMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitActiveControl.ValidateAll() if the
// designated constraints aren't met.
type BusinessUnitActiveControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitActiveControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitActiveControlMultiError) AllErrors() []error { return m }

// BusinessUnitActiveControlValidationError is the validation error returned by
// BusinessUnitActiveControl.Validate if the designated constraints aren't met.
type BusinessUnitActiveControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitActiveControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitActiveControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitActiveControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitActiveControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitActiveControlValidationError) ErrorName() string {
	return "BusinessUnitActiveControlValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitActiveControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitActiveControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitActiveControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitActiveControlValidationError{}

// Validate checks the field values on BusinessUnitSnapshot with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitSnapshot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitSnapshot with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitSnapshotMultiError, or nil if none found.
func (m *BusinessUnitSnapshot) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitSnapshot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitSnapshotId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for Data

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitSnapshotMultiError(errors)
	}

	return nil
}

// BusinessUnitSnapshotMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitSnapshot.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitSnapshotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitSnapshotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitSnapshotMultiError) AllErrors() []error { return m }

// BusinessUnitSnapshotValidationError is the validation error returned by
// BusinessUnitSnapshot.Validate if the designated constraints aren't met.
type BusinessUnitSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitSnapshotValidationError) ErrorName() string {
	return "BusinessUnitSnapshotValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitSnapshotValidationError{}

// Validate checks the field values on BusinessUnitChangeNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitChangeNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitChangeNotification with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessUnitChangeNotificationMultiError, or nil if none found.
func (m *BusinessUnitChangeNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitChangeNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitChangeNotificationId

	// no validation rules for BaseUrn

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for TargetKey

	// no validation rules for TargetFieldPath

	// no validation rules for OldValue

	// no validation rules for NewValue

	// no validation rules for NotifiedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitChangeNotificationMultiError(errors)
	}

	return nil
}

// BusinessUnitChangeNotificationMultiError is an error wrapping multiple
// validation errors returned by BusinessUnitChangeNotification.ValidateAll()
// if the designated constraints aren't met.
type BusinessUnitChangeNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitChangeNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitChangeNotificationMultiError) AllErrors() []error { return m }

// BusinessUnitChangeNotificationValidationError is the validation error
// returned by BusinessUnitChangeNotification.Validate if the designated
// constraints aren't met.
type BusinessUnitChangeNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitChangeNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitChangeNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitChangeNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitChangeNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitChangeNotificationValidationError) ErrorName() string {
	return "BusinessUnitChangeNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitChangeNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitChangeNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitChangeNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitChangeNotificationValidationError{}

// Validate checks the field values on TokyoShokoResearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokyoShokoResearch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokyoShokoResearch with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokyoShokoResearchMultiError, or nil if none found.
func (m *TokyoShokoResearch) ValidateAll() error {
	return m.validate(true)
}

func (m *TokyoShokoResearch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokyoShokoResearchId

	// no validation rules for Code

	for idx, item := range m.GetItemValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokyoShokoResearchValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokyoShokoResearchValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokyoShokoResearchValidationError{
					field:  fmt.Sprintf("ItemValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OccurredAt

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokyoShokoResearchValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokyoShokoResearchValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokyoShokoResearchValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return TokyoShokoResearchMultiError(errors)
	}

	return nil
}

// TokyoShokoResearchMultiError is an error wrapping multiple validation errors
// returned by TokyoShokoResearch.ValidateAll() if the designated constraints
// aren't met.
type TokyoShokoResearchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokyoShokoResearchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokyoShokoResearchMultiError) AllErrors() []error { return m }

// TokyoShokoResearchValidationError is the validation error returned by
// TokyoShokoResearch.Validate if the designated constraints aren't met.
type TokyoShokoResearchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokyoShokoResearchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokyoShokoResearchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokyoShokoResearchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokyoShokoResearchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokyoShokoResearchValidationError) ErrorName() string {
	return "TokyoShokoResearchValidationError"
}

// Error satisfies the builtin error interface
func (e TokyoShokoResearchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokyoShokoResearch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokyoShokoResearchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokyoShokoResearchValidationError{}

// Validate checks the field values on TokyoShokoResearchCompanyProfile with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TokyoShokoResearchCompanyProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokyoShokoResearchCompanyProfile with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TokyoShokoResearchCompanyProfileMultiError, or nil if none found.
func (m *TokyoShokoResearchCompanyProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *TokyoShokoResearchCompanyProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokyoShokoResearchCompanyProfileId

	// no validation rules for Code

	for idx, item := range m.GetItemValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokyoShokoResearchCompanyProfileValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokyoShokoResearchCompanyProfileValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokyoShokoResearchCompanyProfileValidationError{
					field:  fmt.Sprintf("ItemValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OccurredAt

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokyoShokoResearchCompanyProfileValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokyoShokoResearchCompanyProfileValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokyoShokoResearchCompanyProfileValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return TokyoShokoResearchCompanyProfileMultiError(errors)
	}

	return nil
}

// TokyoShokoResearchCompanyProfileMultiError is an error wrapping multiple
// validation errors returned by
// TokyoShokoResearchCompanyProfile.ValidateAll() if the designated
// constraints aren't met.
type TokyoShokoResearchCompanyProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokyoShokoResearchCompanyProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokyoShokoResearchCompanyProfileMultiError) AllErrors() []error { return m }

// TokyoShokoResearchCompanyProfileValidationError is the validation error
// returned by TokyoShokoResearchCompanyProfile.Validate if the designated
// constraints aren't met.
type TokyoShokoResearchCompanyProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokyoShokoResearchCompanyProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokyoShokoResearchCompanyProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokyoShokoResearchCompanyProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokyoShokoResearchCompanyProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokyoShokoResearchCompanyProfileValidationError) ErrorName() string {
	return "TokyoShokoResearchCompanyProfileValidationError"
}

// Error satisfies the builtin error interface
func (e TokyoShokoResearchCompanyProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokyoShokoResearchCompanyProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokyoShokoResearchCompanyProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokyoShokoResearchCompanyProfileValidationError{}

// Validate checks the field values on TokyoShokoResearchRiskScore with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TokyoShokoResearchRiskScore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokyoShokoResearchRiskScore with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokyoShokoResearchRiskScoreMultiError, or nil if none found.
func (m *TokyoShokoResearchRiskScore) ValidateAll() error {
	return m.validate(true)
}

func (m *TokyoShokoResearchRiskScore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokyoShokoResearchRiskScoreId

	// no validation rules for Code

	for idx, item := range m.GetItemValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TokyoShokoResearchRiskScoreValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TokyoShokoResearchRiskScoreValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TokyoShokoResearchRiskScoreValidationError{
					field:  fmt.Sprintf("ItemValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OccurredAt

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokyoShokoResearchRiskScoreValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokyoShokoResearchRiskScoreValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokyoShokoResearchRiskScoreValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return TokyoShokoResearchRiskScoreMultiError(errors)
	}

	return nil
}

// TokyoShokoResearchRiskScoreMultiError is an error wrapping multiple
// validation errors returned by TokyoShokoResearchRiskScore.ValidateAll() if
// the designated constraints aren't met.
type TokyoShokoResearchRiskScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokyoShokoResearchRiskScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokyoShokoResearchRiskScoreMultiError) AllErrors() []error { return m }

// TokyoShokoResearchRiskScoreValidationError is the validation error returned
// by TokyoShokoResearchRiskScore.Validate if the designated constraints
// aren't met.
type TokyoShokoResearchRiskScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokyoShokoResearchRiskScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokyoShokoResearchRiskScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokyoShokoResearchRiskScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokyoShokoResearchRiskScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokyoShokoResearchRiskScoreValidationError) ErrorName() string {
	return "TokyoShokoResearchRiskScoreValidationError"
}

// Error satisfies the builtin error interface
func (e TokyoShokoResearchRiskScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokyoShokoResearchRiskScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokyoShokoResearchRiskScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokyoShokoResearchRiskScoreValidationError{}

// Validate checks the field values on BusinessUnitScoreAsset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitScoreAsset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitScoreAsset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitScoreAssetMultiError, or nil if none found.
func (m *BusinessUnitScoreAsset) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitScoreAsset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitScoreAssetId

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitScoreAssetValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitScoreAssetValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitScoreAssetValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitScoreAssetValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitScoreAssetValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitScoreAssetValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUpdatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitScoreAssetValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitScoreAssetValidationError{
					field:  "UpdatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitScoreAssetValidationError{
				field:  "UpdatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return BusinessUnitScoreAssetMultiError(errors)
	}

	return nil
}

// BusinessUnitScoreAssetMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitScoreAsset.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitScoreAssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitScoreAssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitScoreAssetMultiError) AllErrors() []error { return m }

// BusinessUnitScoreAssetValidationError is the validation error returned by
// BusinessUnitScoreAsset.Validate if the designated constraints aren't met.
type BusinessUnitScoreAssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitScoreAssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitScoreAssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitScoreAssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitScoreAssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitScoreAssetValidationError) ErrorName() string {
	return "BusinessUnitScoreAssetValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitScoreAssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitScoreAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitScoreAssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitScoreAssetValidationError{}

// Validate checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *History) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on History with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HistoryMultiError, or nil if none found.
func (m *History) ValidateAll() error {
	return m.validate(true)
}

func (m *History) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HistoryId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for HistoryCategoryName

	// no validation rules for ContentName

	// no validation rules for OccurredAt

	// no validation rules for Level

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return HistoryMultiError(errors)
	}

	return nil
}

// HistoryMultiError is an error wrapping multiple validation errors returned
// by History.ValidateAll() if the designated constraints aren't met.
type HistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryMultiError) AllErrors() []error { return m }

// HistoryValidationError is the validation error returned by History.Validate
// if the designated constraints aren't met.
type HistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryValidationError) ErrorName() string { return "HistoryValidationError" }

// Error satisfies the builtin error interface
func (e HistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryValidationError{}

// Validate checks the field values on ComponentUnit_PlaceProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ComponentUnit_PlaceProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentUnit_PlaceProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ComponentUnit_PlacePropertiesMultiError, or nil if none found.
func (m *ComponentUnit_PlaceProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentUnit_PlaceProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayNameLang

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentUnit_PlacePropertiesValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentUnit_PlacePropertiesValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentUnit_PlacePropertiesValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ComponentUnit_PlacePropertiesMultiError(errors)
	}

	return nil
}

// ComponentUnit_PlacePropertiesMultiError is an error wrapping multiple
// validation errors returned by ComponentUnit_PlaceProperties.ValidateAll()
// if the designated constraints aren't met.
type ComponentUnit_PlacePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentUnit_PlacePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentUnit_PlacePropertiesMultiError) AllErrors() []error { return m }

// ComponentUnit_PlacePropertiesValidationError is the validation error
// returned by ComponentUnit_PlaceProperties.Validate if the designated
// constraints aren't met.
type ComponentUnit_PlacePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentUnit_PlacePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentUnit_PlacePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentUnit_PlacePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentUnit_PlacePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentUnit_PlacePropertiesValidationError) ErrorName() string {
	return "ComponentUnit_PlacePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e ComponentUnit_PlacePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentUnit_PlaceProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentUnit_PlacePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentUnit_PlacePropertiesValidationError{}

// Validate checks the field values on BusinessUnitStrength_LinkProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessUnitStrength_LinkProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitStrength_LinkProperties
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessUnitStrength_LinkPropertiesMultiError, or nil if none found.
func (m *BusinessUnitStrength_LinkProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitStrength_LinkProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitBranchId

	// no validation rules for BusinessUnitFacilitiesId

	if len(errors) > 0 {
		return BusinessUnitStrength_LinkPropertiesMultiError(errors)
	}

	return nil
}

// BusinessUnitStrength_LinkPropertiesMultiError is an error wrapping multiple
// validation errors returned by
// BusinessUnitStrength_LinkProperties.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitStrength_LinkPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitStrength_LinkPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitStrength_LinkPropertiesMultiError) AllErrors() []error { return m }

// BusinessUnitStrength_LinkPropertiesValidationError is the validation error
// returned by BusinessUnitStrength_LinkProperties.Validate if the designated
// constraints aren't met.
type BusinessUnitStrength_LinkPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitStrength_LinkPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitStrength_LinkPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitStrength_LinkPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitStrength_LinkPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitStrength_LinkPropertiesValidationError) ErrorName() string {
	return "BusinessUnitStrength_LinkPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitStrength_LinkPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitStrength_LinkProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitStrength_LinkPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitStrength_LinkPropertiesValidationError{}

// Validate checks the field values on BusinessUnitContact_NotificationUser
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BusinessUnitContact_NotificationUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitContact_NotificationUser
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessUnitContact_NotificationUserMultiError, or nil if none found.
func (m *BusinessUnitContact_NotificationUser) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitContact_NotificationUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContact_NotificationUserValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContact_NotificationUserValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContact_NotificationUserValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContact_NotificationUserValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContact_NotificationUserValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContact_NotificationUserValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessUnitContact_NotificationUserMultiError(errors)
	}

	return nil
}

// BusinessUnitContact_NotificationUserMultiError is an error wrapping multiple
// validation errors returned by
// BusinessUnitContact_NotificationUser.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitContact_NotificationUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitContact_NotificationUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitContact_NotificationUserMultiError) AllErrors() []error { return m }

// BusinessUnitContact_NotificationUserValidationError is the validation error
// returned by BusinessUnitContact_NotificationUser.Validate if the designated
// constraints aren't met.
type BusinessUnitContact_NotificationUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitContact_NotificationUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitContact_NotificationUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitContact_NotificationUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitContact_NotificationUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitContact_NotificationUserValidationError) ErrorName() string {
	return "BusinessUnitContact_NotificationUserValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitContact_NotificationUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitContact_NotificationUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitContact_NotificationUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitContact_NotificationUserValidationError{}
