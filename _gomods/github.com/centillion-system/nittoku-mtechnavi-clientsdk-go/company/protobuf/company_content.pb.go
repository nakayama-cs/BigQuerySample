// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: company_content.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 取引先管理コンテンツ
type BusinessUnitManagementContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理マスタ
	BusinessUnitManagement *BusinessUnitManagement `protobuf:"bytes,1,opt,name=business_unit_management,json=businessUnitManagement,proto3" json:"business_unit_management,omitempty"`
	// テナントステータス
	TenantStatus *protobuf.NameOption `protobuf:"bytes,2,opt,name=tenant_status,json=tenantStatus,proto3" json:"tenant_status,omitempty"`
	// 自社通知先アカウント
	AggregatedNotificationUsers []*protobuf.UserReference `protobuf:"bytes,3,rep,name=aggregated_notification_users,json=aggregatedNotificationUsers,proto3" json:"aggregated_notification_users,omitempty"`
	// 通知/更新ステータス
	ActiveStatus *protobuf.NameOption `protobuf:"bytes,4,opt,name=active_status,json=activeStatus,proto3" json:"active_status,omitempty"`
	// 自社企業（基本情報）マスタ
	BusinessUnitProfile *BusinessUnitProfile `protobuf:"bytes,5,opt,name=business_unit_profile,json=businessUnitProfile,proto3" json:"business_unit_profile,omitempty"`
	// 基本情報
	Profile *CompanyProfile `protobuf:"bytes,6,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *BusinessUnitManagementContent) Reset() {
	*x = BusinessUnitManagementContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitManagementContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitManagementContent) ProtoMessage() {}

func (x *BusinessUnitManagementContent) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitManagementContent.ProtoReflect.Descriptor instead.
func (*BusinessUnitManagementContent) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{0}
}

func (x *BusinessUnitManagementContent) GetBusinessUnitManagement() *BusinessUnitManagement {
	if x != nil {
		return x.BusinessUnitManagement
	}
	return nil
}

func (x *BusinessUnitManagementContent) GetTenantStatus() *protobuf.NameOption {
	if x != nil {
		return x.TenantStatus
	}
	return nil
}

func (x *BusinessUnitManagementContent) GetAggregatedNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.AggregatedNotificationUsers
	}
	return nil
}

func (x *BusinessUnitManagementContent) GetActiveStatus() *protobuf.NameOption {
	if x != nil {
		return x.ActiveStatus
	}
	return nil
}

func (x *BusinessUnitManagementContent) GetBusinessUnitProfile() *BusinessUnitProfile {
	if x != nil {
		return x.BusinessUnitProfile
	}
	return nil
}

func (x *BusinessUnitManagementContent) GetProfile() *CompanyProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// 取引先管理フォーマットコンテンツ
type BusinessUnitManagementFormatContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理マスタ
	BusinessUnitManagement *BusinessUnitManagement `protobuf:"bytes,1,opt,name=business_unit_management,json=businessUnitManagement,proto3" json:"business_unit_management,omitempty"`
	// テナントステータス
	TenantStatus *protobuf.NameOption `protobuf:"bytes,2,opt,name=tenant_status,json=tenantStatus,proto3" json:"tenant_status,omitempty"`
	// 自社企業（基本情報）マスタ
	BusinessUnitProfile *BusinessUnitProfile `protobuf:"bytes,3,opt,name=business_unit_profile,json=businessUnitProfile,proto3" json:"business_unit_profile,omitempty"`
	// 取引先管理（連絡先）マスタ 代表連絡先
	BusinessUnitMainContact *BusinessUnitContact `protobuf:"bytes,5,opt,name=business_unit_main_contact,json=businessUnitMainContact,proto3" json:"business_unit_main_contact,omitempty"`
	// 取引先管理（連絡先）社内管理マスタ
	BusinessUnitContactAttribute *BusinessUnitContactAttribute `protobuf:"bytes,4,opt,name=business_unit_contact_attribute,json=businessUnitContactAttribute,proto3" json:"business_unit_contact_attribute,omitempty"`
}

func (x *BusinessUnitManagementFormatContent) Reset() {
	*x = BusinessUnitManagementFormatContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitManagementFormatContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitManagementFormatContent) ProtoMessage() {}

func (x *BusinessUnitManagementFormatContent) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitManagementFormatContent.ProtoReflect.Descriptor instead.
func (*BusinessUnitManagementFormatContent) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{1}
}

func (x *BusinessUnitManagementFormatContent) GetBusinessUnitManagement() *BusinessUnitManagement {
	if x != nil {
		return x.BusinessUnitManagement
	}
	return nil
}

func (x *BusinessUnitManagementFormatContent) GetTenantStatus() *protobuf.NameOption {
	if x != nil {
		return x.TenantStatus
	}
	return nil
}

func (x *BusinessUnitManagementFormatContent) GetBusinessUnitProfile() *BusinessUnitProfile {
	if x != nil {
		return x.BusinessUnitProfile
	}
	return nil
}

func (x *BusinessUnitManagementFormatContent) GetBusinessUnitMainContact() *BusinessUnitContact {
	if x != nil {
		return x.BusinessUnitMainContact
	}
	return nil
}

func (x *BusinessUnitManagementFormatContent) GetBusinessUnitContactAttribute() *BusinessUnitContactAttribute {
	if x != nil {
		return x.BusinessUnitContactAttribute
	}
	return nil
}

// 取引先管理（連絡先）コンテンツ
type BusinessUnitContactContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（連絡先）マスタ
	BusinessUnitContact *BusinessUnitContact `protobuf:"bytes,1,opt,name=business_unit_contact,json=businessUnitContact,proto3" json:"business_unit_contact,omitempty"`
	// 取引先管理（連絡先）依頼データ
	BusinessUnitContactHeader *BusinessUnitContactHeader `protobuf:"bytes,2,opt,name=business_unit_contact_header,json=businessUnitContactHeader,proto3" json:"business_unit_contact_header,omitempty"`
	// 取引先管理（連絡先）社内管理データ
	BusinessUnitContactAttribute *BusinessUnitContactAttribute `protobuf:"bytes,3,opt,name=business_unit_contact_attribute,json=businessUnitContactAttribute,proto3" json:"business_unit_contact_attribute,omitempty"`
	// 連絡先ステータス
	Status *protobuf.NameOption `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BusinessUnitContactContent) Reset() {
	*x = BusinessUnitContactContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitContactContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitContactContent) ProtoMessage() {}

func (x *BusinessUnitContactContent) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitContactContent.ProtoReflect.Descriptor instead.
func (*BusinessUnitContactContent) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{2}
}

func (x *BusinessUnitContactContent) GetBusinessUnitContact() *BusinessUnitContact {
	if x != nil {
		return x.BusinessUnitContact
	}
	return nil
}

func (x *BusinessUnitContactContent) GetBusinessUnitContactHeader() *BusinessUnitContactHeader {
	if x != nil {
		return x.BusinessUnitContactHeader
	}
	return nil
}

func (x *BusinessUnitContactContent) GetBusinessUnitContactAttribute() *BusinessUnitContactAttribute {
	if x != nil {
		return x.BusinessUnitContactAttribute
	}
	return nil
}

func (x *BusinessUnitContactContent) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

// 取引先管理（第三者情報）コンテンツ
type BusinessUnitScoreContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 識別コード
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// データ種類
	Category *protobuf.NameOption `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// 取引先管理（第三者情報）情報
	ItemValues []*ItemValue `protobuf:"bytes,3,rep,name=item_values,json=itemValues,proto3" json:"item_values,omitempty"`
	// 第三者情報ファイルデータ
	BusinessUnitScoreAsset *BusinessUnitScoreAsset `protobuf:"bytes,4,opt,name=business_unit_score_asset,json=businessUnitScoreAsset,proto3" json:"business_unit_score_asset,omitempty"`
}

func (x *BusinessUnitScoreContent) Reset() {
	*x = BusinessUnitScoreContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitScoreContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitScoreContent) ProtoMessage() {}

func (x *BusinessUnitScoreContent) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitScoreContent.ProtoReflect.Descriptor instead.
func (*BusinessUnitScoreContent) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{3}
}

func (x *BusinessUnitScoreContent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BusinessUnitScoreContent) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *BusinessUnitScoreContent) GetItemValues() []*ItemValue {
	if x != nil {
		return x.ItemValues
	}
	return nil
}

func (x *BusinessUnitScoreContent) GetBusinessUnitScoreAsset() *BusinessUnitScoreAsset {
	if x != nil {
		return x.BusinessUnitScoreAsset
	}
	return nil
}

type StaffAndComponentUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 担当者（自社内）
	Staff *Staff `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
	// 組織（自社内）
	ComponentUnit *ComponentUnit `protobuf:"bytes,2,opt,name=component_unit,json=componentUnit,proto3" json:"component_unit,omitempty"`
}

func (x *StaffAndComponentUnit) Reset() {
	*x = StaffAndComponentUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaffAndComponentUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaffAndComponentUnit) ProtoMessage() {}

func (x *StaffAndComponentUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaffAndComponentUnit.ProtoReflect.Descriptor instead.
func (*StaffAndComponentUnit) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{4}
}

func (x *StaffAndComponentUnit) GetStaff() *Staff {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *StaffAndComponentUnit) GetComponentUnit() *ComponentUnit {
	if x != nil {
		return x.ComponentUnit
	}
	return nil
}

type PostUnitAndCompanyAndComponentUnitAndBusinessUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引窓口（自社内）
	PostUnit *PostUnit `protobuf:"bytes,1,opt,name=post_unit,json=postUnit,proto3" json:"post_unit,omitempty"`
	// 管理場所（グローバル）
	//
	// Implementation Note::
	// post_unit.component_unit_idに紐づく管理場所情報
	ComponentUnit *ComponentUnit `protobuf:"bytes,2,opt,name=component_unit,json=componentUnit,proto3" json:"component_unit,omitempty"`
	// 会社情報（グローバル）
	//
	// Implementation Note::
	// component_unit.company_idに紐づく企業情報
	Company *Company `protobuf:"bytes,3,opt,name=company,proto3" json:"company,omitempty"`
	// 取引先情報（自社内）
	//
	// Implementation Note::
	// post_unitが埋め込まれている親エンティティの情報
	BusinessUnit *BusinessUnit `protobuf:"bytes,4,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`
}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) Reset() {
	*x = PostUnitAndCompanyAndComponentUnitAndBusinessUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUnitAndCompanyAndComponentUnitAndBusinessUnit) ProtoMessage() {}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUnitAndCompanyAndComponentUnitAndBusinessUnit.ProtoReflect.Descriptor instead.
func (*PostUnitAndCompanyAndComponentUnitAndBusinessUnit) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{5}
}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) GetPostUnit() *PostUnit {
	if x != nil {
		return x.PostUnit
	}
	return nil
}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) GetComponentUnit() *ComponentUnit {
	if x != nil {
		return x.ComponentUnit
	}
	return nil
}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) GetBusinessUnit() *BusinessUnit {
	if x != nil {
		return x.BusinessUnit
	}
	return nil
}

type CompanyAndComponentUnitAndBusinessUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会社情報（グローバル）
	Company *Company `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	// 事業所/取引窓口（グローバル）
	ComponentUnits []*ComponentUnit `protobuf:"bytes,2,rep,name=component_units,json=componentUnits,proto3" json:"component_units,omitempty"`
	// 取引先情報（自社内）
	BusinessUnit *BusinessUnit `protobuf:"bytes,3,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`
}

func (x *CompanyAndComponentUnitAndBusinessUnit) Reset() {
	*x = CompanyAndComponentUnitAndBusinessUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyAndComponentUnitAndBusinessUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyAndComponentUnitAndBusinessUnit) ProtoMessage() {}

func (x *CompanyAndComponentUnitAndBusinessUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyAndComponentUnitAndBusinessUnit.ProtoReflect.Descriptor instead.
func (*CompanyAndComponentUnitAndBusinessUnit) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{6}
}

func (x *CompanyAndComponentUnitAndBusinessUnit) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CompanyAndComponentUnitAndBusinessUnit) GetComponentUnits() []*ComponentUnit {
	if x != nil {
		return x.ComponentUnits
	}
	return nil
}

func (x *CompanyAndComponentUnitAndBusinessUnit) GetBusinessUnit() *BusinessUnit {
	if x != nil {
		return x.BusinessUnit
	}
	return nil
}

type CompanyAndBusinessUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会社情報（グローバル）
	Company *Company `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	// 取引先情報（自社内）
	BusinessUnit *BusinessUnit `protobuf:"bytes,2,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`
}

func (x *CompanyAndBusinessUnit) Reset() {
	*x = CompanyAndBusinessUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyAndBusinessUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyAndBusinessUnit) ProtoMessage() {}

func (x *CompanyAndBusinessUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyAndBusinessUnit.ProtoReflect.Descriptor instead.
func (*CompanyAndBusinessUnit) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{7}
}

func (x *CompanyAndBusinessUnit) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CompanyAndBusinessUnit) GetBusinessUnit() *BusinessUnit {
	if x != nil {
		return x.BusinessUnit
	}
	return nil
}

// リスト全体
type BusinessUnitSkillTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkillItems []*BusinessUnitSkillItem `protobuf:"bytes,1,rep,name=skill_items,json=skillItems,proto3" json:"skill_items,omitempty"`
}

func (x *BusinessUnitSkillTree) Reset() {
	*x = BusinessUnitSkillTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitSkillTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitSkillTree) ProtoMessage() {}

func (x *BusinessUnitSkillTree) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitSkillTree.ProtoReflect.Descriptor instead.
func (*BusinessUnitSkillTree) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{8}
}

func (x *BusinessUnitSkillTree) GetSkillItems() []*BusinessUnitSkillItem {
	if x != nil {
		return x.SkillItems
	}
	return nil
}

// 技術要素(カテゴリor技術要素)
type BusinessUnitSkillItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	BusinessUnitSkillItemId string `protobuf:"bytes,1,opt,name=business_unit_skill_item_id,json=businessUnitSkillItemId,proto3" json:"business_unit_skill_item_id,omitempty"`
	// 名称
	// ja:日本語名
	// en:英語名
	DisplayNameLang map[string]string `protobuf:"bytes,2,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// さらに子のカテゴリがあれば持つ
	// なければ末端(チェックボックス)とみなす
	Children []*BusinessUnitSkillItem `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *BusinessUnitSkillItem) Reset() {
	*x = BusinessUnitSkillItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_content_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitSkillItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitSkillItem) ProtoMessage() {}

func (x *BusinessUnitSkillItem) ProtoReflect() protoreflect.Message {
	mi := &file_company_content_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitSkillItem.ProtoReflect.Descriptor instead.
func (*BusinessUnitSkillItem) Descriptor() ([]byte, []int) {
	return file_company_content_proto_rawDescGZIP(), []int{9}
}

func (x *BusinessUnitSkillItem) GetBusinessUnitSkillItemId() string {
	if x != nil {
		return x.BusinessUnitSkillItemId
	}
	return ""
}

func (x *BusinessUnitSkillItem) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *BusinessUnitSkillItem) GetChildren() []*BusinessUnitSkillItem {
	if x != nil {
		return x.Children
	}
	return nil
}

var File_company_content_proto protoreflect.FileDescriptor

var file_company_content_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc,
	0x03, 0x0a, 0x1d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x67, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x1d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x15,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x8e, 0x04,
	0x0a, 0x23, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x1a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x7a, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x99,
	0x03, 0x0a, 0x1a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a,
	0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x71, 0x0a,
	0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x7a, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x18, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x68, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x31, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x48, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x26, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x4d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x48, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x66, 0x0a,
	0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x3c, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x6d, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1c, 0x5a, 0x1a, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_content_proto_rawDescOnce sync.Once
	file_company_content_proto_rawDescData = file_company_content_proto_rawDesc
)

func file_company_content_proto_rawDescGZIP() []byte {
	file_company_content_proto_rawDescOnce.Do(func() {
		file_company_content_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_content_proto_rawDescData)
	})
	return file_company_content_proto_rawDescData
}

var file_company_content_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_company_content_proto_goTypes = []interface{}{
	(*BusinessUnitManagementContent)(nil),                     // 0: mtechnavi.api.company.BusinessUnitManagementContent
	(*BusinessUnitManagementFormatContent)(nil),               // 1: mtechnavi.api.company.BusinessUnitManagementFormatContent
	(*BusinessUnitContactContent)(nil),                        // 2: mtechnavi.api.company.BusinessUnitContactContent
	(*BusinessUnitScoreContent)(nil),                          // 3: mtechnavi.api.company.BusinessUnitScoreContent
	(*StaffAndComponentUnit)(nil),                             // 4: mtechnavi.api.company.StaffAndComponentUnit
	(*PostUnitAndCompanyAndComponentUnitAndBusinessUnit)(nil), // 5: mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit
	(*CompanyAndComponentUnitAndBusinessUnit)(nil),            // 6: mtechnavi.api.company.CompanyAndComponentUnitAndBusinessUnit
	(*CompanyAndBusinessUnit)(nil),                            // 7: mtechnavi.api.company.CompanyAndBusinessUnit
	(*BusinessUnitSkillTree)(nil),                             // 8: mtechnavi.api.company.BusinessUnitSkillTree
	(*BusinessUnitSkillItem)(nil),                             // 9: mtechnavi.api.company.BusinessUnitSkillItem
	nil,                                                       // 10: mtechnavi.api.company.BusinessUnitSkillItem.DisplayNameLangEntry
	(*BusinessUnitManagement)(nil),                            // 11: mtechnavi.api.company.BusinessUnitManagement
	(*protobuf.NameOption)(nil),                               // 12: sharelib.NameOption
	(*protobuf.UserReference)(nil),                            // 13: sharelib.UserReference
	(*BusinessUnitProfile)(nil),                               // 14: mtechnavi.api.company.BusinessUnitProfile
	(*CompanyProfile)(nil),                                    // 15: mtechnavi.api.company.CompanyProfile
	(*BusinessUnitContact)(nil),                               // 16: mtechnavi.api.company.BusinessUnitContact
	(*BusinessUnitContactAttribute)(nil),                      // 17: mtechnavi.api.company.BusinessUnitContactAttribute
	(*BusinessUnitContactHeader)(nil),                         // 18: mtechnavi.api.company.BusinessUnitContactHeader
	(*ItemValue)(nil),                                         // 19: mtechnavi.api.company.ItemValue
	(*BusinessUnitScoreAsset)(nil),                            // 20: mtechnavi.api.company.BusinessUnitScoreAsset
	(*Staff)(nil),                                             // 21: mtechnavi.api.company.Staff
	(*ComponentUnit)(nil),                                     // 22: mtechnavi.api.company.ComponentUnit
	(*PostUnit)(nil),                                          // 23: mtechnavi.api.company.PostUnit
	(*Company)(nil),                                           // 24: mtechnavi.api.company.Company
	(*BusinessUnit)(nil),                                      // 25: mtechnavi.api.company.BusinessUnit
}
var file_company_content_proto_depIdxs = []int32{
	11, // 0: mtechnavi.api.company.BusinessUnitManagementContent.business_unit_management:type_name -> mtechnavi.api.company.BusinessUnitManagement
	12, // 1: mtechnavi.api.company.BusinessUnitManagementContent.tenant_status:type_name -> sharelib.NameOption
	13, // 2: mtechnavi.api.company.BusinessUnitManagementContent.aggregated_notification_users:type_name -> sharelib.UserReference
	12, // 3: mtechnavi.api.company.BusinessUnitManagementContent.active_status:type_name -> sharelib.NameOption
	14, // 4: mtechnavi.api.company.BusinessUnitManagementContent.business_unit_profile:type_name -> mtechnavi.api.company.BusinessUnitProfile
	15, // 5: mtechnavi.api.company.BusinessUnitManagementContent.profile:type_name -> mtechnavi.api.company.CompanyProfile
	11, // 6: mtechnavi.api.company.BusinessUnitManagementFormatContent.business_unit_management:type_name -> mtechnavi.api.company.BusinessUnitManagement
	12, // 7: mtechnavi.api.company.BusinessUnitManagementFormatContent.tenant_status:type_name -> sharelib.NameOption
	14, // 8: mtechnavi.api.company.BusinessUnitManagementFormatContent.business_unit_profile:type_name -> mtechnavi.api.company.BusinessUnitProfile
	16, // 9: mtechnavi.api.company.BusinessUnitManagementFormatContent.business_unit_main_contact:type_name -> mtechnavi.api.company.BusinessUnitContact
	17, // 10: mtechnavi.api.company.BusinessUnitManagementFormatContent.business_unit_contact_attribute:type_name -> mtechnavi.api.company.BusinessUnitContactAttribute
	16, // 11: mtechnavi.api.company.BusinessUnitContactContent.business_unit_contact:type_name -> mtechnavi.api.company.BusinessUnitContact
	18, // 12: mtechnavi.api.company.BusinessUnitContactContent.business_unit_contact_header:type_name -> mtechnavi.api.company.BusinessUnitContactHeader
	17, // 13: mtechnavi.api.company.BusinessUnitContactContent.business_unit_contact_attribute:type_name -> mtechnavi.api.company.BusinessUnitContactAttribute
	12, // 14: mtechnavi.api.company.BusinessUnitContactContent.status:type_name -> sharelib.NameOption
	12, // 15: mtechnavi.api.company.BusinessUnitScoreContent.category:type_name -> sharelib.NameOption
	19, // 16: mtechnavi.api.company.BusinessUnitScoreContent.item_values:type_name -> mtechnavi.api.company.ItemValue
	20, // 17: mtechnavi.api.company.BusinessUnitScoreContent.business_unit_score_asset:type_name -> mtechnavi.api.company.BusinessUnitScoreAsset
	21, // 18: mtechnavi.api.company.StaffAndComponentUnit.staff:type_name -> mtechnavi.api.company.Staff
	22, // 19: mtechnavi.api.company.StaffAndComponentUnit.component_unit:type_name -> mtechnavi.api.company.ComponentUnit
	23, // 20: mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit.post_unit:type_name -> mtechnavi.api.company.PostUnit
	22, // 21: mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit.component_unit:type_name -> mtechnavi.api.company.ComponentUnit
	24, // 22: mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit.company:type_name -> mtechnavi.api.company.Company
	25, // 23: mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit.business_unit:type_name -> mtechnavi.api.company.BusinessUnit
	24, // 24: mtechnavi.api.company.CompanyAndComponentUnitAndBusinessUnit.company:type_name -> mtechnavi.api.company.Company
	22, // 25: mtechnavi.api.company.CompanyAndComponentUnitAndBusinessUnit.component_units:type_name -> mtechnavi.api.company.ComponentUnit
	25, // 26: mtechnavi.api.company.CompanyAndComponentUnitAndBusinessUnit.business_unit:type_name -> mtechnavi.api.company.BusinessUnit
	24, // 27: mtechnavi.api.company.CompanyAndBusinessUnit.company:type_name -> mtechnavi.api.company.Company
	25, // 28: mtechnavi.api.company.CompanyAndBusinessUnit.business_unit:type_name -> mtechnavi.api.company.BusinessUnit
	9,  // 29: mtechnavi.api.company.BusinessUnitSkillTree.skill_items:type_name -> mtechnavi.api.company.BusinessUnitSkillItem
	10, // 30: mtechnavi.api.company.BusinessUnitSkillItem.display_name_lang:type_name -> mtechnavi.api.company.BusinessUnitSkillItem.DisplayNameLangEntry
	9,  // 31: mtechnavi.api.company.BusinessUnitSkillItem.children:type_name -> mtechnavi.api.company.BusinessUnitSkillItem
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_company_content_proto_init() }
func file_company_content_proto_init() {
	if File_company_content_proto != nil {
		return
	}
	file_company_table_proto_init()
	file_company_datatype_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_company_content_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitManagementContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitManagementFormatContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitContactContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitScoreContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaffAndComponentUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostUnitAndCompanyAndComponentUnitAndBusinessUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyAndComponentUnitAndBusinessUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyAndBusinessUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitSkillTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_content_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitSkillItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_content_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_company_content_proto_goTypes,
		DependencyIndexes: file_company_content_proto_depIdxs,
		MessageInfos:      file_company_content_proto_msgTypes,
	}.Build()
	File_company_content_proto = out.File
	file_company_content_proto_rawDesc = nil
	file_company_content_proto_goTypes = nil
	file_company_content_proto_depIdxs = nil
}
