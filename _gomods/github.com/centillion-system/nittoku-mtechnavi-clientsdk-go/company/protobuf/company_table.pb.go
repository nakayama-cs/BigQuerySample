// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: company_table.proto

package protobuf

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 企業
type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Implementation Note: テナントIDと同一の値を用いる
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 企業名
	// ja:日本語名
	// ja-kana:かな名
	// en:英語名（今回は対応不要）
	DisplayNameLang map[string]string `protobuf:"bytes,2,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 法令情報
	CompanyLegalProperties *CompanyLegalProperties `protobuf:"bytes,3,opt,name=company_legal_properties,json=companyLegalProperties,proto3" json:"company_legal_properties,omitempty"`
	// 基本情報
	Profile *Profile `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	// outputonly 企業ステータス
	CompanyStatus *CompanyStatus `protobuf:"bytes,8,opt,name=company_status,json=companyStatus,proto3" json:"company_status,omitempty"`
	// タイムゾーン
	// TZ database name の形式で指定する
	// 登録・更新時に未指定のとき、デフォルト値として "Asia/Tokyo" が設定される。
	TimezoneName string `protobuf:"bytes,9,opt,name=timezone_name,json=timezoneName,proto3" json:"timezone_name,omitempty"`
	// 公開済み
	Published bool `protobuf:"varint,10,opt,name=published,proto3" json:"published,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{0}
}

func (x *Company) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Company) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *Company) GetCompanyLegalProperties() *CompanyLegalProperties {
	if x != nil {
		return x.CompanyLegalProperties
	}
	return nil
}

func (x *Company) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Company) GetCompanyStatus() *CompanyStatus {
	if x != nil {
		return x.CompanyStatus
	}
	return nil
}

func (x *Company) GetTimezoneName() string {
	if x != nil {
		return x.TimezoneName
	}
	return ""
}

func (x *Company) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

func (x *Company) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *Company) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Company) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 管理場所
// 事業所/窓口の場合はグローバル領域に公開情報をコピーする
type ComponentUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentUnitId string `protobuf:"bytes,1,opt,name=component_unit_id,json=componentUnitId,proto3" json:"component_unit_id,omitempty"`
	// 所属する会社ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 管理場所コード
	ComponentUnitCode string `protobuf:"bytes,3,opt,name=component_unit_code,json=componentUnitCode,proto3" json:"component_unit_code,omitempty"`
	// 管理場所名
	DisplayNameLang map[string]string `protobuf:"bytes,4,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 連絡先電話番号（ハイフン付き）
	PhoneNumber string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// 住所
	Address *protobuf.Address `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// 場所情報
	PlaceProperties *ComponentUnit_PlaceProperties `protobuf:"bytes,23,opt,name=place_properties,json=placeProperties,proto3" json:"place_properties,omitempty"`
	// 管理場所種別（取引窓口/組織/納入先/事業所）
	// 取引窓口
	// 名称マスタにおける種別 A0000002 (管理場所種別) を参照
	// 取引窓口の場合、コード 1 (取引窓口)となる
	PostUnit           *protobuf.NameOption `protobuf:"bytes,9,opt,name=post_unit,json=postUnit,proto3" json:"post_unit,omitempty"`
	PostUnitProperties *PostUnitProperties  `protobuf:"bytes,10,opt,name=post_unit_properties,json=postUnitProperties,proto3" json:"post_unit_properties,omitempty"`
	// 組織
	// 名称マスタにおける種別 A0000002 (管理場所種別) を参照
	// 組織の場合、コード 2 (組織)となる
	OrganizationUnit           *protobuf.NameOption        `protobuf:"bytes,11,opt,name=organization_unit,json=organizationUnit,proto3" json:"organization_unit,omitempty"`
	OrganizationUnitProperties *OrganizationUnitProperties `protobuf:"bytes,12,opt,name=organization_unit_properties,json=organizationUnitProperties,proto3" json:"organization_unit_properties,omitempty"`
	// 納入先
	// 名称マスタにおける種別 A0000002 (管理場所種別) を参照
	// 納入先の場合、コード 3 (納入先)となる
	DeliveryPoint           *protobuf.NameOption     `protobuf:"bytes,13,opt,name=delivery_point,json=deliveryPoint,proto3" json:"delivery_point,omitempty"`
	DeliveryPointProperties *DeliveryPointProperties `protobuf:"bytes,14,opt,name=delivery_point_properties,json=deliveryPointProperties,proto3" json:"delivery_point_properties,omitempty"`
	// 事業所
	// 名称マスタにおける種別 A0000002 (管理場所種別) を参照
	// 事業所の場合、コード 4 (事業所)となる
	Office           *protobuf.NameOption `protobuf:"bytes,15,opt,name=office,proto3" json:"office,omitempty"`
	OfficeProperties *OfficeProperties    `protobuf:"bytes,16,opt,name=office_properties,json=officeProperties,proto3" json:"office_properties,omitempty"`
	// 連携項目
	LinkageItem []string `protobuf:"bytes,17,rep,name=linkage_item,json=linkageItem,proto3" json:"linkage_item,omitempty"`
	// 使用
	//
	//	名称マスタにおける種別 A0000001 (使用) を参照
	Usable *protobuf.NameOption `protobuf:"bytes,18,opt,name=usable,proto3" json:"usable,omitempty"`
	// readonly タグ（テナント単位で共有）
	Tags []string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,20,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,22,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ComponentUnit) Reset() {
	*x = ComponentUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentUnit) ProtoMessage() {}

func (x *ComponentUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentUnit.ProtoReflect.Descriptor instead.
func (*ComponentUnit) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{1}
}

func (x *ComponentUnit) GetComponentUnitId() string {
	if x != nil {
		return x.ComponentUnitId
	}
	return ""
}

func (x *ComponentUnit) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ComponentUnit) GetComponentUnitCode() string {
	if x != nil {
		return x.ComponentUnitCode
	}
	return ""
}

func (x *ComponentUnit) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *ComponentUnit) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ComponentUnit) GetAddress() *protobuf.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ComponentUnit) GetPlaceProperties() *ComponentUnit_PlaceProperties {
	if x != nil {
		return x.PlaceProperties
	}
	return nil
}

func (x *ComponentUnit) GetPostUnit() *protobuf.NameOption {
	if x != nil {
		return x.PostUnit
	}
	return nil
}

func (x *ComponentUnit) GetPostUnitProperties() *PostUnitProperties {
	if x != nil {
		return x.PostUnitProperties
	}
	return nil
}

func (x *ComponentUnit) GetOrganizationUnit() *protobuf.NameOption {
	if x != nil {
		return x.OrganizationUnit
	}
	return nil
}

func (x *ComponentUnit) GetOrganizationUnitProperties() *OrganizationUnitProperties {
	if x != nil {
		return x.OrganizationUnitProperties
	}
	return nil
}

func (x *ComponentUnit) GetDeliveryPoint() *protobuf.NameOption {
	if x != nil {
		return x.DeliveryPoint
	}
	return nil
}

func (x *ComponentUnit) GetDeliveryPointProperties() *DeliveryPointProperties {
	if x != nil {
		return x.DeliveryPointProperties
	}
	return nil
}

func (x *ComponentUnit) GetOffice() *protobuf.NameOption {
	if x != nil {
		return x.Office
	}
	return nil
}

func (x *ComponentUnit) GetOfficeProperties() *OfficeProperties {
	if x != nil {
		return x.OfficeProperties
	}
	return nil
}

func (x *ComponentUnit) GetLinkageItem() []string {
	if x != nil {
		return x.LinkageItem
	}
	return nil
}

func (x *ComponentUnit) GetUsable() *protobuf.NameOption {
	if x != nil {
		return x.Usable
	}
	return nil
}

func (x *ComponentUnit) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ComponentUnit) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *ComponentUnit) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ComponentUnit) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 担当者
type Staff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaffId string `protobuf:"bytes,1,opt,name=staff_id,json=staffId,proto3" json:"staff_id,omitempty"`
	// 担当者コード
	StaffCode string `protobuf:"bytes,2,opt,name=staff_code,json=staffCode,proto3" json:"staff_code,omitempty"`
	// 担当者名
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 代表所属先
	ComponentUnitId string `protobuf:"bytes,4,opt,name=component_unit_id,json=componentUnitId,proto3" json:"component_unit_id,omitempty"`
	// 連絡先電話番号（ハイフン付き）
	PhoneNumber string `protobuf:"bytes,12,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// メールアドレス
	ContactEmail string `protobuf:"bytes,5,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	// 紐付アカウント
	// 空だったらcontact_emailで補完する
	Email string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	// 使用
	//
	//	名称マスタにおける種別 A0000001 (使用) を参照
	Usable *protobuf.NameOption `protobuf:"bytes,7,opt,name=usable,proto3" json:"usable,omitempty"`
	// readonly タグ（テナント単位で共有）
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Staff) Reset() {
	*x = Staff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Staff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staff) ProtoMessage() {}

func (x *Staff) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staff.ProtoReflect.Descriptor instead.
func (*Staff) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{2}
}

func (x *Staff) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

func (x *Staff) GetStaffCode() string {
	if x != nil {
		return x.StaffCode
	}
	return ""
}

func (x *Staff) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Staff) GetComponentUnitId() string {
	if x != nil {
		return x.ComponentUnitId
	}
	return ""
}

func (x *Staff) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Staff) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Staff) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Staff) GetUsable() *protobuf.NameOption {
	if x != nil {
		return x.Usable
	}
	return nil
}

func (x *Staff) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Staff) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *Staff) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Staff) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 取引先
// 別テナントで、取引先（企業/窓口）にマークをつける用
// 申請テナントは申請時、承認テナントは承認時にCreate
type BusinessUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitId string `protobuf:"bytes,1,opt,name=business_unit_id,json=businessUnitId,proto3" json:"business_unit_id,omitempty"`
	// マークつける対象の会社ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 社内管理用コード
	BusinessUnitCode string `protobuf:"bytes,3,opt,name=business_unit_code,json=businessUnitCode,proto3" json:"business_unit_code,omitempty"`
	// 社内管理用名称
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 取引先分類
	BusinessUnitCategory string `protobuf:"bytes,5,opt,name=business_unit_category,json=businessUnitCategory,proto3" json:"business_unit_category,omitempty"`
	// 社内管理用備考
	Remarks string `protobuf:"bytes,6,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// 取引窓口
	PostUnits []*PostUnit `protobuf:"bytes,7,rep,name=post_units,json=postUnits,proto3" json:"post_units,omitempty"`
	// readonly タグ（テナント単位で共有）
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// outputonly 取引先種別
	// 名称マスタにおける種別 A0000004 (取引先種別) を参照
	// post_unitsの各要素が持つpost_unit_typesを、重複を排除し、総和したもの
	// NameOption.codeの辞書順にソートされている
	AggregatedPostUnitTypes []*protobuf.NameOption `protobuf:"bytes,12,rep,name=aggregated_post_unit_types,json=aggregatedPostUnitTypes,proto3" json:"aggregated_post_unit_types,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *BusinessUnit) Reset() {
	*x = BusinessUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnit) ProtoMessage() {}

func (x *BusinessUnit) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnit.ProtoReflect.Descriptor instead.
func (*BusinessUnit) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{3}
}

func (x *BusinessUnit) GetBusinessUnitId() string {
	if x != nil {
		return x.BusinessUnitId
	}
	return ""
}

func (x *BusinessUnit) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnit) GetBusinessUnitCode() string {
	if x != nil {
		return x.BusinessUnitCode
	}
	return ""
}

func (x *BusinessUnit) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnit) GetBusinessUnitCategory() string {
	if x != nil {
		return x.BusinessUnitCategory
	}
	return ""
}

func (x *BusinessUnit) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *BusinessUnit) GetPostUnits() []*PostUnit {
	if x != nil {
		return x.PostUnits
	}
	return nil
}

func (x *BusinessUnit) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *BusinessUnit) GetAggregatedPostUnitTypes() []*protobuf.NameOption {
	if x != nil {
		return x.AggregatedPostUnitTypes
	}
	return nil
}

func (x *BusinessUnit) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *BusinessUnit) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnit) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 取引先登録申請用のデータ
// certification
type BusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Implementation Note:
	//
	//	company_id（自社） + company_id(取引先企業ID) と同じ粒度
	BusinessUnitRequestId string `protobuf:"bytes,1,opt,name=business_unit_request_id,json=businessUnitRequestId,proto3" json:"business_unit_request_id,omitempty"`
	// 申請対象となる会社ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 申請を行った会社ID
	// readonly 申請元企業IDの埋め込み
	SourceCompanyId string `protobuf:"bytes,3,opt,name=source_company_id,json=sourceCompanyId,proto3" json:"source_company_id,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *BusinessUnitRequest) Reset() {
	*x = BusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitRequest) ProtoMessage() {}

func (x *BusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*BusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{4}
}

func (x *BusinessUnitRequest) GetBusinessUnitRequestId() string {
	if x != nil {
		return x.BusinessUnitRequestId
	}
	return ""
}

func (x *BusinessUnitRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitRequest) GetSourceCompanyId() string {
	if x != nil {
		return x.SourceCompanyId
	}
	return ""
}

func (x *BusinessUnitRequest) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *BusinessUnitRequest) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 取引先登録申請結果用のデータ
type BusinessUnitRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Implementation Note:
	//
	//	company_id（自社） + company_id(取引先企業ID) と同じ粒度
	//	business_unit_request_id と同じ粒度
	BusinessUnitRequestResultId string `protobuf:"bytes,1,opt,name=business_unit_request_result_id,json=businessUnitRequestResultId,proto3" json:"business_unit_request_result_id,omitempty"`
	// readonly 申請情報の埋め込み
	// BusinessUnitRequestResultをCreateした時の申請情報
	BusinessUnitRequest *BusinessUnitRequest `protobuf:"bytes,2,opt,name=business_unit_request,json=businessUnitRequest,proto3" json:"business_unit_request,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,3,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *BusinessUnitRequestResult) Reset() {
	*x = BusinessUnitRequestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitRequestResult) ProtoMessage() {}

func (x *BusinessUnitRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitRequestResult.ProtoReflect.Descriptor instead.
func (*BusinessUnitRequestResult) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{5}
}

func (x *BusinessUnitRequestResult) GetBusinessUnitRequestResultId() string {
	if x != nil {
		return x.BusinessUnitRequestResultId
	}
	return ""
}

func (x *BusinessUnitRequestResult) GetBusinessUnitRequest() *BusinessUnitRequest {
	if x != nil {
		return x.BusinessUnitRequest
	}
	return nil
}

func (x *BusinessUnitRequestResult) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *BusinessUnitRequestResult) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitRequestResult) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 取引先管理
//
// Implementation Note::
//
//	公開不可の自テナント管理用マスタ
//
// 　　取引先管理内のデータをShareする場合は切り出して管理することとする
// 　　他テナントからShareされてきた情報は承認をもって書き戻しする想定
type BusinessUnitManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,12,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	// readonly 取引先会社ID
	//
	// Implementation Note::
	//
	//	紐付け処理で更新される取引先のテナントID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// readonly テナント紐付け情報
	//
	// Implementation Note::
	//
	//	テナント紐付け時に更新（手動 / 自動）
	TenantLinkProcess *Process `protobuf:"bytes,13,opt,name=tenant_link_process,json=tenantLinkProcess,proto3" json:"tenant_link_process,omitempty"`
	// readonly テナント招待情報
	//
	// Implementation Note::
	//
	//	テナント招待メール送信時に更新
	TenantInviteProcess *Process `protobuf:"bytes,14,opt,name=tenant_invite_process,json=tenantInviteProcess,proto3" json:"tenant_invite_process,omitempty"`
	// readonly 取引先コード
	//
	// Implementation Note::
	//
	//	未入力可能、入力後の編集不可
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// 取引先名
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 取引先担当者
	MainContact []*protobuf.UserReference `protobuf:"bytes,5,rep,name=main_contact,json=mainContact,proto3" json:"main_contact,omitempty"`
	// 取引先アシスタント
	MainContactAssistant []*protobuf.UserReference `protobuf:"bytes,6,rep,name=main_contact_assistant,json=mainContactAssistant,proto3" json:"main_contact_assistant,omitempty"`
	// 自社担当者
	Staff []*protobuf.UserReference `protobuf:"bytes,7,rep,name=staff,proto3" json:"staff,omitempty"`
	// 自社アシスタント
	StaffAssistant []*protobuf.UserReference `protobuf:"bytes,8,rep,name=staff_assistant,json=staffAssistant,proto3" json:"staff_assistant,omitempty"`
	// 基本情報
	Profile *CompanyProfile `protobuf:"bytes,15,opt,name=profile,proto3" json:"profile,omitempty"`
	// 自社管理情報
	ItemValues []*ItemValue `protobuf:"bytes,16,rep,name=item_values,json=itemValues,proto3" json:"item_values,omitempty"`
	// readonly 取引区分
	// 名称マスタ A4010003 (取引区分ステータス)
	Status *protobuf.NameOption `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// テナント招待通知先
	Invitees  []*protobuf.UserReference `protobuf:"bytes,18,rep,name=invitees,proto3" json:"invitees,omitempty"`
	DeletedAt int64                     `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64                     `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64                     `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *BusinessUnitManagement) Reset() {
	*x = BusinessUnitManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitManagement) ProtoMessage() {}

func (x *BusinessUnitManagement) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitManagement.ProtoReflect.Descriptor instead.
func (*BusinessUnitManagement) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{6}
}

func (x *BusinessUnitManagement) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *BusinessUnitManagement) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *BusinessUnitManagement) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitManagement) GetTenantLinkProcess() *Process {
	if x != nil {
		return x.TenantLinkProcess
	}
	return nil
}

func (x *BusinessUnitManagement) GetTenantInviteProcess() *Process {
	if x != nil {
		return x.TenantInviteProcess
	}
	return nil
}

func (x *BusinessUnitManagement) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BusinessUnitManagement) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitManagement) GetMainContact() []*protobuf.UserReference {
	if x != nil {
		return x.MainContact
	}
	return nil
}

func (x *BusinessUnitManagement) GetMainContactAssistant() []*protobuf.UserReference {
	if x != nil {
		return x.MainContactAssistant
	}
	return nil
}

func (x *BusinessUnitManagement) GetStaff() []*protobuf.UserReference {
	if x != nil {
		return x.Staff
	}
	return nil
}

func (x *BusinessUnitManagement) GetStaffAssistant() []*protobuf.UserReference {
	if x != nil {
		return x.StaffAssistant
	}
	return nil
}

func (x *BusinessUnitManagement) GetProfile() *CompanyProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *BusinessUnitManagement) GetItemValues() []*ItemValue {
	if x != nil {
		return x.ItemValues
	}
	return nil
}

func (x *BusinessUnitManagement) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BusinessUnitManagement) GetInvitees() []*protobuf.UserReference {
	if x != nil {
		return x.Invitees
	}
	return nil
}

func (x *BusinessUnitManagement) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *BusinessUnitManagement) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitManagement) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 自社企業（基本情報）マスタ
type BusinessUnitProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）ID
	BusinessUnitProfileId string `protobuf:"bytes,1,opt,name=business_unit_profile_id,json=businessUnitProfileId,proto3" json:"business_unit_profile_id,omitempty"`
	// 自社企業ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,9,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	// 基本情報
	Profile *CompanyProfile `protobuf:"bytes,3,opt,name=profile,proto3" json:"profile,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,4,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitProfile) Reset() {
	*x = BusinessUnitProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitProfile) ProtoMessage() {}

func (x *BusinessUnitProfile) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitProfile.ProtoReflect.Descriptor instead.
func (*BusinessUnitProfile) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{7}
}

func (x *BusinessUnitProfile) GetBusinessUnitProfileId() string {
	if x != nil {
		return x.BusinessUnitProfileId
	}
	return ""
}

func (x *BusinessUnitProfile) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitProfile) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *BusinessUnitProfile) GetProfile() *CompanyProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *BusinessUnitProfile) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitProfile) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitProfile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitProfile) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitProfile) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 自社企業（決算）マスタ
type BusinessUnitFinancial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（決算）ID
	BusinessUnitFinancialId string `protobuf:"bytes,1,opt,name=business_unit_financial_id,json=businessUnitFinancialId,proto3" json:"business_unit_financial_id,omitempty"`
	// 自社企業ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 開始年月
	PeriodStartDt *protobuf.Datetime `protobuf:"bytes,3,opt,name=period_start_dt,json=periodStartDt,proto3" json:"period_start_dt,omitempty"`
	// 終了年月
	PeriodEndDt *protobuf.Datetime `protobuf:"bytes,4,opt,name=period_end_dt,json=periodEndDt,proto3" json:"period_end_dt,omitempty"`
	// 売上
	NetSales *protobuf.MonetaryAmount `protobuf:"bytes,5,opt,name=net_sales,json=netSales,proto3" json:"net_sales,omitempty"`
	// 営業利益
	OperatingProfit *protobuf.MonetaryAmount `protobuf:"bytes,6,opt,name=operating_profit,json=operatingProfit,proto3" json:"operating_profit,omitempty"`
	// 経常利益
	OrdinaryIncome *protobuf.MonetaryAmount `protobuf:"bytes,7,opt,name=ordinary_income,json=ordinaryIncome,proto3" json:"ordinary_income,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,8,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,9,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitFinancial) Reset() {
	*x = BusinessUnitFinancial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitFinancial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitFinancial) ProtoMessage() {}

func (x *BusinessUnitFinancial) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitFinancial.ProtoReflect.Descriptor instead.
func (*BusinessUnitFinancial) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{8}
}

func (x *BusinessUnitFinancial) GetBusinessUnitFinancialId() string {
	if x != nil {
		return x.BusinessUnitFinancialId
	}
	return ""
}

func (x *BusinessUnitFinancial) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitFinancial) GetPeriodStartDt() *protobuf.Datetime {
	if x != nil {
		return x.PeriodStartDt
	}
	return nil
}

func (x *BusinessUnitFinancial) GetPeriodEndDt() *protobuf.Datetime {
	if x != nil {
		return x.PeriodEndDt
	}
	return nil
}

func (x *BusinessUnitFinancial) GetNetSales() *protobuf.MonetaryAmount {
	if x != nil {
		return x.NetSales
	}
	return nil
}

func (x *BusinessUnitFinancial) GetOperatingProfit() *protobuf.MonetaryAmount {
	if x != nil {
		return x.OperatingProfit
	}
	return nil
}

func (x *BusinessUnitFinancial) GetOrdinaryIncome() *protobuf.MonetaryAmount {
	if x != nil {
		return x.OrdinaryIncome
	}
	return nil
}

func (x *BusinessUnitFinancial) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitFinancial) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitFinancial) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitFinancial) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitFinancial) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 自社企業（拠点）マスタ
type BusinessUnitBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（拠点）ID
	BusinessUnitBranchId string `protobuf:"bytes,1,opt,name=business_unit_branch_id,json=businessUnitBranchId,proto3" json:"business_unit_branch_id,omitempty"`
	// 自社企業ID	company_id
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 拠点名
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 住所情報
	Address *Address `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// 電話番号
	PhoneNumber string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// FAX
	FaxNumber string `protobuf:"bytes,6,opt,name=fax_number,json=faxNumber,proto3" json:"fax_number,omitempty"`
	// 事業内容 / 製造内容
	Overview string `protobuf:"bytes,7,opt,name=overview,proto3" json:"overview,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,8,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,9,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitBranch) Reset() {
	*x = BusinessUnitBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitBranch) ProtoMessage() {}

func (x *BusinessUnitBranch) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitBranch.ProtoReflect.Descriptor instead.
func (*BusinessUnitBranch) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{9}
}

func (x *BusinessUnitBranch) GetBusinessUnitBranchId() string {
	if x != nil {
		return x.BusinessUnitBranchId
	}
	return ""
}

func (x *BusinessUnitBranch) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitBranch) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitBranch) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BusinessUnitBranch) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *BusinessUnitBranch) GetFaxNumber() string {
	if x != nil {
		return x.FaxNumber
	}
	return ""
}

func (x *BusinessUnitBranch) GetOverview() string {
	if x != nil {
		return x.Overview
	}
	return ""
}

func (x *BusinessUnitBranch) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitBranch) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitBranch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitBranch) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitBranch) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 自社企業（設備）マスタ
type BusinessUnitFacilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（設備）ID
	BusinessUnitFacilitiesId string `protobuf:"bytes,1,opt,name=business_unit_facilities_id,json=businessUnitFacilitiesId,proto3" json:"business_unit_facilities_id,omitempty"`
	// 自社企業ID	company_id
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 設置拠点
	BusinessUnitBranchId string `protobuf:"bytes,3,opt,name=business_unit_branch_id,json=businessUnitBranchId,proto3" json:"business_unit_branch_id,omitempty"`
	// 設備分類
	// 名称マスタ A4000003 (設備)
	Categorys []*protobuf.NameOption `protobuf:"bytes,22,rep,name=categorys,proto3" json:"categorys,omitempty"`
	// メーカー
	Manufacture string `protobuf:"bytes,5,opt,name=manufacture,proto3" json:"manufacture,omitempty"`
	// 型式
	ModelNumber string `protobuf:"bytes,6,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	// 台数
	AssetsAmount int64 `protobuf:"varint,7,opt,name=assets_amount,json=assetsAmount,proto3" json:"assets_amount,omitempty"`
	// 精度
	// 名称マスタ A4000004 (精度)
	Accuracy *protobuf.NameOption `protobuf:"bytes,8,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	// 加工トン数
	ProcessableTon int64 `protobuf:"varint,9,opt,name=processable_ton,json=processableTon,proto3" json:"processable_ton,omitempty"`
	// サイズX
	SizeX int64 `protobuf:"varint,10,opt,name=size_x,json=sizeX,proto3" json:"size_x,omitempty"`
	// サイズY
	SizeY int64 `protobuf:"varint,11,opt,name=size_y,json=sizeY,proto3" json:"size_y,omitempty"`
	// サイズZ
	SizeZ int64 `protobuf:"varint,12,opt,name=size_z,json=sizeZ,proto3" json:"size_z,omitempty"`
	// サイズT
	SizeT int64 `protobuf:"varint,13,opt,name=size_t,json=sizeT,proto3" json:"size_t,omitempty"`
	// サイズφ
	Diameter int64 `protobuf:"varint,14,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// 加工可能な材料
	// 名称マスタ A4000005 (加工可能な材料)
	ProcessableMaterial *protobuf.NameOption `protobuf:"bytes,15,opt,name=processable_material,json=processableMaterial,proto3" json:"processable_material,omitempty"`
	// 備考
	Remarks string `protobuf:"bytes,16,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,17,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,18,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,21,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitFacilities) Reset() {
	*x = BusinessUnitFacilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitFacilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitFacilities) ProtoMessage() {}

func (x *BusinessUnitFacilities) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitFacilities.ProtoReflect.Descriptor instead.
func (*BusinessUnitFacilities) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{10}
}

func (x *BusinessUnitFacilities) GetBusinessUnitFacilitiesId() string {
	if x != nil {
		return x.BusinessUnitFacilitiesId
	}
	return ""
}

func (x *BusinessUnitFacilities) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitFacilities) GetBusinessUnitBranchId() string {
	if x != nil {
		return x.BusinessUnitBranchId
	}
	return ""
}

func (x *BusinessUnitFacilities) GetCategorys() []*protobuf.NameOption {
	if x != nil {
		return x.Categorys
	}
	return nil
}

func (x *BusinessUnitFacilities) GetManufacture() string {
	if x != nil {
		return x.Manufacture
	}
	return ""
}

func (x *BusinessUnitFacilities) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

func (x *BusinessUnitFacilities) GetAssetsAmount() int64 {
	if x != nil {
		return x.AssetsAmount
	}
	return 0
}

func (x *BusinessUnitFacilities) GetAccuracy() *protobuf.NameOption {
	if x != nil {
		return x.Accuracy
	}
	return nil
}

func (x *BusinessUnitFacilities) GetProcessableTon() int64 {
	if x != nil {
		return x.ProcessableTon
	}
	return 0
}

func (x *BusinessUnitFacilities) GetSizeX() int64 {
	if x != nil {
		return x.SizeX
	}
	return 0
}

func (x *BusinessUnitFacilities) GetSizeY() int64 {
	if x != nil {
		return x.SizeY
	}
	return 0
}

func (x *BusinessUnitFacilities) GetSizeZ() int64 {
	if x != nil {
		return x.SizeZ
	}
	return 0
}

func (x *BusinessUnitFacilities) GetSizeT() int64 {
	if x != nil {
		return x.SizeT
	}
	return 0
}

func (x *BusinessUnitFacilities) GetDiameter() int64 {
	if x != nil {
		return x.Diameter
	}
	return 0
}

func (x *BusinessUnitFacilities) GetProcessableMaterial() *protobuf.NameOption {
	if x != nil {
		return x.ProcessableMaterial
	}
	return nil
}

func (x *BusinessUnitFacilities) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *BusinessUnitFacilities) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitFacilities) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitFacilities) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitFacilities) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitFacilities) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 自社企業（認証）マスタ
type BusinessUnitCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（認証）ID
	BusinessUnitCertificateId string `protobuf:"bytes,1,opt,name=business_unit_certificate_id,json=businessUnitCertificateId,proto3" json:"business_unit_certificate_id,omitempty"`
	// 自社企業ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 認証
	// 名称マスタ A4000002 (認証)
	Certificate *protobuf.NameOption `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// 取得済み
	Obtained bool `protobuf:"varint,4,opt,name=obtained,proto3" json:"obtained,omitempty"`
	// 認証名（選択肢に存在しない場合のみ）
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 認証番号
	CertificateNumber string `protobuf:"bytes,6,opt,name=certificate_number,json=certificateNumber,proto3" json:"certificate_number,omitempty"`
	// 証明書ファイル添付
	Attachment *protobuf.Attachment `protobuf:"bytes,7,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// 取得年月日
	ObtainedDt *protobuf.Datetime `protobuf:"bytes,8,opt,name=obtained_dt,json=obtainedDt,proto3" json:"obtained_dt,omitempty"`
	// 有効期限
	ExpirationDt *protobuf.Datetime `protobuf:"bytes,9,opt,name=expiration_dt,json=expirationDt,proto3" json:"expiration_dt,omitempty"`
	// 取得予定有無
	ObtainPlan bool `protobuf:"varint,10,opt,name=obtain_plan,json=obtainPlan,proto3" json:"obtain_plan,omitempty"`
	// 取得予定日
	ObtainPlanDt *protobuf.Datetime `protobuf:"bytes,11,opt,name=obtain_plan_dt,json=obtainPlanDt,proto3" json:"obtain_plan_dt,omitempty"`
	// 理由
	Comment string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
	// 適用範囲（対象製品）
	ScopeProduct string `protobuf:"bytes,13,opt,name=scope_product,json=scopeProduct,proto3" json:"scope_product,omitempty"`
	// 適用範囲（対象拠点 / 対象設備）
	ScopeBranch string `protobuf:"bytes,14,opt,name=scope_branch,json=scopeBranch,proto3" json:"scope_branch,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,15,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,16,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,19,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitCertificate) Reset() {
	*x = BusinessUnitCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitCertificate) ProtoMessage() {}

func (x *BusinessUnitCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitCertificate.ProtoReflect.Descriptor instead.
func (*BusinessUnitCertificate) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{11}
}

func (x *BusinessUnitCertificate) GetBusinessUnitCertificateId() string {
	if x != nil {
		return x.BusinessUnitCertificateId
	}
	return ""
}

func (x *BusinessUnitCertificate) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitCertificate) GetCertificate() *protobuf.NameOption {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *BusinessUnitCertificate) GetObtained() bool {
	if x != nil {
		return x.Obtained
	}
	return false
}

func (x *BusinessUnitCertificate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitCertificate) GetCertificateNumber() string {
	if x != nil {
		return x.CertificateNumber
	}
	return ""
}

func (x *BusinessUnitCertificate) GetAttachment() *protobuf.Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *BusinessUnitCertificate) GetObtainedDt() *protobuf.Datetime {
	if x != nil {
		return x.ObtainedDt
	}
	return nil
}

func (x *BusinessUnitCertificate) GetExpirationDt() *protobuf.Datetime {
	if x != nil {
		return x.ExpirationDt
	}
	return nil
}

func (x *BusinessUnitCertificate) GetObtainPlan() bool {
	if x != nil {
		return x.ObtainPlan
	}
	return false
}

func (x *BusinessUnitCertificate) GetObtainPlanDt() *protobuf.Datetime {
	if x != nil {
		return x.ObtainPlanDt
	}
	return nil
}

func (x *BusinessUnitCertificate) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BusinessUnitCertificate) GetScopeProduct() string {
	if x != nil {
		return x.ScopeProduct
	}
	return ""
}

func (x *BusinessUnitCertificate) GetScopeBranch() string {
	if x != nil {
		return x.ScopeBranch
	}
	return ""
}

func (x *BusinessUnitCertificate) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitCertificate) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitCertificate) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitCertificate) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitCertificate) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 自社企業（得意分野）マスタ
type BusinessUnitStrength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（得意分野）ID
	BusinessUnitStrengthId string `protobuf:"bytes,1,opt,name=business_unit_strength_id,json=businessUnitStrengthId,proto3" json:"business_unit_strength_id,omitempty"`
	// 自社企業ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 強み分類
	// 名称マスタ A4000001 (自社強み)
	Category *protobuf.NameOption `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	// 内容
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// 関連情報
	LinkProperties *BusinessUnitStrength_LinkProperties `protobuf:"bytes,5,opt,name=link_properties,json=linkProperties,proto3" json:"link_properties,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,6,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,7,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitStrength) Reset() {
	*x = BusinessUnitStrength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitStrength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitStrength) ProtoMessage() {}

func (x *BusinessUnitStrength) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitStrength.ProtoReflect.Descriptor instead.
func (*BusinessUnitStrength) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{12}
}

func (x *BusinessUnitStrength) GetBusinessUnitStrengthId() string {
	if x != nil {
		return x.BusinessUnitStrengthId
	}
	return ""
}

func (x *BusinessUnitStrength) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitStrength) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *BusinessUnitStrength) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BusinessUnitStrength) GetLinkProperties() *BusinessUnitStrength_LinkProperties {
	if x != nil {
		return x.LinkProperties
	}
	return nil
}

func (x *BusinessUnitStrength) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitStrength) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitStrength) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitStrength) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitStrength) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 自社企業（技術情報）マスタ
type BusinessUnitSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（技術情報）ID
	BusinessUnitSkillId string `protobuf:"bytes,1,opt,name=business_unit_skill_id,json=businessUnitSkillId,proto3" json:"business_unit_skill_id,omitempty"`
	// 自社企業ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 技術情報
	BusinessUnitSkillItemIds []string `protobuf:"bytes,3,rep,name=business_unit_skill_item_ids,json=businessUnitSkillItemIds,proto3" json:"business_unit_skill_item_ids,omitempty"`
	// その他技術情報
	OtherSkill string `protobuf:"bytes,9,opt,name=other_skill,json=otherSkill,proto3" json:"other_skill,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,4,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitSkill) Reset() {
	*x = BusinessUnitSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitSkill) ProtoMessage() {}

func (x *BusinessUnitSkill) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitSkill.ProtoReflect.Descriptor instead.
func (*BusinessUnitSkill) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{13}
}

func (x *BusinessUnitSkill) GetBusinessUnitSkillId() string {
	if x != nil {
		return x.BusinessUnitSkillId
	}
	return ""
}

func (x *BusinessUnitSkill) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitSkill) GetBusinessUnitSkillItemIds() []string {
	if x != nil {
		return x.BusinessUnitSkillItemIds
	}
	return nil
}

func (x *BusinessUnitSkill) GetOtherSkill() string {
	if x != nil {
		return x.OtherSkill
	}
	return ""
}

func (x *BusinessUnitSkill) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitSkill) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitSkill) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitSkill) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitSkill) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 取引先管理（連絡先）依頼データ
type BusinessUnitContactHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）依頼ID
	BusinessUnitContactHeaderId string `protobuf:"bytes,1,opt,name=business_unit_contact_header_id,json=businessUnitContactHeaderId,proto3" json:"business_unit_contact_header_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// readonly 企業ID
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 連絡先名
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 依頼対象（書類送付先）
	DocumentRecipientAddress bool `protobuf:"varint,5,opt,name=document_recipient_address,json=documentRecipientAddress,proto3" json:"document_recipient_address,omitempty"`
	// 依頼対象（通知先アカウント）
	NotificationUser bool `protobuf:"varint,6,opt,name=notification_user,json=notificationUser,proto3" json:"notification_user,omitempty"`
	// readonly 依頼情報
	RequestProcess *Process `protobuf:"bytes,7,opt,name=request_process,json=requestProcess,proto3" json:"request_process,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,8,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitContactHeader) Reset() {
	*x = BusinessUnitContactHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitContactHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitContactHeader) ProtoMessage() {}

func (x *BusinessUnitContactHeader) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitContactHeader.ProtoReflect.Descriptor instead.
func (*BusinessUnitContactHeader) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{14}
}

func (x *BusinessUnitContactHeader) GetBusinessUnitContactHeaderId() string {
	if x != nil {
		return x.BusinessUnitContactHeaderId
	}
	return ""
}

func (x *BusinessUnitContactHeader) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *BusinessUnitContactHeader) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitContactHeader) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitContactHeader) GetDocumentRecipientAddress() bool {
	if x != nil {
		return x.DocumentRecipientAddress
	}
	return false
}

func (x *BusinessUnitContactHeader) GetNotificationUser() bool {
	if x != nil {
		return x.NotificationUser
	}
	return false
}

func (x *BusinessUnitContactHeader) GetRequestProcess() *Process {
	if x != nil {
		return x.RequestProcess
	}
	return nil
}

func (x *BusinessUnitContactHeader) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitContactHeader) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitContactHeader) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitContactHeader) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 取引先管理（連絡先）マスタ
type BusinessUnitContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）ID
	BusinessUnitContactId string `protobuf:"bytes,1,opt,name=business_unit_contact_id,json=businessUnitContactId,proto3" json:"business_unit_contact_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// readonly 企業ID
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 取引先管理（連絡先）依頼ID
	BusinessUnitContactHeaderId string `protobuf:"bytes,4,opt,name=business_unit_contact_header_id,json=businessUnitContactHeaderId,proto3" json:"business_unit_contact_header_id,omitempty"`
	// readonly 連絡先名
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// 拠点情報
	BusinessUnitBranchProperties *BusinessUnitBranchProperties `protobuf:"bytes,6,opt,name=business_unit_branch_properties,json=businessUnitBranchProperties,proto3" json:"business_unit_branch_properties,omitempty"`
	// 宛名
	Alias string `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	// 通知先アカウント
	NotificationUsers []*BusinessUnitContact_NotificationUser `protobuf:"bytes,8,rep,name=notification_users,json=notificationUsers,proto3" json:"notification_users,omitempty"`
	// readonly  代表連絡先
	MainContact bool `protobuf:"varint,9,opt,name=main_contact,json=mainContact,proto3" json:"main_contact,omitempty"`
	// readonly 送信情報
	SendProcess *Process `protobuf:"bytes,10,opt,name=send_process,json=sendProcess,proto3" json:"send_process,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,11,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitContact) Reset() {
	*x = BusinessUnitContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitContact) ProtoMessage() {}

func (x *BusinessUnitContact) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitContact.ProtoReflect.Descriptor instead.
func (*BusinessUnitContact) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{15}
}

func (x *BusinessUnitContact) GetBusinessUnitContactId() string {
	if x != nil {
		return x.BusinessUnitContactId
	}
	return ""
}

func (x *BusinessUnitContact) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *BusinessUnitContact) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitContact) GetBusinessUnitContactHeaderId() string {
	if x != nil {
		return x.BusinessUnitContactHeaderId
	}
	return ""
}

func (x *BusinessUnitContact) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitContact) GetBusinessUnitBranchProperties() *BusinessUnitBranchProperties {
	if x != nil {
		return x.BusinessUnitBranchProperties
	}
	return nil
}

func (x *BusinessUnitContact) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *BusinessUnitContact) GetNotificationUsers() []*BusinessUnitContact_NotificationUser {
	if x != nil {
		return x.NotificationUsers
	}
	return nil
}

func (x *BusinessUnitContact) GetMainContact() bool {
	if x != nil {
		return x.MainContact
	}
	return false
}

func (x *BusinessUnitContact) GetSendProcess() *Process {
	if x != nil {
		return x.SendProcess
	}
	return nil
}

func (x *BusinessUnitContact) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitContact) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitContact) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitContact) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 取引先管理（連絡先）社内管理マスタ
type BusinessUnitContactAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）社内管理ID
	BusinessUnitContactAttributeId string `protobuf:"bytes,1,opt,name=business_unit_contact_attribute_id,json=businessUnitContactAttributeId,proto3" json:"business_unit_contact_attribute_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// readonly urn
	// mtechnavi.api.company.BusinessUnitContactHeader:{{business_unit_contact_header_id}}
	// mtechnavi.api.company.BusinessUnitContact:{{{business_unit_contact_id}}
	Urn string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
	// readonly type_name
	// mtechnavi.api.company.BusinessUnitContactHeader
	// mtechnavi.api.company.BusinessUnitContact
	TypeName string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// readonly record_id
	// {{business_unit_contact_header_id}}
	// {{business_unit_contact_id}}
	RecordId string `protobuf:"bytes,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// 社内管理コード
	Code string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	// 社内管理名
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// メモ
	Remarks   string `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CreatedAt int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt int64  `protobuf:"varint,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitContactAttribute) Reset() {
	*x = BusinessUnitContactAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitContactAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitContactAttribute) ProtoMessage() {}

func (x *BusinessUnitContactAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitContactAttribute.ProtoReflect.Descriptor instead.
func (*BusinessUnitContactAttribute) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{16}
}

func (x *BusinessUnitContactAttribute) GetBusinessUnitContactAttributeId() string {
	if x != nil {
		return x.BusinessUnitContactAttributeId
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *BusinessUnitContactAttribute) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitContactAttribute) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitContactAttribute) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 取引先管理（文書）マスタ
type BusinessUnitDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（文書）ID
	BusinessUnitDocumentId string `protobuf:"bytes,1,opt,name=business_unit_document_id,json=businessUnitDocumentId,proto3" json:"business_unit_document_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// 文書分類
	// 名称マスタ A4000010 (文書分類)
	Category *protobuf.NameOption `protobuf:"bytes,9,opt,name=category,proto3" json:"category,omitempty"`
	// readonly 添付ファイル
	Attachment *protobuf.Attachment `protobuf:"bytes,12,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitDocument) Reset() {
	*x = BusinessUnitDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitDocument) ProtoMessage() {}

func (x *BusinessUnitDocument) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitDocument.ProtoReflect.Descriptor instead.
func (*BusinessUnitDocument) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{17}
}

func (x *BusinessUnitDocument) GetBusinessUnitDocumentId() string {
	if x != nil {
		return x.BusinessUnitDocumentId
	}
	return ""
}

func (x *BusinessUnitDocument) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *BusinessUnitDocument) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *BusinessUnitDocument) GetAttachment() *protobuf.Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *BusinessUnitDocument) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitDocument) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitDocument) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitDocument) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 有効管理データ（取引先）
type BusinessUnitActiveControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理ID
	BusinessUnitActiveControlId string `protobuf:"bytes,1,opt,name=business_unit_active_control_id,json=businessUnitActiveControlId,proto3" json:"business_unit_active_control_id,omitempty"`
	// 会社ID
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// readonly　有効
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// readonly 更新情報
	Process *Process `protobuf:"bytes,4,opt,name=process,proto3" json:"process,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,5,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitActiveControl) Reset() {
	*x = BusinessUnitActiveControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitActiveControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitActiveControl) ProtoMessage() {}

func (x *BusinessUnitActiveControl) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitActiveControl.ProtoReflect.Descriptor instead.
func (*BusinessUnitActiveControl) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{18}
}

func (x *BusinessUnitActiveControl) GetBusinessUnitActiveControlId() string {
	if x != nil {
		return x.BusinessUnitActiveControlId
	}
	return ""
}

func (x *BusinessUnitActiveControl) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *BusinessUnitActiveControl) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BusinessUnitActiveControl) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *BusinessUnitActiveControl) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BusinessUnitActiveControl) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitActiveControl) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitActiveControl) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 取引先管理スナップショットデータ
type BusinessUnitSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理スナップショットID
	BusinessUnitSnapshotId string `protobuf:"bytes,1,opt,name=business_unit_snapshot_id,json=businessUnitSnapshotId,proto3" json:"business_unit_snapshot_id,omitempty"`
	// readonly urn
	// mtechnavi.api.company.BusinessUnitXXXX:{{自社企業XXXXID}}
	Urn string `protobuf:"bytes,2,opt,name=urn,proto3" json:"urn,omitempty"`
	// readonly type_name
	// mtechnavi.api.company.BusinessUnitXXXX
	TypeName string `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// readonly record_id
	RecordId string `protobuf:"bytes,4,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// readonly data
	// JSON文字列
	Data      string `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt int64  `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitSnapshot) Reset() {
	*x = BusinessUnitSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitSnapshot) ProtoMessage() {}

func (x *BusinessUnitSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitSnapshot.ProtoReflect.Descriptor instead.
func (*BusinessUnitSnapshot) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{19}
}

func (x *BusinessUnitSnapshot) GetBusinessUnitSnapshotId() string {
	if x != nil {
		return x.BusinessUnitSnapshotId
	}
	return ""
}

func (x *BusinessUnitSnapshot) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *BusinessUnitSnapshot) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *BusinessUnitSnapshot) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *BusinessUnitSnapshot) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *BusinessUnitSnapshot) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitSnapshot) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitSnapshot) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 更新通知データ
type BusinessUnitChangeNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新通知ID
	BusinessUnitChangeNotificationId string `protobuf:"bytes,1,opt,name=business_unit_change_notification_id,json=businessUnitChangeNotificationId,proto3" json:"business_unit_change_notification_id,omitempty"`
	// readonly base_urn
	// mtechnavi.api.company.BusinessUnitManagement:{{取引先管理ID}}
	BaseUrn string `protobuf:"bytes,2,opt,name=base_urn,json=baseUrn,proto3" json:"base_urn,omitempty"`
	// readonly urn
	// mtechnavi.api.company.BusinessUnitXXXX:{{自社企業XXXXID}}
	Urn string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
	// readonly type_name
	// mtechnavi.api.company.BusinessUnitXXXX
	TypeName string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// readonly record_id
	// 自社企業XXXXID
	RecordId string `protobuf:"bytes,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// 対象項目1
	TargetKey string `protobuf:"bytes,6,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	// 対象項目2
	TargetFieldPath string `protobuf:"bytes,7,opt,name=target_field_path,json=targetFieldPath,proto3" json:"target_field_path,omitempty"`
	// 変更前
	// e.g. 日付項目 int64
	// YYYY/MM/DD
	// timezoneは入力時のものを採用
	// e.g. 配列項目 []string
	// item1
	// item2
	// item3
	OldValue string `protobuf:"bytes,8,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// 変更後
	// e.g. 日付項目 int64
	// YYYY/MM/DD
	// timezoneは入力時のものを採用
	// e.g. 配列項目 []string
	// item1
	// item2
	// item3
	NewValue string `protobuf:"bytes,9,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// 備考（メッセージコード）
	RemarksNames []string `protobuf:"bytes,10,rep,name=remarks_names,json=remarksNames,proto3" json:"remarks_names,omitempty"`
	// readonly 通知日時
	NotifiedAt int64 `protobuf:"varint,11,opt,name=notified_at,json=notifiedAt,proto3" json:"notified_at,omitempty"`
	CreatedAt  int64 `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt  int64 `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt  int64 `protobuf:"varint,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitChangeNotification) Reset() {
	*x = BusinessUnitChangeNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitChangeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitChangeNotification) ProtoMessage() {}

func (x *BusinessUnitChangeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitChangeNotification.ProtoReflect.Descriptor instead.
func (*BusinessUnitChangeNotification) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{20}
}

func (x *BusinessUnitChangeNotification) GetBusinessUnitChangeNotificationId() string {
	if x != nil {
		return x.BusinessUnitChangeNotificationId
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetBaseUrn() string {
	if x != nil {
		return x.BaseUrn
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetTargetFieldPath() string {
	if x != nil {
		return x.TargetFieldPath
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *BusinessUnitChangeNotification) GetRemarksNames() []string {
	if x != nil {
		return x.RemarksNames
	}
	return nil
}

func (x *BusinessUnitChangeNotification) GetNotifiedAt() int64 {
	if x != nil {
		return x.NotifiedAt
	}
	return 0
}

func (x *BusinessUnitChangeNotification) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitChangeNotification) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitChangeNotification) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// TSRデータ
type TokyoShokoResearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRID
	TokyoShokoResearchId string `protobuf:"bytes,1,opt,name=tokyo_shoko_research_id,json=tokyoShokoResearchId,proto3" json:"tokyo_shoko_research_id,omitempty"`
	// 識別コード
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// 項目
	ItemValues []*ItemValue `protobuf:"bytes,3,rep,name=item_values,json=itemValues,proto3" json:"item_values,omitempty"`
	// readonly 基準日時
	OccurredAt int64 `protobuf:"varint,4,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TokyoShokoResearch) Reset() {
	*x = TokyoShokoResearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokyoShokoResearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokyoShokoResearch) ProtoMessage() {}

func (x *TokyoShokoResearch) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokyoShokoResearch.ProtoReflect.Descriptor instead.
func (*TokyoShokoResearch) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{21}
}

func (x *TokyoShokoResearch) GetTokyoShokoResearchId() string {
	if x != nil {
		return x.TokyoShokoResearchId
	}
	return ""
}

func (x *TokyoShokoResearch) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TokyoShokoResearch) GetItemValues() []*ItemValue {
	if x != nil {
		return x.ItemValues
	}
	return nil
}

func (x *TokyoShokoResearch) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *TokyoShokoResearch) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *TokyoShokoResearch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TokyoShokoResearch) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TokyoShokoResearch) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// TSR企業情報データ
type TokyoShokoResearchCompanyProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR_CP_ID
	TokyoShokoResearchCompanyProfileId string `protobuf:"bytes,1,opt,name=tokyo_shoko_research_company_profile_id,json=tokyoShokoResearchCompanyProfileId,proto3" json:"tokyo_shoko_research_company_profile_id,omitempty"`
	// 識別コード
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// 項目
	// item_key:TSR企業情報取込時のヘッダ名（日本語でOK、他言語対応不要）
	// item_value:TSR企業情報取込時の値
	// code:TSR企業情報取込時のフィールド名を入れる
	ItemValues []*ItemValue `protobuf:"bytes,3,rep,name=item_values,json=itemValues,proto3" json:"item_values,omitempty"`
	// readonly 基準日時
	OccurredAt int64 `protobuf:"varint,4,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TokyoShokoResearchCompanyProfile) Reset() {
	*x = TokyoShokoResearchCompanyProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokyoShokoResearchCompanyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokyoShokoResearchCompanyProfile) ProtoMessage() {}

func (x *TokyoShokoResearchCompanyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokyoShokoResearchCompanyProfile.ProtoReflect.Descriptor instead.
func (*TokyoShokoResearchCompanyProfile) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{22}
}

func (x *TokyoShokoResearchCompanyProfile) GetTokyoShokoResearchCompanyProfileId() string {
	if x != nil {
		return x.TokyoShokoResearchCompanyProfileId
	}
	return ""
}

func (x *TokyoShokoResearchCompanyProfile) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TokyoShokoResearchCompanyProfile) GetItemValues() []*ItemValue {
	if x != nil {
		return x.ItemValues
	}
	return nil
}

func (x *TokyoShokoResearchCompanyProfile) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *TokyoShokoResearchCompanyProfile) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *TokyoShokoResearchCompanyProfile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TokyoShokoResearchCompanyProfile) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TokyoShokoResearchCompanyProfile) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// TSRリスクスコアデータ
type TokyoShokoResearchRiskScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR_RS_ID
	TokyoShokoResearchRiskScoreId string `protobuf:"bytes,1,opt,name=tokyo_shoko_research_risk_score_id,json=tokyoShokoResearchRiskScoreId,proto3" json:"tokyo_shoko_research_risk_score_id,omitempty"`
	// 識別コード
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// 項目
	// item_key:TSRリスクスコア取込時のヘッダ名（日本語でOK、他言語対応不要）
	// item_value:TSRリスクスコア取込時の値
	// code:TSRリスクスコア取込時のフィールド名を入れる
	ItemValues []*ItemValue `protobuf:"bytes,3,rep,name=item_values,json=itemValues,proto3" json:"item_values,omitempty"`
	// readonly 基準日時
	OccurredAt int64 `protobuf:"varint,4,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TokyoShokoResearchRiskScore) Reset() {
	*x = TokyoShokoResearchRiskScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokyoShokoResearchRiskScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokyoShokoResearchRiskScore) ProtoMessage() {}

func (x *TokyoShokoResearchRiskScore) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokyoShokoResearchRiskScore.ProtoReflect.Descriptor instead.
func (*TokyoShokoResearchRiskScore) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{23}
}

func (x *TokyoShokoResearchRiskScore) GetTokyoShokoResearchRiskScoreId() string {
	if x != nil {
		return x.TokyoShokoResearchRiskScoreId
	}
	return ""
}

func (x *TokyoShokoResearchRiskScore) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *TokyoShokoResearchRiskScore) GetItemValues() []*ItemValue {
	if x != nil {
		return x.ItemValues
	}
	return nil
}

func (x *TokyoShokoResearchRiskScore) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *TokyoShokoResearchRiskScore) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *TokyoShokoResearchRiskScore) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TokyoShokoResearchRiskScore) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TokyoShokoResearchRiskScore) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 第三者情報ファイルデータ
type BusinessUnitScoreAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第三者情報ファイルID
	BusinessUnitScoreAssetId string `protobuf:"bytes,1,opt,name=business_unit_score_asset_id,json=businessUnitScoreAssetId,proto3" json:"business_unit_score_asset_id,omitempty"`
	// 識別コード
	// 名称マスタ A4000007 (データ種類)
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// データ種類
	Category *protobuf.NameOption `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	// ファイル
	Attachments []*protobuf.Attachment `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// readonly 最終更新情報
	UpdatedProperties *protobuf.EmbeddedUpdatedProperties `protobuf:"bytes,5,opt,name=updated_properties,json=updatedProperties,proto3" json:"updated_properties,omitempty"`
	CreatedAt         int64                               `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64                               `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt         int64                               `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *BusinessUnitScoreAsset) Reset() {
	*x = BusinessUnitScoreAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitScoreAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitScoreAsset) ProtoMessage() {}

func (x *BusinessUnitScoreAsset) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitScoreAsset.ProtoReflect.Descriptor instead.
func (*BusinessUnitScoreAsset) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{24}
}

func (x *BusinessUnitScoreAsset) GetBusinessUnitScoreAssetId() string {
	if x != nil {
		return x.BusinessUnitScoreAssetId
	}
	return ""
}

func (x *BusinessUnitScoreAsset) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BusinessUnitScoreAsset) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *BusinessUnitScoreAsset) GetAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *BusinessUnitScoreAsset) GetUpdatedProperties() *protobuf.EmbeddedUpdatedProperties {
	if x != nil {
		return x.UpdatedProperties
	}
	return nil
}

func (x *BusinessUnitScoreAsset) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BusinessUnitScoreAsset) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *BusinessUnitScoreAsset) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 履歴データ
type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 履歴ID
	HistoryId string `protobuf:"bytes,1,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// urn
	// "urn:mtechnavi.api.company.BusinessUnitManagement:{{business_unit_management_id}}"
	Urn string `protobuf:"bytes,2,opt,name=urn,proto3" json:"urn,omitempty"`
	// "mtechnavi.api.company.BusinessUnitManagement"
	TypeName string `protobuf:"bytes,10,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// "{{business_unit_management_id}}"
	RecordId string `protobuf:"bytes,11,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// 履歴分類
	// メッセージにおける種別 HISTORY / コード H[XXXXXXX]a を参照
	// e.g. H0000001a
	HistoryCategoryName string `protobuf:"bytes,3,opt,name=history_category_name,json=historyCategoryName,proto3" json:"history_category_name,omitempty"`
	// 内容
	// メッセージにおける種別 HISTORY / コード H[XXXXXXX]b を参照
	// e.g. H0000001b
	ContentName string `protobuf:"bytes,4,opt,name=content_name,json=contentName,proto3" json:"content_name,omitempty"`
	// 内容パラメータ
	ContentParamaters []string `protobuf:"bytes,5,rep,name=content_paramaters,json=contentParamaters,proto3" json:"content_paramaters,omitempty"`
	// readonly 発生日時
	OccurredAt int64 `protobuf:"varint,6,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// 通知レベル
	Level     int64 `protobuf:"varint,12,opt,name=level,proto3" json:"level,omitempty"`
	CreatedAt int64 `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt int64 `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{25}
}

func (x *History) GetHistoryId() string {
	if x != nil {
		return x.HistoryId
	}
	return ""
}

func (x *History) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *History) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *History) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *History) GetHistoryCategoryName() string {
	if x != nil {
		return x.HistoryCategoryName
	}
	return ""
}

func (x *History) GetContentName() string {
	if x != nil {
		return x.ContentName
	}
	return ""
}

func (x *History) GetContentParamaters() []string {
	if x != nil {
		return x.ContentParamaters
	}
	return nil
}

func (x *History) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *History) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *History) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *History) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *History) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type ComponentUnit_PlaceProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 場所
	DisplayNameLang map[string]string `protobuf:"bytes,1,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 場所（地図）
	Image *ImageFile `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ComponentUnit_PlaceProperties) Reset() {
	*x = ComponentUnit_PlaceProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentUnit_PlaceProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentUnit_PlaceProperties) ProtoMessage() {}

func (x *ComponentUnit_PlaceProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentUnit_PlaceProperties.ProtoReflect.Descriptor instead.
func (*ComponentUnit_PlaceProperties) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ComponentUnit_PlaceProperties) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (x *ComponentUnit_PlaceProperties) GetImage() *ImageFile {
	if x != nil {
		return x.Image
	}
	return nil
}

type BusinessUnitStrength_LinkProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 関連拠点
	BusinessUnitBranchId string `protobuf:"bytes,1,opt,name=business_unit_branch_id,json=businessUnitBranchId,proto3" json:"business_unit_branch_id,omitempty"`
	// 関連設備
	BusinessUnitFacilitiesId string `protobuf:"bytes,2,opt,name=business_unit_facilities_id,json=businessUnitFacilitiesId,proto3" json:"business_unit_facilities_id,omitempty"`
}

func (x *BusinessUnitStrength_LinkProperties) Reset() {
	*x = BusinessUnitStrength_LinkProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitStrength_LinkProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitStrength_LinkProperties) ProtoMessage() {}

func (x *BusinessUnitStrength_LinkProperties) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitStrength_LinkProperties.ProtoReflect.Descriptor instead.
func (*BusinessUnitStrength_LinkProperties) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{12, 0}
}

func (x *BusinessUnitStrength_LinkProperties) GetBusinessUnitBranchId() string {
	if x != nil {
		return x.BusinessUnitBranchId
	}
	return ""
}

func (x *BusinessUnitStrength_LinkProperties) GetBusinessUnitFacilitiesId() string {
	if x != nil {
		return x.BusinessUnitFacilitiesId
	}
	return ""
}

type BusinessUnitContact_NotificationUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分類
	// 名称マスタ A4000006 (通知先分類)
	Category *protobuf.NameOption `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// アカウント情報
	User *protobuf.UserReference `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *BusinessUnitContact_NotificationUser) Reset() {
	*x = BusinessUnitContact_NotificationUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_table_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessUnitContact_NotificationUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessUnitContact_NotificationUser) ProtoMessage() {}

func (x *BusinessUnitContact_NotificationUser) ProtoReflect() protoreflect.Message {
	mi := &file_company_table_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessUnitContact_NotificationUser.ProtoReflect.Descriptor instead.
func (*BusinessUnitContact_NotificationUser) Descriptor() ([]byte, []int) {
	return file_company_table_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BusinessUnitContact_NotificationUser) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *BusinessUnitContact_NotificationUser) GetUser() *protobuf.UserReference {
	if x != nil {
		return x.User
	}
	return nil
}

var File_company_table_proto protoreflect.FileDescriptor

var file_company_table_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d,
	0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x67, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x18, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x02, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x02, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90,
	0x0d, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x6d, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x67, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x02, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x63,
	0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52,
	0x12, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x73, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x17, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x02, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x6f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x06, 0x75,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x94,
	0x02, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x7d, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e,
	0x67, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10,
	0x09, 0x22, 0x9c, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x66,
	0x66, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xd2, 0xb8, 0x02,
	0x09, 0x0a, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xfc, 0x03, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x51, 0x0a, 0x1a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x8d, 0x02, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xa6, 0x02, 0x0a, 0x19, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a,
	0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfa, 0x07, 0x0a, 0x16, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xd2, 0xb8, 0x02,
	0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x11, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x13, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x4d, 0x0a, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x12,
	0x40, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x66, 0x66, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa7, 0x04, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e,
	0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4f, 0x0a,
	0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xea, 0x05, 0x0a, 0x15, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e,
	0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e,
	0x64, 0x44, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x49, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x04, 0x0a,
	0x12, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0a, 0x66,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x08, 0x0a, 0x16, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x17, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x69, 0x7a,
	0x65, 0x58, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65,
	0x59, 0x12, 0x1d, 0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x5a,
	0x12, 0x1d, 0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x12,
	0x22, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xfc,
	0x07, 0x0a, 0x17, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08,
	0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x44, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x40, 0x0a, 0x0e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0c, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x74, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x29, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xee, 0x05,
	0x0a, 0x14, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x96, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x03, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x03, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x64, 0x22, 0xf4,
	0x03, 0x0a, 0x11, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2,
	0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa3, 0x05, 0x0a, 0x19, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xd2, 0xb8, 0x02, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x18, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a,
	0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xde, 0x08, 0x0a, 0x13,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1b,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xd2, 0xb8, 0x02, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x1f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0xd2, 0xb8, 0x02, 0x23, 0x0a, 0x21, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x72, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x11, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0xd2, 0xb8, 0x02, 0x10, 0x0a, 0x0e, 0x0a, 0x0c,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x49, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x81, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xe8, 0x03, 0x0a,
	0x1c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x22, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23,
	0xd2, 0xb8, 0x02, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x03, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xd2, 0xb8, 0x02, 0x07,
	0x0a, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe6, 0x03, 0x0a, 0x14, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x1b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xd2, 0xb8, 0x02, 0x1f, 0x0a, 0x1d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c,
	0x22, 0xaa, 0x03, 0x0a, 0x19, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x44,
	0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xae, 0x02,
	0x0a, 0x14, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xd2, 0xb8, 0x02, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x6e,
	0x12, 0x2e, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb1,
	0x04, 0x0a, 0x1e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x24, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xd2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x0a, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x72, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6e, 0x12, 0x1d,
	0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xd2, 0xb8, 0x02,
	0x07, 0x0a, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x6b,
	0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xd2, 0xb8, 0x02, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xae, 0x03, 0x0a, 0x20, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x27,
	0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x74,
	0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xd2, 0xb8, 0x02, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x1b, 0x54, 0x6f, 0x6b,
	0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x74, 0x6f, 0x6b, 0x79,
	0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xd2, 0xb8, 0x02, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x95, 0x03, 0x0a, 0x16, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xd2, 0xb8, 0x02, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xbc, 0x03, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x03, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xd2, 0xb8, 0x02, 0x07,
	0x0a, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x34, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x42, 0x1c, 0x5a, 0x1a, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_table_proto_rawDescOnce sync.Once
	file_company_table_proto_rawDescData = file_company_table_proto_rawDesc
)

func file_company_table_proto_rawDescGZIP() []byte {
	file_company_table_proto_rawDescOnce.Do(func() {
		file_company_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_table_proto_rawDescData)
	})
	return file_company_table_proto_rawDescData
}

var file_company_table_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_company_table_proto_goTypes = []interface{}{
	(*Company)(nil),                              // 0: mtechnavi.api.company.Company
	(*ComponentUnit)(nil),                        // 1: mtechnavi.api.company.ComponentUnit
	(*Staff)(nil),                                // 2: mtechnavi.api.company.Staff
	(*BusinessUnit)(nil),                         // 3: mtechnavi.api.company.BusinessUnit
	(*BusinessUnitRequest)(nil),                  // 4: mtechnavi.api.company.BusinessUnitRequest
	(*BusinessUnitRequestResult)(nil),            // 5: mtechnavi.api.company.BusinessUnitRequestResult
	(*BusinessUnitManagement)(nil),               // 6: mtechnavi.api.company.BusinessUnitManagement
	(*BusinessUnitProfile)(nil),                  // 7: mtechnavi.api.company.BusinessUnitProfile
	(*BusinessUnitFinancial)(nil),                // 8: mtechnavi.api.company.BusinessUnitFinancial
	(*BusinessUnitBranch)(nil),                   // 9: mtechnavi.api.company.BusinessUnitBranch
	(*BusinessUnitFacilities)(nil),               // 10: mtechnavi.api.company.BusinessUnitFacilities
	(*BusinessUnitCertificate)(nil),              // 11: mtechnavi.api.company.BusinessUnitCertificate
	(*BusinessUnitStrength)(nil),                 // 12: mtechnavi.api.company.BusinessUnitStrength
	(*BusinessUnitSkill)(nil),                    // 13: mtechnavi.api.company.BusinessUnitSkill
	(*BusinessUnitContactHeader)(nil),            // 14: mtechnavi.api.company.BusinessUnitContactHeader
	(*BusinessUnitContact)(nil),                  // 15: mtechnavi.api.company.BusinessUnitContact
	(*BusinessUnitContactAttribute)(nil),         // 16: mtechnavi.api.company.BusinessUnitContactAttribute
	(*BusinessUnitDocument)(nil),                 // 17: mtechnavi.api.company.BusinessUnitDocument
	(*BusinessUnitActiveControl)(nil),            // 18: mtechnavi.api.company.BusinessUnitActiveControl
	(*BusinessUnitSnapshot)(nil),                 // 19: mtechnavi.api.company.BusinessUnitSnapshot
	(*BusinessUnitChangeNotification)(nil),       // 20: mtechnavi.api.company.BusinessUnitChangeNotification
	(*TokyoShokoResearch)(nil),                   // 21: mtechnavi.api.company.TokyoShokoResearch
	(*TokyoShokoResearchCompanyProfile)(nil),     // 22: mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	(*TokyoShokoResearchRiskScore)(nil),          // 23: mtechnavi.api.company.TokyoShokoResearchRiskScore
	(*BusinessUnitScoreAsset)(nil),               // 24: mtechnavi.api.company.BusinessUnitScoreAsset
	(*History)(nil),                              // 25: mtechnavi.api.company.History
	nil,                                          // 26: mtechnavi.api.company.Company.DisplayNameLangEntry
	nil,                                          // 27: mtechnavi.api.company.ComponentUnit.DisplayNameLangEntry
	(*ComponentUnit_PlaceProperties)(nil),        // 28: mtechnavi.api.company.ComponentUnit.PlaceProperties
	nil,                                          // 29: mtechnavi.api.company.ComponentUnit.PlaceProperties.DisplayNameLangEntry
	(*BusinessUnitStrength_LinkProperties)(nil),  // 30: mtechnavi.api.company.BusinessUnitStrength.LinkProperties
	(*BusinessUnitContact_NotificationUser)(nil), // 31: mtechnavi.api.company.BusinessUnitContact.NotificationUser
	(*CompanyLegalProperties)(nil),               // 32: mtechnavi.api.company.CompanyLegalProperties
	(*Profile)(nil),                              // 33: mtechnavi.api.company.Profile
	(*CompanyStatus)(nil),                        // 34: mtechnavi.api.company.CompanyStatus
	(*protobuf.Address)(nil),                     // 35: sharelib.Address
	(*protobuf.NameOption)(nil),                  // 36: sharelib.NameOption
	(*PostUnitProperties)(nil),                   // 37: mtechnavi.api.company.PostUnitProperties
	(*OrganizationUnitProperties)(nil),           // 38: mtechnavi.api.company.OrganizationUnitProperties
	(*DeliveryPointProperties)(nil),              // 39: mtechnavi.api.company.DeliveryPointProperties
	(*OfficeProperties)(nil),                     // 40: mtechnavi.api.company.OfficeProperties
	(*PostUnit)(nil),                             // 41: mtechnavi.api.company.PostUnit
	(*protobuf.UserReference)(nil),               // 42: sharelib.UserReference
	(*Process)(nil),                              // 43: mtechnavi.api.company.Process
	(*CompanyProfile)(nil),                       // 44: mtechnavi.api.company.CompanyProfile
	(*ItemValue)(nil),                            // 45: mtechnavi.api.company.ItemValue
	(*protobuf.EmbeddedSharedProperties)(nil),    // 46: sharelib.EmbeddedSharedProperties
	(*protobuf.EmbeddedUpdatedProperties)(nil),   // 47: sharelib.EmbeddedUpdatedProperties
	(*protobuf.Datetime)(nil),                    // 48: sharelib.Datetime
	(*protobuf.MonetaryAmount)(nil),              // 49: sharelib.MonetaryAmount
	(*Address)(nil),                              // 50: mtechnavi.api.company.Address
	(*protobuf.Attachment)(nil),                  // 51: sharelib.Attachment
	(*BusinessUnitBranchProperties)(nil),         // 52: mtechnavi.api.company.BusinessUnitBranchProperties
	(*ImageFile)(nil),                            // 53: mtechnavi.api.company.ImageFile
}
var file_company_table_proto_depIdxs = []int32{
	26, // 0: mtechnavi.api.company.Company.display_name_lang:type_name -> mtechnavi.api.company.Company.DisplayNameLangEntry
	32, // 1: mtechnavi.api.company.Company.company_legal_properties:type_name -> mtechnavi.api.company.CompanyLegalProperties
	33, // 2: mtechnavi.api.company.Company.profile:type_name -> mtechnavi.api.company.Profile
	34, // 3: mtechnavi.api.company.Company.company_status:type_name -> mtechnavi.api.company.CompanyStatus
	27, // 4: mtechnavi.api.company.ComponentUnit.display_name_lang:type_name -> mtechnavi.api.company.ComponentUnit.DisplayNameLangEntry
	35, // 5: mtechnavi.api.company.ComponentUnit.address:type_name -> sharelib.Address
	28, // 6: mtechnavi.api.company.ComponentUnit.place_properties:type_name -> mtechnavi.api.company.ComponentUnit.PlaceProperties
	36, // 7: mtechnavi.api.company.ComponentUnit.post_unit:type_name -> sharelib.NameOption
	37, // 8: mtechnavi.api.company.ComponentUnit.post_unit_properties:type_name -> mtechnavi.api.company.PostUnitProperties
	36, // 9: mtechnavi.api.company.ComponentUnit.organization_unit:type_name -> sharelib.NameOption
	38, // 10: mtechnavi.api.company.ComponentUnit.organization_unit_properties:type_name -> mtechnavi.api.company.OrganizationUnitProperties
	36, // 11: mtechnavi.api.company.ComponentUnit.delivery_point:type_name -> sharelib.NameOption
	39, // 12: mtechnavi.api.company.ComponentUnit.delivery_point_properties:type_name -> mtechnavi.api.company.DeliveryPointProperties
	36, // 13: mtechnavi.api.company.ComponentUnit.office:type_name -> sharelib.NameOption
	40, // 14: mtechnavi.api.company.ComponentUnit.office_properties:type_name -> mtechnavi.api.company.OfficeProperties
	36, // 15: mtechnavi.api.company.ComponentUnit.usable:type_name -> sharelib.NameOption
	36, // 16: mtechnavi.api.company.Staff.usable:type_name -> sharelib.NameOption
	41, // 17: mtechnavi.api.company.BusinessUnit.post_units:type_name -> mtechnavi.api.company.PostUnit
	36, // 18: mtechnavi.api.company.BusinessUnit.aggregated_post_unit_types:type_name -> sharelib.NameOption
	4,  // 19: mtechnavi.api.company.BusinessUnitRequestResult.business_unit_request:type_name -> mtechnavi.api.company.BusinessUnitRequest
	42, // 20: mtechnavi.api.company.BusinessUnitManagement.system_notification_users:type_name -> sharelib.UserReference
	43, // 21: mtechnavi.api.company.BusinessUnitManagement.tenant_link_process:type_name -> mtechnavi.api.company.Process
	43, // 22: mtechnavi.api.company.BusinessUnitManagement.tenant_invite_process:type_name -> mtechnavi.api.company.Process
	42, // 23: mtechnavi.api.company.BusinessUnitManagement.main_contact:type_name -> sharelib.UserReference
	42, // 24: mtechnavi.api.company.BusinessUnitManagement.main_contact_assistant:type_name -> sharelib.UserReference
	42, // 25: mtechnavi.api.company.BusinessUnitManagement.staff:type_name -> sharelib.UserReference
	42, // 26: mtechnavi.api.company.BusinessUnitManagement.staff_assistant:type_name -> sharelib.UserReference
	44, // 27: mtechnavi.api.company.BusinessUnitManagement.profile:type_name -> mtechnavi.api.company.CompanyProfile
	45, // 28: mtechnavi.api.company.BusinessUnitManagement.item_values:type_name -> mtechnavi.api.company.ItemValue
	36, // 29: mtechnavi.api.company.BusinessUnitManagement.status:type_name -> sharelib.NameOption
	42, // 30: mtechnavi.api.company.BusinessUnitManagement.invitees:type_name -> sharelib.UserReference
	42, // 31: mtechnavi.api.company.BusinessUnitProfile.system_notification_users:type_name -> sharelib.UserReference
	44, // 32: mtechnavi.api.company.BusinessUnitProfile.profile:type_name -> mtechnavi.api.company.CompanyProfile
	46, // 33: mtechnavi.api.company.BusinessUnitProfile.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 34: mtechnavi.api.company.BusinessUnitProfile.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	48, // 35: mtechnavi.api.company.BusinessUnitFinancial.period_start_dt:type_name -> sharelib.Datetime
	48, // 36: mtechnavi.api.company.BusinessUnitFinancial.period_end_dt:type_name -> sharelib.Datetime
	49, // 37: mtechnavi.api.company.BusinessUnitFinancial.net_sales:type_name -> sharelib.MonetaryAmount
	49, // 38: mtechnavi.api.company.BusinessUnitFinancial.operating_profit:type_name -> sharelib.MonetaryAmount
	49, // 39: mtechnavi.api.company.BusinessUnitFinancial.ordinary_income:type_name -> sharelib.MonetaryAmount
	46, // 40: mtechnavi.api.company.BusinessUnitFinancial.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 41: mtechnavi.api.company.BusinessUnitFinancial.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	50, // 42: mtechnavi.api.company.BusinessUnitBranch.address:type_name -> mtechnavi.api.company.Address
	46, // 43: mtechnavi.api.company.BusinessUnitBranch.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 44: mtechnavi.api.company.BusinessUnitBranch.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	36, // 45: mtechnavi.api.company.BusinessUnitFacilities.categorys:type_name -> sharelib.NameOption
	36, // 46: mtechnavi.api.company.BusinessUnitFacilities.accuracy:type_name -> sharelib.NameOption
	36, // 47: mtechnavi.api.company.BusinessUnitFacilities.processable_material:type_name -> sharelib.NameOption
	46, // 48: mtechnavi.api.company.BusinessUnitFacilities.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 49: mtechnavi.api.company.BusinessUnitFacilities.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	36, // 50: mtechnavi.api.company.BusinessUnitCertificate.certificate:type_name -> sharelib.NameOption
	51, // 51: mtechnavi.api.company.BusinessUnitCertificate.attachment:type_name -> sharelib.Attachment
	48, // 52: mtechnavi.api.company.BusinessUnitCertificate.obtained_dt:type_name -> sharelib.Datetime
	48, // 53: mtechnavi.api.company.BusinessUnitCertificate.expiration_dt:type_name -> sharelib.Datetime
	48, // 54: mtechnavi.api.company.BusinessUnitCertificate.obtain_plan_dt:type_name -> sharelib.Datetime
	46, // 55: mtechnavi.api.company.BusinessUnitCertificate.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 56: mtechnavi.api.company.BusinessUnitCertificate.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	36, // 57: mtechnavi.api.company.BusinessUnitStrength.category:type_name -> sharelib.NameOption
	30, // 58: mtechnavi.api.company.BusinessUnitStrength.link_properties:type_name -> mtechnavi.api.company.BusinessUnitStrength.LinkProperties
	46, // 59: mtechnavi.api.company.BusinessUnitStrength.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 60: mtechnavi.api.company.BusinessUnitStrength.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	46, // 61: mtechnavi.api.company.BusinessUnitSkill.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	47, // 62: mtechnavi.api.company.BusinessUnitSkill.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	43, // 63: mtechnavi.api.company.BusinessUnitContactHeader.request_process:type_name -> mtechnavi.api.company.Process
	46, // 64: mtechnavi.api.company.BusinessUnitContactHeader.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	52, // 65: mtechnavi.api.company.BusinessUnitContact.business_unit_branch_properties:type_name -> mtechnavi.api.company.BusinessUnitBranchProperties
	31, // 66: mtechnavi.api.company.BusinessUnitContact.notification_users:type_name -> mtechnavi.api.company.BusinessUnitContact.NotificationUser
	43, // 67: mtechnavi.api.company.BusinessUnitContact.send_process:type_name -> mtechnavi.api.company.Process
	46, // 68: mtechnavi.api.company.BusinessUnitContact.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	36, // 69: mtechnavi.api.company.BusinessUnitDocument.category:type_name -> sharelib.NameOption
	51, // 70: mtechnavi.api.company.BusinessUnitDocument.attachment:type_name -> sharelib.Attachment
	47, // 71: mtechnavi.api.company.BusinessUnitDocument.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	43, // 72: mtechnavi.api.company.BusinessUnitActiveControl.process:type_name -> mtechnavi.api.company.Process
	46, // 73: mtechnavi.api.company.BusinessUnitActiveControl.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	45, // 74: mtechnavi.api.company.TokyoShokoResearch.item_values:type_name -> mtechnavi.api.company.ItemValue
	47, // 75: mtechnavi.api.company.TokyoShokoResearch.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	45, // 76: mtechnavi.api.company.TokyoShokoResearchCompanyProfile.item_values:type_name -> mtechnavi.api.company.ItemValue
	47, // 77: mtechnavi.api.company.TokyoShokoResearchCompanyProfile.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	45, // 78: mtechnavi.api.company.TokyoShokoResearchRiskScore.item_values:type_name -> mtechnavi.api.company.ItemValue
	47, // 79: mtechnavi.api.company.TokyoShokoResearchRiskScore.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	36, // 80: mtechnavi.api.company.BusinessUnitScoreAsset.category:type_name -> sharelib.NameOption
	51, // 81: mtechnavi.api.company.BusinessUnitScoreAsset.attachments:type_name -> sharelib.Attachment
	47, // 82: mtechnavi.api.company.BusinessUnitScoreAsset.updated_properties:type_name -> sharelib.EmbeddedUpdatedProperties
	29, // 83: mtechnavi.api.company.ComponentUnit.PlaceProperties.display_name_lang:type_name -> mtechnavi.api.company.ComponentUnit.PlaceProperties.DisplayNameLangEntry
	53, // 84: mtechnavi.api.company.ComponentUnit.PlaceProperties.image:type_name -> mtechnavi.api.company.ImageFile
	36, // 85: mtechnavi.api.company.BusinessUnitContact.NotificationUser.category:type_name -> sharelib.NameOption
	42, // 86: mtechnavi.api.company.BusinessUnitContact.NotificationUser.user:type_name -> sharelib.UserReference
	87, // [87:87] is the sub-list for method output_type
	87, // [87:87] is the sub-list for method input_type
	87, // [87:87] is the sub-list for extension type_name
	87, // [87:87] is the sub-list for extension extendee
	0,  // [0:87] is the sub-list for field type_name
}

func init() { file_company_table_proto_init() }
func file_company_table_proto_init() {
	if File_company_table_proto != nil {
		return
	}
	file_company_datatype_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_company_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Staff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitRequestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitFinancial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitFacilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitStrength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitContactHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitContactAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitActiveControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitChangeNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokyoShokoResearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokyoShokoResearchCompanyProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokyoShokoResearchRiskScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitScoreAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentUnit_PlaceProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitStrength_LinkProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_table_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessUnitContact_NotificationUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_table_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_company_table_proto_goTypes,
		DependencyIndexes: file_company_table_proto_depIdxs,
		MessageInfos:      file_company_table_proto_msgTypes,
	}.Build()
	File_company_table_proto = out.File
	file_company_table_proto_rawDesc = nil
	file_company_table_proto_goTypes = nil
	file_company_table_proto_depIdxs = nil
}
