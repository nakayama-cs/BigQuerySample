// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: company.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCompanyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyRequestMultiError, or nil if none found.
func (m *GetCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCompanyRequestMultiError(errors)
	}

	return nil
}

// GetCompanyRequestMultiError is an error wrapping multiple validation errors
// returned by GetCompanyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyRequestMultiError) AllErrors() []error { return m }

// GetCompanyRequestValidationError is the validation error returned by
// GetCompanyRequest.Validate if the designated constraints aren't met.
type GetCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRequestValidationError) ErrorName() string {
	return "GetCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRequestValidationError{}

// Validate checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCompanyRequestMultiError, or nil if none found.
func (m *UpdateCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCompany() == nil {
		err := UpdateCompanyRequestValidationError{
			field:  "Company",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCompanyRequestValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCompanyRequestValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCompanyRequestValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCompanyRequestMultiError(errors)
	}

	return nil
}

// UpdateCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCompanyRequestMultiError) AllErrors() []error { return m }

// UpdateCompanyRequestValidationError is the validation error returned by
// UpdateCompanyRequest.Validate if the designated constraints aren't met.
type UpdateCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyRequestValidationError) ErrorName() string {
	return "UpdateCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyRequestValidationError{}

// Validate checks the field values on CreateComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateComponentUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateComponentUnitRequestMultiError, or nil if none found.
func (m *CreateComponentUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateComponentUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComponentUnit() == nil {
		err := CreateComponentUnitRequestValidationError{
			field:  "ComponentUnit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComponentUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateComponentUnitRequestValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateComponentUnitRequestValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateComponentUnitRequestValidationError{
				field:  "ComponentUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateComponentUnitRequestMultiError(errors)
	}

	return nil
}

// CreateComponentUnitRequestMultiError is an error wrapping multiple
// validation errors returned by CreateComponentUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateComponentUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateComponentUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateComponentUnitRequestMultiError) AllErrors() []error { return m }

// CreateComponentUnitRequestValidationError is the validation error returned
// by CreateComponentUnitRequest.Validate if the designated constraints aren't met.
type CreateComponentUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateComponentUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateComponentUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateComponentUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateComponentUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateComponentUnitRequestValidationError) ErrorName() string {
	return "CreateComponentUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateComponentUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateComponentUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateComponentUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateComponentUnitRequestValidationError{}

// Validate checks the field values on ListComponentUnitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComponentUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComponentUnitsRequestMultiError, or nil if none found.
func (m *ListComponentUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListComponentUnitsRequestMultiError(errors)
	}

	return nil
}

// ListComponentUnitsRequestMultiError is an error wrapping multiple validation
// errors returned by ListComponentUnitsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListComponentUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentUnitsRequestMultiError) AllErrors() []error { return m }

// ListComponentUnitsRequestValidationError is the validation error returned by
// ListComponentUnitsRequest.Validate if the designated constraints aren't met.
type ListComponentUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentUnitsRequestValidationError) ErrorName() string {
	return "ListComponentUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentUnitsRequestValidationError{}

// Validate checks the field values on ListComponentUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComponentUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComponentUnitsResponseMultiError, or nil if none found.
func (m *ListComponentUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComponentUnitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListComponentUnitsResponseMultiError(errors)
	}

	return nil
}

// ListComponentUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by ListComponentUnitsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListComponentUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentUnitsResponseMultiError) AllErrors() []error { return m }

// ListComponentUnitsResponseValidationError is the validation error returned
// by ListComponentUnitsResponse.Validate if the designated constraints aren't met.
type ListComponentUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentUnitsResponseValidationError) ErrorName() string {
	return "ListComponentUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentUnitsResponseValidationError{}

// Validate checks the field values on PublicListComponentUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListComponentUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicListComponentUnitsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublicListComponentUnitsRequestMultiError, or nil if none found.
func (m *PublicListComponentUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListComponentUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublicListComponentUnitsRequestMultiError(errors)
	}

	return nil
}

// PublicListComponentUnitsRequestMultiError is an error wrapping multiple
// validation errors returned by PublicListComponentUnitsRequest.ValidateAll()
// if the designated constraints aren't met.
type PublicListComponentUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListComponentUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListComponentUnitsRequestMultiError) AllErrors() []error { return m }

// PublicListComponentUnitsRequestValidationError is the validation error
// returned by PublicListComponentUnitsRequest.Validate if the designated
// constraints aren't met.
type PublicListComponentUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListComponentUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListComponentUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListComponentUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListComponentUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListComponentUnitsRequestValidationError) ErrorName() string {
	return "PublicListComponentUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListComponentUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListComponentUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListComponentUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListComponentUnitsRequestValidationError{}

// Validate checks the field values on PublicListComponentUnitsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublicListComponentUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicListComponentUnitsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublicListComponentUnitsResponseMultiError, or nil if none found.
func (m *PublicListComponentUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListComponentUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicListComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicListComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicListComponentUnitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublicListComponentUnitsResponseMultiError(errors)
	}

	return nil
}

// PublicListComponentUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by
// PublicListComponentUnitsResponse.ValidateAll() if the designated
// constraints aren't met.
type PublicListComponentUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListComponentUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListComponentUnitsResponseMultiError) AllErrors() []error { return m }

// PublicListComponentUnitsResponseValidationError is the validation error
// returned by PublicListComponentUnitsResponse.Validate if the designated
// constraints aren't met.
type PublicListComponentUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListComponentUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListComponentUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListComponentUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListComponentUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListComponentUnitsResponseValidationError) ErrorName() string {
	return "PublicListComponentUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListComponentUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListComponentUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListComponentUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListComponentUnitsResponseValidationError{}

// Validate checks the field values on GetComponentUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetComponentUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetComponentUnitRequestMultiError, or nil if none found.
func (m *GetComponentUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetComponentUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentUnitId

	if len(errors) > 0 {
		return GetComponentUnitRequestMultiError(errors)
	}

	return nil
}

// GetComponentUnitRequestMultiError is an error wrapping multiple validation
// errors returned by GetComponentUnitRequest.ValidateAll() if the designated
// constraints aren't met.
type GetComponentUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetComponentUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetComponentUnitRequestMultiError) AllErrors() []error { return m }

// GetComponentUnitRequestValidationError is the validation error returned by
// GetComponentUnitRequest.Validate if the designated constraints aren't met.
type GetComponentUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetComponentUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetComponentUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetComponentUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetComponentUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetComponentUnitRequestValidationError) ErrorName() string {
	return "GetComponentUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetComponentUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetComponentUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetComponentUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetComponentUnitRequestValidationError{}

// Validate checks the field values on UpdateComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateComponentUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateComponentUnitRequestMultiError, or nil if none found.
func (m *UpdateComponentUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateComponentUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComponentUnit() == nil {
		err := UpdateComponentUnitRequestValidationError{
			field:  "ComponentUnit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComponentUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateComponentUnitRequestValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateComponentUnitRequestValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateComponentUnitRequestValidationError{
				field:  "ComponentUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateComponentUnitRequestMultiError(errors)
	}

	return nil
}

// UpdateComponentUnitRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateComponentUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateComponentUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateComponentUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateComponentUnitRequestMultiError) AllErrors() []error { return m }

// UpdateComponentUnitRequestValidationError is the validation error returned
// by UpdateComponentUnitRequest.Validate if the designated constraints aren't met.
type UpdateComponentUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateComponentUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateComponentUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateComponentUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateComponentUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateComponentUnitRequestValidationError) ErrorName() string {
	return "UpdateComponentUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateComponentUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateComponentUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateComponentUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateComponentUnitRequestValidationError{}

// Validate checks the field values on DeleteComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteComponentUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteComponentUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteComponentUnitRequestMultiError, or nil if none found.
func (m *DeleteComponentUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteComponentUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComponentUnit() == nil {
		err := DeleteComponentUnitRequestValidationError{
			field:  "ComponentUnit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComponentUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteComponentUnitRequestValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteComponentUnitRequestValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteComponentUnitRequestValidationError{
				field:  "ComponentUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteComponentUnitRequestMultiError(errors)
	}

	return nil
}

// DeleteComponentUnitRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteComponentUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteComponentUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteComponentUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteComponentUnitRequestMultiError) AllErrors() []error { return m }

// DeleteComponentUnitRequestValidationError is the validation error returned
// by DeleteComponentUnitRequest.Validate if the designated constraints aren't met.
type DeleteComponentUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteComponentUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteComponentUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteComponentUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteComponentUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteComponentUnitRequestValidationError) ErrorName() string {
	return "DeleteComponentUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteComponentUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteComponentUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteComponentUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteComponentUnitRequestValidationError{}

// Validate checks the field values on CreateBusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnit() == nil {
		err := CreateBusinessUnitRequestValidationError{
			field:  "BusinessUnit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitRequestValidationError{
				field:  "BusinessUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessUnitRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitRequestValidationError is the validation error returned by
// CreateBusinessUnitRequest.Validate if the designated constraints aren't met.
type CreateBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitRequestValidationError{}

// Validate checks the field values on ListBusinessUnitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessUnitsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBusinessUnitsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitsRequestValidationError is the validation error returned by
// ListBusinessUnitsRequest.Validate if the designated constraints aren't met.
type ListBusinessUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessUnitsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBusinessUnitsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListBusinessUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitsResponseValidationError is the validation error returned by
// ListBusinessUnitsResponse.Validate if the designated constraints aren't met.
type ListBusinessUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessUnitRequestMultiError, or nil if none found.
func (m *GetBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitId

	if len(errors) > 0 {
		return GetBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessUnitRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitRequestValidationError is the validation error returned by
// GetBusinessUnitRequest.Validate if the designated constraints aren't met.
type GetBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitRequestValidationError) ErrorName() string {
	return "GetBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnit() == nil {
		err := UpdateBusinessUnitRequestValidationError{
			field:  "BusinessUnit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitRequestValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitRequestValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitRequestValidationError{
				field:  "BusinessUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessUnitRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitRequestValidationError is the validation error returned by
// UpdateBusinessUnitRequest.Validate if the designated constraints aren't met.
type UpdateBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnit() == nil {
		err := DeleteBusinessUnitRequestValidationError{
			field:  "BusinessUnit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitRequestValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitRequestValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitRequestValidationError{
				field:  "BusinessUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessUnitRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitRequestValidationError is the validation error returned by
// DeleteBusinessUnitRequest.Validate if the designated constraints aren't met.
type DeleteBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitRequestValidationError{}

// Validate checks the field values on PublicListCompanyAndBusinessUnitsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PublicListCompanyAndBusinessUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PublicListCompanyAndBusinessUnitsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PublicListCompanyAndBusinessUnitsRequestMultiError, or nil if none found.
func (m *PublicListCompanyAndBusinessUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListCompanyAndBusinessUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublicListCompanyAndBusinessUnitsRequestMultiError(errors)
	}

	return nil
}

// PublicListCompanyAndBusinessUnitsRequestMultiError is an error wrapping
// multiple validation errors returned by
// PublicListCompanyAndBusinessUnitsRequest.ValidateAll() if the designated
// constraints aren't met.
type PublicListCompanyAndBusinessUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListCompanyAndBusinessUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListCompanyAndBusinessUnitsRequestMultiError) AllErrors() []error { return m }

// PublicListCompanyAndBusinessUnitsRequestValidationError is the validation
// error returned by PublicListCompanyAndBusinessUnitsRequest.Validate if the
// designated constraints aren't met.
type PublicListCompanyAndBusinessUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListCompanyAndBusinessUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListCompanyAndBusinessUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListCompanyAndBusinessUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListCompanyAndBusinessUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListCompanyAndBusinessUnitsRequestValidationError) ErrorName() string {
	return "PublicListCompanyAndBusinessUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListCompanyAndBusinessUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListCompanyAndBusinessUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListCompanyAndBusinessUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListCompanyAndBusinessUnitsRequestValidationError{}

// Validate checks the field values on
// PublicListCompanyAndBusinessUnitsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PublicListCompanyAndBusinessUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PublicListCompanyAndBusinessUnitsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PublicListCompanyAndBusinessUnitsResponseMultiError, or nil if none found.
func (m *PublicListCompanyAndBusinessUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListCompanyAndBusinessUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicListCompanyAndBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicListCompanyAndBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicListCompanyAndBusinessUnitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublicListCompanyAndBusinessUnitsResponseMultiError(errors)
	}

	return nil
}

// PublicListCompanyAndBusinessUnitsResponseMultiError is an error wrapping
// multiple validation errors returned by
// PublicListCompanyAndBusinessUnitsResponse.ValidateAll() if the designated
// constraints aren't met.
type PublicListCompanyAndBusinessUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListCompanyAndBusinessUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListCompanyAndBusinessUnitsResponseMultiError) AllErrors() []error { return m }

// PublicListCompanyAndBusinessUnitsResponseValidationError is the validation
// error returned by PublicListCompanyAndBusinessUnitsResponse.Validate if the
// designated constraints aren't met.
type PublicListCompanyAndBusinessUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListCompanyAndBusinessUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListCompanyAndBusinessUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListCompanyAndBusinessUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListCompanyAndBusinessUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListCompanyAndBusinessUnitsResponseValidationError) ErrorName() string {
	return "PublicListCompanyAndBusinessUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListCompanyAndBusinessUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListCompanyAndBusinessUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListCompanyAndBusinessUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListCompanyAndBusinessUnitsResponseValidationError{}

// Validate checks the field values on
// PublicListCompanyAndComponentUnitAndBusinessUnitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PublicListCompanyAndComponentUnitAndBusinessUnitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListCompanyAndComponentUnitAndBusinessUnitsRequestMultiError, or nil
// if none found.
func (m *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublicListCompanyAndComponentUnitAndBusinessUnitsRequestMultiError(errors)
	}

	return nil
}

// PublicListCompanyAndComponentUnitAndBusinessUnitsRequestMultiError is an
// error wrapping multiple validation errors returned by
// PublicListCompanyAndComponentUnitAndBusinessUnitsRequest.ValidateAll() if
// the designated constraints aren't met.
type PublicListCompanyAndComponentUnitAndBusinessUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListCompanyAndComponentUnitAndBusinessUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListCompanyAndComponentUnitAndBusinessUnitsRequestMultiError) AllErrors() []error {
	return m
}

// PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError is
// the validation error returned by
// PublicListCompanyAndComponentUnitAndBusinessUnitsRequest.Validate if the
// designated constraints aren't met.
type PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError) ErrorName() string {
	return "PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListCompanyAndComponentUnitAndBusinessUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListCompanyAndComponentUnitAndBusinessUnitsRequestValidationError{}

// Validate checks the field values on
// PublicListCompanyAndComponentUnitAndBusinessUnitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PublicListCompanyAndComponentUnitAndBusinessUnitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListCompanyAndComponentUnitAndBusinessUnitsResponseMultiError, or nil
// if none found.
func (m *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublicListCompanyAndComponentUnitAndBusinessUnitsResponseMultiError(errors)
	}

	return nil
}

// PublicListCompanyAndComponentUnitAndBusinessUnitsResponseMultiError is an
// error wrapping multiple validation errors returned by
// PublicListCompanyAndComponentUnitAndBusinessUnitsResponse.ValidateAll() if
// the designated constraints aren't met.
type PublicListCompanyAndComponentUnitAndBusinessUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListCompanyAndComponentUnitAndBusinessUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListCompanyAndComponentUnitAndBusinessUnitsResponseMultiError) AllErrors() []error {
	return m
}

// PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError is
// the validation error returned by
// PublicListCompanyAndComponentUnitAndBusinessUnitsResponse.Validate if the
// designated constraints aren't met.
type PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError) ErrorName() string {
	return "PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListCompanyAndComponentUnitAndBusinessUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListCompanyAndComponentUnitAndBusinessUnitsResponseValidationError{}

// Validate checks the field values on
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestMultiError,
// or nil if none found.
func (m *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestMultiError
// is an error wrapping multiple validation errors returned by
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest.ValidateAll()
// if the designated constraints aren't met.
type PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestMultiError) AllErrors() []error {
	return m
}

// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError
// is the validation error returned by
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest.Validate
// if the designated constraints aren't met.
type PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError) ErrorName() string {
	return "PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequestValidationError{}

// Validate checks the field values on
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseMultiError,
// or nil if none found.
func (m *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseMultiError(errors)
	}

	return nil
}

// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseMultiError
// is an error wrapping multiple validation errors returned by
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse.ValidateAll()
// if the designated constraints aren't met.
type PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseMultiError) AllErrors() []error {
	return m
}

// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError
// is the validation error returned by
// PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse.Validate
// if the designated constraints aren't met.
type PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError) ErrorName() string {
	return "PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitRequestRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnitRequest() == nil {
		err := CreateBusinessUnitRequestRequestValidationError{
			field:  "BusinessUnitRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitRequestRequestValidationError{
				field:  "BusinessUnitRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitRequestRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitRequestRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitRequestRequestValidationError is the validation error
// returned by CreateBusinessUnitRequestRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitRequestRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitRequestRequestValidationError{}

// Validate checks the field values on ListBusinessUnitRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitRequestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitRequestsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitRequestsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitRequestsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitRequestsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitRequestsRequestValidationError is the validation error
// returned by ListBusinessUnitRequestsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitRequestsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitRequestsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitRequestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitRequestsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitRequestsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitRequestsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitRequestsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitRequestsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitRequestsResponseValidationError is the validation error
// returned by ListBusinessUnitRequestsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitRequestsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitRequestsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitRequestRequestMultiError, or nil if none found.
func (m *GetBusinessUnitRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitRequestId

	if len(errors) > 0 {
		return GetBusinessUnitRequestRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitRequestRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitRequestRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitRequestRequestValidationError is the validation error
// returned by GetBusinessUnitRequestRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitRequestRequestValidationError) ErrorName() string {
	return "GetBusinessUnitRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitRequestRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitRequestRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnitRequest() == nil {
		err := UpdateBusinessUnitRequestRequestValidationError{
			field:  "BusinessUnitRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitRequestRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitRequestRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitRequestRequestValidationError{
				field:  "BusinessUnitRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitRequestRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitRequestRequestValidationError is the validation error
// returned by UpdateBusinessUnitRequestRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitRequestRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitRequestRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitRequestRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnitRequest() == nil {
		err := DeleteBusinessUnitRequestRequestValidationError{
			field:  "BusinessUnitRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitRequestRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitRequestRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitRequestRequestValidationError{
				field:  "BusinessUnitRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitRequestRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitRequestRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitRequestRequestValidationError is the validation error
// returned by DeleteBusinessUnitRequestRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitRequestRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitRequestRequestValidationError{}

// Validate checks the field values on CreateBusinessUnitRequestResultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateBusinessUnitRequestResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessUnitRequestResultRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateBusinessUnitRequestResultRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitRequestResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitRequestResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnitRequestResult() == nil {
		err := CreateBusinessUnitRequestResultRequestValidationError{
			field:  "BusinessUnitRequestResult",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequestResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequestResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequestResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequestResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitRequestResultRequestValidationError{
				field:  "BusinessUnitRequestResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetBusinessUnitRequest() == nil {
		err := CreateBusinessUnitRequestResultRequestValidationError{
			field:  "BusinessUnitRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitRequestResultRequestValidationError{
				field:  "BusinessUnitRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitRequestResultRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitRequestResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessUnitRequestResultRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitRequestResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitRequestResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitRequestResultRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitRequestResultRequestValidationError is the validation
// error returned by CreateBusinessUnitRequestResultRequest.Validate if the
// designated constraints aren't met.
type CreateBusinessUnitRequestResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitRequestResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitRequestResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitRequestResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitRequestResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitRequestResultRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitRequestResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitRequestResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitRequestResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitRequestResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitRequestResultRequestValidationError{}

// Validate checks the field values on ListBusinessUnitRequestResultsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitRequestResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitRequestResultsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitRequestResultsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitRequestResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitRequestResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitRequestResultsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitRequestResultsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitRequestResultsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitRequestResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitRequestResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitRequestResultsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitRequestResultsRequestValidationError is the validation error
// returned by ListBusinessUnitRequestResultsRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitRequestResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitRequestResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitRequestResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitRequestResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitRequestResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitRequestResultsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitRequestResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitRequestResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitRequestResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitRequestResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitRequestResultsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitRequestResultsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitRequestResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitRequestResultsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBusinessUnitRequestResultsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitRequestResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitRequestResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitRequestResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitRequestResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitRequestResultsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitRequestResultsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitRequestResultsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitRequestResultsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitRequestResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitRequestResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitRequestResultsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitRequestResultsResponseValidationError is the validation
// error returned by ListBusinessUnitRequestResultsResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitRequestResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitRequestResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitRequestResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitRequestResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitRequestResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitRequestResultsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitRequestResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitRequestResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitRequestResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitRequestResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitRequestResultsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitRequestResultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitRequestResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitRequestResultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitRequestResultRequestMultiError, or nil if none found.
func (m *GetBusinessUnitRequestResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitRequestResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitRequestResultId

	if len(errors) > 0 {
		return GetBusinessUnitRequestResultRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitRequestResultRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitRequestResultRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitRequestResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitRequestResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitRequestResultRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitRequestResultRequestValidationError is the validation error
// returned by GetBusinessUnitRequestResultRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitRequestResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitRequestResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitRequestResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitRequestResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitRequestResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitRequestResultRequestValidationError) ErrorName() string {
	return "GetBusinessUnitRequestResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitRequestResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitRequestResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitRequestResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitRequestResultRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitRequestResultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessUnitRequestResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessUnitRequestResultRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateBusinessUnitRequestResultRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitRequestResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitRequestResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnitRequestResult() == nil {
		err := UpdateBusinessUnitRequestResultRequestValidationError{
			field:  "BusinessUnitRequestResult",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequestResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequestResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequestResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequestResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitRequestResultRequestValidationError{
				field:  "BusinessUnitRequestResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitRequestResultRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitRequestResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessUnitRequestResultRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitRequestResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitRequestResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitRequestResultRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitRequestResultRequestValidationError is the validation
// error returned by UpdateBusinessUnitRequestResultRequest.Validate if the
// designated constraints aren't met.
type UpdateBusinessUnitRequestResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitRequestResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitRequestResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitRequestResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitRequestResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitRequestResultRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitRequestResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitRequestResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitRequestResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitRequestResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitRequestResultRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitRequestResultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteBusinessUnitRequestResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessUnitRequestResultRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteBusinessUnitRequestResultRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitRequestResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitRequestResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessUnitRequestResult() == nil {
		err := DeleteBusinessUnitRequestResultRequestValidationError{
			field:  "BusinessUnitRequestResult",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitRequestResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequestResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitRequestResultRequestValidationError{
					field:  "BusinessUnitRequestResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitRequestResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitRequestResultRequestValidationError{
				field:  "BusinessUnitRequestResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitRequestResultRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitRequestResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessUnitRequestResultRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitRequestResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitRequestResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitRequestResultRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitRequestResultRequestValidationError is the validation
// error returned by DeleteBusinessUnitRequestResultRequest.Validate if the
// designated constraints aren't met.
type DeleteBusinessUnitRequestResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitRequestResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitRequestResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitRequestResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitRequestResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitRequestResultRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitRequestResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitRequestResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitRequestResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitRequestResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitRequestResultRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharetoBusinessUnitRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoBusinessUnitRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharetoBusinessUnitRequestRequestMultiError, or nil if none found.
func (m *SharetoBusinessUnitRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := SharetoBusinessUnitRequestRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SharetoBusinessUnitRequestRequestMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitRequestRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharetoBusinessUnitRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitRequestRequestMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitRequestRequestValidationError is the validation error
// returned by SharetoBusinessUnitRequestRequest.Validate if the designated
// constraints aren't met.
type SharetoBusinessUnitRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitRequestRequestValidationError) ErrorName() string {
	return "SharetoBusinessUnitRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitRequestRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharetoBusinessUnitRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoBusinessUnitRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharetoBusinessUnitRequestResponseMultiError, or nil if none found.
func (m *SharetoBusinessUnitRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoBusinessUnitRequestResponseMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitRequestResponseMultiError is an error wrapping multiple
// validation errors returned by
// SharetoBusinessUnitRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitRequestResponseMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitRequestResponseValidationError is the validation error
// returned by SharetoBusinessUnitRequestResponse.Validate if the designated
// constraints aren't met.
type SharetoBusinessUnitRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitRequestResponseValidationError) ErrorName() string {
	return "SharetoBusinessUnitRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitRequestResponseValidationError{}

// Validate checks the field values on SharetoBusinessUnitRequestResultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitRequestResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitRequestResultRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharetoBusinessUnitRequestResultRequestMultiError, or nil if none found.
func (m *SharetoBusinessUnitRequestResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitRequestResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := SharetoBusinessUnitRequestResultRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SharetoBusinessUnitRequestResultRequestMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitRequestResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitRequestResultRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitRequestResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitRequestResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitRequestResultRequestMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitRequestResultRequestValidationError is the validation
// error returned by SharetoBusinessUnitRequestResultRequest.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitRequestResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitRequestResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitRequestResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitRequestResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitRequestResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitRequestResultRequestValidationError) ErrorName() string {
	return "SharetoBusinessUnitRequestResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitRequestResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitRequestResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitRequestResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitRequestResultRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitRequestResultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitRequestResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitRequestResultResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoBusinessUnitRequestResultResponseMultiError, or nil if none found.
func (m *SharetoBusinessUnitRequestResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitRequestResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoBusinessUnitRequestResultResponseMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitRequestResultResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitRequestResultResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitRequestResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitRequestResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitRequestResultResponseMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitRequestResultResponseValidationError is the validation
// error returned by SharetoBusinessUnitRequestResultResponse.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitRequestResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitRequestResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitRequestResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitRequestResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitRequestResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitRequestResultResponseValidationError) ErrorName() string {
	return "SharetoBusinessUnitRequestResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitRequestResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitRequestResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitRequestResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitRequestResultResponseValidationError{}

// Validate checks the field values on ListStaffsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStaffsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffsRequestMultiError, or nil if none found.
func (m *ListStaffsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return ListStaffsRequestMultiError(errors)
	}

	return nil
}

// ListStaffsRequestMultiError is an error wrapping multiple validation errors
// returned by ListStaffsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStaffsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffsRequestMultiError) AllErrors() []error { return m }

// ListStaffsRequestValidationError is the validation error returned by
// ListStaffsRequest.Validate if the designated constraints aren't met.
type ListStaffsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffsRequestValidationError) ErrorName() string {
	return "ListStaffsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffsRequestValidationError{}

// Validate checks the field values on ListStaffsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaffsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffsResponseMultiError, or nil if none found.
func (m *ListStaffsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffsResponseMultiError(errors)
	}

	return nil
}

// ListStaffsResponseMultiError is an error wrapping multiple validation errors
// returned by ListStaffsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListStaffsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffsResponseMultiError) AllErrors() []error { return m }

// ListStaffsResponseValidationError is the validation error returned by
// ListStaffsResponse.Validate if the designated constraints aren't met.
type ListStaffsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffsResponseValidationError) ErrorName() string {
	return "ListStaffsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffsResponseValidationError{}

// Validate checks the field values on GetStaffRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStaffRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStaffRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStaffRequestMultiError, or nil if none found.
func (m *GetStaffRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStaffRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StaffId

	if len(errors) > 0 {
		return GetStaffRequestMultiError(errors)
	}

	return nil
}

// GetStaffRequestMultiError is an error wrapping multiple validation errors
// returned by GetStaffRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStaffRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStaffRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStaffRequestMultiError) AllErrors() []error { return m }

// GetStaffRequestValidationError is the validation error returned by
// GetStaffRequest.Validate if the designated constraints aren't met.
type GetStaffRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStaffRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStaffRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStaffRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStaffRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStaffRequestValidationError) ErrorName() string { return "GetStaffRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStaffRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStaffRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStaffRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStaffRequestValidationError{}

// Validate checks the field values on ListStaffAndComponentUnitsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListStaffAndComponentUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffAndComponentUnitsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListStaffAndComponentUnitsRequestMultiError, or nil if none found.
func (m *ListStaffAndComponentUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffAndComponentUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return ListStaffAndComponentUnitsRequestMultiError(errors)
	}

	return nil
}

// ListStaffAndComponentUnitsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListStaffAndComponentUnitsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStaffAndComponentUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffAndComponentUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffAndComponentUnitsRequestMultiError) AllErrors() []error { return m }

// ListStaffAndComponentUnitsRequestValidationError is the validation error
// returned by ListStaffAndComponentUnitsRequest.Validate if the designated
// constraints aren't met.
type ListStaffAndComponentUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffAndComponentUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffAndComponentUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffAndComponentUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffAndComponentUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffAndComponentUnitsRequestValidationError) ErrorName() string {
	return "ListStaffAndComponentUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffAndComponentUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffAndComponentUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffAndComponentUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffAndComponentUnitsRequestValidationError{}

// Validate checks the field values on ListStaffAndComponentUnitsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListStaffAndComponentUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffAndComponentUnitsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListStaffAndComponentUnitsResponseMultiError, or nil if none found.
func (m *ListStaffAndComponentUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffAndComponentUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffAndComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffAndComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffAndComponentUnitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffAndComponentUnitsResponseMultiError(errors)
	}

	return nil
}

// ListStaffAndComponentUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListStaffAndComponentUnitsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStaffAndComponentUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffAndComponentUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffAndComponentUnitsResponseMultiError) AllErrors() []error { return m }

// ListStaffAndComponentUnitsResponseValidationError is the validation error
// returned by ListStaffAndComponentUnitsResponse.Validate if the designated
// constraints aren't met.
type ListStaffAndComponentUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffAndComponentUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffAndComponentUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffAndComponentUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffAndComponentUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffAndComponentUnitsResponseValidationError) ErrorName() string {
	return "ListStaffAndComponentUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffAndComponentUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffAndComponentUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffAndComponentUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffAndComponentUnitsResponseValidationError{}

// Validate checks the field values on ImportStaffsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportStaffsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportStaffsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportStaffsRequestMultiError, or nil if none found.
func (m *ImportStaffsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportStaffsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportStaffsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportStaffsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportStaffsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportStaffsRequestMultiError(errors)
	}

	return nil
}

// ImportStaffsRequestMultiError is an error wrapping multiple validation
// errors returned by ImportStaffsRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportStaffsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportStaffsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportStaffsRequestMultiError) AllErrors() []error { return m }

// ImportStaffsRequestValidationError is the validation error returned by
// ImportStaffsRequest.Validate if the designated constraints aren't met.
type ImportStaffsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportStaffsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportStaffsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportStaffsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportStaffsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportStaffsRequestValidationError) ErrorName() string {
	return "ImportStaffsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportStaffsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportStaffsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportStaffsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportStaffsRequestValidationError{}

// Validate checks the field values on ImportStaffsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportStaffsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportStaffsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportStaffsResponseMultiError, or nil if none found.
func (m *ImportStaffsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportStaffsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportStaffsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportStaffsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportStaffsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportStaffsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportStaffsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportStaffsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportStaffsResponseMultiError(errors)
	}

	return nil
}

// ImportStaffsResponseMultiError is an error wrapping multiple validation
// errors returned by ImportStaffsResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportStaffsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportStaffsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportStaffsResponseMultiError) AllErrors() []error { return m }

// ImportStaffsResponseValidationError is the validation error returned by
// ImportStaffsResponse.Validate if the designated constraints aren't met.
type ImportStaffsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportStaffsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportStaffsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportStaffsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportStaffsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportStaffsResponseValidationError) ErrorName() string {
	return "ImportStaffsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportStaffsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportStaffsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportStaffsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportStaffsResponseValidationError{}

// Validate checks the field values on ExportStaffsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportStaffsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportStaffsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportStaffsRequestMultiError, or nil if none found.
func (m *ExportStaffsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportStaffsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportStaffsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportStaffsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportStaffsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportStaffsRequestMultiError(errors)
	}

	return nil
}

// ExportStaffsRequestMultiError is an error wrapping multiple validation
// errors returned by ExportStaffsRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportStaffsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportStaffsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportStaffsRequestMultiError) AllErrors() []error { return m }

// ExportStaffsRequestValidationError is the validation error returned by
// ExportStaffsRequest.Validate if the designated constraints aren't met.
type ExportStaffsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportStaffsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportStaffsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportStaffsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportStaffsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportStaffsRequestValidationError) ErrorName() string {
	return "ExportStaffsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportStaffsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportStaffsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportStaffsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportStaffsRequestValidationError{}

// Validate checks the field values on ExportStaffsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportStaffsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportStaffsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportStaffsResponseMultiError, or nil if none found.
func (m *ExportStaffsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportStaffsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportStaffsResponseMultiError(errors)
	}

	return nil
}

// ExportStaffsResponseMultiError is an error wrapping multiple validation
// errors returned by ExportStaffsResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportStaffsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportStaffsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportStaffsResponseMultiError) AllErrors() []error { return m }

// ExportStaffsResponseValidationError is the validation error returned by
// ExportStaffsResponse.Validate if the designated constraints aren't met.
type ExportStaffsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportStaffsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportStaffsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportStaffsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportStaffsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportStaffsResponseValidationError) ErrorName() string {
	return "ExportStaffsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportStaffsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportStaffsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportStaffsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportStaffsResponseValidationError{}

// Validate checks the field values on ImportComponentUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportComponentUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportComponentUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportComponentUnitsRequestMultiError, or nil if none found.
func (m *ImportComponentUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportComponentUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportComponentUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportComponentUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportComponentUnitsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportComponentUnitsRequestMultiError(errors)
	}

	return nil
}

// ImportComponentUnitsRequestMultiError is an error wrapping multiple
// validation errors returned by ImportComponentUnitsRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportComponentUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportComponentUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportComponentUnitsRequestMultiError) AllErrors() []error { return m }

// ImportComponentUnitsRequestValidationError is the validation error returned
// by ImportComponentUnitsRequest.Validate if the designated constraints
// aren't met.
type ImportComponentUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportComponentUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportComponentUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportComponentUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportComponentUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportComponentUnitsRequestValidationError) ErrorName() string {
	return "ImportComponentUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportComponentUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportComponentUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportComponentUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportComponentUnitsRequestValidationError{}

// Validate checks the field values on ImportComponentUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportComponentUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportComponentUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportComponentUnitsResponseMultiError, or nil if none found.
func (m *ImportComponentUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportComponentUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportComponentUnitsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportComponentUnitsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportComponentUnitsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportComponentUnitsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportComponentUnitsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportComponentUnitsResponseMultiError(errors)
	}

	return nil
}

// ImportComponentUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by ImportComponentUnitsResponse.ValidateAll() if
// the designated constraints aren't met.
type ImportComponentUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportComponentUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportComponentUnitsResponseMultiError) AllErrors() []error { return m }

// ImportComponentUnitsResponseValidationError is the validation error returned
// by ImportComponentUnitsResponse.Validate if the designated constraints
// aren't met.
type ImportComponentUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportComponentUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportComponentUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportComponentUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportComponentUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportComponentUnitsResponseValidationError) ErrorName() string {
	return "ImportComponentUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportComponentUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportComponentUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportComponentUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportComponentUnitsResponseValidationError{}

// Validate checks the field values on ExportComponentUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportComponentUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportComponentUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportComponentUnitsRequestMultiError, or nil if none found.
func (m *ExportComponentUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportComponentUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportComponentUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportComponentUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportComponentUnitsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportComponentUnitsRequestMultiError(errors)
	}

	return nil
}

// ExportComponentUnitsRequestMultiError is an error wrapping multiple
// validation errors returned by ExportComponentUnitsRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportComponentUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportComponentUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportComponentUnitsRequestMultiError) AllErrors() []error { return m }

// ExportComponentUnitsRequestValidationError is the validation error returned
// by ExportComponentUnitsRequest.Validate if the designated constraints
// aren't met.
type ExportComponentUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportComponentUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportComponentUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportComponentUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportComponentUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportComponentUnitsRequestValidationError) ErrorName() string {
	return "ExportComponentUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportComponentUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportComponentUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportComponentUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportComponentUnitsRequestValidationError{}

// Validate checks the field values on ExportComponentUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportComponentUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportComponentUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportComponentUnitsResponseMultiError, or nil if none found.
func (m *ExportComponentUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportComponentUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportComponentUnitsResponseMultiError(errors)
	}

	return nil
}

// ExportComponentUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by ExportComponentUnitsResponse.ValidateAll() if
// the designated constraints aren't met.
type ExportComponentUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportComponentUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportComponentUnitsResponseMultiError) AllErrors() []error { return m }

// ExportComponentUnitsResponseValidationError is the validation error returned
// by ExportComponentUnitsResponse.Validate if the designated constraints
// aren't met.
type ExportComponentUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportComponentUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportComponentUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportComponentUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportComponentUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportComponentUnitsResponseValidationError) ErrorName() string {
	return "ExportComponentUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportComponentUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportComponentUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportComponentUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportComponentUnitsResponseValidationError{}

// Validate checks the field values on ImportBusinessUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportBusinessUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBusinessUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportBusinessUnitsRequestMultiError, or nil if none found.
func (m *ImportBusinessUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportBusinessUnitsRequestMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitsRequestMultiError is an error wrapping multiple
// validation errors returned by ImportBusinessUnitsRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportBusinessUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitsRequestMultiError) AllErrors() []error { return m }

// ImportBusinessUnitsRequestValidationError is the validation error returned
// by ImportBusinessUnitsRequest.Validate if the designated constraints aren't met.
type ImportBusinessUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBusinessUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitsRequestValidationError) ErrorName() string {
	return "ImportBusinessUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitsRequestValidationError{}

// Validate checks the field values on ImportBusinessUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportBusinessUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBusinessUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportBusinessUnitsResponseMultiError, or nil if none found.
func (m *ImportBusinessUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportBusinessUnitsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportBusinessUnitsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportBusinessUnitsResponseMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by ImportBusinessUnitsResponse.ValidateAll() if
// the designated constraints aren't met.
type ImportBusinessUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitsResponseMultiError) AllErrors() []error { return m }

// ImportBusinessUnitsResponseValidationError is the validation error returned
// by ImportBusinessUnitsResponse.Validate if the designated constraints
// aren't met.
type ImportBusinessUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBusinessUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitsResponseValidationError) ErrorName() string {
	return "ImportBusinessUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitsResponseValidationError{}

// Validate checks the field values on ExportBusinessUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportBusinessUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBusinessUnitsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportBusinessUnitsRequestMultiError, or nil if none found.
func (m *ExportBusinessUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportBusinessUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportBusinessUnitsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportBusinessUnitsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportBusinessUnitsRequestMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitsRequestMultiError is an error wrapping multiple
// validation errors returned by ExportBusinessUnitsRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportBusinessUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitsRequestMultiError) AllErrors() []error { return m }

// ExportBusinessUnitsRequestValidationError is the validation error returned
// by ExportBusinessUnitsRequest.Validate if the designated constraints aren't met.
type ExportBusinessUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBusinessUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitsRequestValidationError) ErrorName() string {
	return "ExportBusinessUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitsRequestValidationError{}

// Validate checks the field values on ExportBusinessUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportBusinessUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBusinessUnitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportBusinessUnitsResponseMultiError, or nil if none found.
func (m *ExportBusinessUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportBusinessUnitsResponseMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitsResponseMultiError is an error wrapping multiple
// validation errors returned by ExportBusinessUnitsResponse.ValidateAll() if
// the designated constraints aren't met.
type ExportBusinessUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitsResponseMultiError) AllErrors() []error { return m }

// ExportBusinessUnitsResponseValidationError is the validation error returned
// by ExportBusinessUnitsResponse.Validate if the designated constraints
// aren't met.
type ExportBusinessUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBusinessUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitsResponseValidationError) ErrorName() string {
	return "ExportBusinessUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitsResponseValidationError{}

// Validate checks the field values on ListComponentUnitFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComponentUnitFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentUnitFormatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListComponentUnitFormatsRequestMultiError, or nil if none found.
func (m *ListComponentUnitFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentUnitFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListComponentUnitFormatsRequestMultiError(errors)
	}

	return nil
}

// ListComponentUnitFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by ListComponentUnitFormatsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListComponentUnitFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentUnitFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentUnitFormatsRequestMultiError) AllErrors() []error { return m }

// ListComponentUnitFormatsRequestValidationError is the validation error
// returned by ListComponentUnitFormatsRequest.Validate if the designated
// constraints aren't met.
type ListComponentUnitFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentUnitFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentUnitFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentUnitFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentUnitFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentUnitFormatsRequestValidationError) ErrorName() string {
	return "ListComponentUnitFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentUnitFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentUnitFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentUnitFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentUnitFormatsRequestValidationError{}

// Validate checks the field values on ListComponentUnitFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListComponentUnitFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentUnitFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListComponentUnitFormatsResponseMultiError, or nil if none found.
func (m *ListComponentUnitFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentUnitFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListComponentUnitFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListComponentUnitFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComponentUnitFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListComponentUnitFormatsResponseMultiError(errors)
	}

	return nil
}

// ListComponentUnitFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListComponentUnitFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListComponentUnitFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentUnitFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentUnitFormatsResponseMultiError) AllErrors() []error { return m }

// ListComponentUnitFormatsResponseValidationError is the validation error
// returned by ListComponentUnitFormatsResponse.Validate if the designated
// constraints aren't met.
type ListComponentUnitFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentUnitFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentUnitFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentUnitFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentUnitFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentUnitFormatsResponseValidationError) ErrorName() string {
	return "ListComponentUnitFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentUnitFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentUnitFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentUnitFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentUnitFormatsResponseValidationError{}

// Validate checks the field values on ListBusinessUnitFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitFormatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitFormatsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitFormatsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitFormatsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitFormatsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitFormatsRequestValidationError is the validation error
// returned by ListBusinessUnitFormatsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitFormatsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitFormatsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitFormatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitFormatsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitFormatsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitFormatsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitFormatsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitFormatsResponseValidationError is the validation error
// returned by ListBusinessUnitFormatsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitFormatsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitFormatsResponseValidationError{}

// Validate checks the field values on ListStaffFormatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaffFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffFormatsRequestMultiError, or nil if none found.
func (m *ListStaffFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStaffFormatsRequestMultiError(errors)
	}

	return nil
}

// ListStaffFormatsRequestMultiError is an error wrapping multiple validation
// errors returned by ListStaffFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStaffFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffFormatsRequestMultiError) AllErrors() []error { return m }

// ListStaffFormatsRequestValidationError is the validation error returned by
// ListStaffFormatsRequest.Validate if the designated constraints aren't met.
type ListStaffFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffFormatsRequestValidationError) ErrorName() string {
	return "ListStaffFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffFormatsRequestValidationError{}

// Validate checks the field values on ListStaffFormatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaffFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffFormatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaffFormatsResponseMultiError, or nil if none found.
func (m *ListStaffFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffFormatsResponseMultiError(errors)
	}

	return nil
}

// ListStaffFormatsResponseMultiError is an error wrapping multiple validation
// errors returned by ListStaffFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStaffFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffFormatsResponseMultiError) AllErrors() []error { return m }

// ListStaffFormatsResponseValidationError is the validation error returned by
// ListStaffFormatsResponse.Validate if the designated constraints aren't met.
type ListStaffFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffFormatsResponseValidationError) ErrorName() string {
	return "ListStaffFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaffFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffFormatsResponseValidationError{}

// Validate checks the field values on PublicGetCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicGetCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicGetCompanyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicGetCompanyRequestMultiError, or nil if none found.
func (m *PublicGetCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicGetCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return PublicGetCompanyRequestMultiError(errors)
	}

	return nil
}

// PublicGetCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by PublicGetCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type PublicGetCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicGetCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicGetCompanyRequestMultiError) AllErrors() []error { return m }

// PublicGetCompanyRequestValidationError is the validation error returned by
// PublicGetCompanyRequest.Validate if the designated constraints aren't met.
type PublicGetCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicGetCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicGetCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicGetCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicGetCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicGetCompanyRequestValidationError) ErrorName() string {
	return "PublicGetCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicGetCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicGetCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicGetCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicGetCompanyRequestValidationError{}

// Validate checks the field values on PublicListCompanysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListCompanysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicListCompanysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListCompanysRequestMultiError, or nil if none found.
func (m *PublicListCompanysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListCompanysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return PublicListCompanysRequestMultiError(errors)
	}

	return nil
}

// PublicListCompanysRequestMultiError is an error wrapping multiple validation
// errors returned by PublicListCompanysRequest.ValidateAll() if the
// designated constraints aren't met.
type PublicListCompanysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListCompanysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListCompanysRequestMultiError) AllErrors() []error { return m }

// PublicListCompanysRequestValidationError is the validation error returned by
// PublicListCompanysRequest.Validate if the designated constraints aren't met.
type PublicListCompanysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListCompanysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListCompanysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListCompanysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListCompanysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListCompanysRequestValidationError) ErrorName() string {
	return "PublicListCompanysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListCompanysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListCompanysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListCompanysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListCompanysRequestValidationError{}

// Validate checks the field values on PublicListCompanysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicListCompanysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicListCompanysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicListCompanysResponseMultiError, or nil if none found.
func (m *PublicListCompanysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicListCompanysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublicListCompanysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublicListCompanysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublicListCompanysResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return PublicListCompanysResponseMultiError(errors)
	}

	return nil
}

// PublicListCompanysResponseMultiError is an error wrapping multiple
// validation errors returned by PublicListCompanysResponse.ValidateAll() if
// the designated constraints aren't met.
type PublicListCompanysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicListCompanysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicListCompanysResponseMultiError) AllErrors() []error { return m }

// PublicListCompanysResponseValidationError is the validation error returned
// by PublicListCompanysResponse.Validate if the designated constraints aren't met.
type PublicListCompanysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicListCompanysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicListCompanysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicListCompanysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicListCompanysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicListCompanysResponseValidationError) ErrorName() string {
	return "PublicListCompanysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicListCompanysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicListCompanysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicListCompanysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicListCompanysResponseValidationError{}

// Validate checks the field values on ListBusinessUnitManagementsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitManagementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitManagementsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitManagementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitManagementsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitManagementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitManagementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementsRequestValidationError is the validation error
// returned by ListBusinessUnitManagementsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitManagementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitManagementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitManagementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitManagementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitManagementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitManagementsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitManagementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitManagementsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitManagementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitManagementsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitManagementsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitManagementsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitManagementsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitManagementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitManagementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementsResponseValidationError is the validation error
// returned by ListBusinessUnitManagementsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitManagementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitManagementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitManagementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitManagementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitManagementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitManagementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitManagementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *GetBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	if len(errors) > 0 {
		return GetBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitManagementRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitManagementRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitManagementRequestValidationError is the validation error
// returned by GetBusinessUnitManagementRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitManagementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitManagementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitManagementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "GetBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on
// ListOldBusinessUnitManagementFormatsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOldBusinessUnitManagementFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOldBusinessUnitManagementFormatsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOldBusinessUnitManagementFormatsRequestMultiError, or nil if none found.
func (m *ListOldBusinessUnitManagementFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOldBusinessUnitManagementFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOldBusinessUnitManagementFormatsRequestMultiError(errors)
	}

	return nil
}

// ListOldBusinessUnitManagementFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOldBusinessUnitManagementFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOldBusinessUnitManagementFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOldBusinessUnitManagementFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOldBusinessUnitManagementFormatsRequestMultiError) AllErrors() []error { return m }

// ListOldBusinessUnitManagementFormatsRequestValidationError is the validation
// error returned by ListOldBusinessUnitManagementFormatsRequest.Validate if
// the designated constraints aren't met.
type ListOldBusinessUnitManagementFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOldBusinessUnitManagementFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOldBusinessUnitManagementFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOldBusinessUnitManagementFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOldBusinessUnitManagementFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOldBusinessUnitManagementFormatsRequestValidationError) ErrorName() string {
	return "ListOldBusinessUnitManagementFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOldBusinessUnitManagementFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOldBusinessUnitManagementFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOldBusinessUnitManagementFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOldBusinessUnitManagementFormatsRequestValidationError{}

// Validate checks the field values on
// ListOldBusinessUnitManagementFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOldBusinessUnitManagementFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOldBusinessUnitManagementFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOldBusinessUnitManagementFormatsResponseMultiError, or nil if none found.
func (m *ListOldBusinessUnitManagementFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOldBusinessUnitManagementFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOldBusinessUnitManagementFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOldBusinessUnitManagementFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOldBusinessUnitManagementFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOldBusinessUnitManagementFormatsResponseMultiError(errors)
	}

	return nil
}

// ListOldBusinessUnitManagementFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOldBusinessUnitManagementFormatsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOldBusinessUnitManagementFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOldBusinessUnitManagementFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOldBusinessUnitManagementFormatsResponseMultiError) AllErrors() []error { return m }

// ListOldBusinessUnitManagementFormatsResponseValidationError is the
// validation error returned by
// ListOldBusinessUnitManagementFormatsResponse.Validate if the designated
// constraints aren't met.
type ListOldBusinessUnitManagementFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOldBusinessUnitManagementFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOldBusinessUnitManagementFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOldBusinessUnitManagementFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOldBusinessUnitManagementFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOldBusinessUnitManagementFormatsResponseValidationError) ErrorName() string {
	return "ListOldBusinessUnitManagementFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOldBusinessUnitManagementFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOldBusinessUnitManagementFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOldBusinessUnitManagementFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOldBusinessUnitManagementFormatsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitManagementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitManagementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitManagement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitManagementRequestValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitManagementRequestValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitManagementRequestValidationError{
				field:  "BusinessUnitManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitManagementRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitManagementRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitManagementRequestValidationError is the validation error
// returned by CreateBusinessUnitManagementRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitManagementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitManagementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitManagementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitManagementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitManagementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitManagement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitManagementRequestValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitManagementRequestValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitManagementRequestValidationError{
				field:  "BusinessUnitManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitManagementRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitManagementRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitManagementRequestValidationError is the validation error
// returned by UpdateBusinessUnitManagementRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitManagementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitManagementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitManagementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitManagementRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitManagementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitManagement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitManagementRequestValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitManagementRequestValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitManagementRequestValidationError{
				field:  "BusinessUnitManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitManagementRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitManagementRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitManagementRequestValidationError is the validation error
// returned by DeleteBusinessUnitManagementRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitManagementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitManagementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitManagementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on ImportOldBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ImportOldBusinessUnitManagementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ImportOldBusinessUnitManagementsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ImportOldBusinessUnitManagementsRequestMultiError, or nil if none found.
func (m *ImportOldBusinessUnitManagementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportOldBusinessUnitManagementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportOldBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportOldBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportOldBusinessUnitManagementsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportOldBusinessUnitManagementsRequestMultiError(errors)
	}

	return nil
}

// ImportOldBusinessUnitManagementsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ImportOldBusinessUnitManagementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportOldBusinessUnitManagementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportOldBusinessUnitManagementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportOldBusinessUnitManagementsRequestMultiError) AllErrors() []error { return m }

// ImportOldBusinessUnitManagementsRequestValidationError is the validation
// error returned by ImportOldBusinessUnitManagementsRequest.Validate if the
// designated constraints aren't met.
type ImportOldBusinessUnitManagementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportOldBusinessUnitManagementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportOldBusinessUnitManagementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportOldBusinessUnitManagementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportOldBusinessUnitManagementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportOldBusinessUnitManagementsRequestValidationError) ErrorName() string {
	return "ImportOldBusinessUnitManagementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportOldBusinessUnitManagementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportOldBusinessUnitManagementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportOldBusinessUnitManagementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportOldBusinessUnitManagementsRequestValidationError{}

// Validate checks the field values on ImportOldBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ImportOldBusinessUnitManagementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ImportOldBusinessUnitManagementsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ImportOldBusinessUnitManagementsResponseMultiError, or nil if none found.
func (m *ImportOldBusinessUnitManagementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportOldBusinessUnitManagementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportOldBusinessUnitManagementsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportOldBusinessUnitManagementsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportOldBusinessUnitManagementsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportOldBusinessUnitManagementsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportOldBusinessUnitManagementsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportOldBusinessUnitManagementsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportOldBusinessUnitManagementsResponseMultiError(errors)
	}

	return nil
}

// ImportOldBusinessUnitManagementsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ImportOldBusinessUnitManagementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportOldBusinessUnitManagementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportOldBusinessUnitManagementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportOldBusinessUnitManagementsResponseMultiError) AllErrors() []error { return m }

// ImportOldBusinessUnitManagementsResponseValidationError is the validation
// error returned by ImportOldBusinessUnitManagementsResponse.Validate if the
// designated constraints aren't met.
type ImportOldBusinessUnitManagementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportOldBusinessUnitManagementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportOldBusinessUnitManagementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportOldBusinessUnitManagementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportOldBusinessUnitManagementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportOldBusinessUnitManagementsResponseValidationError) ErrorName() string {
	return "ImportOldBusinessUnitManagementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportOldBusinessUnitManagementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportOldBusinessUnitManagementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportOldBusinessUnitManagementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportOldBusinessUnitManagementsResponseValidationError{}

// Validate checks the field values on
// ListBusinessUnitManagementContentsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitManagementContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitManagementContentsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitManagementContentsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitManagementContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitManagementContentsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementContentsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitManagementContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitManagementContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementContentsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementContentsRequestValidationError is the validation
// error returned by ListBusinessUnitManagementContentsRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitManagementContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitManagementContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitManagementContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitManagementContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementContentsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitManagementContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementContentsRequestValidationError{}

// Validate checks the field values on
// ListBusinessUnitManagementContentsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitManagementContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitManagementContentsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitManagementContentsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitManagementContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitManagementContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitManagementContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitManagementContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitManagementContentsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementContentsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitManagementContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitManagementContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementContentsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementContentsResponseValidationError is the validation
// error returned by ListBusinessUnitManagementContentsResponse.Validate if
// the designated constraints aren't met.
type ListBusinessUnitManagementContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitManagementContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitManagementContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitManagementContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementContentsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitManagementContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementContentsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitManagementContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessUnitManagementContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBusinessUnitManagementContentRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetBusinessUnitManagementContentRequestMultiError, or nil if none found.
func (m *GetBusinessUnitManagementContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitManagementContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	if len(errors) > 0 {
		return GetBusinessUnitManagementContentRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitManagementContentRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetBusinessUnitManagementContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitManagementContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitManagementContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitManagementContentRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitManagementContentRequestValidationError is the validation
// error returned by GetBusinessUnitManagementContentRequest.Validate if the
// designated constraints aren't met.
type GetBusinessUnitManagementContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitManagementContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitManagementContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitManagementContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitManagementContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitManagementContentRequestValidationError) ErrorName() string {
	return "GetBusinessUnitManagementContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitManagementContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitManagementContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitManagementContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitManagementContentRequestValidationError{}

// Validate checks the field values on ExportOldBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExportOldBusinessUnitManagementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExportOldBusinessUnitManagementsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ExportOldBusinessUnitManagementsRequestMultiError, or nil if none found.
func (m *ExportOldBusinessUnitManagementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportOldBusinessUnitManagementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportOldBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportOldBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportOldBusinessUnitManagementsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportOldBusinessUnitManagementsRequestMultiError(errors)
	}

	return nil
}

// ExportOldBusinessUnitManagementsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ExportOldBusinessUnitManagementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportOldBusinessUnitManagementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportOldBusinessUnitManagementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportOldBusinessUnitManagementsRequestMultiError) AllErrors() []error { return m }

// ExportOldBusinessUnitManagementsRequestValidationError is the validation
// error returned by ExportOldBusinessUnitManagementsRequest.Validate if the
// designated constraints aren't met.
type ExportOldBusinessUnitManagementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportOldBusinessUnitManagementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportOldBusinessUnitManagementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportOldBusinessUnitManagementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportOldBusinessUnitManagementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportOldBusinessUnitManagementsRequestValidationError) ErrorName() string {
	return "ExportOldBusinessUnitManagementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportOldBusinessUnitManagementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportOldBusinessUnitManagementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportOldBusinessUnitManagementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportOldBusinessUnitManagementsRequestValidationError{}

// Validate checks the field values on ExportOldBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExportOldBusinessUnitManagementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExportOldBusinessUnitManagementsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ExportOldBusinessUnitManagementsResponseMultiError, or nil if none found.
func (m *ExportOldBusinessUnitManagementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportOldBusinessUnitManagementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportOldBusinessUnitManagementsResponseMultiError(errors)
	}

	return nil
}

// ExportOldBusinessUnitManagementsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ExportOldBusinessUnitManagementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportOldBusinessUnitManagementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportOldBusinessUnitManagementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportOldBusinessUnitManagementsResponseMultiError) AllErrors() []error { return m }

// ExportOldBusinessUnitManagementsResponseValidationError is the validation
// error returned by ExportOldBusinessUnitManagementsResponse.Validate if the
// designated constraints aren't met.
type ExportOldBusinessUnitManagementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportOldBusinessUnitManagementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportOldBusinessUnitManagementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportOldBusinessUnitManagementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportOldBusinessUnitManagementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportOldBusinessUnitManagementsResponseValidationError) ErrorName() string {
	return "ExportOldBusinessUnitManagementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportOldBusinessUnitManagementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportOldBusinessUnitManagementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportOldBusinessUnitManagementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportOldBusinessUnitManagementsResponseValidationError{}

// Validate checks the field values on ListHistorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistorysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistorysRequestMultiError, or nil if none found.
func (m *ListHistorysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistorysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ListHistorysRequestMultiError(errors)
	}

	return nil
}

// ListHistorysRequestMultiError is an error wrapping multiple validation
// errors returned by ListHistorysRequest.ValidateAll() if the designated
// constraints aren't met.
type ListHistorysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistorysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistorysRequestMultiError) AllErrors() []error { return m }

// ListHistorysRequestValidationError is the validation error returned by
// ListHistorysRequest.Validate if the designated constraints aren't met.
type ListHistorysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistorysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistorysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistorysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistorysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistorysRequestValidationError) ErrorName() string {
	return "ListHistorysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistorysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistorysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistorysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistorysRequestValidationError{}

// Validate checks the field values on ListHistorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistorysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistorysResponseMultiError, or nil if none found.
func (m *ListHistorysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistorysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHistorysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHistorysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHistorysResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListHistorysResponseMultiError(errors)
	}

	return nil
}

// ListHistorysResponseMultiError is an error wrapping multiple validation
// errors returned by ListHistorysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListHistorysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistorysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistorysResponseMultiError) AllErrors() []error { return m }

// ListHistorysResponseValidationError is the validation error returned by
// ListHistorysResponse.Validate if the designated constraints aren't met.
type ListHistorysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistorysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistorysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistorysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistorysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistorysResponseValidationError) ErrorName() string {
	return "ListHistorysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistorysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistorysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistorysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistorysResponseValidationError{}

// Validate checks the field values on SendEmailTenantInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailTenantInvitationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailTenantInvitationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendEmailTenantInvitationRequestMultiError, or nil if none found.
func (m *SendEmailTenantInvitationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailTenantInvitationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	// no validation rules for IndividualMessage

	// no validation rules for ContactInformationMessage

	if len(errors) > 0 {
		return SendEmailTenantInvitationRequestMultiError(errors)
	}

	return nil
}

// SendEmailTenantInvitationRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailTenantInvitationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendEmailTenantInvitationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailTenantInvitationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailTenantInvitationRequestMultiError) AllErrors() []error { return m }

// SendEmailTenantInvitationRequestValidationError is the validation error
// returned by SendEmailTenantInvitationRequest.Validate if the designated
// constraints aren't met.
type SendEmailTenantInvitationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailTenantInvitationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailTenantInvitationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailTenantInvitationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailTenantInvitationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailTenantInvitationRequestValidationError) ErrorName() string {
	return "SendEmailTenantInvitationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailTenantInvitationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailTenantInvitationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailTenantInvitationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailTenantInvitationRequestValidationError{}

// Validate checks the field values on SendEmailTenantInvitationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendEmailTenantInvitationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailTenantInvitationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendEmailTenantInvitationResponseMultiError, or nil if none found.
func (m *SendEmailTenantInvitationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailTenantInvitationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailTenantInvitationResponseMultiError(errors)
	}

	return nil
}

// SendEmailTenantInvitationResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendEmailTenantInvitationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendEmailTenantInvitationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailTenantInvitationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailTenantInvitationResponseMultiError) AllErrors() []error { return m }

// SendEmailTenantInvitationResponseValidationError is the validation error
// returned by SendEmailTenantInvitationResponse.Validate if the designated
// constraints aren't met.
type SendEmailTenantInvitationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailTenantInvitationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailTenantInvitationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailTenantInvitationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailTenantInvitationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailTenantInvitationResponseValidationError) ErrorName() string {
	return "SendEmailTenantInvitationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailTenantInvitationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailTenantInvitationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailTenantInvitationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailTenantInvitationResponseValidationError{}

// Validate checks the field values on ListBusinessUnitProfilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitProfilesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitProfilesRequestMultiError, or nil if none found.
func (m *ListBusinessUnitProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitProfilesRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitProfilesRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitProfilesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitProfilesRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitProfilesRequestValidationError is the validation error
// returned by ListBusinessUnitProfilesRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitProfilesRequestValidationError) ErrorName() string {
	return "ListBusinessUnitProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitProfilesRequestValidationError{}

// Validate checks the field values on ListBusinessUnitProfilesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitProfilesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitProfilesResponseMultiError, or nil if none found.
func (m *ListBusinessUnitProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitProfilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitProfilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitProfilesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitProfilesResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitProfilesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitProfilesResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitProfilesResponseValidationError is the validation error
// returned by ListBusinessUnitProfilesResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitProfilesResponseValidationError) ErrorName() string {
	return "ListBusinessUnitProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitProfilesResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitProfileRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitProfileRequestValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitProfileRequestValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitProfileRequestValidationError{
				field:  "BusinessUnitProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitProfileRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitProfileRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitProfileRequestValidationError is the validation error
// returned by CreateBusinessUnitProfileRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitProfileRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitProfileRequestValidationError{}

// Validate checks the field values on GetBusinessUnitProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitProfileRequestMultiError, or nil if none found.
func (m *GetBusinessUnitProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitProfileId

	if len(errors) > 0 {
		return GetBusinessUnitProfileRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitProfileRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitProfileRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitProfileRequestValidationError is the validation error
// returned by GetBusinessUnitProfileRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitProfileRequestValidationError) ErrorName() string {
	return "GetBusinessUnitProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitProfileRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitProfileRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitProfileRequestValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitProfileRequestValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitProfileRequestValidationError{
				field:  "BusinessUnitProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitProfileRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitProfileRequestValidationError is the validation error
// returned by UpdateBusinessUnitProfileRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitProfileRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitProfileRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitProfileRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitProfileRequestValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitProfileRequestValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitProfileRequestValidationError{
				field:  "BusinessUnitProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitProfileRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitProfileRequestValidationError is the validation error
// returned by DeleteBusinessUnitProfileRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitProfileRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitProfileRequestValidationError{}

// Validate checks the field values on
// UpdateSystemNotificationUsersInBusinessUnitProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateSystemNotificationUsersInBusinessUnitProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemNotificationUsersInBusinessUnitProfileRequestMultiError, or nil
// if none found.
func (m *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitProfileId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UpdateSystemNotificationUsersInBusinessUnitProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateSystemNotificationUsersInBusinessUnitProfileRequestMultiError is an
// error wrapping multiple validation errors returned by
// UpdateSystemNotificationUsersInBusinessUnitProfileRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSystemNotificationUsersInBusinessUnitProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemNotificationUsersInBusinessUnitProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemNotificationUsersInBusinessUnitProfileRequestMultiError) AllErrors() []error {
	return m
}

// UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError is
// the validation error returned by
// UpdateSystemNotificationUsersInBusinessUnitProfileRequest.Validate if the
// designated constraints aren't met.
type UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError) ErrorName() string {
	return "UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemNotificationUsersInBusinessUnitProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemNotificationUsersInBusinessUnitProfileRequestValidationError{}

// Validate checks the field values on ListBusinessUnitFinancialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitFinancialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitFinancialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitFinancialsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitFinancialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitFinancialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitFinancialsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitFinancialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitFinancialsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitFinancialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitFinancialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitFinancialsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitFinancialsRequestValidationError is the validation error
// returned by ListBusinessUnitFinancialsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitFinancialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitFinancialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitFinancialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitFinancialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitFinancialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitFinancialsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitFinancialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitFinancialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitFinancialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitFinancialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitFinancialsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitFinancialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitFinancialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitFinancialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitFinancialsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitFinancialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitFinancialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitFinancialsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitFinancialsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitFinancialsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitFinancialsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitFinancialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitFinancialsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitFinancialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitFinancialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitFinancialsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitFinancialsResponseValidationError is the validation error
// returned by ListBusinessUnitFinancialsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitFinancialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitFinancialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitFinancialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitFinancialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitFinancialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitFinancialsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitFinancialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitFinancialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitFinancialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitFinancialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitFinancialsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitFinancialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitFinancialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitFinancialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitFinancialRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitFinancialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitFinancialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitFinancial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitFinancialRequestValidationError{
					field:  "BusinessUnitFinancial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitFinancialRequestValidationError{
					field:  "BusinessUnitFinancial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitFinancial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitFinancialRequestValidationError{
				field:  "BusinessUnitFinancial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitFinancialRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitFinancialRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitFinancialRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitFinancialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitFinancialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitFinancialRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitFinancialRequestValidationError is the validation error
// returned by CreateBusinessUnitFinancialRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitFinancialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitFinancialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitFinancialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitFinancialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitFinancialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitFinancialRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitFinancialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitFinancialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitFinancialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitFinancialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitFinancialRequestValidationError{}

// Validate checks the field values on GetBusinessUnitFinancialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitFinancialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitFinancialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitFinancialRequestMultiError, or nil if none found.
func (m *GetBusinessUnitFinancialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitFinancialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitFinancialId

	if len(errors) > 0 {
		return GetBusinessUnitFinancialRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitFinancialRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitFinancialRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitFinancialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitFinancialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitFinancialRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitFinancialRequestValidationError is the validation error
// returned by GetBusinessUnitFinancialRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitFinancialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitFinancialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitFinancialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitFinancialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitFinancialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitFinancialRequestValidationError) ErrorName() string {
	return "GetBusinessUnitFinancialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitFinancialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitFinancialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitFinancialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitFinancialRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitFinancialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitFinancialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitFinancialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitFinancialRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitFinancialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitFinancialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitFinancial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitFinancialRequestValidationError{
					field:  "BusinessUnitFinancial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitFinancialRequestValidationError{
					field:  "BusinessUnitFinancial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitFinancial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitFinancialRequestValidationError{
				field:  "BusinessUnitFinancial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitFinancialRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitFinancialRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitFinancialRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitFinancialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitFinancialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitFinancialRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitFinancialRequestValidationError is the validation error
// returned by UpdateBusinessUnitFinancialRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitFinancialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitFinancialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitFinancialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitFinancialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitFinancialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitFinancialRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitFinancialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitFinancialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitFinancialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitFinancialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitFinancialRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitFinancialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitFinancialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitFinancialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitFinancialRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitFinancialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitFinancialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitFinancial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitFinancialRequestValidationError{
					field:  "BusinessUnitFinancial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitFinancialRequestValidationError{
					field:  "BusinessUnitFinancial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitFinancial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitFinancialRequestValidationError{
				field:  "BusinessUnitFinancial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitFinancialRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitFinancialRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitFinancialRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitFinancialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitFinancialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitFinancialRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitFinancialRequestValidationError is the validation error
// returned by DeleteBusinessUnitFinancialRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitFinancialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitFinancialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitFinancialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitFinancialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitFinancialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitFinancialRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitFinancialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitFinancialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitFinancialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitFinancialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitFinancialRequestValidationError{}

// Validate checks the field values on ListBusinessUnitBranchsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitBranchsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitBranchsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitBranchsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitBranchsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitBranchsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitBranchsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitBranchsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitBranchsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitBranchsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitBranchsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitBranchsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitBranchsRequestValidationError is the validation error
// returned by ListBusinessUnitBranchsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitBranchsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitBranchsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitBranchsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitBranchsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitBranchsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitBranchsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitBranchsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitBranchsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitBranchsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitBranchsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitBranchsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitBranchsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitBranchsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitBranchsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitBranchsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitBranchsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitBranchsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitBranchsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitBranchsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitBranchsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitBranchsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitBranchsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitBranchsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitBranchsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitBranchsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitBranchsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitBranchsResponseValidationError is the validation error
// returned by ListBusinessUnitBranchsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitBranchsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitBranchsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitBranchsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitBranchsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitBranchsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitBranchsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitBranchsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitBranchsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitBranchsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitBranchsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitBranchsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitBranchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessUnitBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitBranchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitBranchRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitBranchRequestValidationError{
					field:  "BusinessUnitBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitBranchRequestValidationError{
					field:  "BusinessUnitBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitBranchRequestValidationError{
				field:  "BusinessUnitBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitBranchRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitBranchRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBusinessUnitBranchRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateBusinessUnitBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitBranchRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitBranchRequestValidationError is the validation error
// returned by CreateBusinessUnitBranchRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitBranchRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitBranchRequestValidationError{}

// Validate checks the field values on GetBusinessUnitBranchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitBranchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessUnitBranchRequestMultiError, or nil if none found.
func (m *GetBusinessUnitBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitBranchId

	if len(errors) > 0 {
		return GetBusinessUnitBranchRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitBranchRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitBranchRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBusinessUnitBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitBranchRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitBranchRequestValidationError is the validation error returned
// by GetBusinessUnitBranchRequest.Validate if the designated constraints
// aren't met.
type GetBusinessUnitBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitBranchRequestValidationError) ErrorName() string {
	return "GetBusinessUnitBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitBranchRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitBranchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessUnitBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitBranchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitBranchRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitBranchRequestValidationError{
					field:  "BusinessUnitBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitBranchRequestValidationError{
					field:  "BusinessUnitBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitBranchRequestValidationError{
				field:  "BusinessUnitBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitBranchRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitBranchRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessUnitBranchRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateBusinessUnitBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitBranchRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitBranchRequestValidationError is the validation error
// returned by UpdateBusinessUnitBranchRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitBranchRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitBranchRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitBranchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessUnitBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitBranchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitBranchRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitBranchRequestValidationError{
					field:  "BusinessUnitBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitBranchRequestValidationError{
					field:  "BusinessUnitBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitBranchRequestValidationError{
				field:  "BusinessUnitBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitBranchRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitBranchRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessUnitBranchRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteBusinessUnitBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitBranchRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitBranchRequestValidationError is the validation error
// returned by DeleteBusinessUnitBranchRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitBranchRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitBranchRequestValidationError{}

// Validate checks the field values on ListBusinessUnitFacilitiessRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitFacilitiessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitFacilitiessRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitFacilitiessRequestMultiError, or nil if none found.
func (m *ListBusinessUnitFacilitiessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitFacilitiessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitFacilitiessRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitFacilitiessRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitFacilitiessRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitFacilitiessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitFacilitiessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitFacilitiessRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitFacilitiessRequestValidationError is the validation error
// returned by ListBusinessUnitFacilitiessRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitFacilitiessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitFacilitiessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitFacilitiessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitFacilitiessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitFacilitiessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitFacilitiessRequestValidationError) ErrorName() string {
	return "ListBusinessUnitFacilitiessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitFacilitiessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitFacilitiessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitFacilitiessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitFacilitiessRequestValidationError{}

// Validate checks the field values on ListBusinessUnitFacilitiessResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitFacilitiessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitFacilitiessResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitFacilitiessResponseMultiError, or nil if none found.
func (m *ListBusinessUnitFacilitiessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitFacilitiessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitFacilitiessResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitFacilitiessResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitFacilitiessResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitFacilitiessResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitFacilitiessResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitFacilitiessResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitFacilitiessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitFacilitiessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitFacilitiessResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitFacilitiessResponseValidationError is the validation error
// returned by ListBusinessUnitFacilitiessResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitFacilitiessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitFacilitiessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitFacilitiessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitFacilitiessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitFacilitiessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitFacilitiessResponseValidationError) ErrorName() string {
	return "ListBusinessUnitFacilitiessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitFacilitiessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitFacilitiessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitFacilitiessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitFacilitiessResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitFacilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitFacilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitFacilitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitFacilitiesRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitFacilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitFacilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitFacilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitFacilitiesRequestValidationError{
					field:  "BusinessUnitFacilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitFacilitiesRequestValidationError{
					field:  "BusinessUnitFacilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitFacilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitFacilitiesRequestValidationError{
				field:  "BusinessUnitFacilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitFacilitiesRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitFacilitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitFacilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitFacilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitFacilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitFacilitiesRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitFacilitiesRequestValidationError is the validation error
// returned by CreateBusinessUnitFacilitiesRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitFacilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitFacilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitFacilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitFacilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitFacilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitFacilitiesRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitFacilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitFacilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitFacilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitFacilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitFacilitiesRequestValidationError{}

// Validate checks the field values on GetBusinessUnitFacilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitFacilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitFacilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitFacilitiesRequestMultiError, or nil if none found.
func (m *GetBusinessUnitFacilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitFacilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitFacilitiesId

	if len(errors) > 0 {
		return GetBusinessUnitFacilitiesRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitFacilitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitFacilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitFacilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitFacilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitFacilitiesRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitFacilitiesRequestValidationError is the validation error
// returned by GetBusinessUnitFacilitiesRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitFacilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitFacilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitFacilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitFacilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitFacilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitFacilitiesRequestValidationError) ErrorName() string {
	return "GetBusinessUnitFacilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitFacilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitFacilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitFacilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitFacilitiesRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitFacilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitFacilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitFacilitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitFacilitiesRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitFacilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitFacilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitFacilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitFacilitiesRequestValidationError{
					field:  "BusinessUnitFacilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitFacilitiesRequestValidationError{
					field:  "BusinessUnitFacilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitFacilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitFacilitiesRequestValidationError{
				field:  "BusinessUnitFacilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitFacilitiesRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitFacilitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitFacilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitFacilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitFacilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitFacilitiesRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitFacilitiesRequestValidationError is the validation error
// returned by UpdateBusinessUnitFacilitiesRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitFacilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitFacilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitFacilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitFacilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitFacilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitFacilitiesRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitFacilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitFacilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitFacilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitFacilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitFacilitiesRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitFacilitiesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitFacilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitFacilitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitFacilitiesRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitFacilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitFacilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitFacilities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitFacilitiesRequestValidationError{
					field:  "BusinessUnitFacilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitFacilitiesRequestValidationError{
					field:  "BusinessUnitFacilities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitFacilities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitFacilitiesRequestValidationError{
				field:  "BusinessUnitFacilities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitFacilitiesRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitFacilitiesRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitFacilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitFacilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitFacilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitFacilitiesRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitFacilitiesRequestValidationError is the validation error
// returned by DeleteBusinessUnitFacilitiesRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitFacilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitFacilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitFacilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitFacilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitFacilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitFacilitiesRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitFacilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitFacilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitFacilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitFacilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitFacilitiesRequestValidationError{}

// Validate checks the field values on ListBusinessUnitCertificatesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitCertificatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitCertificatesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitCertificatesRequestMultiError, or nil if none found.
func (m *ListBusinessUnitCertificatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitCertificatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitCertificatesRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitCertificatesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitCertificatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitCertificatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitCertificatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitCertificatesRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitCertificatesRequestValidationError is the validation error
// returned by ListBusinessUnitCertificatesRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitCertificatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitCertificatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitCertificatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitCertificatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitCertificatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitCertificatesRequestValidationError) ErrorName() string {
	return "ListBusinessUnitCertificatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitCertificatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitCertificatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitCertificatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitCertificatesRequestValidationError{}

// Validate checks the field values on ListBusinessUnitCertificatesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitCertificatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitCertificatesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitCertificatesResponseMultiError, or nil if none found.
func (m *ListBusinessUnitCertificatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitCertificatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitCertificatesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitCertificatesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitCertificatesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitCertificatesResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitCertificatesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitCertificatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitCertificatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitCertificatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitCertificatesResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitCertificatesResponseValidationError is the validation error
// returned by ListBusinessUnitCertificatesResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitCertificatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitCertificatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitCertificatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitCertificatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitCertificatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitCertificatesResponseValidationError) ErrorName() string {
	return "ListBusinessUnitCertificatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitCertificatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitCertificatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitCertificatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitCertificatesResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateBusinessUnitCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitCertificateRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitCertificateRequestValidationError{
					field:  "BusinessUnitCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitCertificateRequestValidationError{
					field:  "BusinessUnitCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitCertificateRequestValidationError{
				field:  "BusinessUnitCertificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitCertificateRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitCertificateRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitCertificateRequestValidationError is the validation error
// returned by CreateBusinessUnitCertificateRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitCertificateRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitCertificateRequestValidationError{}

// Validate checks the field values on GetBusinessUnitCertificateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitCertificateRequestMultiError, or nil if none found.
func (m *GetBusinessUnitCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitCertificateId

	if len(errors) > 0 {
		return GetBusinessUnitCertificateRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitCertificateRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitCertificateRequestValidationError is the validation error
// returned by GetBusinessUnitCertificateRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitCertificateRequestValidationError) ErrorName() string {
	return "GetBusinessUnitCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitCertificateRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessUnitCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitCertificateRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitCertificateRequestValidationError{
					field:  "BusinessUnitCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitCertificateRequestValidationError{
					field:  "BusinessUnitCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitCertificateRequestValidationError{
				field:  "BusinessUnitCertificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitCertificateRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitCertificateRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitCertificateRequestValidationError is the validation error
// returned by UpdateBusinessUnitCertificateRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitCertificateRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitCertificateRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteBusinessUnitCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitCertificateRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitCertificateRequestValidationError{
					field:  "BusinessUnitCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitCertificateRequestValidationError{
					field:  "BusinessUnitCertificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitCertificateRequestValidationError{
				field:  "BusinessUnitCertificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitCertificateRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitCertificateRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitCertificateRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitCertificateRequestValidationError is the validation error
// returned by DeleteBusinessUnitCertificateRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitCertificateRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitCertificateRequestValidationError{}

// Validate checks the field values on ListBusinessUnitStrengthsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitStrengthsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitStrengthsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitStrengthsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitStrengthsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitStrengthsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitStrengthsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitStrengthsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitStrengthsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitStrengthsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitStrengthsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitStrengthsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitStrengthsRequestValidationError is the validation error
// returned by ListBusinessUnitStrengthsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitStrengthsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitStrengthsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitStrengthsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitStrengthsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitStrengthsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitStrengthsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitStrengthsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitStrengthsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitStrengthsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitStrengthsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitStrengthsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitStrengthsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitStrengthsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitStrengthsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitStrengthsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitStrengthsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitStrengthsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitStrengthsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitStrengthsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitStrengthsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitStrengthsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitStrengthsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitStrengthsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitStrengthsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitStrengthsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitStrengthsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitStrengthsResponseValidationError is the validation error
// returned by ListBusinessUnitStrengthsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitStrengthsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitStrengthsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitStrengthsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitStrengthsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitStrengthsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitStrengthsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitStrengthsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitStrengthsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitStrengthsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitStrengthsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitStrengthsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitStrengthRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitStrengthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitStrengthRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitStrengthRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitStrengthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitStrengthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitStrength()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitStrengthRequestValidationError{
					field:  "BusinessUnitStrength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitStrengthRequestValidationError{
					field:  "BusinessUnitStrength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitStrength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitStrengthRequestValidationError{
				field:  "BusinessUnitStrength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitStrengthRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitStrengthRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitStrengthRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitStrengthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitStrengthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitStrengthRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitStrengthRequestValidationError is the validation error
// returned by CreateBusinessUnitStrengthRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitStrengthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitStrengthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitStrengthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitStrengthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitStrengthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitStrengthRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitStrengthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitStrengthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitStrengthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitStrengthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitStrengthRequestValidationError{}

// Validate checks the field values on GetBusinessUnitStrengthRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitStrengthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitStrengthRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitStrengthRequestMultiError, or nil if none found.
func (m *GetBusinessUnitStrengthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitStrengthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitStrengthId

	if len(errors) > 0 {
		return GetBusinessUnitStrengthRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitStrengthRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitStrengthRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitStrengthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitStrengthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitStrengthRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitStrengthRequestValidationError is the validation error
// returned by GetBusinessUnitStrengthRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitStrengthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitStrengthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitStrengthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitStrengthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitStrengthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitStrengthRequestValidationError) ErrorName() string {
	return "GetBusinessUnitStrengthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitStrengthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitStrengthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitStrengthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitStrengthRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitStrengthRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitStrengthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitStrengthRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitStrengthRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitStrengthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitStrengthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitStrength()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitStrengthRequestValidationError{
					field:  "BusinessUnitStrength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitStrengthRequestValidationError{
					field:  "BusinessUnitStrength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitStrength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitStrengthRequestValidationError{
				field:  "BusinessUnitStrength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitStrengthRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitStrengthRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitStrengthRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitStrengthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitStrengthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitStrengthRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitStrengthRequestValidationError is the validation error
// returned by UpdateBusinessUnitStrengthRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitStrengthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitStrengthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitStrengthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitStrengthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitStrengthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitStrengthRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitStrengthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitStrengthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitStrengthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitStrengthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitStrengthRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitStrengthRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitStrengthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitStrengthRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitStrengthRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitStrengthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitStrengthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitStrength()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitStrengthRequestValidationError{
					field:  "BusinessUnitStrength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitStrengthRequestValidationError{
					field:  "BusinessUnitStrength",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitStrength()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitStrengthRequestValidationError{
				field:  "BusinessUnitStrength",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitStrengthRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitStrengthRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitStrengthRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitStrengthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitStrengthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitStrengthRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitStrengthRequestValidationError is the validation error
// returned by DeleteBusinessUnitStrengthRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitStrengthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitStrengthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitStrengthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitStrengthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitStrengthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitStrengthRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitStrengthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitStrengthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitStrengthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitStrengthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitStrengthRequestValidationError{}

// Validate checks the field values on ListBusinessUnitSkillsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitSkillsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitSkillsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitSkillsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitSkillsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitSkillsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitSkillsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitSkillsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitSkillsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitSkillsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitSkillsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitSkillsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitSkillsRequestValidationError is the validation error
// returned by ListBusinessUnitSkillsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitSkillsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitSkillsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitSkillsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitSkillsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitSkillsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitSkillsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitSkillsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitSkillsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitSkillsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitSkillsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitSkillsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitSkillsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitSkillsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitSkillsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitSkillsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitSkillsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitSkillsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitSkillsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitSkillsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitSkillsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitSkillsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitSkillsResponseMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitSkillsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitSkillsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitSkillsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitSkillsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitSkillsResponseValidationError is the validation error
// returned by ListBusinessUnitSkillsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitSkillsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitSkillsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitSkillsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitSkillsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitSkillsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitSkillsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitSkillsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitSkillsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitSkillsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitSkillsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitSkillsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessUnitSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitSkillRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitSkillRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitSkill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitSkillRequestValidationError{
					field:  "BusinessUnitSkill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitSkillRequestValidationError{
					field:  "BusinessUnitSkill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitSkill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitSkillRequestValidationError{
				field:  "BusinessUnitSkill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitSkillRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitSkillRequestMultiError is an error wrapping multiple
// validation errors returned by CreateBusinessUnitSkillRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateBusinessUnitSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitSkillRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitSkillRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitSkillRequestValidationError is the validation error
// returned by CreateBusinessUnitSkillRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitSkillRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitSkillRequestValidationError{}

// Validate checks the field values on GetBusinessUnitSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessUnitSkillRequestMultiError, or nil if none found.
func (m *GetBusinessUnitSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitSkillId

	if len(errors) > 0 {
		return GetBusinessUnitSkillRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitSkillRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitSkillRequest.ValidateAll() if
// the designated constraints aren't met.
type GetBusinessUnitSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitSkillRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitSkillRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitSkillRequestValidationError is the validation error returned
// by GetBusinessUnitSkillRequest.Validate if the designated constraints
// aren't met.
type GetBusinessUnitSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitSkillRequestValidationError) ErrorName() string {
	return "GetBusinessUnitSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitSkillRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessUnitSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitSkillRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitSkillRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitSkill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitSkillRequestValidationError{
					field:  "BusinessUnitSkill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitSkillRequestValidationError{
					field:  "BusinessUnitSkill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitSkill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitSkillRequestValidationError{
				field:  "BusinessUnitSkill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitSkillRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitSkillRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessUnitSkillRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateBusinessUnitSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitSkillRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitSkillRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitSkillRequestValidationError is the validation error
// returned by UpdateBusinessUnitSkillRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitSkillRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitSkillRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitSkillRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessUnitSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitSkillRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitSkillRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitSkill()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitSkillRequestValidationError{
					field:  "BusinessUnitSkill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitSkillRequestValidationError{
					field:  "BusinessUnitSkill",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitSkill()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitSkillRequestValidationError{
				field:  "BusinessUnitSkill",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitSkillRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitSkillRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteBusinessUnitSkillRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteBusinessUnitSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitSkillRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitSkillRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitSkillRequestValidationError is the validation error
// returned by DeleteBusinessUnitSkillRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitSkillRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitSkillRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactHeadersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitContactHeadersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitContactHeadersRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitContactHeadersRequestMultiError, or nil if none found.
func (m *ListBusinessUnitContactHeadersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactHeadersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactHeadersRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactHeadersRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitContactHeadersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactHeadersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactHeadersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactHeadersRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactHeadersRequestValidationError is the validation error
// returned by ListBusinessUnitContactHeadersRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitContactHeadersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactHeadersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactHeadersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactHeadersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactHeadersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactHeadersRequestValidationError) ErrorName() string {
	return "ListBusinessUnitContactHeadersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactHeadersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactHeadersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactHeadersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactHeadersRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactHeadersResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitContactHeadersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitContactHeadersResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBusinessUnitContactHeadersResponseMultiError, or nil if none found.
func (m *ListBusinessUnitContactHeadersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactHeadersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitContactHeadersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitContactHeadersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitContactHeadersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactHeadersResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactHeadersResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitContactHeadersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactHeadersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactHeadersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactHeadersResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactHeadersResponseValidationError is the validation
// error returned by ListBusinessUnitContactHeadersResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitContactHeadersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactHeadersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactHeadersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactHeadersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactHeadersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactHeadersResponseValidationError) ErrorName() string {
	return "ListBusinessUnitContactHeadersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactHeadersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactHeadersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactHeadersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactHeadersResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitContactHeaderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateBusinessUnitContactHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessUnitContactHeaderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateBusinessUnitContactHeaderRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitContactHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitContactHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitContactHeaderRequestValidationError{
				field:  "BusinessUnitContactHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitContactHeaderRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitContactHeaderRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessUnitContactHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitContactHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitContactHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitContactHeaderRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitContactHeaderRequestValidationError is the validation
// error returned by CreateBusinessUnitContactHeaderRequest.Validate if the
// designated constraints aren't met.
type CreateBusinessUnitContactHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitContactHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitContactHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitContactHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitContactHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitContactHeaderRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitContactHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitContactHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitContactHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitContactHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitContactHeaderRequestValidationError{}

// Validate checks the field values on GetBusinessUnitContactHeaderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitContactHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitContactHeaderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitContactHeaderRequestMultiError, or nil if none found.
func (m *GetBusinessUnitContactHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitContactHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactHeaderId

	if len(errors) > 0 {
		return GetBusinessUnitContactHeaderRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitContactHeaderRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitContactHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitContactHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitContactHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitContactHeaderRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitContactHeaderRequestValidationError is the validation error
// returned by GetBusinessUnitContactHeaderRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitContactHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitContactHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitContactHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitContactHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitContactHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitContactHeaderRequestValidationError) ErrorName() string {
	return "GetBusinessUnitContactHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitContactHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitContactHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitContactHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitContactHeaderRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitContactHeaderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessUnitContactHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessUnitContactHeaderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateBusinessUnitContactHeaderRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitContactHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitContactHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitContactHeaderRequestValidationError{
				field:  "BusinessUnitContactHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitContactHeaderRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitContactHeaderRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessUnitContactHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitContactHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitContactHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitContactHeaderRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitContactHeaderRequestValidationError is the validation
// error returned by UpdateBusinessUnitContactHeaderRequest.Validate if the
// designated constraints aren't met.
type UpdateBusinessUnitContactHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitContactHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitContactHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitContactHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitContactHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitContactHeaderRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitContactHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitContactHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitContactHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitContactHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitContactHeaderRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitContactHeaderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteBusinessUnitContactHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessUnitContactHeaderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteBusinessUnitContactHeaderRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitContactHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitContactHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitContactHeaderRequestValidationError{
				field:  "BusinessUnitContactHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitContactHeaderRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitContactHeaderRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessUnitContactHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitContactHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitContactHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitContactHeaderRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitContactHeaderRequestValidationError is the validation
// error returned by DeleteBusinessUnitContactHeaderRequest.Validate if the
// designated constraints aren't met.
type DeleteBusinessUnitContactHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitContactHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitContactHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitContactHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitContactHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitContactHeaderRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitContactHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitContactHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitContactHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitContactHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitContactHeaderRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitContactsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitContactsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitContactsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitContactsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactsRequestMultiError is an error wrapping multiple
// validation errors returned by ListBusinessUnitContactsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListBusinessUnitContactsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactsRequestValidationError is the validation error
// returned by ListBusinessUnitContactsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitContactsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitContactsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitContactsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitContactsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitContactsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitContactsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitContactsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitContactsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitContactsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitContactsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactsResponseValidationError is the validation error
// returned by ListBusinessUnitContactsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitContactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitContactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitContactRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitContactRequestValidationError{
				field:  "BusinessUnitContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitContactRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitContactRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitContactRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitContactRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitContactRequestValidationError is the validation error
// returned by CreateBusinessUnitContactRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitContactRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitContactRequestValidationError{}

// Validate checks the field values on GetBusinessUnitContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitContactRequestMultiError, or nil if none found.
func (m *GetBusinessUnitContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactId

	if len(errors) > 0 {
		return GetBusinessUnitContactRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitContactRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitContactRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitContactRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitContactRequestValidationError is the validation error
// returned by GetBusinessUnitContactRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitContactRequestValidationError) ErrorName() string {
	return "GetBusinessUnitContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitContactRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitContactRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitContactRequestValidationError{
				field:  "BusinessUnitContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitContactRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitContactRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitContactRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitContactRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitContactRequestValidationError is the validation error
// returned by UpdateBusinessUnitContactRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitContactRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitContactRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitContactRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitContactRequestValidationError{
				field:  "BusinessUnitContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitContactRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitContactRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitContactRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitContactRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitContactRequestValidationError is the validation error
// returned by DeleteBusinessUnitContactRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitContactRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitContactRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactAttributesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitContactAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitContactAttributesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitContactAttributesRequestMultiError, or nil if none found.
func (m *ListBusinessUnitContactAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactAttributesRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactAttributesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitContactAttributesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactAttributesRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactAttributesRequestValidationError is the validation
// error returned by ListBusinessUnitContactAttributesRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitContactAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactAttributesRequestValidationError) ErrorName() string {
	return "ListBusinessUnitContactAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactAttributesRequestValidationError{}

// Validate checks the field values on
// ListBusinessUnitContactAttributesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitContactAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitContactAttributesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitContactAttributesResponseMultiError, or nil if none found.
func (m *ListBusinessUnitContactAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitContactAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitContactAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitContactAttributesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactAttributesResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactAttributesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitContactAttributesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactAttributesResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactAttributesResponseValidationError is the validation
// error returned by ListBusinessUnitContactAttributesResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitContactAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactAttributesResponseValidationError) ErrorName() string {
	return "ListBusinessUnitContactAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactAttributesResponseValidationError{}

// Validate checks the field values on
// CreateBusinessUnitContactAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessUnitContactAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessUnitContactAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateBusinessUnitContactAttributeRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitContactAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitContactAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitContactAttributeRequestValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitContactAttributeRequestValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitContactAttributeRequestValidationError{
				field:  "BusinessUnitContactAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitContactAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitContactAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessUnitContactAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitContactAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitContactAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitContactAttributeRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitContactAttributeRequestValidationError is the validation
// error returned by CreateBusinessUnitContactAttributeRequest.Validate if the
// designated constraints aren't met.
type CreateBusinessUnitContactAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitContactAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitContactAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitContactAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitContactAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitContactAttributeRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitContactAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitContactAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitContactAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitContactAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitContactAttributeRequestValidationError{}

// Validate checks the field values on GetBusinessUnitContactAttributeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessUnitContactAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBusinessUnitContactAttributeRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetBusinessUnitContactAttributeRequestMultiError, or nil if none found.
func (m *GetBusinessUnitContactAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitContactAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactAttributeId

	if len(errors) > 0 {
		return GetBusinessUnitContactAttributeRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitContactAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetBusinessUnitContactAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitContactAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitContactAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitContactAttributeRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitContactAttributeRequestValidationError is the validation
// error returned by GetBusinessUnitContactAttributeRequest.Validate if the
// designated constraints aren't met.
type GetBusinessUnitContactAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitContactAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitContactAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitContactAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitContactAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitContactAttributeRequestValidationError) ErrorName() string {
	return "GetBusinessUnitContactAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitContactAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitContactAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitContactAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitContactAttributeRequestValidationError{}

// Validate checks the field values on
// UpdateBusinessUnitContactAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessUnitContactAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessUnitContactAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateBusinessUnitContactAttributeRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitContactAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitContactAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitContactAttributeRequestValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitContactAttributeRequestValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitContactAttributeRequestValidationError{
				field:  "BusinessUnitContactAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitContactAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitContactAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessUnitContactAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitContactAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitContactAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitContactAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitContactAttributeRequestValidationError is the validation
// error returned by UpdateBusinessUnitContactAttributeRequest.Validate if the
// designated constraints aren't met.
type UpdateBusinessUnitContactAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitContactAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitContactAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitContactAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitContactAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitContactAttributeRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitContactAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitContactAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitContactAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitContactAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitContactAttributeRequestValidationError{}

// Validate checks the field values on
// DeleteBusinessUnitContactAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessUnitContactAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessUnitContactAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteBusinessUnitContactAttributeRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitContactAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitContactAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitContactAttributeRequestValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitContactAttributeRequestValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitContactAttributeRequestValidationError{
				field:  "BusinessUnitContactAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitContactAttributeRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitContactAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessUnitContactAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitContactAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitContactAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitContactAttributeRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitContactAttributeRequestValidationError is the validation
// error returned by DeleteBusinessUnitContactAttributeRequest.Validate if the
// designated constraints aren't met.
type DeleteBusinessUnitContactAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitContactAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitContactAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitContactAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitContactAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitContactAttributeRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitContactAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitContactAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitContactAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitContactAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitContactAttributeRequestValidationError{}

// Validate checks the field values on ListTokyoShokoResearchsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTokyoShokoResearchsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTokyoShokoResearchsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTokyoShokoResearchsRequestMultiError, or nil if none found.
func (m *ListTokyoShokoResearchsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokyoShokoResearchsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTokyoShokoResearchsRequestMultiError(errors)
	}

	return nil
}

// ListTokyoShokoResearchsRequestMultiError is an error wrapping multiple
// validation errors returned by ListTokyoShokoResearchsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListTokyoShokoResearchsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokyoShokoResearchsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokyoShokoResearchsRequestMultiError) AllErrors() []error { return m }

// ListTokyoShokoResearchsRequestValidationError is the validation error
// returned by ListTokyoShokoResearchsRequest.Validate if the designated
// constraints aren't met.
type ListTokyoShokoResearchsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokyoShokoResearchsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokyoShokoResearchsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokyoShokoResearchsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokyoShokoResearchsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokyoShokoResearchsRequestValidationError) ErrorName() string {
	return "ListTokyoShokoResearchsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokyoShokoResearchsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokyoShokoResearchsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokyoShokoResearchsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokyoShokoResearchsRequestValidationError{}

// Validate checks the field values on ListTokyoShokoResearchsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTokyoShokoResearchsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTokyoShokoResearchsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTokyoShokoResearchsResponseMultiError, or nil if none found.
func (m *ListTokyoShokoResearchsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokyoShokoResearchsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTokyoShokoResearchsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTokyoShokoResearchsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTokyoShokoResearchsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTokyoShokoResearchsResponseMultiError(errors)
	}

	return nil
}

// ListTokyoShokoResearchsResponseMultiError is an error wrapping multiple
// validation errors returned by ListTokyoShokoResearchsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListTokyoShokoResearchsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokyoShokoResearchsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokyoShokoResearchsResponseMultiError) AllErrors() []error { return m }

// ListTokyoShokoResearchsResponseValidationError is the validation error
// returned by ListTokyoShokoResearchsResponse.Validate if the designated
// constraints aren't met.
type ListTokyoShokoResearchsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokyoShokoResearchsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokyoShokoResearchsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokyoShokoResearchsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokyoShokoResearchsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokyoShokoResearchsResponseValidationError) ErrorName() string {
	return "ListTokyoShokoResearchsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokyoShokoResearchsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokyoShokoResearchsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokyoShokoResearchsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokyoShokoResearchsResponseValidationError{}

// Validate checks the field values on CreateTokyoShokoResearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTokyoShokoResearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokyoShokoResearchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTokyoShokoResearchRequestMultiError, or nil if none found.
func (m *CreateTokyoShokoResearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokyoShokoResearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTokyoShokoResearchRequestValidationError{
					field:  "TokyoShokoResearch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTokyoShokoResearchRequestValidationError{
					field:  "TokyoShokoResearch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTokyoShokoResearchRequestValidationError{
				field:  "TokyoShokoResearch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTokyoShokoResearchRequestMultiError(errors)
	}

	return nil
}

// CreateTokyoShokoResearchRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTokyoShokoResearchRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateTokyoShokoResearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokyoShokoResearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokyoShokoResearchRequestMultiError) AllErrors() []error { return m }

// CreateTokyoShokoResearchRequestValidationError is the validation error
// returned by CreateTokyoShokoResearchRequest.Validate if the designated
// constraints aren't met.
type CreateTokyoShokoResearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokyoShokoResearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokyoShokoResearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokyoShokoResearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokyoShokoResearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokyoShokoResearchRequestValidationError) ErrorName() string {
	return "CreateTokyoShokoResearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokyoShokoResearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokyoShokoResearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokyoShokoResearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokyoShokoResearchRequestValidationError{}

// Validate checks the field values on GetTokyoShokoResearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTokyoShokoResearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokyoShokoResearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokyoShokoResearchRequestMultiError, or nil if none found.
func (m *GetTokyoShokoResearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokyoShokoResearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokyoShokoResearchId

	if len(errors) > 0 {
		return GetTokyoShokoResearchRequestMultiError(errors)
	}

	return nil
}

// GetTokyoShokoResearchRequestMultiError is an error wrapping multiple
// validation errors returned by GetTokyoShokoResearchRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTokyoShokoResearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokyoShokoResearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokyoShokoResearchRequestMultiError) AllErrors() []error { return m }

// GetTokyoShokoResearchRequestValidationError is the validation error returned
// by GetTokyoShokoResearchRequest.Validate if the designated constraints
// aren't met.
type GetTokyoShokoResearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokyoShokoResearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokyoShokoResearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokyoShokoResearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokyoShokoResearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokyoShokoResearchRequestValidationError) ErrorName() string {
	return "GetTokyoShokoResearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokyoShokoResearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokyoShokoResearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokyoShokoResearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokyoShokoResearchRequestValidationError{}

// Validate checks the field values on UpdateTokyoShokoResearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTokyoShokoResearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTokyoShokoResearchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTokyoShokoResearchRequestMultiError, or nil if none found.
func (m *UpdateTokyoShokoResearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTokyoShokoResearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTokyoShokoResearchRequestValidationError{
					field:  "TokyoShokoResearch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTokyoShokoResearchRequestValidationError{
					field:  "TokyoShokoResearch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTokyoShokoResearchRequestValidationError{
				field:  "TokyoShokoResearch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTokyoShokoResearchRequestMultiError(errors)
	}

	return nil
}

// UpdateTokyoShokoResearchRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTokyoShokoResearchRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateTokyoShokoResearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTokyoShokoResearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTokyoShokoResearchRequestMultiError) AllErrors() []error { return m }

// UpdateTokyoShokoResearchRequestValidationError is the validation error
// returned by UpdateTokyoShokoResearchRequest.Validate if the designated
// constraints aren't met.
type UpdateTokyoShokoResearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTokyoShokoResearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTokyoShokoResearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTokyoShokoResearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTokyoShokoResearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTokyoShokoResearchRequestValidationError) ErrorName() string {
	return "UpdateTokyoShokoResearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTokyoShokoResearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTokyoShokoResearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTokyoShokoResearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTokyoShokoResearchRequestValidationError{}

// Validate checks the field values on DeleteTokyoShokoResearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTokyoShokoResearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTokyoShokoResearchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTokyoShokoResearchRequestMultiError, or nil if none found.
func (m *DeleteTokyoShokoResearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokyoShokoResearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTokyoShokoResearchRequestValidationError{
					field:  "TokyoShokoResearch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTokyoShokoResearchRequestValidationError{
					field:  "TokyoShokoResearch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTokyoShokoResearchRequestValidationError{
				field:  "TokyoShokoResearch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTokyoShokoResearchRequestMultiError(errors)
	}

	return nil
}

// DeleteTokyoShokoResearchRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTokyoShokoResearchRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteTokyoShokoResearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokyoShokoResearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokyoShokoResearchRequestMultiError) AllErrors() []error { return m }

// DeleteTokyoShokoResearchRequestValidationError is the validation error
// returned by DeleteTokyoShokoResearchRequest.Validate if the designated
// constraints aren't met.
type DeleteTokyoShokoResearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokyoShokoResearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokyoShokoResearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTokyoShokoResearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokyoShokoResearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokyoShokoResearchRequestValidationError) ErrorName() string {
	return "DeleteTokyoShokoResearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokyoShokoResearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokyoShokoResearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokyoShokoResearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokyoShokoResearchRequestValidationError{}

// Validate checks the field values on
// ListTokyoShokoResearchCompanyProfilesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTokyoShokoResearchCompanyProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTokyoShokoResearchCompanyProfilesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListTokyoShokoResearchCompanyProfilesRequestMultiError, or nil if none found.
func (m *ListTokyoShokoResearchCompanyProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokyoShokoResearchCompanyProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTokyoShokoResearchCompanyProfilesRequestMultiError(errors)
	}

	return nil
}

// ListTokyoShokoResearchCompanyProfilesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListTokyoShokoResearchCompanyProfilesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListTokyoShokoResearchCompanyProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokyoShokoResearchCompanyProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokyoShokoResearchCompanyProfilesRequestMultiError) AllErrors() []error { return m }

// ListTokyoShokoResearchCompanyProfilesRequestValidationError is the
// validation error returned by
// ListTokyoShokoResearchCompanyProfilesRequest.Validate if the designated
// constraints aren't met.
type ListTokyoShokoResearchCompanyProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokyoShokoResearchCompanyProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokyoShokoResearchCompanyProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokyoShokoResearchCompanyProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokyoShokoResearchCompanyProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokyoShokoResearchCompanyProfilesRequestValidationError) ErrorName() string {
	return "ListTokyoShokoResearchCompanyProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokyoShokoResearchCompanyProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokyoShokoResearchCompanyProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokyoShokoResearchCompanyProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokyoShokoResearchCompanyProfilesRequestValidationError{}

// Validate checks the field values on
// ListTokyoShokoResearchCompanyProfilesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTokyoShokoResearchCompanyProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTokyoShokoResearchCompanyProfilesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListTokyoShokoResearchCompanyProfilesResponseMultiError, or nil if none found.
func (m *ListTokyoShokoResearchCompanyProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokyoShokoResearchCompanyProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTokyoShokoResearchCompanyProfilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTokyoShokoResearchCompanyProfilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTokyoShokoResearchCompanyProfilesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTokyoShokoResearchCompanyProfilesResponseMultiError(errors)
	}

	return nil
}

// ListTokyoShokoResearchCompanyProfilesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListTokyoShokoResearchCompanyProfilesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListTokyoShokoResearchCompanyProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokyoShokoResearchCompanyProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokyoShokoResearchCompanyProfilesResponseMultiError) AllErrors() []error { return m }

// ListTokyoShokoResearchCompanyProfilesResponseValidationError is the
// validation error returned by
// ListTokyoShokoResearchCompanyProfilesResponse.Validate if the designated
// constraints aren't met.
type ListTokyoShokoResearchCompanyProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokyoShokoResearchCompanyProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokyoShokoResearchCompanyProfilesResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListTokyoShokoResearchCompanyProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokyoShokoResearchCompanyProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokyoShokoResearchCompanyProfilesResponseValidationError) ErrorName() string {
	return "ListTokyoShokoResearchCompanyProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokyoShokoResearchCompanyProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokyoShokoResearchCompanyProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokyoShokoResearchCompanyProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokyoShokoResearchCompanyProfilesResponseValidationError{}

// Validate checks the field values on
// CreateTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTokyoShokoResearchCompanyProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateTokyoShokoResearchCompanyProfileRequestMultiError, or nil if none found.
func (m *CreateTokyoShokoResearchCompanyProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokyoShokoResearchCompanyProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearchCompanyProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTokyoShokoResearchCompanyProfileRequestValidationError{
					field:  "TokyoShokoResearchCompanyProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTokyoShokoResearchCompanyProfileRequestValidationError{
					field:  "TokyoShokoResearchCompanyProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearchCompanyProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTokyoShokoResearchCompanyProfileRequestValidationError{
				field:  "TokyoShokoResearchCompanyProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTokyoShokoResearchCompanyProfileRequestMultiError(errors)
	}

	return nil
}

// CreateTokyoShokoResearchCompanyProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateTokyoShokoResearchCompanyProfileRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateTokyoShokoResearchCompanyProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokyoShokoResearchCompanyProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokyoShokoResearchCompanyProfileRequestMultiError) AllErrors() []error { return m }

// CreateTokyoShokoResearchCompanyProfileRequestValidationError is the
// validation error returned by
// CreateTokyoShokoResearchCompanyProfileRequest.Validate if the designated
// constraints aren't met.
type CreateTokyoShokoResearchCompanyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokyoShokoResearchCompanyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokyoShokoResearchCompanyProfileRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateTokyoShokoResearchCompanyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokyoShokoResearchCompanyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokyoShokoResearchCompanyProfileRequestValidationError) ErrorName() string {
	return "CreateTokyoShokoResearchCompanyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokyoShokoResearchCompanyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokyoShokoResearchCompanyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokyoShokoResearchCompanyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokyoShokoResearchCompanyProfileRequestValidationError{}

// Validate checks the field values on
// GetTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTokyoShokoResearchCompanyProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetTokyoShokoResearchCompanyProfileRequestMultiError, or nil if none found.
func (m *GetTokyoShokoResearchCompanyProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokyoShokoResearchCompanyProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokyoShokoResearchCompanyProfileId

	if len(errors) > 0 {
		return GetTokyoShokoResearchCompanyProfileRequestMultiError(errors)
	}

	return nil
}

// GetTokyoShokoResearchCompanyProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetTokyoShokoResearchCompanyProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTokyoShokoResearchCompanyProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokyoShokoResearchCompanyProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokyoShokoResearchCompanyProfileRequestMultiError) AllErrors() []error { return m }

// GetTokyoShokoResearchCompanyProfileRequestValidationError is the validation
// error returned by GetTokyoShokoResearchCompanyProfileRequest.Validate if
// the designated constraints aren't met.
type GetTokyoShokoResearchCompanyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokyoShokoResearchCompanyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokyoShokoResearchCompanyProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokyoShokoResearchCompanyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokyoShokoResearchCompanyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokyoShokoResearchCompanyProfileRequestValidationError) ErrorName() string {
	return "GetTokyoShokoResearchCompanyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokyoShokoResearchCompanyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokyoShokoResearchCompanyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokyoShokoResearchCompanyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokyoShokoResearchCompanyProfileRequestValidationError{}

// Validate checks the field values on
// UpdateTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateTokyoShokoResearchCompanyProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateTokyoShokoResearchCompanyProfileRequestMultiError, or nil if none found.
func (m *UpdateTokyoShokoResearchCompanyProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTokyoShokoResearchCompanyProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearchCompanyProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTokyoShokoResearchCompanyProfileRequestValidationError{
					field:  "TokyoShokoResearchCompanyProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTokyoShokoResearchCompanyProfileRequestValidationError{
					field:  "TokyoShokoResearchCompanyProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearchCompanyProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTokyoShokoResearchCompanyProfileRequestValidationError{
				field:  "TokyoShokoResearchCompanyProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTokyoShokoResearchCompanyProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateTokyoShokoResearchCompanyProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateTokyoShokoResearchCompanyProfileRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateTokyoShokoResearchCompanyProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTokyoShokoResearchCompanyProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTokyoShokoResearchCompanyProfileRequestMultiError) AllErrors() []error { return m }

// UpdateTokyoShokoResearchCompanyProfileRequestValidationError is the
// validation error returned by
// UpdateTokyoShokoResearchCompanyProfileRequest.Validate if the designated
// constraints aren't met.
type UpdateTokyoShokoResearchCompanyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTokyoShokoResearchCompanyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTokyoShokoResearchCompanyProfileRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateTokyoShokoResearchCompanyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTokyoShokoResearchCompanyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTokyoShokoResearchCompanyProfileRequestValidationError) ErrorName() string {
	return "UpdateTokyoShokoResearchCompanyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTokyoShokoResearchCompanyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTokyoShokoResearchCompanyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTokyoShokoResearchCompanyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTokyoShokoResearchCompanyProfileRequestValidationError{}

// Validate checks the field values on
// DeleteTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteTokyoShokoResearchCompanyProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteTokyoShokoResearchCompanyProfileRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteTokyoShokoResearchCompanyProfileRequestMultiError, or nil if none found.
func (m *DeleteTokyoShokoResearchCompanyProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokyoShokoResearchCompanyProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearchCompanyProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTokyoShokoResearchCompanyProfileRequestValidationError{
					field:  "TokyoShokoResearchCompanyProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTokyoShokoResearchCompanyProfileRequestValidationError{
					field:  "TokyoShokoResearchCompanyProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearchCompanyProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTokyoShokoResearchCompanyProfileRequestValidationError{
				field:  "TokyoShokoResearchCompanyProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTokyoShokoResearchCompanyProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteTokyoShokoResearchCompanyProfileRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteTokyoShokoResearchCompanyProfileRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteTokyoShokoResearchCompanyProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokyoShokoResearchCompanyProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokyoShokoResearchCompanyProfileRequestMultiError) AllErrors() []error { return m }

// DeleteTokyoShokoResearchCompanyProfileRequestValidationError is the
// validation error returned by
// DeleteTokyoShokoResearchCompanyProfileRequest.Validate if the designated
// constraints aren't met.
type DeleteTokyoShokoResearchCompanyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokyoShokoResearchCompanyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokyoShokoResearchCompanyProfileRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DeleteTokyoShokoResearchCompanyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokyoShokoResearchCompanyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokyoShokoResearchCompanyProfileRequestValidationError) ErrorName() string {
	return "DeleteTokyoShokoResearchCompanyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokyoShokoResearchCompanyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokyoShokoResearchCompanyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokyoShokoResearchCompanyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokyoShokoResearchCompanyProfileRequestValidationError{}

// Validate checks the field values on ListTokyoShokoResearchRiskScoresRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListTokyoShokoResearchRiskScoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTokyoShokoResearchRiskScoresRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListTokyoShokoResearchRiskScoresRequestMultiError, or nil if none found.
func (m *ListTokyoShokoResearchRiskScoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokyoShokoResearchRiskScoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTokyoShokoResearchRiskScoresRequestMultiError(errors)
	}

	return nil
}

// ListTokyoShokoResearchRiskScoresRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListTokyoShokoResearchRiskScoresRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTokyoShokoResearchRiskScoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokyoShokoResearchRiskScoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokyoShokoResearchRiskScoresRequestMultiError) AllErrors() []error { return m }

// ListTokyoShokoResearchRiskScoresRequestValidationError is the validation
// error returned by ListTokyoShokoResearchRiskScoresRequest.Validate if the
// designated constraints aren't met.
type ListTokyoShokoResearchRiskScoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokyoShokoResearchRiskScoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokyoShokoResearchRiskScoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokyoShokoResearchRiskScoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokyoShokoResearchRiskScoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokyoShokoResearchRiskScoresRequestValidationError) ErrorName() string {
	return "ListTokyoShokoResearchRiskScoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokyoShokoResearchRiskScoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokyoShokoResearchRiskScoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokyoShokoResearchRiskScoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokyoShokoResearchRiskScoresRequestValidationError{}

// Validate checks the field values on ListTokyoShokoResearchRiskScoresResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListTokyoShokoResearchRiskScoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTokyoShokoResearchRiskScoresResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListTokyoShokoResearchRiskScoresResponseMultiError, or nil if none found.
func (m *ListTokyoShokoResearchRiskScoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokyoShokoResearchRiskScoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTokyoShokoResearchRiskScoresResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTokyoShokoResearchRiskScoresResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTokyoShokoResearchRiskScoresResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTokyoShokoResearchRiskScoresResponseMultiError(errors)
	}

	return nil
}

// ListTokyoShokoResearchRiskScoresResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListTokyoShokoResearchRiskScoresResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTokyoShokoResearchRiskScoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokyoShokoResearchRiskScoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokyoShokoResearchRiskScoresResponseMultiError) AllErrors() []error { return m }

// ListTokyoShokoResearchRiskScoresResponseValidationError is the validation
// error returned by ListTokyoShokoResearchRiskScoresResponse.Validate if the
// designated constraints aren't met.
type ListTokyoShokoResearchRiskScoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokyoShokoResearchRiskScoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokyoShokoResearchRiskScoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokyoShokoResearchRiskScoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokyoShokoResearchRiskScoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokyoShokoResearchRiskScoresResponseValidationError) ErrorName() string {
	return "ListTokyoShokoResearchRiskScoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokyoShokoResearchRiskScoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokyoShokoResearchRiskScoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokyoShokoResearchRiskScoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokyoShokoResearchRiskScoresResponseValidationError{}

// Validate checks the field values on CreateTokyoShokoResearchRiskScoreRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTokyoShokoResearchRiskScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTokyoShokoResearchRiskScoreRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateTokyoShokoResearchRiskScoreRequestMultiError, or nil if none found.
func (m *CreateTokyoShokoResearchRiskScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokyoShokoResearchRiskScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearchRiskScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTokyoShokoResearchRiskScoreRequestValidationError{
					field:  "TokyoShokoResearchRiskScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTokyoShokoResearchRiskScoreRequestValidationError{
					field:  "TokyoShokoResearchRiskScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearchRiskScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTokyoShokoResearchRiskScoreRequestValidationError{
				field:  "TokyoShokoResearchRiskScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTokyoShokoResearchRiskScoreRequestMultiError(errors)
	}

	return nil
}

// CreateTokyoShokoResearchRiskScoreRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateTokyoShokoResearchRiskScoreRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTokyoShokoResearchRiskScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokyoShokoResearchRiskScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokyoShokoResearchRiskScoreRequestMultiError) AllErrors() []error { return m }

// CreateTokyoShokoResearchRiskScoreRequestValidationError is the validation
// error returned by CreateTokyoShokoResearchRiskScoreRequest.Validate if the
// designated constraints aren't met.
type CreateTokyoShokoResearchRiskScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokyoShokoResearchRiskScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokyoShokoResearchRiskScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokyoShokoResearchRiskScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokyoShokoResearchRiskScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokyoShokoResearchRiskScoreRequestValidationError) ErrorName() string {
	return "CreateTokyoShokoResearchRiskScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokyoShokoResearchRiskScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokyoShokoResearchRiskScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokyoShokoResearchRiskScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokyoShokoResearchRiskScoreRequestValidationError{}

// Validate checks the field values on GetTokyoShokoResearchRiskScoreRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTokyoShokoResearchRiskScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokyoShokoResearchRiskScoreRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTokyoShokoResearchRiskScoreRequestMultiError, or nil if none found.
func (m *GetTokyoShokoResearchRiskScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokyoShokoResearchRiskScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokyoShokoResearchRiskScoreId

	if len(errors) > 0 {
		return GetTokyoShokoResearchRiskScoreRequestMultiError(errors)
	}

	return nil
}

// GetTokyoShokoResearchRiskScoreRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetTokyoShokoResearchRiskScoreRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTokyoShokoResearchRiskScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokyoShokoResearchRiskScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokyoShokoResearchRiskScoreRequestMultiError) AllErrors() []error { return m }

// GetTokyoShokoResearchRiskScoreRequestValidationError is the validation error
// returned by GetTokyoShokoResearchRiskScoreRequest.Validate if the
// designated constraints aren't met.
type GetTokyoShokoResearchRiskScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokyoShokoResearchRiskScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokyoShokoResearchRiskScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokyoShokoResearchRiskScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokyoShokoResearchRiskScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokyoShokoResearchRiskScoreRequestValidationError) ErrorName() string {
	return "GetTokyoShokoResearchRiskScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTokyoShokoResearchRiskScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokyoShokoResearchRiskScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokyoShokoResearchRiskScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokyoShokoResearchRiskScoreRequestValidationError{}

// Validate checks the field values on UpdateTokyoShokoResearchRiskScoreRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateTokyoShokoResearchRiskScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateTokyoShokoResearchRiskScoreRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateTokyoShokoResearchRiskScoreRequestMultiError, or nil if none found.
func (m *UpdateTokyoShokoResearchRiskScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTokyoShokoResearchRiskScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearchRiskScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTokyoShokoResearchRiskScoreRequestValidationError{
					field:  "TokyoShokoResearchRiskScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTokyoShokoResearchRiskScoreRequestValidationError{
					field:  "TokyoShokoResearchRiskScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearchRiskScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTokyoShokoResearchRiskScoreRequestValidationError{
				field:  "TokyoShokoResearchRiskScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTokyoShokoResearchRiskScoreRequestMultiError(errors)
	}

	return nil
}

// UpdateTokyoShokoResearchRiskScoreRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateTokyoShokoResearchRiskScoreRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTokyoShokoResearchRiskScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTokyoShokoResearchRiskScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTokyoShokoResearchRiskScoreRequestMultiError) AllErrors() []error { return m }

// UpdateTokyoShokoResearchRiskScoreRequestValidationError is the validation
// error returned by UpdateTokyoShokoResearchRiskScoreRequest.Validate if the
// designated constraints aren't met.
type UpdateTokyoShokoResearchRiskScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTokyoShokoResearchRiskScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTokyoShokoResearchRiskScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTokyoShokoResearchRiskScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTokyoShokoResearchRiskScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTokyoShokoResearchRiskScoreRequestValidationError) ErrorName() string {
	return "UpdateTokyoShokoResearchRiskScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTokyoShokoResearchRiskScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTokyoShokoResearchRiskScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTokyoShokoResearchRiskScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTokyoShokoResearchRiskScoreRequestValidationError{}

// Validate checks the field values on DeleteTokyoShokoResearchRiskScoreRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteTokyoShokoResearchRiskScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteTokyoShokoResearchRiskScoreRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteTokyoShokoResearchRiskScoreRequestMultiError, or nil if none found.
func (m *DeleteTokyoShokoResearchRiskScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokyoShokoResearchRiskScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTokyoShokoResearchRiskScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTokyoShokoResearchRiskScoreRequestValidationError{
					field:  "TokyoShokoResearchRiskScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTokyoShokoResearchRiskScoreRequestValidationError{
					field:  "TokyoShokoResearchRiskScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokyoShokoResearchRiskScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTokyoShokoResearchRiskScoreRequestValidationError{
				field:  "TokyoShokoResearchRiskScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTokyoShokoResearchRiskScoreRequestMultiError(errors)
	}

	return nil
}

// DeleteTokyoShokoResearchRiskScoreRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteTokyoShokoResearchRiskScoreRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTokyoShokoResearchRiskScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokyoShokoResearchRiskScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokyoShokoResearchRiskScoreRequestMultiError) AllErrors() []error { return m }

// DeleteTokyoShokoResearchRiskScoreRequestValidationError is the validation
// error returned by DeleteTokyoShokoResearchRiskScoreRequest.Validate if the
// designated constraints aren't met.
type DeleteTokyoShokoResearchRiskScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokyoShokoResearchRiskScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokyoShokoResearchRiskScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTokyoShokoResearchRiskScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokyoShokoResearchRiskScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokyoShokoResearchRiskScoreRequestValidationError) ErrorName() string {
	return "DeleteTokyoShokoResearchRiskScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokyoShokoResearchRiskScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokyoShokoResearchRiskScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokyoShokoResearchRiskScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokyoShokoResearchRiskScoreRequestValidationError{}

// Validate checks the field values on ListBusinessUnitScoreAssetsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitScoreAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitScoreAssetsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitScoreAssetsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitScoreAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitScoreAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitScoreAssetsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitScoreAssetsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitScoreAssetsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitScoreAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitScoreAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitScoreAssetsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitScoreAssetsRequestValidationError is the validation error
// returned by ListBusinessUnitScoreAssetsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitScoreAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitScoreAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitScoreAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitScoreAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitScoreAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitScoreAssetsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitScoreAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitScoreAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitScoreAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitScoreAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitScoreAssetsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitScoreAssetsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitScoreAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitScoreAssetsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitScoreAssetsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitScoreAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitScoreAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitScoreAssetsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitScoreAssetsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitScoreAssetsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitScoreAssetsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitScoreAssetsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitScoreAssetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitScoreAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitScoreAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitScoreAssetsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitScoreAssetsResponseValidationError is the validation error
// returned by ListBusinessUnitScoreAssetsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitScoreAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitScoreAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitScoreAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitScoreAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitScoreAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitScoreAssetsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitScoreAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitScoreAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitScoreAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitScoreAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitScoreAssetsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitScoreAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitScoreAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitScoreAssetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitScoreAssetRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitScoreAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitScoreAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitScoreAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitScoreAssetRequestValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitScoreAssetRequestValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitScoreAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitScoreAssetRequestValidationError{
				field:  "BusinessUnitScoreAsset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitScoreAssetRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitScoreAssetRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitScoreAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitScoreAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitScoreAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitScoreAssetRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitScoreAssetRequestValidationError is the validation error
// returned by CreateBusinessUnitScoreAssetRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitScoreAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitScoreAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitScoreAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitScoreAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitScoreAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitScoreAssetRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitScoreAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitScoreAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitScoreAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitScoreAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitScoreAssetRequestValidationError{}

// Validate checks the field values on GetBusinessUnitScoreAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitScoreAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitScoreAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitScoreAssetRequestMultiError, or nil if none found.
func (m *GetBusinessUnitScoreAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitScoreAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitScoreAssetId

	if len(errors) > 0 {
		return GetBusinessUnitScoreAssetRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitScoreAssetRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitScoreAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitScoreAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitScoreAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitScoreAssetRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitScoreAssetRequestValidationError is the validation error
// returned by GetBusinessUnitScoreAssetRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitScoreAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitScoreAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitScoreAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitScoreAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitScoreAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitScoreAssetRequestValidationError) ErrorName() string {
	return "GetBusinessUnitScoreAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitScoreAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitScoreAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitScoreAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitScoreAssetRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitScoreAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitScoreAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitScoreAssetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitScoreAssetRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitScoreAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitScoreAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitScoreAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitScoreAssetRequestValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitScoreAssetRequestValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitScoreAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitScoreAssetRequestValidationError{
				field:  "BusinessUnitScoreAsset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitScoreAssetRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitScoreAssetRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitScoreAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitScoreAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitScoreAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitScoreAssetRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitScoreAssetRequestValidationError is the validation error
// returned by UpdateBusinessUnitScoreAssetRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitScoreAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitScoreAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitScoreAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitScoreAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitScoreAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitScoreAssetRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitScoreAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitScoreAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitScoreAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitScoreAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitScoreAssetRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitScoreAssetRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitScoreAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitScoreAssetRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitScoreAssetRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitScoreAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitScoreAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitScoreAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitScoreAssetRequestValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitScoreAssetRequestValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitScoreAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitScoreAssetRequestValidationError{
				field:  "BusinessUnitScoreAsset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitScoreAssetRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitScoreAssetRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitScoreAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitScoreAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitScoreAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitScoreAssetRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitScoreAssetRequestValidationError is the validation error
// returned by DeleteBusinessUnitScoreAssetRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitScoreAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitScoreAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitScoreAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitScoreAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitScoreAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitScoreAssetRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitScoreAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitScoreAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitScoreAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitScoreAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitScoreAssetRequestValidationError{}

// Validate checks the field values on ListBusinessUnitDocumentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitDocumentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitDocumentsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitDocumentsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitDocumentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitDocumentsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitDocumentsRequestValidationError is the validation error
// returned by ListBusinessUnitDocumentsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitDocumentsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitDocumentsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitDocumentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitDocumentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitDocumentsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitDocumentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitDocumentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitDocumentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitDocumentsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitDocumentsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitDocumentsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitDocumentsResponseValidationError is the validation error
// returned by ListBusinessUnitDocumentsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitDocumentsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitDocumentsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitDocumentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitDocumentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitDocumentRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitDocumentRequestValidationError{
					field:  "BusinessUnitDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitDocumentRequestValidationError{
					field:  "BusinessUnitDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitDocumentRequestValidationError{
				field:  "BusinessUnitDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitDocumentRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitDocumentRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitDocumentRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitDocumentRequestValidationError is the validation error
// returned by CreateBusinessUnitDocumentRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitDocumentRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitDocumentRequestValidationError{}

// Validate checks the field values on GetBusinessUnitDocumentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitDocumentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitDocumentRequestMultiError, or nil if none found.
func (m *GetBusinessUnitDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitDocumentId

	if len(errors) > 0 {
		return GetBusinessUnitDocumentRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitDocumentRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitDocumentRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitDocumentRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitDocumentRequestValidationError is the validation error
// returned by GetBusinessUnitDocumentRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitDocumentRequestValidationError) ErrorName() string {
	return "GetBusinessUnitDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitDocumentRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitDocumentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitDocumentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitDocumentRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitDocumentRequestValidationError{
					field:  "BusinessUnitDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitDocumentRequestValidationError{
					field:  "BusinessUnitDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitDocumentRequestValidationError{
				field:  "BusinessUnitDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitDocumentRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitDocumentRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitDocumentRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitDocumentRequestValidationError is the validation error
// returned by UpdateBusinessUnitDocumentRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitDocumentRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitDocumentRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitDocumentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitDocumentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitDocumentRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitDocumentRequestValidationError{
					field:  "BusinessUnitDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitDocumentRequestValidationError{
					field:  "BusinessUnitDocument",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitDocumentRequestValidationError{
				field:  "BusinessUnitDocument",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitDocumentRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitDocumentRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitDocumentRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitDocumentRequestValidationError is the validation error
// returned by DeleteBusinessUnitDocumentRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitDocumentRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitDocumentRequestValidationError{}

// Validate checks the field values on ListBusinessUnitActiveControlsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitActiveControlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitActiveControlsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitActiveControlsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitActiveControlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitActiveControlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitActiveControlsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitActiveControlsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitActiveControlsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitActiveControlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitActiveControlsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitActiveControlsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitActiveControlsRequestValidationError is the validation error
// returned by ListBusinessUnitActiveControlsRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitActiveControlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitActiveControlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitActiveControlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitActiveControlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitActiveControlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitActiveControlsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitActiveControlsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitActiveControlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitActiveControlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitActiveControlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitActiveControlsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitActiveControlsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitActiveControlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitActiveControlsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBusinessUnitActiveControlsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitActiveControlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitActiveControlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitActiveControlsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitActiveControlsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitActiveControlsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitActiveControlsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitActiveControlsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitActiveControlsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitActiveControlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitActiveControlsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitActiveControlsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitActiveControlsResponseValidationError is the validation
// error returned by ListBusinessUnitActiveControlsResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitActiveControlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitActiveControlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitActiveControlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitActiveControlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitActiveControlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitActiveControlsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitActiveControlsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitActiveControlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitActiveControlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitActiveControlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitActiveControlsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitActiveControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateBusinessUnitActiveControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessUnitActiveControlRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateBusinessUnitActiveControlRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitActiveControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitActiveControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitActiveControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitActiveControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitActiveControlRequestValidationError{
				field:  "BusinessUnitActiveControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitActiveControlRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitActiveControlRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessUnitActiveControlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitActiveControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitActiveControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitActiveControlRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitActiveControlRequestValidationError is the validation
// error returned by CreateBusinessUnitActiveControlRequest.Validate if the
// designated constraints aren't met.
type CreateBusinessUnitActiveControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitActiveControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitActiveControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitActiveControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitActiveControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitActiveControlRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitActiveControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitActiveControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitActiveControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitActiveControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitActiveControlRequestValidationError{}

// Validate checks the field values on GetBusinessUnitActiveControlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitActiveControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitActiveControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitActiveControlRequestMultiError, or nil if none found.
func (m *GetBusinessUnitActiveControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitActiveControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitActiveControlId

	if len(errors) > 0 {
		return GetBusinessUnitActiveControlRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitActiveControlRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitActiveControlRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitActiveControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitActiveControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitActiveControlRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitActiveControlRequestValidationError is the validation error
// returned by GetBusinessUnitActiveControlRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitActiveControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitActiveControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitActiveControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitActiveControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitActiveControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitActiveControlRequestValidationError) ErrorName() string {
	return "GetBusinessUnitActiveControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitActiveControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitActiveControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitActiveControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitActiveControlRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitActiveControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessUnitActiveControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessUnitActiveControlRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateBusinessUnitActiveControlRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitActiveControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitActiveControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitActiveControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitActiveControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitActiveControlRequestValidationError{
				field:  "BusinessUnitActiveControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitActiveControlRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitActiveControlRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessUnitActiveControlRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitActiveControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitActiveControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitActiveControlRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitActiveControlRequestValidationError is the validation
// error returned by UpdateBusinessUnitActiveControlRequest.Validate if the
// designated constraints aren't met.
type UpdateBusinessUnitActiveControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitActiveControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitActiveControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitActiveControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitActiveControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitActiveControlRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitActiveControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitActiveControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitActiveControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitActiveControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitActiveControlRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitActiveControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteBusinessUnitActiveControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessUnitActiveControlRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteBusinessUnitActiveControlRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitActiveControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitActiveControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitActiveControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitActiveControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitActiveControlRequestValidationError{
				field:  "BusinessUnitActiveControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitActiveControlRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitActiveControlRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessUnitActiveControlRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitActiveControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitActiveControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitActiveControlRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitActiveControlRequestValidationError is the validation
// error returned by DeleteBusinessUnitActiveControlRequest.Validate if the
// designated constraints aren't met.
type DeleteBusinessUnitActiveControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitActiveControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitActiveControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitActiveControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitActiveControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitActiveControlRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitActiveControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitActiveControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitActiveControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitActiveControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitActiveControlRequestValidationError{}

// Validate checks the field values on ListBusinessUnitSnapshotsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitSnapshotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitSnapshotsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitSnapshotsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitSnapshotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitSnapshotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ListBusinessUnitSnapshotsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitSnapshotsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitSnapshotsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitSnapshotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitSnapshotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitSnapshotsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitSnapshotsRequestValidationError is the validation error
// returned by ListBusinessUnitSnapshotsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitSnapshotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitSnapshotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitSnapshotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitSnapshotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitSnapshotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitSnapshotsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitSnapshotsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitSnapshotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitSnapshotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitSnapshotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitSnapshotsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitSnapshotsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitSnapshotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitSnapshotsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitSnapshotsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitSnapshotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitSnapshotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitSnapshotsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitSnapshotsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitSnapshotsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitSnapshotsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitSnapshotsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitSnapshotsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitSnapshotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitSnapshotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitSnapshotsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitSnapshotsResponseValidationError is the validation error
// returned by ListBusinessUnitSnapshotsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitSnapshotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitSnapshotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitSnapshotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitSnapshotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitSnapshotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitSnapshotsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitSnapshotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitSnapshotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitSnapshotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitSnapshotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitSnapshotsResponseValidationError{}

// Validate checks the field values on CreateBusinessUnitSnapshotRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateBusinessUnitSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessUnitSnapshotRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateBusinessUnitSnapshotRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitSnapshotRequestValidationError{
					field:  "BusinessUnitSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitSnapshotRequestValidationError{
					field:  "BusinessUnitSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitSnapshotRequestValidationError{
				field:  "BusinessUnitSnapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitSnapshotRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitSnapshotRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateBusinessUnitSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitSnapshotRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitSnapshotRequestValidationError is the validation error
// returned by CreateBusinessUnitSnapshotRequest.Validate if the designated
// constraints aren't met.
type CreateBusinessUnitSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitSnapshotRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitSnapshotRequestValidationError{}

// Validate checks the field values on GetBusinessUnitSnapshotRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitSnapshotRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitSnapshotRequestMultiError, or nil if none found.
func (m *GetBusinessUnitSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitSnapshotId

	if len(errors) > 0 {
		return GetBusinessUnitSnapshotRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitSnapshotRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitSnapshotRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitSnapshotRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitSnapshotRequestValidationError is the validation error
// returned by GetBusinessUnitSnapshotRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitSnapshotRequestValidationError) ErrorName() string {
	return "GetBusinessUnitSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitSnapshotRequestValidationError{}

// Validate checks the field values on UpdateBusinessUnitSnapshotRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateBusinessUnitSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessUnitSnapshotRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateBusinessUnitSnapshotRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitSnapshotRequestValidationError{
					field:  "BusinessUnitSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitSnapshotRequestValidationError{
					field:  "BusinessUnitSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitSnapshotRequestValidationError{
				field:  "BusinessUnitSnapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitSnapshotRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitSnapshotRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateBusinessUnitSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitSnapshotRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitSnapshotRequestValidationError is the validation error
// returned by UpdateBusinessUnitSnapshotRequest.Validate if the designated
// constraints aren't met.
type UpdateBusinessUnitSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitSnapshotRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitSnapshotRequestValidationError{}

// Validate checks the field values on DeleteBusinessUnitSnapshotRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteBusinessUnitSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessUnitSnapshotRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteBusinessUnitSnapshotRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitSnapshotRequestValidationError{
					field:  "BusinessUnitSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitSnapshotRequestValidationError{
					field:  "BusinessUnitSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitSnapshotRequestValidationError{
				field:  "BusinessUnitSnapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitSnapshotRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitSnapshotRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteBusinessUnitSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitSnapshotRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitSnapshotRequestValidationError is the validation error
// returned by DeleteBusinessUnitSnapshotRequest.Validate if the designated
// constraints aren't met.
type DeleteBusinessUnitSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitSnapshotRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitSnapshotRequestValidationError{}

// Validate checks the field values on
// ListBusinessUnitChangeNotificationsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitChangeNotificationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitChangeNotificationsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitChangeNotificationsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitChangeNotificationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitChangeNotificationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for BaseTypeName

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ListBusinessUnitChangeNotificationsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitChangeNotificationsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitChangeNotificationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitChangeNotificationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitChangeNotificationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitChangeNotificationsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitChangeNotificationsRequestValidationError is the validation
// error returned by ListBusinessUnitChangeNotificationsRequest.Validate if
// the designated constraints aren't met.
type ListBusinessUnitChangeNotificationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitChangeNotificationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitChangeNotificationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitChangeNotificationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitChangeNotificationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitChangeNotificationsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitChangeNotificationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitChangeNotificationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitChangeNotificationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitChangeNotificationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitChangeNotificationsRequestValidationError{}

// Validate checks the field values on
// ListBusinessUnitChangeNotificationsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitChangeNotificationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitChangeNotificationsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitChangeNotificationsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitChangeNotificationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitChangeNotificationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitChangeNotificationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitChangeNotificationsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitChangeNotificationsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitChangeNotificationsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitChangeNotificationsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitChangeNotificationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitChangeNotificationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitChangeNotificationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitChangeNotificationsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitChangeNotificationsResponseValidationError is the validation
// error returned by ListBusinessUnitChangeNotificationsResponse.Validate if
// the designated constraints aren't met.
type ListBusinessUnitChangeNotificationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitChangeNotificationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitChangeNotificationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitChangeNotificationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitChangeNotificationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitChangeNotificationsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitChangeNotificationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitChangeNotificationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitChangeNotificationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitChangeNotificationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitChangeNotificationsResponseValidationError{}

// Validate checks the field values on
// CreateBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessUnitChangeNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateBusinessUnitChangeNotificationRequestMultiError, or nil if none found.
func (m *CreateBusinessUnitChangeNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessUnitChangeNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitChangeNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBusinessUnitChangeNotificationRequestValidationError{
					field:  "BusinessUnitChangeNotification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBusinessUnitChangeNotificationRequestValidationError{
					field:  "BusinessUnitChangeNotification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitChangeNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessUnitChangeNotificationRequestValidationError{
				field:  "BusinessUnitChangeNotification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBusinessUnitChangeNotificationRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessUnitChangeNotificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateBusinessUnitChangeNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessUnitChangeNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessUnitChangeNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessUnitChangeNotificationRequestMultiError) AllErrors() []error { return m }

// CreateBusinessUnitChangeNotificationRequestValidationError is the validation
// error returned by CreateBusinessUnitChangeNotificationRequest.Validate if
// the designated constraints aren't met.
type CreateBusinessUnitChangeNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessUnitChangeNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessUnitChangeNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessUnitChangeNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessUnitChangeNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessUnitChangeNotificationRequestValidationError) ErrorName() string {
	return "CreateBusinessUnitChangeNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessUnitChangeNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessUnitChangeNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessUnitChangeNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessUnitChangeNotificationRequestValidationError{}

// Validate checks the field values on GetBusinessUnitChangeNotificationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessUnitChangeNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetBusinessUnitChangeNotificationRequestMultiError, or nil if none found.
func (m *GetBusinessUnitChangeNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitChangeNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitChangeNotificationId

	if len(errors) > 0 {
		return GetBusinessUnitChangeNotificationRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitChangeNotificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetBusinessUnitChangeNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitChangeNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitChangeNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitChangeNotificationRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitChangeNotificationRequestValidationError is the validation
// error returned by GetBusinessUnitChangeNotificationRequest.Validate if the
// designated constraints aren't met.
type GetBusinessUnitChangeNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitChangeNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitChangeNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitChangeNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitChangeNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitChangeNotificationRequestValidationError) ErrorName() string {
	return "GetBusinessUnitChangeNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitChangeNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitChangeNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitChangeNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitChangeNotificationRequestValidationError{}

// Validate checks the field values on
// UpdateBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessUnitChangeNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateBusinessUnitChangeNotificationRequestMultiError, or nil if none found.
func (m *UpdateBusinessUnitChangeNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessUnitChangeNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitChangeNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBusinessUnitChangeNotificationRequestValidationError{
					field:  "BusinessUnitChangeNotification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBusinessUnitChangeNotificationRequestValidationError{
					field:  "BusinessUnitChangeNotification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitChangeNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBusinessUnitChangeNotificationRequestValidationError{
				field:  "BusinessUnitChangeNotification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBusinessUnitChangeNotificationRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessUnitChangeNotificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessUnitChangeNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessUnitChangeNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessUnitChangeNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessUnitChangeNotificationRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessUnitChangeNotificationRequestValidationError is the validation
// error returned by UpdateBusinessUnitChangeNotificationRequest.Validate if
// the designated constraints aren't met.
type UpdateBusinessUnitChangeNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessUnitChangeNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessUnitChangeNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessUnitChangeNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessUnitChangeNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessUnitChangeNotificationRequestValidationError) ErrorName() string {
	return "UpdateBusinessUnitChangeNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessUnitChangeNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessUnitChangeNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessUnitChangeNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessUnitChangeNotificationRequestValidationError{}

// Validate checks the field values on
// DeleteBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessUnitChangeNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteBusinessUnitChangeNotificationRequestMultiError, or nil if none found.
func (m *DeleteBusinessUnitChangeNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessUnitChangeNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitChangeNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBusinessUnitChangeNotificationRequestValidationError{
					field:  "BusinessUnitChangeNotification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBusinessUnitChangeNotificationRequestValidationError{
					field:  "BusinessUnitChangeNotification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitChangeNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBusinessUnitChangeNotificationRequestValidationError{
				field:  "BusinessUnitChangeNotification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBusinessUnitChangeNotificationRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessUnitChangeNotificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteBusinessUnitChangeNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessUnitChangeNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessUnitChangeNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessUnitChangeNotificationRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessUnitChangeNotificationRequestValidationError is the validation
// error returned by DeleteBusinessUnitChangeNotificationRequest.Validate if
// the designated constraints aren't met.
type DeleteBusinessUnitChangeNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessUnitChangeNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessUnitChangeNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessUnitChangeNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessUnitChangeNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessUnitChangeNotificationRequestValidationError) ErrorName() string {
	return "DeleteBusinessUnitChangeNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessUnitChangeNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessUnitChangeNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessUnitChangeNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessUnitChangeNotificationRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitContactContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitContactContentsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBusinessUnitContactContentsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitContactContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactContentsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactContentsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitContactContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactContentsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactContentsRequestValidationError is the validation
// error returned by ListBusinessUnitContactContentsRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitContactContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactContentsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitContactContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactContentsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitContactContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitContactContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitContactContentsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBusinessUnitContactContentsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitContactContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitContactContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitContactContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitContactContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitContactContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitContactContentsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitContactContentsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitContactContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitContactContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitContactContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitContactContentsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitContactContentsResponseValidationError is the validation
// error returned by ListBusinessUnitContactContentsResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitContactContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitContactContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitContactContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitContactContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitContactContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitContactContentsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitContactContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitContactContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitContactContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitContactContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitContactContentsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitContactContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessUnitContactContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitContactContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitContactContentRequestMultiError, or nil if none found.
func (m *GetBusinessUnitContactContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitContactContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitContactId

	if len(errors) > 0 {
		return GetBusinessUnitContactContentRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitContactContentRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitContactContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitContactContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitContactContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitContactContentRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitContactContentRequestValidationError is the validation error
// returned by GetBusinessUnitContactContentRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitContactContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitContactContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitContactContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitContactContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitContactContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitContactContentRequestValidationError) ErrorName() string {
	return "GetBusinessUnitContactContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitContactContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitContactContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitContactContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitContactContentRequestValidationError{}

// Validate checks the field values on ListBusinessUnitScoreContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitScoreContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitScoreContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitScoreContentsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitScoreContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitScoreContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitScoreContentsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitScoreContentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitScoreContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitScoreContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitScoreContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitScoreContentsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitScoreContentsRequestValidationError is the validation error
// returned by ListBusinessUnitScoreContentsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitScoreContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitScoreContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitScoreContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitScoreContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitScoreContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitScoreContentsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitScoreContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitScoreContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitScoreContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitScoreContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitScoreContentsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitScoreContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitScoreContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitScoreContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitScoreContentsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitScoreContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitScoreContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitScoreContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitScoreContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitScoreContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListBusinessUnitScoreContentsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitScoreContentsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitScoreContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitScoreContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitScoreContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitScoreContentsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitScoreContentsResponseValidationError is the validation error
// returned by ListBusinessUnitScoreContentsResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitScoreContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitScoreContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitScoreContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitScoreContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitScoreContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitScoreContentsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitScoreContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitScoreContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitScoreContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitScoreContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitScoreContentsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitScoreContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBusinessUnitScoreContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitScoreContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitScoreContentRequestMultiError, or nil if none found.
func (m *GetBusinessUnitScoreContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitScoreContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Category

	if len(errors) > 0 {
		return GetBusinessUnitScoreContentRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitScoreContentRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessUnitScoreContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessUnitScoreContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitScoreContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitScoreContentRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitScoreContentRequestValidationError is the validation error
// returned by GetBusinessUnitScoreContentRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitScoreContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitScoreContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitScoreContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitScoreContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitScoreContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitScoreContentRequestValidationError) ErrorName() string {
	return "GetBusinessUnitScoreContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitScoreContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitScoreContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitScoreContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitScoreContentRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitProfilesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListBusinessUnitProfilesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListBusinessUnitProfilesRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitProfilesRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitProfilesRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitProfilesRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitProfilesRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitProfilesRequestValidationError is the validation error
// returned by SharedListBusinessUnitProfilesRequest.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitProfilesRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitProfilesRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitProfilesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitProfilesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharedListBusinessUnitProfilesResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitProfilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitProfilesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitProfilesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitProfilesResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitProfilesResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitProfilesResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitProfilesResponseValidationError is the validation
// error returned by SharedListBusinessUnitProfilesResponse.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitProfilesResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitProfilesResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedGetBusinessUnitProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetBusinessUnitProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedGetBusinessUnitProfileRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitProfileId

	if len(errors) > 0 {
		return SharedGetBusinessUnitProfileRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedGetBusinessUnitProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitProfileRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitProfileRequestValidationError is the validation error
// returned by SharedGetBusinessUnitProfileRequest.Validate if the designated
// constraints aren't met.
type SharedGetBusinessUnitProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitProfileRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitProfileRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitFinancialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitFinancialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitFinancialsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharedListBusinessUnitFinancialsRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitFinancialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitFinancialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitFinancialsRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitFinancialsRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitFinancialsRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitFinancialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitFinancialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitFinancialsRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitFinancialsRequestValidationError is the validation
// error returned by SharedListBusinessUnitFinancialsRequest.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitFinancialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitFinancialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitFinancialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitFinancialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitFinancialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitFinancialsRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitFinancialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitFinancialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitFinancialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitFinancialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitFinancialsRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitFinancialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitFinancialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitFinancialsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListBusinessUnitFinancialsResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitFinancialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitFinancialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitFinancialsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitFinancialsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitFinancialsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitFinancialsResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitFinancialsResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitFinancialsResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitFinancialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitFinancialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitFinancialsResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitFinancialsResponseValidationError is the validation
// error returned by SharedListBusinessUnitFinancialsResponse.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitFinancialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitFinancialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitFinancialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitFinancialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitFinancialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitFinancialsResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitFinancialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitFinancialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitFinancialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitFinancialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitFinancialsResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitFinancialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedGetBusinessUnitFinancialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetBusinessUnitFinancialRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedGetBusinessUnitFinancialRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitFinancialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitFinancialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitFinancialId

	if len(errors) > 0 {
		return SharedGetBusinessUnitFinancialRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitFinancialRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedGetBusinessUnitFinancialRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitFinancialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitFinancialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitFinancialRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitFinancialRequestValidationError is the validation error
// returned by SharedGetBusinessUnitFinancialRequest.Validate if the
// designated constraints aren't met.
type SharedGetBusinessUnitFinancialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitFinancialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitFinancialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitFinancialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitFinancialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitFinancialRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitFinancialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitFinancialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitFinancialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitFinancialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitFinancialRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitBranchsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitBranchsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListBusinessUnitBranchsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListBusinessUnitBranchsRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitBranchsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitBranchsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitBranchsRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitBranchsRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedListBusinessUnitBranchsRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitBranchsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitBranchsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitBranchsRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitBranchsRequestValidationError is the validation error
// returned by SharedListBusinessUnitBranchsRequest.Validate if the designated
// constraints aren't met.
type SharedListBusinessUnitBranchsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitBranchsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitBranchsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitBranchsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitBranchsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitBranchsRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitBranchsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitBranchsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitBranchsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitBranchsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitBranchsRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitBranchsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitBranchsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListBusinessUnitBranchsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListBusinessUnitBranchsResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitBranchsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitBranchsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitBranchsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitBranchsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitBranchsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitBranchsResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitBranchsResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitBranchsResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitBranchsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitBranchsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitBranchsResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitBranchsResponseValidationError is the validation error
// returned by SharedListBusinessUnitBranchsResponse.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitBranchsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitBranchsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitBranchsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitBranchsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitBranchsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitBranchsResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitBranchsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitBranchsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitBranchsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitBranchsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitBranchsResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitBranchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedGetBusinessUnitBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetBusinessUnitBranchRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedGetBusinessUnitBranchRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitBranchId

	if len(errors) > 0 {
		return SharedGetBusinessUnitBranchRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitBranchRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedGetBusinessUnitBranchRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitBranchRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitBranchRequestValidationError is the validation error
// returned by SharedGetBusinessUnitBranchRequest.Validate if the designated
// constraints aren't met.
type SharedGetBusinessUnitBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitBranchRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitBranchRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitFacilitiessRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitFacilitiessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitFacilitiessRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListBusinessUnitFacilitiessRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitFacilitiessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitFacilitiessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitFacilitiessRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitFacilitiessRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitFacilitiessRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitFacilitiessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitFacilitiessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitFacilitiessRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitFacilitiessRequestValidationError is the validation
// error returned by SharedListBusinessUnitFacilitiessRequest.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitFacilitiessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitFacilitiessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitFacilitiessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitFacilitiessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitFacilitiessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitFacilitiessRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitFacilitiessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitFacilitiessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitFacilitiessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitFacilitiessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitFacilitiessRequestValidationError{}

// Validate checks the field values on
// SharedListBusinessUnitFacilitiessResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListBusinessUnitFacilitiessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitFacilitiessResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListBusinessUnitFacilitiessResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitFacilitiessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitFacilitiessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitFacilitiessResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitFacilitiessResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitFacilitiessResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitFacilitiessResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitFacilitiessResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitFacilitiessResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitFacilitiessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitFacilitiessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitFacilitiessResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitFacilitiessResponseValidationError is the validation
// error returned by SharedListBusinessUnitFacilitiessResponse.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitFacilitiessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitFacilitiessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitFacilitiessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitFacilitiessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitFacilitiessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitFacilitiessResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitFacilitiessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitFacilitiessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitFacilitiessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitFacilitiessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitFacilitiessResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitFacilitiesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedGetBusinessUnitFacilitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedGetBusinessUnitFacilitiesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharedGetBusinessUnitFacilitiesRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitFacilitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitFacilitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitFacilitiesId

	if len(errors) > 0 {
		return SharedGetBusinessUnitFacilitiesRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitFacilitiesRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedGetBusinessUnitFacilitiesRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitFacilitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitFacilitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitFacilitiesRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitFacilitiesRequestValidationError is the validation
// error returned by SharedGetBusinessUnitFacilitiesRequest.Validate if the
// designated constraints aren't met.
type SharedGetBusinessUnitFacilitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitFacilitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitFacilitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitFacilitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitFacilitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitFacilitiesRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitFacilitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitFacilitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitFacilitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitFacilitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitFacilitiesRequestValidationError{}

// Validate checks the field values on
// SharedListBusinessUnitCertificatesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListBusinessUnitCertificatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitCertificatesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListBusinessUnitCertificatesRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitCertificatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitCertificatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitCertificatesRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitCertificatesRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitCertificatesRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitCertificatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitCertificatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitCertificatesRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitCertificatesRequestValidationError is the validation
// error returned by SharedListBusinessUnitCertificatesRequest.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitCertificatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitCertificatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitCertificatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitCertificatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitCertificatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitCertificatesRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitCertificatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitCertificatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitCertificatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitCertificatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitCertificatesRequestValidationError{}

// Validate checks the field values on
// SharedListBusinessUnitCertificatesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListBusinessUnitCertificatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitCertificatesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListBusinessUnitCertificatesResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitCertificatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitCertificatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitCertificatesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitCertificatesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitCertificatesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitCertificatesResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitCertificatesResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitCertificatesResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitCertificatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitCertificatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitCertificatesResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitCertificatesResponseValidationError is the validation
// error returned by SharedListBusinessUnitCertificatesResponse.Validate if
// the designated constraints aren't met.
type SharedListBusinessUnitCertificatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitCertificatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitCertificatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitCertificatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitCertificatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitCertificatesResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitCertificatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitCertificatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitCertificatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitCertificatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitCertificatesResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitCertificateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedGetBusinessUnitCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedGetBusinessUnitCertificateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharedGetBusinessUnitCertificateRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitCertificateId

	if len(errors) > 0 {
		return SharedGetBusinessUnitCertificateRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitCertificateRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedGetBusinessUnitCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitCertificateRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitCertificateRequestValidationError is the validation
// error returned by SharedGetBusinessUnitCertificateRequest.Validate if the
// designated constraints aren't met.
type SharedGetBusinessUnitCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitCertificateRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitCertificateRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitStrengthsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitStrengthsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitStrengthsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharedListBusinessUnitStrengthsRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitStrengthsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitStrengthsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitStrengthsRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitStrengthsRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitStrengthsRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitStrengthsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitStrengthsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitStrengthsRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitStrengthsRequestValidationError is the validation
// error returned by SharedListBusinessUnitStrengthsRequest.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitStrengthsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitStrengthsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitStrengthsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitStrengthsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitStrengthsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitStrengthsRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitStrengthsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitStrengthsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitStrengthsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitStrengthsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitStrengthsRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitStrengthsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitStrengthsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListBusinessUnitStrengthsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharedListBusinessUnitStrengthsResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitStrengthsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitStrengthsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitStrengthsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitStrengthsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitStrengthsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitStrengthsResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitStrengthsResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListBusinessUnitStrengthsResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitStrengthsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitStrengthsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitStrengthsResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitStrengthsResponseValidationError is the validation
// error returned by SharedListBusinessUnitStrengthsResponse.Validate if the
// designated constraints aren't met.
type SharedListBusinessUnitStrengthsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitStrengthsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitStrengthsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitStrengthsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitStrengthsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitStrengthsResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitStrengthsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitStrengthsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitStrengthsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitStrengthsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitStrengthsResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitStrengthRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedGetBusinessUnitStrengthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetBusinessUnitStrengthRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedGetBusinessUnitStrengthRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitStrengthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitStrengthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitStrengthId

	if len(errors) > 0 {
		return SharedGetBusinessUnitStrengthRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitStrengthRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedGetBusinessUnitStrengthRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitStrengthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitStrengthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitStrengthRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitStrengthRequestValidationError is the validation error
// returned by SharedGetBusinessUnitStrengthRequest.Validate if the designated
// constraints aren't met.
type SharedGetBusinessUnitStrengthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitStrengthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitStrengthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitStrengthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitStrengthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitStrengthRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitStrengthRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitStrengthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitStrengthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitStrengthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitStrengthRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitSkillsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedListBusinessUnitSkillsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListBusinessUnitSkillsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListBusinessUnitSkillsRequestMultiError, or nil if none found.
func (m *SharedListBusinessUnitSkillsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitSkillsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitSkillsRequestMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitSkillsRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedListBusinessUnitSkillsRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitSkillsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitSkillsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitSkillsRequestMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitSkillsRequestValidationError is the validation error
// returned by SharedListBusinessUnitSkillsRequest.Validate if the designated
// constraints aren't met.
type SharedListBusinessUnitSkillsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitSkillsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitSkillsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitSkillsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitSkillsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitSkillsRequestValidationError) ErrorName() string {
	return "SharedListBusinessUnitSkillsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitSkillsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitSkillsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitSkillsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitSkillsRequestValidationError{}

// Validate checks the field values on SharedListBusinessUnitSkillsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListBusinessUnitSkillsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedListBusinessUnitSkillsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListBusinessUnitSkillsResponseMultiError, or nil if none found.
func (m *SharedListBusinessUnitSkillsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListBusinessUnitSkillsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListBusinessUnitSkillsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListBusinessUnitSkillsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListBusinessUnitSkillsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SharedListBusinessUnitSkillsResponseMultiError(errors)
	}

	return nil
}

// SharedListBusinessUnitSkillsResponseMultiError is an error wrapping multiple
// validation errors returned by
// SharedListBusinessUnitSkillsResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListBusinessUnitSkillsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListBusinessUnitSkillsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListBusinessUnitSkillsResponseMultiError) AllErrors() []error { return m }

// SharedListBusinessUnitSkillsResponseValidationError is the validation error
// returned by SharedListBusinessUnitSkillsResponse.Validate if the designated
// constraints aren't met.
type SharedListBusinessUnitSkillsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListBusinessUnitSkillsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListBusinessUnitSkillsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListBusinessUnitSkillsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListBusinessUnitSkillsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListBusinessUnitSkillsResponseValidationError) ErrorName() string {
	return "SharedListBusinessUnitSkillsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListBusinessUnitSkillsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListBusinessUnitSkillsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListBusinessUnitSkillsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListBusinessUnitSkillsResponseValidationError{}

// Validate checks the field values on SharedGetBusinessUnitSkillRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedGetBusinessUnitSkillRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetBusinessUnitSkillRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedGetBusinessUnitSkillRequestMultiError, or nil if none found.
func (m *SharedGetBusinessUnitSkillRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetBusinessUnitSkillRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitSkillId

	if len(errors) > 0 {
		return SharedGetBusinessUnitSkillRequestMultiError(errors)
	}

	return nil
}

// SharedGetBusinessUnitSkillRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharedGetBusinessUnitSkillRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedGetBusinessUnitSkillRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetBusinessUnitSkillRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetBusinessUnitSkillRequestMultiError) AllErrors() []error { return m }

// SharedGetBusinessUnitSkillRequestValidationError is the validation error
// returned by SharedGetBusinessUnitSkillRequest.Validate if the designated
// constraints aren't met.
type SharedGetBusinessUnitSkillRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetBusinessUnitSkillRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetBusinessUnitSkillRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetBusinessUnitSkillRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetBusinessUnitSkillRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetBusinessUnitSkillRequestValidationError) ErrorName() string {
	return "SharedGetBusinessUnitSkillRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetBusinessUnitSkillRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetBusinessUnitSkillRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetBusinessUnitSkillRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetBusinessUnitSkillRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitContactHeaderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitContactHeaderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitContactHeaderRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharetoBusinessUnitContactHeaderRequestMultiError, or nil if none found.
func (m *SharetoBusinessUnitContactHeaderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitContactHeaderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContactHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoBusinessUnitContactHeaderRequestValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoBusinessUnitContactHeaderRequestValidationError{
				field:  "BusinessUnitContactHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoBusinessUnitContactHeaderRequestMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitContactHeaderRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitContactHeaderRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitContactHeaderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitContactHeaderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitContactHeaderRequestMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitContactHeaderRequestValidationError is the validation
// error returned by SharetoBusinessUnitContactHeaderRequest.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitContactHeaderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitContactHeaderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitContactHeaderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitContactHeaderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitContactHeaderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitContactHeaderRequestValidationError) ErrorName() string {
	return "SharetoBusinessUnitContactHeaderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitContactHeaderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitContactHeaderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitContactHeaderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitContactHeaderRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitContactHeaderResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitContactHeaderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitContactHeaderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoBusinessUnitContactHeaderResponseMultiError, or nil if none found.
func (m *SharetoBusinessUnitContactHeaderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitContactHeaderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoBusinessUnitContactHeaderResponseMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitContactHeaderResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitContactHeaderResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitContactHeaderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitContactHeaderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitContactHeaderResponseMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitContactHeaderResponseValidationError is the validation
// error returned by SharetoBusinessUnitContactHeaderResponse.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitContactHeaderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitContactHeaderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitContactHeaderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitContactHeaderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitContactHeaderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitContactHeaderResponseValidationError) ErrorName() string {
	return "SharetoBusinessUnitContactHeaderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitContactHeaderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitContactHeaderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitContactHeaderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitContactHeaderResponseValidationError{}

// Validate checks the field values on SharetoBusinessUnitContactRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharetoBusinessUnitContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoBusinessUnitContactRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharetoBusinessUnitContactRequestMultiError, or nil if none found.
func (m *SharetoBusinessUnitContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoBusinessUnitContactRequestValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoBusinessUnitContactRequestValidationError{
				field:  "BusinessUnitContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoBusinessUnitContactRequestMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitContactRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharetoBusinessUnitContactRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitContactRequestMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitContactRequestValidationError is the validation error
// returned by SharetoBusinessUnitContactRequest.Validate if the designated
// constraints aren't met.
type SharetoBusinessUnitContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitContactRequestValidationError) ErrorName() string {
	return "SharetoBusinessUnitContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitContactRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitContactResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharetoBusinessUnitContactResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoBusinessUnitContactResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharetoBusinessUnitContactResponseMultiError, or nil if none found.
func (m *SharetoBusinessUnitContactResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitContactResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoBusinessUnitContactResponseMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitContactResponseMultiError is an error wrapping multiple
// validation errors returned by
// SharetoBusinessUnitContactResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitContactResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitContactResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitContactResponseMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitContactResponseValidationError is the validation error
// returned by SharetoBusinessUnitContactResponse.Validate if the designated
// constraints aren't met.
type SharetoBusinessUnitContactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitContactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitContactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitContactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitContactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitContactResponseValidationError) ErrorName() string {
	return "SharetoBusinessUnitContactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitContactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitContactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitContactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitContactResponseValidationError{}

// Validate checks the field values on SharetoBusinessUnitActiveControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitActiveControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitActiveControlRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharetoBusinessUnitActiveControlRequestMultiError, or nil if none found.
func (m *SharetoBusinessUnitActiveControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitActiveControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitActiveControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoBusinessUnitActiveControlRequestValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitActiveControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoBusinessUnitActiveControlRequestValidationError{
				field:  "BusinessUnitActiveControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoBusinessUnitActiveControlRequestMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitActiveControlRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitActiveControlRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitActiveControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitActiveControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitActiveControlRequestMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitActiveControlRequestValidationError is the validation
// error returned by SharetoBusinessUnitActiveControlRequest.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitActiveControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitActiveControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitActiveControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitActiveControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitActiveControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitActiveControlRequestValidationError) ErrorName() string {
	return "SharetoBusinessUnitActiveControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitActiveControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitActiveControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitActiveControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitActiveControlRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitActiveControlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitActiveControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitActiveControlResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoBusinessUnitActiveControlResponseMultiError, or nil if none found.
func (m *SharetoBusinessUnitActiveControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitActiveControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoBusinessUnitActiveControlResponseMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitActiveControlResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitActiveControlResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitActiveControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitActiveControlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitActiveControlResponseMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitActiveControlResponseValidationError is the validation
// error returned by SharetoBusinessUnitActiveControlResponse.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitActiveControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitActiveControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitActiveControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitActiveControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitActiveControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitActiveControlResponseValidationError) ErrorName() string {
	return "SharetoBusinessUnitActiveControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitActiveControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitActiveControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitActiveControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitActiveControlResponseValidationError{}

// Validate checks the field values on ActivateBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateBusinessUnitRequestMultiError, or nil if none found.
func (m *ActivateBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ActivateBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// ActivateBusinessUnitRequestMultiError is an error wrapping multiple
// validation errors returned by ActivateBusinessUnitRequest.ValidateAll() if
// the designated constraints aren't met.
type ActivateBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateBusinessUnitRequestMultiError) AllErrors() []error { return m }

// ActivateBusinessUnitRequestValidationError is the validation error returned
// by ActivateBusinessUnitRequest.Validate if the designated constraints
// aren't met.
type ActivateBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateBusinessUnitRequestValidationError) ErrorName() string {
	return "ActivateBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateBusinessUnitRequestValidationError{}

// Validate checks the field values on ActivateBusinessUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateBusinessUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateBusinessUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateBusinessUnitResponseMultiError, or nil if none found.
func (m *ActivateBusinessUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateBusinessUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitActiveControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivateBusinessUnitResponseValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivateBusinessUnitResponseValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitActiveControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivateBusinessUnitResponseValidationError{
				field:  "BusinessUnitActiveControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ActivateBusinessUnitResponseMultiError(errors)
	}

	return nil
}

// ActivateBusinessUnitResponseMultiError is an error wrapping multiple
// validation errors returned by ActivateBusinessUnitResponse.ValidateAll() if
// the designated constraints aren't met.
type ActivateBusinessUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateBusinessUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateBusinessUnitResponseMultiError) AllErrors() []error { return m }

// ActivateBusinessUnitResponseValidationError is the validation error returned
// by ActivateBusinessUnitResponse.Validate if the designated constraints
// aren't met.
type ActivateBusinessUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateBusinessUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateBusinessUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateBusinessUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateBusinessUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateBusinessUnitResponseValidationError) ErrorName() string {
	return "ActivateBusinessUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateBusinessUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateBusinessUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateBusinessUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateBusinessUnitResponseValidationError{}

// Validate checks the field values on InactivateBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InactivateBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InactivateBusinessUnitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InactivateBusinessUnitRequestMultiError, or nil if none found.
func (m *InactivateBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InactivateBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for Comment

	if len(errors) > 0 {
		return InactivateBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// InactivateBusinessUnitRequestMultiError is an error wrapping multiple
// validation errors returned by InactivateBusinessUnitRequest.ValidateAll()
// if the designated constraints aren't met.
type InactivateBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InactivateBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InactivateBusinessUnitRequestMultiError) AllErrors() []error { return m }

// InactivateBusinessUnitRequestValidationError is the validation error
// returned by InactivateBusinessUnitRequest.Validate if the designated
// constraints aren't met.
type InactivateBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InactivateBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InactivateBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InactivateBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InactivateBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InactivateBusinessUnitRequestValidationError) ErrorName() string {
	return "InactivateBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InactivateBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInactivateBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InactivateBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InactivateBusinessUnitRequestValidationError{}

// Validate checks the field values on InactivateBusinessUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InactivateBusinessUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InactivateBusinessUnitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InactivateBusinessUnitResponseMultiError, or nil if none found.
func (m *InactivateBusinessUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InactivateBusinessUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitActiveControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InactivateBusinessUnitResponseValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InactivateBusinessUnitResponseValidationError{
					field:  "BusinessUnitActiveControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitActiveControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InactivateBusinessUnitResponseValidationError{
				field:  "BusinessUnitActiveControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InactivateBusinessUnitResponseMultiError(errors)
	}

	return nil
}

// InactivateBusinessUnitResponseMultiError is an error wrapping multiple
// validation errors returned by InactivateBusinessUnitResponse.ValidateAll()
// if the designated constraints aren't met.
type InactivateBusinessUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InactivateBusinessUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InactivateBusinessUnitResponseMultiError) AllErrors() []error { return m }

// InactivateBusinessUnitResponseValidationError is the validation error
// returned by InactivateBusinessUnitResponse.Validate if the designated
// constraints aren't met.
type InactivateBusinessUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InactivateBusinessUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InactivateBusinessUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InactivateBusinessUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InactivateBusinessUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InactivateBusinessUnitResponseValidationError) ErrorName() string {
	return "InactivateBusinessUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InactivateBusinessUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInactivateBusinessUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InactivateBusinessUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InactivateBusinessUnitResponseValidationError{}

// Validate checks the field values on StartBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBusinessRequestMultiError, or nil if none found.
func (m *StartBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	if len(errors) > 0 {
		return StartBusinessRequestMultiError(errors)
	}

	return nil
}

// StartBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by StartBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type StartBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBusinessRequestMultiError) AllErrors() []error { return m }

// StartBusinessRequestValidationError is the validation error returned by
// StartBusinessRequest.Validate if the designated constraints aren't met.
type StartBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBusinessRequestValidationError) ErrorName() string {
	return "StartBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBusinessRequestValidationError{}

// Validate checks the field values on StartBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBusinessResponseMultiError, or nil if none found.
func (m *StartBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartBusinessResponseMultiError(errors)
	}

	return nil
}

// StartBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by StartBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type StartBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBusinessResponseMultiError) AllErrors() []error { return m }

// StartBusinessResponseValidationError is the validation error returned by
// StartBusinessResponse.Validate if the designated constraints aren't met.
type StartBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBusinessResponseValidationError) ErrorName() string {
	return "StartBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBusinessResponseValidationError{}

// Validate checks the field values on StopBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBusinessRequestMultiError, or nil if none found.
func (m *StopBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	if len(errors) > 0 {
		return StopBusinessRequestMultiError(errors)
	}

	return nil
}

// StopBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by StopBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type StopBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBusinessRequestMultiError) AllErrors() []error { return m }

// StopBusinessRequestValidationError is the validation error returned by
// StopBusinessRequest.Validate if the designated constraints aren't met.
type StopBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBusinessRequestValidationError) ErrorName() string {
	return "StopBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBusinessRequestValidationError{}

// Validate checks the field values on StopBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopBusinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopBusinessResponseMultiError, or nil if none found.
func (m *StopBusinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopBusinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopBusinessResponseMultiError(errors)
	}

	return nil
}

// StopBusinessResponseMultiError is an error wrapping multiple validation
// errors returned by StopBusinessResponse.ValidateAll() if the designated
// constraints aren't met.
type StopBusinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopBusinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopBusinessResponseMultiError) AllErrors() []error { return m }

// StopBusinessResponseValidationError is the validation error returned by
// StopBusinessResponse.Validate if the designated constraints aren't met.
type StopBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopBusinessResponseValidationError) ErrorName() string {
	return "StopBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopBusinessResponseValidationError{}

// Validate checks the field values on
// ConfirmBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfirmBusinessUnitChangeNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ConfirmBusinessUnitChangeNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ConfirmBusinessUnitChangeNotificationRequestMultiError, or nil if none found.
func (m *ConfirmBusinessUnitChangeNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmBusinessUnitChangeNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ConfirmBusinessUnitChangeNotificationRequestMultiError(errors)
	}

	return nil
}

// ConfirmBusinessUnitChangeNotificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// ConfirmBusinessUnitChangeNotificationRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfirmBusinessUnitChangeNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmBusinessUnitChangeNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmBusinessUnitChangeNotificationRequestMultiError) AllErrors() []error { return m }

// ConfirmBusinessUnitChangeNotificationRequestValidationError is the
// validation error returned by
// ConfirmBusinessUnitChangeNotificationRequest.Validate if the designated
// constraints aren't met.
type ConfirmBusinessUnitChangeNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmBusinessUnitChangeNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmBusinessUnitChangeNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmBusinessUnitChangeNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmBusinessUnitChangeNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmBusinessUnitChangeNotificationRequestValidationError) ErrorName() string {
	return "ConfirmBusinessUnitChangeNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmBusinessUnitChangeNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmBusinessUnitChangeNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmBusinessUnitChangeNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmBusinessUnitChangeNotificationRequestValidationError{}

// Validate checks the field values on
// ConfirmBusinessUnitChangeNotificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfirmBusinessUnitChangeNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ConfirmBusinessUnitChangeNotificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ConfirmBusinessUnitChangeNotificationResponseMultiError, or nil if none found.
func (m *ConfirmBusinessUnitChangeNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmBusinessUnitChangeNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmBusinessUnitChangeNotificationResponseMultiError(errors)
	}

	return nil
}

// ConfirmBusinessUnitChangeNotificationResponseMultiError is an error wrapping
// multiple validation errors returned by
// ConfirmBusinessUnitChangeNotificationResponse.ValidateAll() if the
// designated constraints aren't met.
type ConfirmBusinessUnitChangeNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmBusinessUnitChangeNotificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmBusinessUnitChangeNotificationResponseMultiError) AllErrors() []error { return m }

// ConfirmBusinessUnitChangeNotificationResponseValidationError is the
// validation error returned by
// ConfirmBusinessUnitChangeNotificationResponse.Validate if the designated
// constraints aren't met.
type ConfirmBusinessUnitChangeNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmBusinessUnitChangeNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmBusinessUnitChangeNotificationResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ConfirmBusinessUnitChangeNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmBusinessUnitChangeNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmBusinessUnitChangeNotificationResponseValidationError) ErrorName() string {
	return "ConfirmBusinessUnitChangeNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmBusinessUnitChangeNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmBusinessUnitChangeNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmBusinessUnitChangeNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmBusinessUnitChangeNotificationResponseValidationError{}

// Validate checks the field values on ExportBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExportBusinessUnitManagementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportBusinessUnitManagementsRequestMultiError, or nil if none found.
func (m *ExportBusinessUnitManagementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitManagementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportBusinessUnitManagementsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportBusinessUnitManagementsRequestMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitManagementsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExportBusinessUnitManagementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportBusinessUnitManagementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitManagementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitManagementsRequestMultiError) AllErrors() []error { return m }

// ExportBusinessUnitManagementsRequestValidationError is the validation error
// returned by ExportBusinessUnitManagementsRequest.Validate if the designated
// constraints aren't met.
type ExportBusinessUnitManagementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitManagementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitManagementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBusinessUnitManagementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitManagementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitManagementsRequestValidationError) ErrorName() string {
	return "ExportBusinessUnitManagementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitManagementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitManagementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitManagementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitManagementsRequestValidationError{}

// Validate checks the field values on ExportBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExportBusinessUnitManagementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportBusinessUnitManagementsResponseMultiError, or nil if none found.
func (m *ExportBusinessUnitManagementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitManagementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportBusinessUnitManagementsResponseMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitManagementsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ExportBusinessUnitManagementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportBusinessUnitManagementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitManagementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitManagementsResponseMultiError) AllErrors() []error { return m }

// ExportBusinessUnitManagementsResponseValidationError is the validation error
// returned by ExportBusinessUnitManagementsResponse.Validate if the
// designated constraints aren't met.
type ExportBusinessUnitManagementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitManagementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitManagementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBusinessUnitManagementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitManagementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitManagementsResponseValidationError) ErrorName() string {
	return "ExportBusinessUnitManagementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitManagementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitManagementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitManagementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitManagementsResponseValidationError{}

// Validate checks the field values on ImportBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ImportBusinessUnitManagementsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBusinessUnitManagementsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportBusinessUnitManagementsRequestMultiError, or nil if none found.
func (m *ImportBusinessUnitManagementsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitManagementsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitManagementsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportBusinessUnitManagementsRequestMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitManagementsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ImportBusinessUnitManagementsRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportBusinessUnitManagementsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitManagementsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitManagementsRequestMultiError) AllErrors() []error { return m }

// ImportBusinessUnitManagementsRequestValidationError is the validation error
// returned by ImportBusinessUnitManagementsRequest.Validate if the designated
// constraints aren't met.
type ImportBusinessUnitManagementsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitManagementsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitManagementsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBusinessUnitManagementsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitManagementsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitManagementsRequestValidationError) ErrorName() string {
	return "ImportBusinessUnitManagementsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitManagementsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitManagementsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitManagementsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitManagementsRequestValidationError{}

// Validate checks the field values on ImportBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ImportBusinessUnitManagementsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBusinessUnitManagementsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportBusinessUnitManagementsResponseMultiError, or nil if none found.
func (m *ImportBusinessUnitManagementsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitManagementsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitManagementsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportBusinessUnitManagementsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportBusinessUnitManagementsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportBusinessUnitManagementsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportBusinessUnitManagementsResponseMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitManagementsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ImportBusinessUnitManagementsResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportBusinessUnitManagementsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitManagementsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitManagementsResponseMultiError) AllErrors() []error { return m }

// ImportBusinessUnitManagementsResponseValidationError is the validation error
// returned by ImportBusinessUnitManagementsResponse.Validate if the
// designated constraints aren't met.
type ImportBusinessUnitManagementsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitManagementsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitManagementsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBusinessUnitManagementsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitManagementsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitManagementsResponseValidationError) ErrorName() string {
	return "ImportBusinessUnitManagementsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitManagementsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitManagementsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitManagementsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitManagementsResponseValidationError{}

// Validate checks the field values on ListBusinessUnitManagementFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitManagementFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitManagementFormatsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitManagementFormatsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitManagementFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitManagementFormatsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitManagementFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitManagementFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementFormatsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementFormatsRequestValidationError is the validation
// error returned by ListBusinessUnitManagementFormatsRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitManagementFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitManagementFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitManagementFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitManagementFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementFormatsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitManagementFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementFormatsRequestValidationError{}

// Validate checks the field values on
// ListBusinessUnitManagementFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitManagementFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitManagementFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListBusinessUnitManagementFormatsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitManagementFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitManagementFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitManagementFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitManagementFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitManagementFormatsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBusinessUnitManagementFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitManagementFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementFormatsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementFormatsResponseValidationError is the validation
// error returned by ListBusinessUnitManagementFormatsResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitManagementFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitManagementFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitManagementFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitManagementFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementFormatsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitManagementFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementFormatsResponseValidationError{}

// Validate checks the field values on ExportBusinessUnitScoresRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportBusinessUnitScoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBusinessUnitScoresRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportBusinessUnitScoresRequestMultiError, or nil if none found.
func (m *ExportBusinessUnitScoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitScoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportBusinessUnitScoresRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportBusinessUnitScoresRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportBusinessUnitScoresRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportBusinessUnitScoresRequestMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitScoresRequestMultiError is an error wrapping multiple
// validation errors returned by ExportBusinessUnitScoresRequest.ValidateAll()
// if the designated constraints aren't met.
type ExportBusinessUnitScoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitScoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitScoresRequestMultiError) AllErrors() []error { return m }

// ExportBusinessUnitScoresRequestValidationError is the validation error
// returned by ExportBusinessUnitScoresRequest.Validate if the designated
// constraints aren't met.
type ExportBusinessUnitScoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitScoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitScoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBusinessUnitScoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitScoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitScoresRequestValidationError) ErrorName() string {
	return "ExportBusinessUnitScoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitScoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitScoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitScoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitScoresRequestValidationError{}

// Validate checks the field values on ExportBusinessUnitScoresResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportBusinessUnitScoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBusinessUnitScoresResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportBusinessUnitScoresResponseMultiError, or nil if none found.
func (m *ExportBusinessUnitScoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitScoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportBusinessUnitScoresResponseMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitScoresResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExportBusinessUnitScoresResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportBusinessUnitScoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitScoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitScoresResponseMultiError) AllErrors() []error { return m }

// ExportBusinessUnitScoresResponseValidationError is the validation error
// returned by ExportBusinessUnitScoresResponse.Validate if the designated
// constraints aren't met.
type ExportBusinessUnitScoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitScoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitScoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBusinessUnitScoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitScoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitScoresResponseValidationError) ErrorName() string {
	return "ExportBusinessUnitScoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitScoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitScoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitScoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitScoresResponseValidationError{}

// Validate checks the field values on ImportBusinessUnitScoresRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportBusinessUnitScoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBusinessUnitScoresRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportBusinessUnitScoresRequestMultiError, or nil if none found.
func (m *ImportBusinessUnitScoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitScoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitScoresRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitScoresRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitScoresRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportBusinessUnitScoresRequestMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitScoresRequestMultiError is an error wrapping multiple
// validation errors returned by ImportBusinessUnitScoresRequest.ValidateAll()
// if the designated constraints aren't met.
type ImportBusinessUnitScoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitScoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitScoresRequestMultiError) AllErrors() []error { return m }

// ImportBusinessUnitScoresRequestValidationError is the validation error
// returned by ImportBusinessUnitScoresRequest.Validate if the designated
// constraints aren't met.
type ImportBusinessUnitScoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitScoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitScoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBusinessUnitScoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitScoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitScoresRequestValidationError) ErrorName() string {
	return "ImportBusinessUnitScoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitScoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitScoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitScoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitScoresRequestValidationError{}

// Validate checks the field values on ImportBusinessUnitScoresResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportBusinessUnitScoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBusinessUnitScoresResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportBusinessUnitScoresResponseMultiError, or nil if none found.
func (m *ImportBusinessUnitScoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitScoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitScoresResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitScoresResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitScoresResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportBusinessUnitScoresResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportBusinessUnitScoresResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportBusinessUnitScoresResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportBusinessUnitScoresResponseMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitScoresResponseMultiError is an error wrapping multiple
// validation errors returned by
// ImportBusinessUnitScoresResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportBusinessUnitScoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitScoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitScoresResponseMultiError) AllErrors() []error { return m }

// ImportBusinessUnitScoresResponseValidationError is the validation error
// returned by ImportBusinessUnitScoresResponse.Validate if the designated
// constraints aren't met.
type ImportBusinessUnitScoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitScoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitScoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBusinessUnitScoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitScoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitScoresResponseValidationError) ErrorName() string {
	return "ImportBusinessUnitScoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitScoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitScoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitScoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitScoresResponseValidationError{}

// Validate checks the field values on ListBusinessUnitScoreFormatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListBusinessUnitScoreFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitScoreFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitScoreFormatsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitScoreFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitScoreFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitScoreFormatsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitScoreFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitScoreFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitScoreFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitScoreFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitScoreFormatsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitScoreFormatsRequestValidationError is the validation error
// returned by ListBusinessUnitScoreFormatsRequest.Validate if the designated
// constraints aren't met.
type ListBusinessUnitScoreFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitScoreFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitScoreFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitScoreFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitScoreFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitScoreFormatsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitScoreFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitScoreFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitScoreFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitScoreFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitScoreFormatsRequestValidationError{}

// Validate checks the field values on ListBusinessUnitScoreFormatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBusinessUnitScoreFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessUnitScoreFormatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBusinessUnitScoreFormatsResponseMultiError, or nil if none found.
func (m *ListBusinessUnitScoreFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitScoreFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitScoreFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitScoreFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitScoreFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitScoreFormatsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitScoreFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListBusinessUnitScoreFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessUnitScoreFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitScoreFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitScoreFormatsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitScoreFormatsResponseValidationError is the validation error
// returned by ListBusinessUnitScoreFormatsResponse.Validate if the designated
// constraints aren't met.
type ListBusinessUnitScoreFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitScoreFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessUnitScoreFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessUnitScoreFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessUnitScoreFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitScoreFormatsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitScoreFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitScoreFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitScoreFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitScoreFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitScoreFormatsResponseValidationError{}

// Validate checks the field values on
// ExportBusinessUnitManagementItemValuesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExportBusinessUnitManagementItemValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExportBusinessUnitManagementItemValuesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ExportBusinessUnitManagementItemValuesRequestMultiError, or nil if none found.
func (m *ExportBusinessUnitManagementItemValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitManagementItemValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportBusinessUnitManagementItemValuesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportBusinessUnitManagementItemValuesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportBusinessUnitManagementItemValuesRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportBusinessUnitManagementItemValuesRequestMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitManagementItemValuesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ExportBusinessUnitManagementItemValuesRequest.ValidateAll() if the
// designated constraints aren't met.
type ExportBusinessUnitManagementItemValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitManagementItemValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitManagementItemValuesRequestMultiError) AllErrors() []error { return m }

// ExportBusinessUnitManagementItemValuesRequestValidationError is the
// validation error returned by
// ExportBusinessUnitManagementItemValuesRequest.Validate if the designated
// constraints aren't met.
type ExportBusinessUnitManagementItemValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitManagementItemValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitManagementItemValuesRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExportBusinessUnitManagementItemValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitManagementItemValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitManagementItemValuesRequestValidationError) ErrorName() string {
	return "ExportBusinessUnitManagementItemValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitManagementItemValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitManagementItemValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitManagementItemValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitManagementItemValuesRequestValidationError{}

// Validate checks the field values on
// ExportBusinessUnitManagementItemValuesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExportBusinessUnitManagementItemValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExportBusinessUnitManagementItemValuesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ExportBusinessUnitManagementItemValuesResponseMultiError, or nil if none found.
func (m *ExportBusinessUnitManagementItemValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBusinessUnitManagementItemValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportBusinessUnitManagementItemValuesResponseMultiError(errors)
	}

	return nil
}

// ExportBusinessUnitManagementItemValuesResponseMultiError is an error
// wrapping multiple validation errors returned by
// ExportBusinessUnitManagementItemValuesResponse.ValidateAll() if the
// designated constraints aren't met.
type ExportBusinessUnitManagementItemValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBusinessUnitManagementItemValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBusinessUnitManagementItemValuesResponseMultiError) AllErrors() []error { return m }

// ExportBusinessUnitManagementItemValuesResponseValidationError is the
// validation error returned by
// ExportBusinessUnitManagementItemValuesResponse.Validate if the designated
// constraints aren't met.
type ExportBusinessUnitManagementItemValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBusinessUnitManagementItemValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBusinessUnitManagementItemValuesResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ExportBusinessUnitManagementItemValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBusinessUnitManagementItemValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBusinessUnitManagementItemValuesResponseValidationError) ErrorName() string {
	return "ExportBusinessUnitManagementItemValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBusinessUnitManagementItemValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBusinessUnitManagementItemValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBusinessUnitManagementItemValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBusinessUnitManagementItemValuesResponseValidationError{}

// Validate checks the field values on
// ImportBusinessUnitManagementItemValuesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportBusinessUnitManagementItemValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ImportBusinessUnitManagementItemValuesRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ImportBusinessUnitManagementItemValuesRequestMultiError, or nil if none found.
func (m *ImportBusinessUnitManagementItemValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitManagementItemValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementItemValuesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementItemValuesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitManagementItemValuesRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportBusinessUnitManagementItemValuesRequestMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitManagementItemValuesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ImportBusinessUnitManagementItemValuesRequest.ValidateAll() if the
// designated constraints aren't met.
type ImportBusinessUnitManagementItemValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitManagementItemValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitManagementItemValuesRequestMultiError) AllErrors() []error { return m }

// ImportBusinessUnitManagementItemValuesRequestValidationError is the
// validation error returned by
// ImportBusinessUnitManagementItemValuesRequest.Validate if the designated
// constraints aren't met.
type ImportBusinessUnitManagementItemValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitManagementItemValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitManagementItemValuesRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ImportBusinessUnitManagementItemValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitManagementItemValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitManagementItemValuesRequestValidationError) ErrorName() string {
	return "ImportBusinessUnitManagementItemValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitManagementItemValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitManagementItemValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitManagementItemValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitManagementItemValuesRequestValidationError{}

// Validate checks the field values on
// ImportBusinessUnitManagementItemValuesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportBusinessUnitManagementItemValuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ImportBusinessUnitManagementItemValuesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ImportBusinessUnitManagementItemValuesResponseMultiError, or nil if none found.
func (m *ImportBusinessUnitManagementItemValuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBusinessUnitManagementItemValuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementItemValuesResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBusinessUnitManagementItemValuesResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBusinessUnitManagementItemValuesResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportBusinessUnitManagementItemValuesResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportBusinessUnitManagementItemValuesResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportBusinessUnitManagementItemValuesResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportBusinessUnitManagementItemValuesResponseMultiError(errors)
	}

	return nil
}

// ImportBusinessUnitManagementItemValuesResponseMultiError is an error
// wrapping multiple validation errors returned by
// ImportBusinessUnitManagementItemValuesResponse.ValidateAll() if the
// designated constraints aren't met.
type ImportBusinessUnitManagementItemValuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBusinessUnitManagementItemValuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBusinessUnitManagementItemValuesResponseMultiError) AllErrors() []error { return m }

// ImportBusinessUnitManagementItemValuesResponseValidationError is the
// validation error returned by
// ImportBusinessUnitManagementItemValuesResponse.Validate if the designated
// constraints aren't met.
type ImportBusinessUnitManagementItemValuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBusinessUnitManagementItemValuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBusinessUnitManagementItemValuesResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ImportBusinessUnitManagementItemValuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBusinessUnitManagementItemValuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBusinessUnitManagementItemValuesResponseValidationError) ErrorName() string {
	return "ImportBusinessUnitManagementItemValuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBusinessUnitManagementItemValuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBusinessUnitManagementItemValuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBusinessUnitManagementItemValuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBusinessUnitManagementItemValuesResponseValidationError{}

// Validate checks the field values on
// ListBusinessUnitManagementItemValueFormatsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitManagementItemValueFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitManagementItemValueFormatsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListBusinessUnitManagementItemValueFormatsRequestMultiError, or nil if none found.
func (m *ListBusinessUnitManagementItemValueFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementItemValueFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBusinessUnitManagementItemValueFormatsRequestMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementItemValueFormatsRequestMultiError is an error
// wrapping multiple validation errors returned by
// ListBusinessUnitManagementItemValueFormatsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListBusinessUnitManagementItemValueFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementItemValueFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementItemValueFormatsRequestMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementItemValueFormatsRequestValidationError is the
// validation error returned by
// ListBusinessUnitManagementItemValueFormatsRequest.Validate if the
// designated constraints aren't met.
type ListBusinessUnitManagementItemValueFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementItemValueFormatsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListBusinessUnitManagementItemValueFormatsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListBusinessUnitManagementItemValueFormatsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListBusinessUnitManagementItemValueFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementItemValueFormatsRequestValidationError) ErrorName() string {
	return "ListBusinessUnitManagementItemValueFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementItemValueFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementItemValueFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementItemValueFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementItemValueFormatsRequestValidationError{}

// Validate checks the field values on
// ListBusinessUnitManagementItemValueFormatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessUnitManagementItemValueFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBusinessUnitManagementItemValueFormatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListBusinessUnitManagementItemValueFormatsResponseMultiError, or nil if
// none found.
func (m *ListBusinessUnitManagementItemValueFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessUnitManagementItemValueFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessUnitManagementItemValueFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessUnitManagementItemValueFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessUnitManagementItemValueFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessUnitManagementItemValueFormatsResponseMultiError(errors)
	}

	return nil
}

// ListBusinessUnitManagementItemValueFormatsResponseMultiError is an error
// wrapping multiple validation errors returned by
// ListBusinessUnitManagementItemValueFormatsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListBusinessUnitManagementItemValueFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessUnitManagementItemValueFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessUnitManagementItemValueFormatsResponseMultiError) AllErrors() []error { return m }

// ListBusinessUnitManagementItemValueFormatsResponseValidationError is the
// validation error returned by
// ListBusinessUnitManagementItemValueFormatsResponse.Validate if the
// designated constraints aren't met.
type ListBusinessUnitManagementItemValueFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessUnitManagementItemValueFormatsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListBusinessUnitManagementItemValueFormatsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListBusinessUnitManagementItemValueFormatsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListBusinessUnitManagementItemValueFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessUnitManagementItemValueFormatsResponseValidationError) ErrorName() string {
	return "ListBusinessUnitManagementItemValueFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessUnitManagementItemValueFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessUnitManagementItemValueFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessUnitManagementItemValueFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessUnitManagementItemValueFormatsResponseValidationError{}

// Validate checks the field values on GetBusinessUnitSkillTreeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessUnitSkillTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessUnitSkillTreeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBusinessUnitSkillTreeRequestMultiError, or nil if none found.
func (m *GetBusinessUnitSkillTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessUnitSkillTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetBusinessUnitSkillTreeRequestMultiError(errors)
	}

	return nil
}

// GetBusinessUnitSkillTreeRequestMultiError is an error wrapping multiple
// validation errors returned by GetBusinessUnitSkillTreeRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBusinessUnitSkillTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessUnitSkillTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessUnitSkillTreeRequestMultiError) AllErrors() []error { return m }

// GetBusinessUnitSkillTreeRequestValidationError is the validation error
// returned by GetBusinessUnitSkillTreeRequest.Validate if the designated
// constraints aren't met.
type GetBusinessUnitSkillTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessUnitSkillTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessUnitSkillTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessUnitSkillTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessUnitSkillTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessUnitSkillTreeRequestValidationError) ErrorName() string {
	return "GetBusinessUnitSkillTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessUnitSkillTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessUnitSkillTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessUnitSkillTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessUnitSkillTreeRequestValidationError{}
