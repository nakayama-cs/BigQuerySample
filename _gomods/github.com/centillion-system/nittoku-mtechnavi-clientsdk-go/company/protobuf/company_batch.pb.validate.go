// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: company_batch.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TaskLinkBusinessUnitManagementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TaskLinkBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskLinkBusinessUnitManagementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TaskLinkBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *TaskLinkBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskLinkBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitManagementId

	// no validation rules for LinkTenantId

	// no validation rules for CompanyDisplayName

	// no validation rules for InviteBy

	if all {
		switch v := interface{}(m.GetAdminUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskLinkBusinessUnitManagementRequestValidationError{
					field:  "AdminUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskLinkBusinessUnitManagementRequestValidationError{
					field:  "AdminUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdminUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskLinkBusinessUnitManagementRequestValidationError{
				field:  "AdminUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskLinkBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// TaskLinkBusinessUnitManagementRequestMultiError is an error wrapping
// multiple validation errors returned by
// TaskLinkBusinessUnitManagementRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskLinkBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskLinkBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskLinkBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// TaskLinkBusinessUnitManagementRequestValidationError is the validation error
// returned by TaskLinkBusinessUnitManagementRequest.Validate if the
// designated constraints aren't met.
type TaskLinkBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskLinkBusinessUnitManagementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskLinkBusinessUnitManagementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskLinkBusinessUnitManagementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskLinkBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskLinkBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "TaskLinkBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskLinkBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskLinkBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskLinkBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskLinkBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on TaskCreateHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskCreateHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskCreateHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskCreateHistoryRequestMultiError, or nil if none found.
func (m *TaskCreateHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for HistoryCategoryName

	// no validation rules for ContentName

	// no validation rules for OccurredAt

	// no validation rules for Level

	// no validation rules for TypeName

	// no validation rules for RecordId

	if len(errors) > 0 {
		return TaskCreateHistoryRequestMultiError(errors)
	}

	return nil
}

// TaskCreateHistoryRequestMultiError is an error wrapping multiple validation
// errors returned by TaskCreateHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskCreateHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateHistoryRequestMultiError) AllErrors() []error { return m }

// TaskCreateHistoryRequestValidationError is the validation error returned by
// TaskCreateHistoryRequest.Validate if the designated constraints aren't met.
type TaskCreateHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateHistoryRequestValidationError) ErrorName() string {
	return "TaskCreateHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateHistoryRequestValidationError{}

// Validate checks the field values on TaskNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskNotificationRequestMultiError, or nil if none found.
func (m *TaskNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for NotificationId

	// no validation rules for NotificationCompanyName

	if all {
		switch v := interface{}(m.GetNotificationUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskNotificationRequestValidationError{
					field:  "NotificationUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskNotificationRequestValidationError{
					field:  "NotificationUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotificationUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskNotificationRequestValidationError{
				field:  "NotificationUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotificationSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskNotificationRequestValidationError{
					field:  "NotificationSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskNotificationRequestValidationError{
					field:  "NotificationSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotificationSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskNotificationRequestValidationError{
				field:  "NotificationSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskNotificationRequestMultiError(errors)
	}

	return nil
}

// TaskNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by TaskNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskNotificationRequestMultiError) AllErrors() []error { return m }

// TaskNotificationRequestValidationError is the validation error returned by
// TaskNotificationRequest.Validate if the designated constraints aren't met.
type TaskNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskNotificationRequestValidationError) ErrorName() string {
	return "TaskNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskNotificationRequestValidationError{}

// Validate checks the field values on
// ScheduleTaskSharetoBusinessUnitManagementRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleTaskSharetoBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ScheduleTaskSharetoBusinessUnitManagementRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ScheduleTaskSharetoBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *ScheduleTaskSharetoBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleTaskSharetoBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScheduleTaskSharetoBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// ScheduleTaskSharetoBusinessUnitManagementRequestMultiError is an error
// wrapping multiple validation errors returned by
// ScheduleTaskSharetoBusinessUnitManagementRequest.ValidateAll() if the
// designated constraints aren't met.
type ScheduleTaskSharetoBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleTaskSharetoBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleTaskSharetoBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// ScheduleTaskSharetoBusinessUnitManagementRequestValidationError is the
// validation error returned by
// ScheduleTaskSharetoBusinessUnitManagementRequest.Validate if the designated
// constraints aren't met.
type ScheduleTaskSharetoBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleTaskSharetoBusinessUnitManagementRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ScheduleTaskSharetoBusinessUnitManagementRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ScheduleTaskSharetoBusinessUnitManagementRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ScheduleTaskSharetoBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleTaskSharetoBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "ScheduleTaskSharetoBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleTaskSharetoBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleTaskSharetoBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleTaskSharetoBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleTaskSharetoBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on TaskSharetoBusinessUnitManagementRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TaskSharetoBusinessUnitManagementRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TaskSharetoBusinessUnitManagementRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TaskSharetoBusinessUnitManagementRequestMultiError, or nil if none found.
func (m *TaskSharetoBusinessUnitManagementRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskSharetoBusinessUnitManagementRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for ScheduleTaskId

	// no validation rules for OccurredAt

	if len(errors) > 0 {
		return TaskSharetoBusinessUnitManagementRequestMultiError(errors)
	}

	return nil
}

// TaskSharetoBusinessUnitManagementRequestMultiError is an error wrapping
// multiple validation errors returned by
// TaskSharetoBusinessUnitManagementRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskSharetoBusinessUnitManagementRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskSharetoBusinessUnitManagementRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskSharetoBusinessUnitManagementRequestMultiError) AllErrors() []error { return m }

// TaskSharetoBusinessUnitManagementRequestValidationError is the validation
// error returned by TaskSharetoBusinessUnitManagementRequest.Validate if the
// designated constraints aren't met.
type TaskSharetoBusinessUnitManagementRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskSharetoBusinessUnitManagementRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskSharetoBusinessUnitManagementRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskSharetoBusinessUnitManagementRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskSharetoBusinessUnitManagementRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskSharetoBusinessUnitManagementRequestValidationError) ErrorName() string {
	return "TaskSharetoBusinessUnitManagementRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskSharetoBusinessUnitManagementRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskSharetoBusinessUnitManagementRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskSharetoBusinessUnitManagementRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskSharetoBusinessUnitManagementRequestValidationError{}

// Validate checks the field values on TaskCreateMainContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskCreateMainContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskCreateMainContactRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskCreateMainContactRequestMultiError, or nil if none found.
func (m *TaskCreateMainContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskCreateMainContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for BusinessUnitManagementId

	if all {
		switch v := interface{}(m.GetMainContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskCreateMainContactRequestValidationError{
					field:  "MainContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskCreateMainContactRequestValidationError{
					field:  "MainContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMainContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskCreateMainContactRequestValidationError{
				field:  "MainContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskCreateMainContactRequestMultiError(errors)
	}

	return nil
}

// TaskCreateMainContactRequestMultiError is an error wrapping multiple
// validation errors returned by TaskCreateMainContactRequest.ValidateAll() if
// the designated constraints aren't met.
type TaskCreateMainContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskCreateMainContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskCreateMainContactRequestMultiError) AllErrors() []error { return m }

// TaskCreateMainContactRequestValidationError is the validation error returned
// by TaskCreateMainContactRequest.Validate if the designated constraints
// aren't met.
type TaskCreateMainContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskCreateMainContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskCreateMainContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskCreateMainContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskCreateMainContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskCreateMainContactRequestValidationError) ErrorName() string {
	return "TaskCreateMainContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskCreateMainContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskCreateMainContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskCreateMainContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskCreateMainContactRequestValidationError{}

// Validate checks the field values on TaskSharetoBusinessUnitContactRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TaskSharetoBusinessUnitContactRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskSharetoBusinessUnitContactRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TaskSharetoBusinessUnitContactRequestMultiError, or nil if none found.
func (m *TaskSharetoBusinessUnitContactRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskSharetoBusinessUnitContactRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for BusinessUnitManagementId

	if len(errors) > 0 {
		return TaskSharetoBusinessUnitContactRequestMultiError(errors)
	}

	return nil
}

// TaskSharetoBusinessUnitContactRequestMultiError is an error wrapping
// multiple validation errors returned by
// TaskSharetoBusinessUnitContactRequest.ValidateAll() if the designated
// constraints aren't met.
type TaskSharetoBusinessUnitContactRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskSharetoBusinessUnitContactRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskSharetoBusinessUnitContactRequestMultiError) AllErrors() []error { return m }

// TaskSharetoBusinessUnitContactRequestValidationError is the validation error
// returned by TaskSharetoBusinessUnitContactRequest.Validate if the
// designated constraints aren't met.
type TaskSharetoBusinessUnitContactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskSharetoBusinessUnitContactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskSharetoBusinessUnitContactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskSharetoBusinessUnitContactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskSharetoBusinessUnitContactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskSharetoBusinessUnitContactRequestValidationError) ErrorName() string {
	return "TaskSharetoBusinessUnitContactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskSharetoBusinessUnitContactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskSharetoBusinessUnitContactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskSharetoBusinessUnitContactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskSharetoBusinessUnitContactRequestValidationError{}

// Validate checks the field values on TaskActivateBusinessUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskActivateBusinessUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskActivateBusinessUnitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TaskActivateBusinessUnitRequestMultiError, or nil if none found.
func (m *TaskActivateBusinessUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskActivateBusinessUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	// no validation rules for LinkTenantId

	if len(errors) > 0 {
		return TaskActivateBusinessUnitRequestMultiError(errors)
	}

	return nil
}

// TaskActivateBusinessUnitRequestMultiError is an error wrapping multiple
// validation errors returned by TaskActivateBusinessUnitRequest.ValidateAll()
// if the designated constraints aren't met.
type TaskActivateBusinessUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskActivateBusinessUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskActivateBusinessUnitRequestMultiError) AllErrors() []error { return m }

// TaskActivateBusinessUnitRequestValidationError is the validation error
// returned by TaskActivateBusinessUnitRequest.Validate if the designated
// constraints aren't met.
type TaskActivateBusinessUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskActivateBusinessUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskActivateBusinessUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskActivateBusinessUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskActivateBusinessUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskActivateBusinessUnitRequestValidationError) ErrorName() string {
	return "TaskActivateBusinessUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskActivateBusinessUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskActivateBusinessUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskActivateBusinessUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskActivateBusinessUnitRequestValidationError{}
