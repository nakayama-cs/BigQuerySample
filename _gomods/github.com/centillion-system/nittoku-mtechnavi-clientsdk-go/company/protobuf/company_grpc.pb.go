// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	// 自社情報
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*Company, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.CompanyService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.CompanyService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	// 自社情報
	GetCompany(context.Context, *GetCompanyRequest) (*Company, error)
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*Company, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) GetCompany(context.Context, *GetCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

// ComponentUnitServiceClient is the client API for ComponentUnitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentUnitServiceClient interface {
	// 管理場所
	CreateComponentUnit(ctx context.Context, in *CreateComponentUnitRequest, opts ...grpc.CallOption) (*ComponentUnit, error)
	ListComponentUnits(ctx context.Context, in *ListComponentUnitsRequest, opts ...grpc.CallOption) (*ListComponentUnitsResponse, error)
	GetComponentUnit(ctx context.Context, in *GetComponentUnitRequest, opts ...grpc.CallOption) (*ComponentUnit, error)
	UpdateComponentUnit(ctx context.Context, in *UpdateComponentUnitRequest, opts ...grpc.CallOption) (*ComponentUnit, error)
	DeleteComponentUnit(ctx context.Context, in *DeleteComponentUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理場所取込
	ImportComponentUnits(ctx context.Context, in *ImportComponentUnitsRequest, opts ...grpc.CallOption) (*ImportComponentUnitsResponse, error)
	// 取込フォーマット出力
	ExportComponentUnits(ctx context.Context, in *ExportComponentUnitsRequest, opts ...grpc.CallOption) (*ExportComponentUnitsResponse, error)
	// 取込フォーマット取得
	ListComponentUnitFormats(ctx context.Context, in *ListComponentUnitFormatsRequest, opts ...grpc.CallOption) (*ListComponentUnitFormatsResponse, error)
}

type componentUnitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentUnitServiceClient(cc grpc.ClientConnInterface) ComponentUnitServiceClient {
	return &componentUnitServiceClient{cc}
}

func (c *componentUnitServiceClient) CreateComponentUnit(ctx context.Context, in *CreateComponentUnitRequest, opts ...grpc.CallOption) (*ComponentUnit, error) {
	out := new(ComponentUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/CreateComponentUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) ListComponentUnits(ctx context.Context, in *ListComponentUnitsRequest, opts ...grpc.CallOption) (*ListComponentUnitsResponse, error) {
	out := new(ListComponentUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/ListComponentUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) GetComponentUnit(ctx context.Context, in *GetComponentUnitRequest, opts ...grpc.CallOption) (*ComponentUnit, error) {
	out := new(ComponentUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/GetComponentUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) UpdateComponentUnit(ctx context.Context, in *UpdateComponentUnitRequest, opts ...grpc.CallOption) (*ComponentUnit, error) {
	out := new(ComponentUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/UpdateComponentUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) DeleteComponentUnit(ctx context.Context, in *DeleteComponentUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/DeleteComponentUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) ImportComponentUnits(ctx context.Context, in *ImportComponentUnitsRequest, opts ...grpc.CallOption) (*ImportComponentUnitsResponse, error) {
	out := new(ImportComponentUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/ImportComponentUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) ExportComponentUnits(ctx context.Context, in *ExportComponentUnitsRequest, opts ...grpc.CallOption) (*ExportComponentUnitsResponse, error) {
	out := new(ExportComponentUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/ExportComponentUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *componentUnitServiceClient) ListComponentUnitFormats(ctx context.Context, in *ListComponentUnitFormatsRequest, opts ...grpc.CallOption) (*ListComponentUnitFormatsResponse, error) {
	out := new(ListComponentUnitFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.ComponentUnitService/ListComponentUnitFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentUnitServiceServer is the server API for ComponentUnitService service.
// All implementations must embed UnimplementedComponentUnitServiceServer
// for forward compatibility
type ComponentUnitServiceServer interface {
	// 管理場所
	CreateComponentUnit(context.Context, *CreateComponentUnitRequest) (*ComponentUnit, error)
	ListComponentUnits(context.Context, *ListComponentUnitsRequest) (*ListComponentUnitsResponse, error)
	GetComponentUnit(context.Context, *GetComponentUnitRequest) (*ComponentUnit, error)
	UpdateComponentUnit(context.Context, *UpdateComponentUnitRequest) (*ComponentUnit, error)
	DeleteComponentUnit(context.Context, *DeleteComponentUnitRequest) (*emptypb.Empty, error)
	// 管理場所取込
	ImportComponentUnits(context.Context, *ImportComponentUnitsRequest) (*ImportComponentUnitsResponse, error)
	// 取込フォーマット出力
	ExportComponentUnits(context.Context, *ExportComponentUnitsRequest) (*ExportComponentUnitsResponse, error)
	// 取込フォーマット取得
	ListComponentUnitFormats(context.Context, *ListComponentUnitFormatsRequest) (*ListComponentUnitFormatsResponse, error)
	mustEmbedUnimplementedComponentUnitServiceServer()
}

// UnimplementedComponentUnitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComponentUnitServiceServer struct {
}

func (UnimplementedComponentUnitServiceServer) CreateComponentUnit(context.Context, *CreateComponentUnitRequest) (*ComponentUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComponentUnit not implemented")
}
func (UnimplementedComponentUnitServiceServer) ListComponentUnits(context.Context, *ListComponentUnitsRequest) (*ListComponentUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentUnits not implemented")
}
func (UnimplementedComponentUnitServiceServer) GetComponentUnit(context.Context, *GetComponentUnitRequest) (*ComponentUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentUnit not implemented")
}
func (UnimplementedComponentUnitServiceServer) UpdateComponentUnit(context.Context, *UpdateComponentUnitRequest) (*ComponentUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComponentUnit not implemented")
}
func (UnimplementedComponentUnitServiceServer) DeleteComponentUnit(context.Context, *DeleteComponentUnitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComponentUnit not implemented")
}
func (UnimplementedComponentUnitServiceServer) ImportComponentUnits(context.Context, *ImportComponentUnitsRequest) (*ImportComponentUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportComponentUnits not implemented")
}
func (UnimplementedComponentUnitServiceServer) ExportComponentUnits(context.Context, *ExportComponentUnitsRequest) (*ExportComponentUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportComponentUnits not implemented")
}
func (UnimplementedComponentUnitServiceServer) ListComponentUnitFormats(context.Context, *ListComponentUnitFormatsRequest) (*ListComponentUnitFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentUnitFormats not implemented")
}
func (UnimplementedComponentUnitServiceServer) mustEmbedUnimplementedComponentUnitServiceServer() {}

// UnsafeComponentUnitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentUnitServiceServer will
// result in compilation errors.
type UnsafeComponentUnitServiceServer interface {
	mustEmbedUnimplementedComponentUnitServiceServer()
}

func RegisterComponentUnitServiceServer(s grpc.ServiceRegistrar, srv ComponentUnitServiceServer) {
	s.RegisterService(&ComponentUnitService_ServiceDesc, srv)
}

func _ComponentUnitService_CreateComponentUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComponentUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).CreateComponentUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/CreateComponentUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).CreateComponentUnit(ctx, req.(*CreateComponentUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_ListComponentUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).ListComponentUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/ListComponentUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).ListComponentUnits(ctx, req.(*ListComponentUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_GetComponentUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).GetComponentUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/GetComponentUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).GetComponentUnit(ctx, req.(*GetComponentUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_UpdateComponentUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateComponentUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).UpdateComponentUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/UpdateComponentUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).UpdateComponentUnit(ctx, req.(*UpdateComponentUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_DeleteComponentUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteComponentUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).DeleteComponentUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/DeleteComponentUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).DeleteComponentUnit(ctx, req.(*DeleteComponentUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_ImportComponentUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportComponentUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).ImportComponentUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/ImportComponentUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).ImportComponentUnits(ctx, req.(*ImportComponentUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_ExportComponentUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportComponentUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).ExportComponentUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/ExportComponentUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).ExportComponentUnits(ctx, req.(*ExportComponentUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComponentUnitService_ListComponentUnitFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentUnitFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentUnitServiceServer).ListComponentUnitFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.ComponentUnitService/ListComponentUnitFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentUnitServiceServer).ListComponentUnitFormats(ctx, req.(*ListComponentUnitFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentUnitService_ServiceDesc is the grpc.ServiceDesc for ComponentUnitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentUnitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.company.ComponentUnitService",
	HandlerType: (*ComponentUnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComponentUnit",
			Handler:    _ComponentUnitService_CreateComponentUnit_Handler,
		},
		{
			MethodName: "ListComponentUnits",
			Handler:    _ComponentUnitService_ListComponentUnits_Handler,
		},
		{
			MethodName: "GetComponentUnit",
			Handler:    _ComponentUnitService_GetComponentUnit_Handler,
		},
		{
			MethodName: "UpdateComponentUnit",
			Handler:    _ComponentUnitService_UpdateComponentUnit_Handler,
		},
		{
			MethodName: "DeleteComponentUnit",
			Handler:    _ComponentUnitService_DeleteComponentUnit_Handler,
		},
		{
			MethodName: "ImportComponentUnits",
			Handler:    _ComponentUnitService_ImportComponentUnits_Handler,
		},
		{
			MethodName: "ExportComponentUnits",
			Handler:    _ComponentUnitService_ExportComponentUnits_Handler,
		},
		{
			MethodName: "ListComponentUnitFormats",
			Handler:    _ComponentUnitService_ListComponentUnitFormats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

// BusinessUnitServiceClient is the client API for BusinessUnitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessUnitServiceClient interface {
	// 取引先
	ListBusinessUnits(ctx context.Context, in *ListBusinessUnitsRequest, opts ...grpc.CallOption) (*ListBusinessUnitsResponse, error)
	GetBusinessUnit(ctx context.Context, in *GetBusinessUnitRequest, opts ...grpc.CallOption) (*BusinessUnit, error)
	UpdateBusinessUnit(ctx context.Context, in *UpdateBusinessUnitRequest, opts ...grpc.CallOption) (*BusinessUnit, error)
	DeleteBusinessUnit(ctx context.Context, in *DeleteBusinessUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先取込
	ImportBusinessUnits(ctx context.Context, in *ImportBusinessUnitsRequest, opts ...grpc.CallOption) (*ImportBusinessUnitsResponse, error)
	// 取込フォーマット出力
	ExportBusinessUnits(ctx context.Context, in *ExportBusinessUnitsRequest, opts ...grpc.CallOption) (*ExportBusinessUnitsResponse, error)
	// 取込フォーマット取得
	ListBusinessUnitFormats(ctx context.Context, in *ListBusinessUnitFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitFormatsResponse, error)
}

type businessUnitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessUnitServiceClient(cc grpc.ClientConnInterface) BusinessUnitServiceClient {
	return &businessUnitServiceClient{cc}
}

func (c *businessUnitServiceClient) ListBusinessUnits(ctx context.Context, in *ListBusinessUnitsRequest, opts ...grpc.CallOption) (*ListBusinessUnitsResponse, error) {
	out := new(ListBusinessUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/ListBusinessUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitServiceClient) GetBusinessUnit(ctx context.Context, in *GetBusinessUnitRequest, opts ...grpc.CallOption) (*BusinessUnit, error) {
	out := new(BusinessUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/GetBusinessUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitServiceClient) UpdateBusinessUnit(ctx context.Context, in *UpdateBusinessUnitRequest, opts ...grpc.CallOption) (*BusinessUnit, error) {
	out := new(BusinessUnit)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/UpdateBusinessUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitServiceClient) DeleteBusinessUnit(ctx context.Context, in *DeleteBusinessUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/DeleteBusinessUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitServiceClient) ImportBusinessUnits(ctx context.Context, in *ImportBusinessUnitsRequest, opts ...grpc.CallOption) (*ImportBusinessUnitsResponse, error) {
	out := new(ImportBusinessUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/ImportBusinessUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitServiceClient) ExportBusinessUnits(ctx context.Context, in *ExportBusinessUnitsRequest, opts ...grpc.CallOption) (*ExportBusinessUnitsResponse, error) {
	out := new(ExportBusinessUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/ExportBusinessUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitServiceClient) ListBusinessUnitFormats(ctx context.Context, in *ListBusinessUnitFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitFormatsResponse, error) {
	out := new(ListBusinessUnitFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitService/ListBusinessUnitFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessUnitServiceServer is the server API for BusinessUnitService service.
// All implementations must embed UnimplementedBusinessUnitServiceServer
// for forward compatibility
type BusinessUnitServiceServer interface {
	// 取引先
	ListBusinessUnits(context.Context, *ListBusinessUnitsRequest) (*ListBusinessUnitsResponse, error)
	GetBusinessUnit(context.Context, *GetBusinessUnitRequest) (*BusinessUnit, error)
	UpdateBusinessUnit(context.Context, *UpdateBusinessUnitRequest) (*BusinessUnit, error)
	DeleteBusinessUnit(context.Context, *DeleteBusinessUnitRequest) (*emptypb.Empty, error)
	// 取引先取込
	ImportBusinessUnits(context.Context, *ImportBusinessUnitsRequest) (*ImportBusinessUnitsResponse, error)
	// 取込フォーマット出力
	ExportBusinessUnits(context.Context, *ExportBusinessUnitsRequest) (*ExportBusinessUnitsResponse, error)
	// 取込フォーマット取得
	ListBusinessUnitFormats(context.Context, *ListBusinessUnitFormatsRequest) (*ListBusinessUnitFormatsResponse, error)
	mustEmbedUnimplementedBusinessUnitServiceServer()
}

// UnimplementedBusinessUnitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessUnitServiceServer struct {
}

func (UnimplementedBusinessUnitServiceServer) ListBusinessUnits(context.Context, *ListBusinessUnitsRequest) (*ListBusinessUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnits not implemented")
}
func (UnimplementedBusinessUnitServiceServer) GetBusinessUnit(context.Context, *GetBusinessUnitRequest) (*BusinessUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnit not implemented")
}
func (UnimplementedBusinessUnitServiceServer) UpdateBusinessUnit(context.Context, *UpdateBusinessUnitRequest) (*BusinessUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnit not implemented")
}
func (UnimplementedBusinessUnitServiceServer) DeleteBusinessUnit(context.Context, *DeleteBusinessUnitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnit not implemented")
}
func (UnimplementedBusinessUnitServiceServer) ImportBusinessUnits(context.Context, *ImportBusinessUnitsRequest) (*ImportBusinessUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBusinessUnits not implemented")
}
func (UnimplementedBusinessUnitServiceServer) ExportBusinessUnits(context.Context, *ExportBusinessUnitsRequest) (*ExportBusinessUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBusinessUnits not implemented")
}
func (UnimplementedBusinessUnitServiceServer) ListBusinessUnitFormats(context.Context, *ListBusinessUnitFormatsRequest) (*ListBusinessUnitFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitFormats not implemented")
}
func (UnimplementedBusinessUnitServiceServer) mustEmbedUnimplementedBusinessUnitServiceServer() {}

// UnsafeBusinessUnitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessUnitServiceServer will
// result in compilation errors.
type UnsafeBusinessUnitServiceServer interface {
	mustEmbedUnimplementedBusinessUnitServiceServer()
}

func RegisterBusinessUnitServiceServer(s grpc.ServiceRegistrar, srv BusinessUnitServiceServer) {
	s.RegisterService(&BusinessUnitService_ServiceDesc, srv)
}

func _BusinessUnitService_ListBusinessUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).ListBusinessUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/ListBusinessUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).ListBusinessUnits(ctx, req.(*ListBusinessUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitService_GetBusinessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).GetBusinessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/GetBusinessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).GetBusinessUnit(ctx, req.(*GetBusinessUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitService_UpdateBusinessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).UpdateBusinessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/UpdateBusinessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).UpdateBusinessUnit(ctx, req.(*UpdateBusinessUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitService_DeleteBusinessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).DeleteBusinessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/DeleteBusinessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).DeleteBusinessUnit(ctx, req.(*DeleteBusinessUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitService_ImportBusinessUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBusinessUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).ImportBusinessUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/ImportBusinessUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).ImportBusinessUnits(ctx, req.(*ImportBusinessUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitService_ExportBusinessUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBusinessUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).ExportBusinessUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/ExportBusinessUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).ExportBusinessUnits(ctx, req.(*ExportBusinessUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitService_ListBusinessUnitFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitServiceServer).ListBusinessUnitFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitService/ListBusinessUnitFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitServiceServer).ListBusinessUnitFormats(ctx, req.(*ListBusinessUnitFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessUnitService_ServiceDesc is the grpc.ServiceDesc for BusinessUnitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessUnitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.company.BusinessUnitService",
	HandlerType: (*BusinessUnitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBusinessUnits",
			Handler:    _BusinessUnitService_ListBusinessUnits_Handler,
		},
		{
			MethodName: "GetBusinessUnit",
			Handler:    _BusinessUnitService_GetBusinessUnit_Handler,
		},
		{
			MethodName: "UpdateBusinessUnit",
			Handler:    _BusinessUnitService_UpdateBusinessUnit_Handler,
		},
		{
			MethodName: "DeleteBusinessUnit",
			Handler:    _BusinessUnitService_DeleteBusinessUnit_Handler,
		},
		{
			MethodName: "ImportBusinessUnits",
			Handler:    _BusinessUnitService_ImportBusinessUnits_Handler,
		},
		{
			MethodName: "ExportBusinessUnits",
			Handler:    _BusinessUnitService_ExportBusinessUnits_Handler,
		},
		{
			MethodName: "ListBusinessUnitFormats",
			Handler:    _BusinessUnitService_ListBusinessUnitFormats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	ListStaffs(ctx context.Context, in *ListStaffsRequest, opts ...grpc.CallOption) (*ListStaffsResponse, error)
	// 担当者
	GetStaff(ctx context.Context, in *GetStaffRequest, opts ...grpc.CallOption) (*Staff, error)
	// 担当者一覧
	ListStaffAndComponentUnits(ctx context.Context, in *ListStaffAndComponentUnitsRequest, opts ...grpc.CallOption) (*ListStaffAndComponentUnitsResponse, error)
	// 担当者取込
	ImportStaffs(ctx context.Context, in *ImportStaffsRequest, opts ...grpc.CallOption) (*ImportStaffsResponse, error)
	// 取込フォーマット出力
	ExportStaffs(ctx context.Context, in *ExportStaffsRequest, opts ...grpc.CallOption) (*ExportStaffsResponse, error)
	// 取込フォーマット取得
	ListStaffFormats(ctx context.Context, in *ListStaffFormatsRequest, opts ...grpc.CallOption) (*ListStaffFormatsResponse, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) ListStaffs(ctx context.Context, in *ListStaffsRequest, opts ...grpc.CallOption) (*ListStaffsResponse, error) {
	out := new(ListStaffsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.StaffService/ListStaffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) GetStaff(ctx context.Context, in *GetStaffRequest, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.StaffService/GetStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListStaffAndComponentUnits(ctx context.Context, in *ListStaffAndComponentUnitsRequest, opts ...grpc.CallOption) (*ListStaffAndComponentUnitsResponse, error) {
	out := new(ListStaffAndComponentUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.StaffService/ListStaffAndComponentUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ImportStaffs(ctx context.Context, in *ImportStaffsRequest, opts ...grpc.CallOption) (*ImportStaffsResponse, error) {
	out := new(ImportStaffsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.StaffService/ImportStaffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ExportStaffs(ctx context.Context, in *ExportStaffsRequest, opts ...grpc.CallOption) (*ExportStaffsResponse, error) {
	out := new(ExportStaffsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.StaffService/ExportStaffs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ListStaffFormats(ctx context.Context, in *ListStaffFormatsRequest, opts ...grpc.CallOption) (*ListStaffFormatsResponse, error) {
	out := new(ListStaffFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.StaffService/ListStaffFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations must embed UnimplementedStaffServiceServer
// for forward compatibility
type StaffServiceServer interface {
	ListStaffs(context.Context, *ListStaffsRequest) (*ListStaffsResponse, error)
	// 担当者
	GetStaff(context.Context, *GetStaffRequest) (*Staff, error)
	// 担当者一覧
	ListStaffAndComponentUnits(context.Context, *ListStaffAndComponentUnitsRequest) (*ListStaffAndComponentUnitsResponse, error)
	// 担当者取込
	ImportStaffs(context.Context, *ImportStaffsRequest) (*ImportStaffsResponse, error)
	// 取込フォーマット出力
	ExportStaffs(context.Context, *ExportStaffsRequest) (*ExportStaffsResponse, error)
	// 取込フォーマット取得
	ListStaffFormats(context.Context, *ListStaffFormatsRequest) (*ListStaffFormatsResponse, error)
	mustEmbedUnimplementedStaffServiceServer()
}

// UnimplementedStaffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStaffServiceServer struct {
}

func (UnimplementedStaffServiceServer) ListStaffs(context.Context, *ListStaffsRequest) (*ListStaffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffs not implemented")
}
func (UnimplementedStaffServiceServer) GetStaff(context.Context, *GetStaffRequest) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedStaffServiceServer) ListStaffAndComponentUnits(context.Context, *ListStaffAndComponentUnitsRequest) (*ListStaffAndComponentUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffAndComponentUnits not implemented")
}
func (UnimplementedStaffServiceServer) ImportStaffs(context.Context, *ImportStaffsRequest) (*ImportStaffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStaffs not implemented")
}
func (UnimplementedStaffServiceServer) ExportStaffs(context.Context, *ExportStaffsRequest) (*ExportStaffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportStaffs not implemented")
}
func (UnimplementedStaffServiceServer) ListStaffFormats(context.Context, *ListStaffFormatsRequest) (*ListStaffFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffFormats not implemented")
}
func (UnimplementedStaffServiceServer) mustEmbedUnimplementedStaffServiceServer() {}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_ListStaffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListStaffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.StaffService/ListStaffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListStaffs(ctx, req.(*ListStaffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.StaffService/GetStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).GetStaff(ctx, req.(*GetStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListStaffAndComponentUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffAndComponentUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListStaffAndComponentUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.StaffService/ListStaffAndComponentUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListStaffAndComponentUnits(ctx, req.(*ListStaffAndComponentUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ImportStaffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStaffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ImportStaffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.StaffService/ImportStaffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ImportStaffs(ctx, req.(*ImportStaffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ExportStaffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportStaffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ExportStaffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.StaffService/ExportStaffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ExportStaffs(ctx, req.(*ExportStaffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ListStaffFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ListStaffFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.StaffService/ListStaffFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ListStaffFormats(ctx, req.(*ListStaffFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.company.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStaffs",
			Handler:    _StaffService_ListStaffs_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _StaffService_GetStaff_Handler,
		},
		{
			MethodName: "ListStaffAndComponentUnits",
			Handler:    _StaffService_ListStaffAndComponentUnits_Handler,
		},
		{
			MethodName: "ImportStaffs",
			Handler:    _StaffService_ImportStaffs_Handler,
		},
		{
			MethodName: "ExportStaffs",
			Handler:    _StaffService_ExportStaffs_Handler,
		},
		{
			MethodName: "ListStaffFormats",
			Handler:    _StaffService_ListStaffFormats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

// PublicCompanyServiceClient is the client API for PublicCompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicCompanyServiceClient interface {
	// 公開企業
	PublicListCompanys(ctx context.Context, in *PublicListCompanysRequest, opts ...grpc.CallOption) (*PublicListCompanysResponse, error)
	PublicGetCompany(ctx context.Context, in *PublicGetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	// 公開企業一覧（公開企業+取引先情報）
	PublicListCompanyAndBusinessUnits(ctx context.Context, in *PublicListCompanyAndBusinessUnitsRequest, opts ...grpc.CallOption) (*PublicListCompanyAndBusinessUnitsResponse, error)
	// 公開管理場所（取引窓口/事業所）
	PublicListComponentUnits(ctx context.Context, in *PublicListComponentUnitsRequest, opts ...grpc.CallOption) (*PublicListComponentUnitsResponse, error)
	// （公開企業+公開管理場所+取引先情報）
	//
	//	1レコードの粒度は企業粒度
	PublicListCompanyAndComponentUnitAndBusinessUnits(ctx context.Context, in *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest, opts ...grpc.CallOption) (*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse, error)
	// 取引先検索（取引窓口+公開企業+公開管理場所+取引先）
	// 1レコードの粒度は取引窓口粒度
	//
	// Implementation Note::
	// 紐づく企業情報.企業ステータスが「取引あり」のみ対象
	PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit(ctx context.Context, in *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest, opts ...grpc.CallOption) (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse, error)
	// 取引開始依頼
	// 取引開始依頼の作成
	//
	// Implementation Note:
	//
	//	BusinessUnitを同一トランザクションで作成する
	CreateBusinessUnitRequest(ctx context.Context, in *CreateBusinessUnitRequestRequest, opts ...grpc.CallOption) (*BusinessUnitRequest, error)
	ListBusinessUnitRequests(ctx context.Context, in *ListBusinessUnitRequestsRequest, opts ...grpc.CallOption) (*ListBusinessUnitRequestsResponse, error)
	GetBusinessUnitRequest(ctx context.Context, in *GetBusinessUnitRequestRequest, opts ...grpc.CallOption) (*BusinessUnitRequest, error)
	UpdateBusinessUnitRequest(ctx context.Context, in *UpdateBusinessUnitRequestRequest, opts ...grpc.CallOption) (*BusinessUnitRequest, error)
	DeleteBusinessUnitRequest(ctx context.Context, in *DeleteBusinessUnitRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引開始依頼を公開する
	//
	// Implementation Note::
	//
	//	BusinessUnitRequest.company_idに対してshareto処理を行う
	SharetoBusinessUnitRequest(ctx context.Context, in *SharetoBusinessUnitRequestRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitRequestResponse, error)
	// 取引開始依頼の承認情報
	// 取引開始依頼の承認情報の作成
	//
	// Implementation Note:
	//  1. BusinessUnitRequestをもとにBusinessUnitRequestResultを作成する
	//  2. BusinessUnitを同一トランザクションで作成する
	CreateBusinessUnitRequestResult(ctx context.Context, in *CreateBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*BusinessUnitRequestResult, error)
	ListBusinessUnitRequestResults(ctx context.Context, in *ListBusinessUnitRequestResultsRequest, opts ...grpc.CallOption) (*ListBusinessUnitRequestResultsResponse, error)
	GetBusinessUnitRequestResult(ctx context.Context, in *GetBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*BusinessUnitRequestResult, error)
	UpdateBusinessUnitRequestResult(ctx context.Context, in *UpdateBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*BusinessUnitRequestResult, error)
	DeleteBusinessUnitRequestResult(ctx context.Context, in *DeleteBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引開始依頼の承認情報を公開する
	//
	// Implementation Note::
	//
	//	BusinessUnitRequestResult.business_unit_request.source_company_idに対してshareto処理を行う
	SharetoBusinessUnitRequestResult(ctx context.Context, in *SharetoBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitRequestResultResponse, error)
}

type publicCompanyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicCompanyServiceClient(cc grpc.ClientConnInterface) PublicCompanyServiceClient {
	return &publicCompanyServiceClient{cc}
}

func (c *publicCompanyServiceClient) PublicListCompanys(ctx context.Context, in *PublicListCompanysRequest, opts ...grpc.CallOption) (*PublicListCompanysResponse, error) {
	out := new(PublicListCompanysResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/PublicListCompanys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) PublicGetCompany(ctx context.Context, in *PublicGetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/PublicGetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) PublicListCompanyAndBusinessUnits(ctx context.Context, in *PublicListCompanyAndBusinessUnitsRequest, opts ...grpc.CallOption) (*PublicListCompanyAndBusinessUnitsResponse, error) {
	out := new(PublicListCompanyAndBusinessUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/PublicListCompanyAndBusinessUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) PublicListComponentUnits(ctx context.Context, in *PublicListComponentUnitsRequest, opts ...grpc.CallOption) (*PublicListComponentUnitsResponse, error) {
	out := new(PublicListComponentUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/PublicListComponentUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) PublicListCompanyAndComponentUnitAndBusinessUnits(ctx context.Context, in *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest, opts ...grpc.CallOption) (*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse, error) {
	out := new(PublicListCompanyAndComponentUnitAndBusinessUnitsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/PublicListCompanyAndComponentUnitAndBusinessUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit(ctx context.Context, in *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest, opts ...grpc.CallOption) (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse, error) {
	out := new(PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) CreateBusinessUnitRequest(ctx context.Context, in *CreateBusinessUnitRequestRequest, opts ...grpc.CallOption) (*BusinessUnitRequest, error) {
	out := new(BusinessUnitRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/CreateBusinessUnitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) ListBusinessUnitRequests(ctx context.Context, in *ListBusinessUnitRequestsRequest, opts ...grpc.CallOption) (*ListBusinessUnitRequestsResponse, error) {
	out := new(ListBusinessUnitRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/ListBusinessUnitRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) GetBusinessUnitRequest(ctx context.Context, in *GetBusinessUnitRequestRequest, opts ...grpc.CallOption) (*BusinessUnitRequest, error) {
	out := new(BusinessUnitRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/GetBusinessUnitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) UpdateBusinessUnitRequest(ctx context.Context, in *UpdateBusinessUnitRequestRequest, opts ...grpc.CallOption) (*BusinessUnitRequest, error) {
	out := new(BusinessUnitRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/UpdateBusinessUnitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) DeleteBusinessUnitRequest(ctx context.Context, in *DeleteBusinessUnitRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/DeleteBusinessUnitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) SharetoBusinessUnitRequest(ctx context.Context, in *SharetoBusinessUnitRequestRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitRequestResponse, error) {
	out := new(SharetoBusinessUnitRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/SharetoBusinessUnitRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) CreateBusinessUnitRequestResult(ctx context.Context, in *CreateBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*BusinessUnitRequestResult, error) {
	out := new(BusinessUnitRequestResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/CreateBusinessUnitRequestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) ListBusinessUnitRequestResults(ctx context.Context, in *ListBusinessUnitRequestResultsRequest, opts ...grpc.CallOption) (*ListBusinessUnitRequestResultsResponse, error) {
	out := new(ListBusinessUnitRequestResultsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/ListBusinessUnitRequestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) GetBusinessUnitRequestResult(ctx context.Context, in *GetBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*BusinessUnitRequestResult, error) {
	out := new(BusinessUnitRequestResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/GetBusinessUnitRequestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) UpdateBusinessUnitRequestResult(ctx context.Context, in *UpdateBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*BusinessUnitRequestResult, error) {
	out := new(BusinessUnitRequestResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/UpdateBusinessUnitRequestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) DeleteBusinessUnitRequestResult(ctx context.Context, in *DeleteBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/DeleteBusinessUnitRequestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicCompanyServiceClient) SharetoBusinessUnitRequestResult(ctx context.Context, in *SharetoBusinessUnitRequestResultRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitRequestResultResponse, error) {
	out := new(SharetoBusinessUnitRequestResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.PublicCompanyService/SharetoBusinessUnitRequestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicCompanyServiceServer is the server API for PublicCompanyService service.
// All implementations must embed UnimplementedPublicCompanyServiceServer
// for forward compatibility
type PublicCompanyServiceServer interface {
	// 公開企業
	PublicListCompanys(context.Context, *PublicListCompanysRequest) (*PublicListCompanysResponse, error)
	PublicGetCompany(context.Context, *PublicGetCompanyRequest) (*Company, error)
	// 公開企業一覧（公開企業+取引先情報）
	PublicListCompanyAndBusinessUnits(context.Context, *PublicListCompanyAndBusinessUnitsRequest) (*PublicListCompanyAndBusinessUnitsResponse, error)
	// 公開管理場所（取引窓口/事業所）
	PublicListComponentUnits(context.Context, *PublicListComponentUnitsRequest) (*PublicListComponentUnitsResponse, error)
	// （公開企業+公開管理場所+取引先情報）
	//
	//	1レコードの粒度は企業粒度
	PublicListCompanyAndComponentUnitAndBusinessUnits(context.Context, *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) (*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse, error)
	// 取引先検索（取引窓口+公開企業+公開管理場所+取引先）
	// 1レコードの粒度は取引窓口粒度
	//
	// Implementation Note::
	// 紐づく企業情報.企業ステータスが「取引あり」のみ対象
	PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit(context.Context, *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse, error)
	// 取引開始依頼
	// 取引開始依頼の作成
	//
	// Implementation Note:
	//
	//	BusinessUnitを同一トランザクションで作成する
	CreateBusinessUnitRequest(context.Context, *CreateBusinessUnitRequestRequest) (*BusinessUnitRequest, error)
	ListBusinessUnitRequests(context.Context, *ListBusinessUnitRequestsRequest) (*ListBusinessUnitRequestsResponse, error)
	GetBusinessUnitRequest(context.Context, *GetBusinessUnitRequestRequest) (*BusinessUnitRequest, error)
	UpdateBusinessUnitRequest(context.Context, *UpdateBusinessUnitRequestRequest) (*BusinessUnitRequest, error)
	DeleteBusinessUnitRequest(context.Context, *DeleteBusinessUnitRequestRequest) (*emptypb.Empty, error)
	// 取引開始依頼を公開する
	//
	// Implementation Note::
	//
	//	BusinessUnitRequest.company_idに対してshareto処理を行う
	SharetoBusinessUnitRequest(context.Context, *SharetoBusinessUnitRequestRequest) (*SharetoBusinessUnitRequestResponse, error)
	// 取引開始依頼の承認情報
	// 取引開始依頼の承認情報の作成
	//
	// Implementation Note:
	//  1. BusinessUnitRequestをもとにBusinessUnitRequestResultを作成する
	//  2. BusinessUnitを同一トランザクションで作成する
	CreateBusinessUnitRequestResult(context.Context, *CreateBusinessUnitRequestResultRequest) (*BusinessUnitRequestResult, error)
	ListBusinessUnitRequestResults(context.Context, *ListBusinessUnitRequestResultsRequest) (*ListBusinessUnitRequestResultsResponse, error)
	GetBusinessUnitRequestResult(context.Context, *GetBusinessUnitRequestResultRequest) (*BusinessUnitRequestResult, error)
	UpdateBusinessUnitRequestResult(context.Context, *UpdateBusinessUnitRequestResultRequest) (*BusinessUnitRequestResult, error)
	DeleteBusinessUnitRequestResult(context.Context, *DeleteBusinessUnitRequestResultRequest) (*emptypb.Empty, error)
	// 取引開始依頼の承認情報を公開する
	//
	// Implementation Note::
	//
	//	BusinessUnitRequestResult.business_unit_request.source_company_idに対してshareto処理を行う
	SharetoBusinessUnitRequestResult(context.Context, *SharetoBusinessUnitRequestResultRequest) (*SharetoBusinessUnitRequestResultResponse, error)
	mustEmbedUnimplementedPublicCompanyServiceServer()
}

// UnimplementedPublicCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPublicCompanyServiceServer struct {
}

func (UnimplementedPublicCompanyServiceServer) PublicListCompanys(context.Context, *PublicListCompanysRequest) (*PublicListCompanysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListCompanys not implemented")
}
func (UnimplementedPublicCompanyServiceServer) PublicGetCompany(context.Context, *PublicGetCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicGetCompany not implemented")
}
func (UnimplementedPublicCompanyServiceServer) PublicListCompanyAndBusinessUnits(context.Context, *PublicListCompanyAndBusinessUnitsRequest) (*PublicListCompanyAndBusinessUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListCompanyAndBusinessUnits not implemented")
}
func (UnimplementedPublicCompanyServiceServer) PublicListComponentUnits(context.Context, *PublicListComponentUnitsRequest) (*PublicListComponentUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListComponentUnits not implemented")
}
func (UnimplementedPublicCompanyServiceServer) PublicListCompanyAndComponentUnitAndBusinessUnits(context.Context, *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) (*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListCompanyAndComponentUnitAndBusinessUnits not implemented")
}
func (UnimplementedPublicCompanyServiceServer) PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit(context.Context, *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit not implemented")
}
func (UnimplementedPublicCompanyServiceServer) CreateBusinessUnitRequest(context.Context, *CreateBusinessUnitRequestRequest) (*BusinessUnitRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitRequest not implemented")
}
func (UnimplementedPublicCompanyServiceServer) ListBusinessUnitRequests(context.Context, *ListBusinessUnitRequestsRequest) (*ListBusinessUnitRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitRequests not implemented")
}
func (UnimplementedPublicCompanyServiceServer) GetBusinessUnitRequest(context.Context, *GetBusinessUnitRequestRequest) (*BusinessUnitRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitRequest not implemented")
}
func (UnimplementedPublicCompanyServiceServer) UpdateBusinessUnitRequest(context.Context, *UpdateBusinessUnitRequestRequest) (*BusinessUnitRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitRequest not implemented")
}
func (UnimplementedPublicCompanyServiceServer) DeleteBusinessUnitRequest(context.Context, *DeleteBusinessUnitRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitRequest not implemented")
}
func (UnimplementedPublicCompanyServiceServer) SharetoBusinessUnitRequest(context.Context, *SharetoBusinessUnitRequestRequest) (*SharetoBusinessUnitRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoBusinessUnitRequest not implemented")
}
func (UnimplementedPublicCompanyServiceServer) CreateBusinessUnitRequestResult(context.Context, *CreateBusinessUnitRequestResultRequest) (*BusinessUnitRequestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitRequestResult not implemented")
}
func (UnimplementedPublicCompanyServiceServer) ListBusinessUnitRequestResults(context.Context, *ListBusinessUnitRequestResultsRequest) (*ListBusinessUnitRequestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitRequestResults not implemented")
}
func (UnimplementedPublicCompanyServiceServer) GetBusinessUnitRequestResult(context.Context, *GetBusinessUnitRequestResultRequest) (*BusinessUnitRequestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitRequestResult not implemented")
}
func (UnimplementedPublicCompanyServiceServer) UpdateBusinessUnitRequestResult(context.Context, *UpdateBusinessUnitRequestResultRequest) (*BusinessUnitRequestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitRequestResult not implemented")
}
func (UnimplementedPublicCompanyServiceServer) DeleteBusinessUnitRequestResult(context.Context, *DeleteBusinessUnitRequestResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitRequestResult not implemented")
}
func (UnimplementedPublicCompanyServiceServer) SharetoBusinessUnitRequestResult(context.Context, *SharetoBusinessUnitRequestResultRequest) (*SharetoBusinessUnitRequestResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoBusinessUnitRequestResult not implemented")
}
func (UnimplementedPublicCompanyServiceServer) mustEmbedUnimplementedPublicCompanyServiceServer() {}

// UnsafePublicCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicCompanyServiceServer will
// result in compilation errors.
type UnsafePublicCompanyServiceServer interface {
	mustEmbedUnimplementedPublicCompanyServiceServer()
}

func RegisterPublicCompanyServiceServer(s grpc.ServiceRegistrar, srv PublicCompanyServiceServer) {
	s.RegisterService(&PublicCompanyService_ServiceDesc, srv)
}

func _PublicCompanyService_PublicListCompanys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListCompanysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).PublicListCompanys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/PublicListCompanys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).PublicListCompanys(ctx, req.(*PublicListCompanysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_PublicGetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicGetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).PublicGetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/PublicGetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).PublicGetCompany(ctx, req.(*PublicGetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_PublicListCompanyAndBusinessUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListCompanyAndBusinessUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).PublicListCompanyAndBusinessUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/PublicListCompanyAndBusinessUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).PublicListCompanyAndBusinessUnits(ctx, req.(*PublicListCompanyAndBusinessUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_PublicListComponentUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListComponentUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).PublicListComponentUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/PublicListComponentUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).PublicListComponentUnits(ctx, req.(*PublicListComponentUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_PublicListCompanyAndComponentUnitAndBusinessUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListCompanyAndComponentUnitAndBusinessUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).PublicListCompanyAndComponentUnitAndBusinessUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/PublicListCompanyAndComponentUnitAndBusinessUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).PublicListCompanyAndComponentUnitAndBusinessUnits(ctx, req.(*PublicListCompanyAndComponentUnitAndBusinessUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit(ctx, req.(*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_CreateBusinessUnitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).CreateBusinessUnitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/CreateBusinessUnitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).CreateBusinessUnitRequest(ctx, req.(*CreateBusinessUnitRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_ListBusinessUnitRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).ListBusinessUnitRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/ListBusinessUnitRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).ListBusinessUnitRequests(ctx, req.(*ListBusinessUnitRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_GetBusinessUnitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).GetBusinessUnitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/GetBusinessUnitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).GetBusinessUnitRequest(ctx, req.(*GetBusinessUnitRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_UpdateBusinessUnitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).UpdateBusinessUnitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/UpdateBusinessUnitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).UpdateBusinessUnitRequest(ctx, req.(*UpdateBusinessUnitRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_DeleteBusinessUnitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).DeleteBusinessUnitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/DeleteBusinessUnitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).DeleteBusinessUnitRequest(ctx, req.(*DeleteBusinessUnitRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_SharetoBusinessUnitRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoBusinessUnitRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).SharetoBusinessUnitRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/SharetoBusinessUnitRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).SharetoBusinessUnitRequest(ctx, req.(*SharetoBusinessUnitRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_CreateBusinessUnitRequestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitRequestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).CreateBusinessUnitRequestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/CreateBusinessUnitRequestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).CreateBusinessUnitRequestResult(ctx, req.(*CreateBusinessUnitRequestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_ListBusinessUnitRequestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitRequestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).ListBusinessUnitRequestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/ListBusinessUnitRequestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).ListBusinessUnitRequestResults(ctx, req.(*ListBusinessUnitRequestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_GetBusinessUnitRequestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitRequestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).GetBusinessUnitRequestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/GetBusinessUnitRequestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).GetBusinessUnitRequestResult(ctx, req.(*GetBusinessUnitRequestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_UpdateBusinessUnitRequestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitRequestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).UpdateBusinessUnitRequestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/UpdateBusinessUnitRequestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).UpdateBusinessUnitRequestResult(ctx, req.(*UpdateBusinessUnitRequestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_DeleteBusinessUnitRequestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitRequestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).DeleteBusinessUnitRequestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/DeleteBusinessUnitRequestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).DeleteBusinessUnitRequestResult(ctx, req.(*DeleteBusinessUnitRequestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicCompanyService_SharetoBusinessUnitRequestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoBusinessUnitRequestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicCompanyServiceServer).SharetoBusinessUnitRequestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.PublicCompanyService/SharetoBusinessUnitRequestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicCompanyServiceServer).SharetoBusinessUnitRequestResult(ctx, req.(*SharetoBusinessUnitRequestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicCompanyService_ServiceDesc is the grpc.ServiceDesc for PublicCompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicCompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.company.PublicCompanyService",
	HandlerType: (*PublicCompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublicListCompanys",
			Handler:    _PublicCompanyService_PublicListCompanys_Handler,
		},
		{
			MethodName: "PublicGetCompany",
			Handler:    _PublicCompanyService_PublicGetCompany_Handler,
		},
		{
			MethodName: "PublicListCompanyAndBusinessUnits",
			Handler:    _PublicCompanyService_PublicListCompanyAndBusinessUnits_Handler,
		},
		{
			MethodName: "PublicListComponentUnits",
			Handler:    _PublicCompanyService_PublicListComponentUnits_Handler,
		},
		{
			MethodName: "PublicListCompanyAndComponentUnitAndBusinessUnits",
			Handler:    _PublicCompanyService_PublicListCompanyAndComponentUnitAndBusinessUnits_Handler,
		},
		{
			MethodName: "PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit",
			Handler:    _PublicCompanyService_PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit_Handler,
		},
		{
			MethodName: "CreateBusinessUnitRequest",
			Handler:    _PublicCompanyService_CreateBusinessUnitRequest_Handler,
		},
		{
			MethodName: "ListBusinessUnitRequests",
			Handler:    _PublicCompanyService_ListBusinessUnitRequests_Handler,
		},
		{
			MethodName: "GetBusinessUnitRequest",
			Handler:    _PublicCompanyService_GetBusinessUnitRequest_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitRequest",
			Handler:    _PublicCompanyService_UpdateBusinessUnitRequest_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitRequest",
			Handler:    _PublicCompanyService_DeleteBusinessUnitRequest_Handler,
		},
		{
			MethodName: "SharetoBusinessUnitRequest",
			Handler:    _PublicCompanyService_SharetoBusinessUnitRequest_Handler,
		},
		{
			MethodName: "CreateBusinessUnitRequestResult",
			Handler:    _PublicCompanyService_CreateBusinessUnitRequestResult_Handler,
		},
		{
			MethodName: "ListBusinessUnitRequestResults",
			Handler:    _PublicCompanyService_ListBusinessUnitRequestResults_Handler,
		},
		{
			MethodName: "GetBusinessUnitRequestResult",
			Handler:    _PublicCompanyService_GetBusinessUnitRequestResult_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitRequestResult",
			Handler:    _PublicCompanyService_UpdateBusinessUnitRequestResult_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitRequestResult",
			Handler:    _PublicCompanyService_DeleteBusinessUnitRequestResult_Handler,
		},
		{
			MethodName: "SharetoBusinessUnitRequestResult",
			Handler:    _PublicCompanyService_SharetoBusinessUnitRequestResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

// BusinessUnitManagementServiceClient is the client API for BusinessUnitManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessUnitManagementServiceClient interface {
	// 取引先管理
	ListBusinessUnitManagements(ctx context.Context, in *ListBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementsResponse, error)
	GetBusinessUnitManagement(ctx context.Context, in *GetBusinessUnitManagementRequest, opts ...grpc.CallOption) (*BusinessUnitManagement, error)
	CreateBusinessUnitManagement(ctx context.Context, in *CreateBusinessUnitManagementRequest, opts ...grpc.CallOption) (*BusinessUnitManagement, error)
	UpdateBusinessUnitManagement(ctx context.Context, in *UpdateBusinessUnitManagementRequest, opts ...grpc.CallOption) (*BusinessUnitManagement, error)
	DeleteBusinessUnitManagement(ctx context.Context, in *DeleteBusinessUnitManagementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先取込（旧フォーマット）
	ImportOldBusinessUnitManagements(ctx context.Context, in *ImportOldBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ImportOldBusinessUnitManagementsResponse, error)
	// 取込フォーマット出力（旧フォーマット）
	ExportOldBusinessUnitManagements(ctx context.Context, in *ExportOldBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ExportOldBusinessUnitManagementsResponse, error)
	// 取込フォーマット取得（旧フォーマット）
	ListOldBusinessUnitManagementFormats(ctx context.Context, in *ListOldBusinessUnitManagementFormatsRequest, opts ...grpc.CallOption) (*ListOldBusinessUnitManagementFormatsResponse, error)
	// 取引先管理コンテンツ
	ListBusinessUnitManagementContents(ctx context.Context, in *ListBusinessUnitManagementContentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementContentsResponse, error)
	GetBusinessUnitManagementContent(ctx context.Context, in *GetBusinessUnitManagementContentRequest, opts ...grpc.CallOption) (*BusinessUnitManagementContent, error)
	// 履歴データ
	ListHistorys(ctx context.Context, in *ListHistorysRequest, opts ...grpc.CallOption) (*ListHistorysResponse, error)
	// 招待メール送信
	SendEmailTenantInvitation(ctx context.Context, in *SendEmailTenantInvitationRequest, opts ...grpc.CallOption) (*SendEmailTenantInvitationResponse, error)
	// 自社企業（基本情報）マスタ
	ListBusinessUnitProfiles(ctx context.Context, in *ListBusinessUnitProfilesRequest, opts ...grpc.CallOption) (*ListBusinessUnitProfilesResponse, error)
	CreateBusinessUnitProfile(ctx context.Context, in *CreateBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error)
	GetBusinessUnitProfile(ctx context.Context, in *GetBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error)
	UpdateBusinessUnitProfile(ctx context.Context, in *UpdateBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error)
	DeleteBusinessUnitProfile(ctx context.Context, in *DeleteBusinessUnitProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 自社企業（基本情報）マスタ.システム通知先
	UpdateSystemNotificationUsersInBusinessUnitProfile(ctx context.Context, in *UpdateSystemNotificationUsersInBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error)
	// 自社企業（決算）マスタ
	ListBusinessUnitFinancials(ctx context.Context, in *ListBusinessUnitFinancialsRequest, opts ...grpc.CallOption) (*ListBusinessUnitFinancialsResponse, error)
	CreateBusinessUnitFinancial(ctx context.Context, in *CreateBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error)
	GetBusinessUnitFinancial(ctx context.Context, in *GetBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error)
	UpdateBusinessUnitFinancial(ctx context.Context, in *UpdateBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error)
	DeleteBusinessUnitFinancial(ctx context.Context, in *DeleteBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 自社企業（拠点）マスタ
	ListBusinessUnitBranchs(ctx context.Context, in *ListBusinessUnitBranchsRequest, opts ...grpc.CallOption) (*ListBusinessUnitBranchsResponse, error)
	CreateBusinessUnitBranch(ctx context.Context, in *CreateBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error)
	GetBusinessUnitBranch(ctx context.Context, in *GetBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error)
	UpdateBusinessUnitBranch(ctx context.Context, in *UpdateBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error)
	DeleteBusinessUnitBranch(ctx context.Context, in *DeleteBusinessUnitBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 自社企業（設備）マスタ
	ListBusinessUnitFacilitiess(ctx context.Context, in *ListBusinessUnitFacilitiessRequest, opts ...grpc.CallOption) (*ListBusinessUnitFacilitiessResponse, error)
	CreateBusinessUnitFacilities(ctx context.Context, in *CreateBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error)
	GetBusinessUnitFacilities(ctx context.Context, in *GetBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error)
	UpdateBusinessUnitFacilities(ctx context.Context, in *UpdateBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error)
	DeleteBusinessUnitFacilities(ctx context.Context, in *DeleteBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 自社企業（認証）マスタ
	ListBusinessUnitCertificates(ctx context.Context, in *ListBusinessUnitCertificatesRequest, opts ...grpc.CallOption) (*ListBusinessUnitCertificatesResponse, error)
	CreateBusinessUnitCertificate(ctx context.Context, in *CreateBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error)
	GetBusinessUnitCertificate(ctx context.Context, in *GetBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error)
	UpdateBusinessUnitCertificate(ctx context.Context, in *UpdateBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error)
	DeleteBusinessUnitCertificate(ctx context.Context, in *DeleteBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 自社企業（得意分野）マスタ
	ListBusinessUnitStrengths(ctx context.Context, in *ListBusinessUnitStrengthsRequest, opts ...grpc.CallOption) (*ListBusinessUnitStrengthsResponse, error)
	CreateBusinessUnitStrength(ctx context.Context, in *CreateBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error)
	GetBusinessUnitStrength(ctx context.Context, in *GetBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error)
	UpdateBusinessUnitStrength(ctx context.Context, in *UpdateBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error)
	DeleteBusinessUnitStrength(ctx context.Context, in *DeleteBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 自社企業（技術情報）マスタ
	ListBusinessUnitSkills(ctx context.Context, in *ListBusinessUnitSkillsRequest, opts ...grpc.CallOption) (*ListBusinessUnitSkillsResponse, error)
	CreateBusinessUnitSkill(ctx context.Context, in *CreateBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error)
	GetBusinessUnitSkill(ctx context.Context, in *GetBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error)
	UpdateBusinessUnitSkill(ctx context.Context, in *UpdateBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error)
	DeleteBusinessUnitSkill(ctx context.Context, in *DeleteBusinessUnitSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBusinessUnitSkillTree(ctx context.Context, in *GetBusinessUnitSkillTreeRequest, opts ...grpc.CallOption) (*BusinessUnitSkillTree, error)
	// 取引先管理（連絡先）依頼データ
	ListBusinessUnitContactHeaders(ctx context.Context, in *ListBusinessUnitContactHeadersRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactHeadersResponse, error)
	CreateBusinessUnitContactHeader(ctx context.Context, in *CreateBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*BusinessUnitContactHeader, error)
	GetBusinessUnitContactHeader(ctx context.Context, in *GetBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*BusinessUnitContactHeader, error)
	UpdateBusinessUnitContactHeader(ctx context.Context, in *UpdateBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*BusinessUnitContactHeader, error)
	DeleteBusinessUnitContactHeader(ctx context.Context, in *DeleteBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先管理（連絡先）マスタ
	ListBusinessUnitContacts(ctx context.Context, in *ListBusinessUnitContactsRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactsResponse, error)
	CreateBusinessUnitContact(ctx context.Context, in *CreateBusinessUnitContactRequest, opts ...grpc.CallOption) (*BusinessUnitContact, error)
	GetBusinessUnitContact(ctx context.Context, in *GetBusinessUnitContactRequest, opts ...grpc.CallOption) (*BusinessUnitContact, error)
	UpdateBusinessUnitContact(ctx context.Context, in *UpdateBusinessUnitContactRequest, opts ...grpc.CallOption) (*BusinessUnitContact, error)
	DeleteBusinessUnitContact(ctx context.Context, in *DeleteBusinessUnitContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先管理（連絡先）社内管理データ
	ListBusinessUnitContactAttributes(ctx context.Context, in *ListBusinessUnitContactAttributesRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactAttributesResponse, error)
	CreateBusinessUnitContactAttribute(ctx context.Context, in *CreateBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*BusinessUnitContactAttribute, error)
	GetBusinessUnitContactAttribute(ctx context.Context, in *GetBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*BusinessUnitContactAttribute, error)
	UpdateBusinessUnitContactAttribute(ctx context.Context, in *UpdateBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*BusinessUnitContactAttribute, error)
	DeleteBusinessUnitContactAttribute(ctx context.Context, in *DeleteBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// TSRデータ
	ListTokyoShokoResearchs(ctx context.Context, in *ListTokyoShokoResearchsRequest, opts ...grpc.CallOption) (*ListTokyoShokoResearchsResponse, error)
	CreateTokyoShokoResearch(ctx context.Context, in *CreateTokyoShokoResearchRequest, opts ...grpc.CallOption) (*TokyoShokoResearch, error)
	GetTokyoShokoResearch(ctx context.Context, in *GetTokyoShokoResearchRequest, opts ...grpc.CallOption) (*TokyoShokoResearch, error)
	UpdateTokyoShokoResearch(ctx context.Context, in *UpdateTokyoShokoResearchRequest, opts ...grpc.CallOption) (*TokyoShokoResearch, error)
	DeleteTokyoShokoResearch(ctx context.Context, in *DeleteTokyoShokoResearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// TSR企業情報データ
	ListTokyoShokoResearchCompanyProfiles(ctx context.Context, in *ListTokyoShokoResearchCompanyProfilesRequest, opts ...grpc.CallOption) (*ListTokyoShokoResearchCompanyProfilesResponse, error)
	CreateTokyoShokoResearchCompanyProfile(ctx context.Context, in *CreateTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*TokyoShokoResearchCompanyProfile, error)
	GetTokyoShokoResearchCompanyProfile(ctx context.Context, in *GetTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*TokyoShokoResearchCompanyProfile, error)
	UpdateTokyoShokoResearchCompanyProfile(ctx context.Context, in *UpdateTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*TokyoShokoResearchCompanyProfile, error)
	DeleteTokyoShokoResearchCompanyProfile(ctx context.Context, in *DeleteTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// TSRリスクスコアデータ
	ListTokyoShokoResearchRiskScores(ctx context.Context, in *ListTokyoShokoResearchRiskScoresRequest, opts ...grpc.CallOption) (*ListTokyoShokoResearchRiskScoresResponse, error)
	CreateTokyoShokoResearchRiskScore(ctx context.Context, in *CreateTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*TokyoShokoResearchRiskScore, error)
	GetTokyoShokoResearchRiskScore(ctx context.Context, in *GetTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*TokyoShokoResearchRiskScore, error)
	UpdateTokyoShokoResearchRiskScore(ctx context.Context, in *UpdateTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*TokyoShokoResearchRiskScore, error)
	DeleteTokyoShokoResearchRiskScore(ctx context.Context, in *DeleteTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 第三者情報ファイルデータ
	ListBusinessUnitScoreAssets(ctx context.Context, in *ListBusinessUnitScoreAssetsRequest, opts ...grpc.CallOption) (*ListBusinessUnitScoreAssetsResponse, error)
	CreateBusinessUnitScoreAsset(ctx context.Context, in *CreateBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*BusinessUnitScoreAsset, error)
	GetBusinessUnitScoreAsset(ctx context.Context, in *GetBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*BusinessUnitScoreAsset, error)
	UpdateBusinessUnitScoreAsset(ctx context.Context, in *UpdateBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*BusinessUnitScoreAsset, error)
	DeleteBusinessUnitScoreAsset(ctx context.Context, in *DeleteBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先管理（文書）マスタ
	ListBusinessUnitDocuments(ctx context.Context, in *ListBusinessUnitDocumentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitDocumentsResponse, error)
	CreateBusinessUnitDocument(ctx context.Context, in *CreateBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*BusinessUnitDocument, error)
	GetBusinessUnitDocument(ctx context.Context, in *GetBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*BusinessUnitDocument, error)
	UpdateBusinessUnitDocument(ctx context.Context, in *UpdateBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*BusinessUnitDocument, error)
	DeleteBusinessUnitDocument(ctx context.Context, in *DeleteBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 有効管理データ（取引先）
	ListBusinessUnitActiveControls(ctx context.Context, in *ListBusinessUnitActiveControlsRequest, opts ...grpc.CallOption) (*ListBusinessUnitActiveControlsResponse, error)
	CreateBusinessUnitActiveControl(ctx context.Context, in *CreateBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*BusinessUnitActiveControl, error)
	GetBusinessUnitActiveControl(ctx context.Context, in *GetBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*BusinessUnitActiveControl, error)
	UpdateBusinessUnitActiveControl(ctx context.Context, in *UpdateBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*BusinessUnitActiveControl, error)
	DeleteBusinessUnitActiveControl(ctx context.Context, in *DeleteBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先管理スナップショットデータ
	ListBusinessUnitSnapshots(ctx context.Context, in *ListBusinessUnitSnapshotsRequest, opts ...grpc.CallOption) (*ListBusinessUnitSnapshotsResponse, error)
	CreateBusinessUnitSnapshot(ctx context.Context, in *CreateBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*BusinessUnitSnapshot, error)
	GetBusinessUnitSnapshot(ctx context.Context, in *GetBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*BusinessUnitSnapshot, error)
	UpdateBusinessUnitSnapshot(ctx context.Context, in *UpdateBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*BusinessUnitSnapshot, error)
	DeleteBusinessUnitSnapshot(ctx context.Context, in *DeleteBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新通知データ
	ListBusinessUnitChangeNotifications(ctx context.Context, in *ListBusinessUnitChangeNotificationsRequest, opts ...grpc.CallOption) (*ListBusinessUnitChangeNotificationsResponse, error)
	CreateBusinessUnitChangeNotification(ctx context.Context, in *CreateBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*BusinessUnitChangeNotification, error)
	GetBusinessUnitChangeNotification(ctx context.Context, in *GetBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*BusinessUnitChangeNotification, error)
	UpdateBusinessUnitChangeNotification(ctx context.Context, in *UpdateBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*BusinessUnitChangeNotification, error)
	DeleteBusinessUnitChangeNotification(ctx context.Context, in *DeleteBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取引先管理（連絡先）コンテンツ
	ListBusinessUnitContactContents(ctx context.Context, in *ListBusinessUnitContactContentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactContentsResponse, error)
	GetBusinessUnitContactContent(ctx context.Context, in *GetBusinessUnitContactContentRequest, opts ...grpc.CallOption) (*BusinessUnitContactContent, error)
	// 取引先管理（第三者情報）コンテンツ
	ListBusinessUnitScoreContents(ctx context.Context, in *ListBusinessUnitScoreContentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitScoreContentsResponse, error)
	GetBusinessUnitScoreContent(ctx context.Context, in *GetBusinessUnitScoreContentRequest, opts ...grpc.CallOption) (*BusinessUnitScoreContent, error)
	// 公開された 自社企業（基本情報）マスタ
	SharedListBusinessUnitProfiles(ctx context.Context, in *SharedListBusinessUnitProfilesRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitProfilesResponse, error)
	SharedGetBusinessUnitProfile(ctx context.Context, in *SharedGetBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error)
	// 公開された 自社企業（決算）マスタ
	SharedListBusinessUnitFinancials(ctx context.Context, in *SharedListBusinessUnitFinancialsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitFinancialsResponse, error)
	SharedGetBusinessUnitFinancial(ctx context.Context, in *SharedGetBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error)
	// 公開された 自社企業（拠点）マスタ
	SharedListBusinessUnitBranchs(ctx context.Context, in *SharedListBusinessUnitBranchsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitBranchsResponse, error)
	SharedGetBusinessUnitBranch(ctx context.Context, in *SharedGetBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error)
	// 公開された 自社企業（設備）マスタ
	SharedListBusinessUnitFacilitiess(ctx context.Context, in *SharedListBusinessUnitFacilitiessRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitFacilitiessResponse, error)
	SharedGetBusinessUnitFacilities(ctx context.Context, in *SharedGetBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error)
	// 公開された 自社企業（認証）マスタ
	SharedListBusinessUnitCertificates(ctx context.Context, in *SharedListBusinessUnitCertificatesRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitCertificatesResponse, error)
	SharedGetBusinessUnitCertificate(ctx context.Context, in *SharedGetBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error)
	// 公開された 自社企業（得意分野）マスタ
	SharedListBusinessUnitStrengths(ctx context.Context, in *SharedListBusinessUnitStrengthsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitStrengthsResponse, error)
	SharedGetBusinessUnitStrength(ctx context.Context, in *SharedGetBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error)
	// 公開された 自社企業（技術情報）マスタ
	SharedListBusinessUnitSkills(ctx context.Context, in *SharedListBusinessUnitSkillsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitSkillsResponse, error)
	SharedGetBusinessUnitSkill(ctx context.Context, in *SharedGetBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error)
	// 取引先管理（連絡先）依頼データ を 公開する
	SharetoBusinessUnitContactHeader(ctx context.Context, in *SharetoBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitContactHeaderResponse, error)
	// 取引先管理（連絡先）マスタ を 公開する
	SharetoBusinessUnitContact(ctx context.Context, in *SharetoBusinessUnitContactRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitContactResponse, error)
	// 有効管理データ（取引先） を 公開する
	SharetoBusinessUnitActiveControl(ctx context.Context, in *SharetoBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitActiveControlResponse, error)
	// Inactivate / Activate
	ActivateBusinessUnit(ctx context.Context, in *ActivateBusinessUnitRequest, opts ...grpc.CallOption) (*ActivateBusinessUnitResponse, error)
	InactivateBusinessUnit(ctx context.Context, in *InactivateBusinessUnitRequest, opts ...grpc.CallOption) (*InactivateBusinessUnitResponse, error)
	StartBusiness(ctx context.Context, in *StartBusinessRequest, opts ...grpc.CallOption) (*StartBusinessResponse, error)
	StopBusiness(ctx context.Context, in *StopBusinessRequest, opts ...grpc.CallOption) (*StopBusinessResponse, error)
	// 更新通知 を 確認済みにする
	ConfirmBusinessUnitChangeNotification(ctx context.Context, in *ConfirmBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*ConfirmBusinessUnitChangeNotificationResponse, error)
	// 取引先管理情報 取込フォーマット出力（新フォーマット）
	ExportBusinessUnitManagements(ctx context.Context, in *ExportBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ExportBusinessUnitManagementsResponse, error)
	// 取引先管理情報 取込（新フォーマット）
	ImportBusinessUnitManagements(ctx context.Context, in *ImportBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ImportBusinessUnitManagementsResponse, error)
	// 取引先管理情報 取込フォーマット取得（新フォーマット）
	ListBusinessUnitManagementFormats(ctx context.Context, in *ListBusinessUnitManagementFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementFormatsResponse, error)
	// 取引先管理（第三者情報）マスタ 取込フォーマット出力
	ExportBusinessUnitScores(ctx context.Context, in *ExportBusinessUnitScoresRequest, opts ...grpc.CallOption) (*ExportBusinessUnitScoresResponse, error)
	// 取引先管理（第三者情報）マスタ 取込
	ImportBusinessUnitScores(ctx context.Context, in *ImportBusinessUnitScoresRequest, opts ...grpc.CallOption) (*ImportBusinessUnitScoresResponse, error)
	// 取引先管理（第三者情報）マスタ 取込フォーマット取得
	ListBusinessUnitScoreFormats(ctx context.Context, in *ListBusinessUnitScoreFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitScoreFormatsResponse, error)
	// ItemValue 取込フォーマット出力
	ExportBusinessUnitManagementItemValues(ctx context.Context, in *ExportBusinessUnitManagementItemValuesRequest, opts ...grpc.CallOption) (*ExportBusinessUnitManagementItemValuesResponse, error)
	// ItemValue 取込
	ImportBusinessUnitManagementItemValues(ctx context.Context, in *ImportBusinessUnitManagementItemValuesRequest, opts ...grpc.CallOption) (*ImportBusinessUnitManagementItemValuesResponse, error)
	// ItemValue 取込フォーマット取得
	ListBusinessUnitManagementItemValueFormats(ctx context.Context, in *ListBusinessUnitManagementItemValueFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementItemValueFormatsResponse, error)
}

type businessUnitManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessUnitManagementServiceClient(cc grpc.ClientConnInterface) BusinessUnitManagementServiceClient {
	return &businessUnitManagementServiceClient{cc}
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitManagements(ctx context.Context, in *ListBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementsResponse, error) {
	out := new(ListBusinessUnitManagementsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitManagement(ctx context.Context, in *GetBusinessUnitManagementRequest, opts ...grpc.CallOption) (*BusinessUnitManagement, error) {
	out := new(BusinessUnitManagement)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitManagement(ctx context.Context, in *CreateBusinessUnitManagementRequest, opts ...grpc.CallOption) (*BusinessUnitManagement, error) {
	out := new(BusinessUnitManagement)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitManagement(ctx context.Context, in *UpdateBusinessUnitManagementRequest, opts ...grpc.CallOption) (*BusinessUnitManagement, error) {
	out := new(BusinessUnitManagement)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitManagement(ctx context.Context, in *DeleteBusinessUnitManagementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ImportOldBusinessUnitManagements(ctx context.Context, in *ImportOldBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ImportOldBusinessUnitManagementsResponse, error) {
	out := new(ImportOldBusinessUnitManagementsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ImportOldBusinessUnitManagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ExportOldBusinessUnitManagements(ctx context.Context, in *ExportOldBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ExportOldBusinessUnitManagementsResponse, error) {
	out := new(ExportOldBusinessUnitManagementsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ExportOldBusinessUnitManagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListOldBusinessUnitManagementFormats(ctx context.Context, in *ListOldBusinessUnitManagementFormatsRequest, opts ...grpc.CallOption) (*ListOldBusinessUnitManagementFormatsResponse, error) {
	out := new(ListOldBusinessUnitManagementFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListOldBusinessUnitManagementFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitManagementContents(ctx context.Context, in *ListBusinessUnitManagementContentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementContentsResponse, error) {
	out := new(ListBusinessUnitManagementContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagementContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitManagementContent(ctx context.Context, in *GetBusinessUnitManagementContentRequest, opts ...grpc.CallOption) (*BusinessUnitManagementContent, error) {
	out := new(BusinessUnitManagementContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitManagementContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListHistorys(ctx context.Context, in *ListHistorysRequest, opts ...grpc.CallOption) (*ListHistorysResponse, error) {
	out := new(ListHistorysResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListHistorys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SendEmailTenantInvitation(ctx context.Context, in *SendEmailTenantInvitationRequest, opts ...grpc.CallOption) (*SendEmailTenantInvitationResponse, error) {
	out := new(SendEmailTenantInvitationResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SendEmailTenantInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitProfiles(ctx context.Context, in *ListBusinessUnitProfilesRequest, opts ...grpc.CallOption) (*ListBusinessUnitProfilesResponse, error) {
	out := new(ListBusinessUnitProfilesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitProfile(ctx context.Context, in *CreateBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error) {
	out := new(BusinessUnitProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitProfile(ctx context.Context, in *GetBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error) {
	out := new(BusinessUnitProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitProfile(ctx context.Context, in *UpdateBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error) {
	out := new(BusinessUnitProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitProfile(ctx context.Context, in *DeleteBusinessUnitProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateSystemNotificationUsersInBusinessUnitProfile(ctx context.Context, in *UpdateSystemNotificationUsersInBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error) {
	out := new(BusinessUnitProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateSystemNotificationUsersInBusinessUnitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitFinancials(ctx context.Context, in *ListBusinessUnitFinancialsRequest, opts ...grpc.CallOption) (*ListBusinessUnitFinancialsResponse, error) {
	out := new(ListBusinessUnitFinancialsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitFinancials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitFinancial(ctx context.Context, in *CreateBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error) {
	out := new(BusinessUnitFinancial)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitFinancial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitFinancial(ctx context.Context, in *GetBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error) {
	out := new(BusinessUnitFinancial)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitFinancial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitFinancial(ctx context.Context, in *UpdateBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error) {
	out := new(BusinessUnitFinancial)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitFinancial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitFinancial(ctx context.Context, in *DeleteBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitFinancial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitBranchs(ctx context.Context, in *ListBusinessUnitBranchsRequest, opts ...grpc.CallOption) (*ListBusinessUnitBranchsResponse, error) {
	out := new(ListBusinessUnitBranchsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitBranchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitBranch(ctx context.Context, in *CreateBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error) {
	out := new(BusinessUnitBranch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitBranch(ctx context.Context, in *GetBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error) {
	out := new(BusinessUnitBranch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitBranch(ctx context.Context, in *UpdateBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error) {
	out := new(BusinessUnitBranch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitBranch(ctx context.Context, in *DeleteBusinessUnitBranchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitFacilitiess(ctx context.Context, in *ListBusinessUnitFacilitiessRequest, opts ...grpc.CallOption) (*ListBusinessUnitFacilitiessResponse, error) {
	out := new(ListBusinessUnitFacilitiessResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitFacilitiess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitFacilities(ctx context.Context, in *CreateBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error) {
	out := new(BusinessUnitFacilities)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitFacilities(ctx context.Context, in *GetBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error) {
	out := new(BusinessUnitFacilities)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitFacilities(ctx context.Context, in *UpdateBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error) {
	out := new(BusinessUnitFacilities)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitFacilities(ctx context.Context, in *DeleteBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitCertificates(ctx context.Context, in *ListBusinessUnitCertificatesRequest, opts ...grpc.CallOption) (*ListBusinessUnitCertificatesResponse, error) {
	out := new(ListBusinessUnitCertificatesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitCertificate(ctx context.Context, in *CreateBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error) {
	out := new(BusinessUnitCertificate)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitCertificate(ctx context.Context, in *GetBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error) {
	out := new(BusinessUnitCertificate)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitCertificate(ctx context.Context, in *UpdateBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error) {
	out := new(BusinessUnitCertificate)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitCertificate(ctx context.Context, in *DeleteBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitStrengths(ctx context.Context, in *ListBusinessUnitStrengthsRequest, opts ...grpc.CallOption) (*ListBusinessUnitStrengthsResponse, error) {
	out := new(ListBusinessUnitStrengthsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitStrengths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitStrength(ctx context.Context, in *CreateBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error) {
	out := new(BusinessUnitStrength)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitStrength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitStrength(ctx context.Context, in *GetBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error) {
	out := new(BusinessUnitStrength)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitStrength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitStrength(ctx context.Context, in *UpdateBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error) {
	out := new(BusinessUnitStrength)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitStrength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitStrength(ctx context.Context, in *DeleteBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitStrength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitSkills(ctx context.Context, in *ListBusinessUnitSkillsRequest, opts ...grpc.CallOption) (*ListBusinessUnitSkillsResponse, error) {
	out := new(ListBusinessUnitSkillsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitSkill(ctx context.Context, in *CreateBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error) {
	out := new(BusinessUnitSkill)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitSkill(ctx context.Context, in *GetBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error) {
	out := new(BusinessUnitSkill)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitSkill(ctx context.Context, in *UpdateBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error) {
	out := new(BusinessUnitSkill)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitSkill(ctx context.Context, in *DeleteBusinessUnitSkillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitSkillTree(ctx context.Context, in *GetBusinessUnitSkillTreeRequest, opts ...grpc.CallOption) (*BusinessUnitSkillTree, error) {
	out := new(BusinessUnitSkillTree)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitSkillTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitContactHeaders(ctx context.Context, in *ListBusinessUnitContactHeadersRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactHeadersResponse, error) {
	out := new(ListBusinessUnitContactHeadersResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContactHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitContactHeader(ctx context.Context, in *CreateBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*BusinessUnitContactHeader, error) {
	out := new(BusinessUnitContactHeader)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitContactHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitContactHeader(ctx context.Context, in *GetBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*BusinessUnitContactHeader, error) {
	out := new(BusinessUnitContactHeader)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContactHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitContactHeader(ctx context.Context, in *UpdateBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*BusinessUnitContactHeader, error) {
	out := new(BusinessUnitContactHeader)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitContactHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitContactHeader(ctx context.Context, in *DeleteBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitContactHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitContacts(ctx context.Context, in *ListBusinessUnitContactsRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactsResponse, error) {
	out := new(ListBusinessUnitContactsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitContact(ctx context.Context, in *CreateBusinessUnitContactRequest, opts ...grpc.CallOption) (*BusinessUnitContact, error) {
	out := new(BusinessUnitContact)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitContact(ctx context.Context, in *GetBusinessUnitContactRequest, opts ...grpc.CallOption) (*BusinessUnitContact, error) {
	out := new(BusinessUnitContact)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitContact(ctx context.Context, in *UpdateBusinessUnitContactRequest, opts ...grpc.CallOption) (*BusinessUnitContact, error) {
	out := new(BusinessUnitContact)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitContact(ctx context.Context, in *DeleteBusinessUnitContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitContactAttributes(ctx context.Context, in *ListBusinessUnitContactAttributesRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactAttributesResponse, error) {
	out := new(ListBusinessUnitContactAttributesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContactAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitContactAttribute(ctx context.Context, in *CreateBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*BusinessUnitContactAttribute, error) {
	out := new(BusinessUnitContactAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitContactAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitContactAttribute(ctx context.Context, in *GetBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*BusinessUnitContactAttribute, error) {
	out := new(BusinessUnitContactAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContactAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitContactAttribute(ctx context.Context, in *UpdateBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*BusinessUnitContactAttribute, error) {
	out := new(BusinessUnitContactAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitContactAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitContactAttribute(ctx context.Context, in *DeleteBusinessUnitContactAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitContactAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListTokyoShokoResearchs(ctx context.Context, in *ListTokyoShokoResearchsRequest, opts ...grpc.CallOption) (*ListTokyoShokoResearchsResponse, error) {
	out := new(ListTokyoShokoResearchsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListTokyoShokoResearchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateTokyoShokoResearch(ctx context.Context, in *CreateTokyoShokoResearchRequest, opts ...grpc.CallOption) (*TokyoShokoResearch, error) {
	out := new(TokyoShokoResearch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateTokyoShokoResearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetTokyoShokoResearch(ctx context.Context, in *GetTokyoShokoResearchRequest, opts ...grpc.CallOption) (*TokyoShokoResearch, error) {
	out := new(TokyoShokoResearch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetTokyoShokoResearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateTokyoShokoResearch(ctx context.Context, in *UpdateTokyoShokoResearchRequest, opts ...grpc.CallOption) (*TokyoShokoResearch, error) {
	out := new(TokyoShokoResearch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateTokyoShokoResearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteTokyoShokoResearch(ctx context.Context, in *DeleteTokyoShokoResearchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteTokyoShokoResearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListTokyoShokoResearchCompanyProfiles(ctx context.Context, in *ListTokyoShokoResearchCompanyProfilesRequest, opts ...grpc.CallOption) (*ListTokyoShokoResearchCompanyProfilesResponse, error) {
	out := new(ListTokyoShokoResearchCompanyProfilesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListTokyoShokoResearchCompanyProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateTokyoShokoResearchCompanyProfile(ctx context.Context, in *CreateTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*TokyoShokoResearchCompanyProfile, error) {
	out := new(TokyoShokoResearchCompanyProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateTokyoShokoResearchCompanyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetTokyoShokoResearchCompanyProfile(ctx context.Context, in *GetTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*TokyoShokoResearchCompanyProfile, error) {
	out := new(TokyoShokoResearchCompanyProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetTokyoShokoResearchCompanyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateTokyoShokoResearchCompanyProfile(ctx context.Context, in *UpdateTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*TokyoShokoResearchCompanyProfile, error) {
	out := new(TokyoShokoResearchCompanyProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateTokyoShokoResearchCompanyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteTokyoShokoResearchCompanyProfile(ctx context.Context, in *DeleteTokyoShokoResearchCompanyProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteTokyoShokoResearchCompanyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListTokyoShokoResearchRiskScores(ctx context.Context, in *ListTokyoShokoResearchRiskScoresRequest, opts ...grpc.CallOption) (*ListTokyoShokoResearchRiskScoresResponse, error) {
	out := new(ListTokyoShokoResearchRiskScoresResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListTokyoShokoResearchRiskScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateTokyoShokoResearchRiskScore(ctx context.Context, in *CreateTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*TokyoShokoResearchRiskScore, error) {
	out := new(TokyoShokoResearchRiskScore)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateTokyoShokoResearchRiskScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetTokyoShokoResearchRiskScore(ctx context.Context, in *GetTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*TokyoShokoResearchRiskScore, error) {
	out := new(TokyoShokoResearchRiskScore)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetTokyoShokoResearchRiskScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateTokyoShokoResearchRiskScore(ctx context.Context, in *UpdateTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*TokyoShokoResearchRiskScore, error) {
	out := new(TokyoShokoResearchRiskScore)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateTokyoShokoResearchRiskScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteTokyoShokoResearchRiskScore(ctx context.Context, in *DeleteTokyoShokoResearchRiskScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteTokyoShokoResearchRiskScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitScoreAssets(ctx context.Context, in *ListBusinessUnitScoreAssetsRequest, opts ...grpc.CallOption) (*ListBusinessUnitScoreAssetsResponse, error) {
	out := new(ListBusinessUnitScoreAssetsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitScoreAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitScoreAsset(ctx context.Context, in *CreateBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*BusinessUnitScoreAsset, error) {
	out := new(BusinessUnitScoreAsset)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitScoreAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitScoreAsset(ctx context.Context, in *GetBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*BusinessUnitScoreAsset, error) {
	out := new(BusinessUnitScoreAsset)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitScoreAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitScoreAsset(ctx context.Context, in *UpdateBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*BusinessUnitScoreAsset, error) {
	out := new(BusinessUnitScoreAsset)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitScoreAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitScoreAsset(ctx context.Context, in *DeleteBusinessUnitScoreAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitScoreAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitDocuments(ctx context.Context, in *ListBusinessUnitDocumentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitDocumentsResponse, error) {
	out := new(ListBusinessUnitDocumentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitDocument(ctx context.Context, in *CreateBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*BusinessUnitDocument, error) {
	out := new(BusinessUnitDocument)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitDocument(ctx context.Context, in *GetBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*BusinessUnitDocument, error) {
	out := new(BusinessUnitDocument)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitDocument(ctx context.Context, in *UpdateBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*BusinessUnitDocument, error) {
	out := new(BusinessUnitDocument)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitDocument(ctx context.Context, in *DeleteBusinessUnitDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitActiveControls(ctx context.Context, in *ListBusinessUnitActiveControlsRequest, opts ...grpc.CallOption) (*ListBusinessUnitActiveControlsResponse, error) {
	out := new(ListBusinessUnitActiveControlsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitActiveControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitActiveControl(ctx context.Context, in *CreateBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*BusinessUnitActiveControl, error) {
	out := new(BusinessUnitActiveControl)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitActiveControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitActiveControl(ctx context.Context, in *GetBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*BusinessUnitActiveControl, error) {
	out := new(BusinessUnitActiveControl)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitActiveControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitActiveControl(ctx context.Context, in *UpdateBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*BusinessUnitActiveControl, error) {
	out := new(BusinessUnitActiveControl)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitActiveControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitActiveControl(ctx context.Context, in *DeleteBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitActiveControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitSnapshots(ctx context.Context, in *ListBusinessUnitSnapshotsRequest, opts ...grpc.CallOption) (*ListBusinessUnitSnapshotsResponse, error) {
	out := new(ListBusinessUnitSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitSnapshot(ctx context.Context, in *CreateBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*BusinessUnitSnapshot, error) {
	out := new(BusinessUnitSnapshot)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitSnapshot(ctx context.Context, in *GetBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*BusinessUnitSnapshot, error) {
	out := new(BusinessUnitSnapshot)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitSnapshot(ctx context.Context, in *UpdateBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*BusinessUnitSnapshot, error) {
	out := new(BusinessUnitSnapshot)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitSnapshot(ctx context.Context, in *DeleteBusinessUnitSnapshotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitChangeNotifications(ctx context.Context, in *ListBusinessUnitChangeNotificationsRequest, opts ...grpc.CallOption) (*ListBusinessUnitChangeNotificationsResponse, error) {
	out := new(ListBusinessUnitChangeNotificationsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitChangeNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) CreateBusinessUnitChangeNotification(ctx context.Context, in *CreateBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*BusinessUnitChangeNotification, error) {
	out := new(BusinessUnitChangeNotification)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitChangeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitChangeNotification(ctx context.Context, in *GetBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*BusinessUnitChangeNotification, error) {
	out := new(BusinessUnitChangeNotification)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitChangeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) UpdateBusinessUnitChangeNotification(ctx context.Context, in *UpdateBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*BusinessUnitChangeNotification, error) {
	out := new(BusinessUnitChangeNotification)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitChangeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) DeleteBusinessUnitChangeNotification(ctx context.Context, in *DeleteBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitChangeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitContactContents(ctx context.Context, in *ListBusinessUnitContactContentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitContactContentsResponse, error) {
	out := new(ListBusinessUnitContactContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContactContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitContactContent(ctx context.Context, in *GetBusinessUnitContactContentRequest, opts ...grpc.CallOption) (*BusinessUnitContactContent, error) {
	out := new(BusinessUnitContactContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContactContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitScoreContents(ctx context.Context, in *ListBusinessUnitScoreContentsRequest, opts ...grpc.CallOption) (*ListBusinessUnitScoreContentsResponse, error) {
	out := new(ListBusinessUnitScoreContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitScoreContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) GetBusinessUnitScoreContent(ctx context.Context, in *GetBusinessUnitScoreContentRequest, opts ...grpc.CallOption) (*BusinessUnitScoreContent, error) {
	out := new(BusinessUnitScoreContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitScoreContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitProfiles(ctx context.Context, in *SharedListBusinessUnitProfilesRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitProfilesResponse, error) {
	out := new(SharedListBusinessUnitProfilesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitProfile(ctx context.Context, in *SharedGetBusinessUnitProfileRequest, opts ...grpc.CallOption) (*BusinessUnitProfile, error) {
	out := new(BusinessUnitProfile)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitFinancials(ctx context.Context, in *SharedListBusinessUnitFinancialsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitFinancialsResponse, error) {
	out := new(SharedListBusinessUnitFinancialsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitFinancials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitFinancial(ctx context.Context, in *SharedGetBusinessUnitFinancialRequest, opts ...grpc.CallOption) (*BusinessUnitFinancial, error) {
	out := new(BusinessUnitFinancial)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitFinancial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitBranchs(ctx context.Context, in *SharedListBusinessUnitBranchsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitBranchsResponse, error) {
	out := new(SharedListBusinessUnitBranchsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitBranchs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitBranch(ctx context.Context, in *SharedGetBusinessUnitBranchRequest, opts ...grpc.CallOption) (*BusinessUnitBranch, error) {
	out := new(BusinessUnitBranch)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitFacilitiess(ctx context.Context, in *SharedListBusinessUnitFacilitiessRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitFacilitiessResponse, error) {
	out := new(SharedListBusinessUnitFacilitiessResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitFacilitiess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitFacilities(ctx context.Context, in *SharedGetBusinessUnitFacilitiesRequest, opts ...grpc.CallOption) (*BusinessUnitFacilities, error) {
	out := new(BusinessUnitFacilities)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitFacilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitCertificates(ctx context.Context, in *SharedListBusinessUnitCertificatesRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitCertificatesResponse, error) {
	out := new(SharedListBusinessUnitCertificatesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitCertificate(ctx context.Context, in *SharedGetBusinessUnitCertificateRequest, opts ...grpc.CallOption) (*BusinessUnitCertificate, error) {
	out := new(BusinessUnitCertificate)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitStrengths(ctx context.Context, in *SharedListBusinessUnitStrengthsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitStrengthsResponse, error) {
	out := new(SharedListBusinessUnitStrengthsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitStrengths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitStrength(ctx context.Context, in *SharedGetBusinessUnitStrengthRequest, opts ...grpc.CallOption) (*BusinessUnitStrength, error) {
	out := new(BusinessUnitStrength)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitStrength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedListBusinessUnitSkills(ctx context.Context, in *SharedListBusinessUnitSkillsRequest, opts ...grpc.CallOption) (*SharedListBusinessUnitSkillsResponse, error) {
	out := new(SharedListBusinessUnitSkillsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharedGetBusinessUnitSkill(ctx context.Context, in *SharedGetBusinessUnitSkillRequest, opts ...grpc.CallOption) (*BusinessUnitSkill, error) {
	out := new(BusinessUnitSkill)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitSkill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharetoBusinessUnitContactHeader(ctx context.Context, in *SharetoBusinessUnitContactHeaderRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitContactHeaderResponse, error) {
	out := new(SharetoBusinessUnitContactHeaderResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharetoBusinessUnitContactHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharetoBusinessUnitContact(ctx context.Context, in *SharetoBusinessUnitContactRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitContactResponse, error) {
	out := new(SharetoBusinessUnitContactResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharetoBusinessUnitContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) SharetoBusinessUnitActiveControl(ctx context.Context, in *SharetoBusinessUnitActiveControlRequest, opts ...grpc.CallOption) (*SharetoBusinessUnitActiveControlResponse, error) {
	out := new(SharetoBusinessUnitActiveControlResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/SharetoBusinessUnitActiveControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ActivateBusinessUnit(ctx context.Context, in *ActivateBusinessUnitRequest, opts ...grpc.CallOption) (*ActivateBusinessUnitResponse, error) {
	out := new(ActivateBusinessUnitResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ActivateBusinessUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) InactivateBusinessUnit(ctx context.Context, in *InactivateBusinessUnitRequest, opts ...grpc.CallOption) (*InactivateBusinessUnitResponse, error) {
	out := new(InactivateBusinessUnitResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/InactivateBusinessUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) StartBusiness(ctx context.Context, in *StartBusinessRequest, opts ...grpc.CallOption) (*StartBusinessResponse, error) {
	out := new(StartBusinessResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/StartBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) StopBusiness(ctx context.Context, in *StopBusinessRequest, opts ...grpc.CallOption) (*StopBusinessResponse, error) {
	out := new(StopBusinessResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/StopBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ConfirmBusinessUnitChangeNotification(ctx context.Context, in *ConfirmBusinessUnitChangeNotificationRequest, opts ...grpc.CallOption) (*ConfirmBusinessUnitChangeNotificationResponse, error) {
	out := new(ConfirmBusinessUnitChangeNotificationResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ConfirmBusinessUnitChangeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ExportBusinessUnitManagements(ctx context.Context, in *ExportBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ExportBusinessUnitManagementsResponse, error) {
	out := new(ExportBusinessUnitManagementsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ExportBusinessUnitManagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ImportBusinessUnitManagements(ctx context.Context, in *ImportBusinessUnitManagementsRequest, opts ...grpc.CallOption) (*ImportBusinessUnitManagementsResponse, error) {
	out := new(ImportBusinessUnitManagementsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ImportBusinessUnitManagements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitManagementFormats(ctx context.Context, in *ListBusinessUnitManagementFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementFormatsResponse, error) {
	out := new(ListBusinessUnitManagementFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagementFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ExportBusinessUnitScores(ctx context.Context, in *ExportBusinessUnitScoresRequest, opts ...grpc.CallOption) (*ExportBusinessUnitScoresResponse, error) {
	out := new(ExportBusinessUnitScoresResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ExportBusinessUnitScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ImportBusinessUnitScores(ctx context.Context, in *ImportBusinessUnitScoresRequest, opts ...grpc.CallOption) (*ImportBusinessUnitScoresResponse, error) {
	out := new(ImportBusinessUnitScoresResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ImportBusinessUnitScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitScoreFormats(ctx context.Context, in *ListBusinessUnitScoreFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitScoreFormatsResponse, error) {
	out := new(ListBusinessUnitScoreFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitScoreFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ExportBusinessUnitManagementItemValues(ctx context.Context, in *ExportBusinessUnitManagementItemValuesRequest, opts ...grpc.CallOption) (*ExportBusinessUnitManagementItemValuesResponse, error) {
	out := new(ExportBusinessUnitManagementItemValuesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ExportBusinessUnitManagementItemValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ImportBusinessUnitManagementItemValues(ctx context.Context, in *ImportBusinessUnitManagementItemValuesRequest, opts ...grpc.CallOption) (*ImportBusinessUnitManagementItemValuesResponse, error) {
	out := new(ImportBusinessUnitManagementItemValuesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ImportBusinessUnitManagementItemValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessUnitManagementServiceClient) ListBusinessUnitManagementItemValueFormats(ctx context.Context, in *ListBusinessUnitManagementItemValueFormatsRequest, opts ...grpc.CallOption) (*ListBusinessUnitManagementItemValueFormatsResponse, error) {
	out := new(ListBusinessUnitManagementItemValueFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagementItemValueFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessUnitManagementServiceServer is the server API for BusinessUnitManagementService service.
// All implementations must embed UnimplementedBusinessUnitManagementServiceServer
// for forward compatibility
type BusinessUnitManagementServiceServer interface {
	// 取引先管理
	ListBusinessUnitManagements(context.Context, *ListBusinessUnitManagementsRequest) (*ListBusinessUnitManagementsResponse, error)
	GetBusinessUnitManagement(context.Context, *GetBusinessUnitManagementRequest) (*BusinessUnitManagement, error)
	CreateBusinessUnitManagement(context.Context, *CreateBusinessUnitManagementRequest) (*BusinessUnitManagement, error)
	UpdateBusinessUnitManagement(context.Context, *UpdateBusinessUnitManagementRequest) (*BusinessUnitManagement, error)
	DeleteBusinessUnitManagement(context.Context, *DeleteBusinessUnitManagementRequest) (*emptypb.Empty, error)
	// 取引先取込（旧フォーマット）
	ImportOldBusinessUnitManagements(context.Context, *ImportOldBusinessUnitManagementsRequest) (*ImportOldBusinessUnitManagementsResponse, error)
	// 取込フォーマット出力（旧フォーマット）
	ExportOldBusinessUnitManagements(context.Context, *ExportOldBusinessUnitManagementsRequest) (*ExportOldBusinessUnitManagementsResponse, error)
	// 取込フォーマット取得（旧フォーマット）
	ListOldBusinessUnitManagementFormats(context.Context, *ListOldBusinessUnitManagementFormatsRequest) (*ListOldBusinessUnitManagementFormatsResponse, error)
	// 取引先管理コンテンツ
	ListBusinessUnitManagementContents(context.Context, *ListBusinessUnitManagementContentsRequest) (*ListBusinessUnitManagementContentsResponse, error)
	GetBusinessUnitManagementContent(context.Context, *GetBusinessUnitManagementContentRequest) (*BusinessUnitManagementContent, error)
	// 履歴データ
	ListHistorys(context.Context, *ListHistorysRequest) (*ListHistorysResponse, error)
	// 招待メール送信
	SendEmailTenantInvitation(context.Context, *SendEmailTenantInvitationRequest) (*SendEmailTenantInvitationResponse, error)
	// 自社企業（基本情報）マスタ
	ListBusinessUnitProfiles(context.Context, *ListBusinessUnitProfilesRequest) (*ListBusinessUnitProfilesResponse, error)
	CreateBusinessUnitProfile(context.Context, *CreateBusinessUnitProfileRequest) (*BusinessUnitProfile, error)
	GetBusinessUnitProfile(context.Context, *GetBusinessUnitProfileRequest) (*BusinessUnitProfile, error)
	UpdateBusinessUnitProfile(context.Context, *UpdateBusinessUnitProfileRequest) (*BusinessUnitProfile, error)
	DeleteBusinessUnitProfile(context.Context, *DeleteBusinessUnitProfileRequest) (*emptypb.Empty, error)
	// 自社企業（基本情報）マスタ.システム通知先
	UpdateSystemNotificationUsersInBusinessUnitProfile(context.Context, *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) (*BusinessUnitProfile, error)
	// 自社企業（決算）マスタ
	ListBusinessUnitFinancials(context.Context, *ListBusinessUnitFinancialsRequest) (*ListBusinessUnitFinancialsResponse, error)
	CreateBusinessUnitFinancial(context.Context, *CreateBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error)
	GetBusinessUnitFinancial(context.Context, *GetBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error)
	UpdateBusinessUnitFinancial(context.Context, *UpdateBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error)
	DeleteBusinessUnitFinancial(context.Context, *DeleteBusinessUnitFinancialRequest) (*emptypb.Empty, error)
	// 自社企業（拠点）マスタ
	ListBusinessUnitBranchs(context.Context, *ListBusinessUnitBranchsRequest) (*ListBusinessUnitBranchsResponse, error)
	CreateBusinessUnitBranch(context.Context, *CreateBusinessUnitBranchRequest) (*BusinessUnitBranch, error)
	GetBusinessUnitBranch(context.Context, *GetBusinessUnitBranchRequest) (*BusinessUnitBranch, error)
	UpdateBusinessUnitBranch(context.Context, *UpdateBusinessUnitBranchRequest) (*BusinessUnitBranch, error)
	DeleteBusinessUnitBranch(context.Context, *DeleteBusinessUnitBranchRequest) (*emptypb.Empty, error)
	// 自社企業（設備）マスタ
	ListBusinessUnitFacilitiess(context.Context, *ListBusinessUnitFacilitiessRequest) (*ListBusinessUnitFacilitiessResponse, error)
	CreateBusinessUnitFacilities(context.Context, *CreateBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error)
	GetBusinessUnitFacilities(context.Context, *GetBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error)
	UpdateBusinessUnitFacilities(context.Context, *UpdateBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error)
	DeleteBusinessUnitFacilities(context.Context, *DeleteBusinessUnitFacilitiesRequest) (*emptypb.Empty, error)
	// 自社企業（認証）マスタ
	ListBusinessUnitCertificates(context.Context, *ListBusinessUnitCertificatesRequest) (*ListBusinessUnitCertificatesResponse, error)
	CreateBusinessUnitCertificate(context.Context, *CreateBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error)
	GetBusinessUnitCertificate(context.Context, *GetBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error)
	UpdateBusinessUnitCertificate(context.Context, *UpdateBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error)
	DeleteBusinessUnitCertificate(context.Context, *DeleteBusinessUnitCertificateRequest) (*emptypb.Empty, error)
	// 自社企業（得意分野）マスタ
	ListBusinessUnitStrengths(context.Context, *ListBusinessUnitStrengthsRequest) (*ListBusinessUnitStrengthsResponse, error)
	CreateBusinessUnitStrength(context.Context, *CreateBusinessUnitStrengthRequest) (*BusinessUnitStrength, error)
	GetBusinessUnitStrength(context.Context, *GetBusinessUnitStrengthRequest) (*BusinessUnitStrength, error)
	UpdateBusinessUnitStrength(context.Context, *UpdateBusinessUnitStrengthRequest) (*BusinessUnitStrength, error)
	DeleteBusinessUnitStrength(context.Context, *DeleteBusinessUnitStrengthRequest) (*emptypb.Empty, error)
	// 自社企業（技術情報）マスタ
	ListBusinessUnitSkills(context.Context, *ListBusinessUnitSkillsRequest) (*ListBusinessUnitSkillsResponse, error)
	CreateBusinessUnitSkill(context.Context, *CreateBusinessUnitSkillRequest) (*BusinessUnitSkill, error)
	GetBusinessUnitSkill(context.Context, *GetBusinessUnitSkillRequest) (*BusinessUnitSkill, error)
	UpdateBusinessUnitSkill(context.Context, *UpdateBusinessUnitSkillRequest) (*BusinessUnitSkill, error)
	DeleteBusinessUnitSkill(context.Context, *DeleteBusinessUnitSkillRequest) (*emptypb.Empty, error)
	GetBusinessUnitSkillTree(context.Context, *GetBusinessUnitSkillTreeRequest) (*BusinessUnitSkillTree, error)
	// 取引先管理（連絡先）依頼データ
	ListBusinessUnitContactHeaders(context.Context, *ListBusinessUnitContactHeadersRequest) (*ListBusinessUnitContactHeadersResponse, error)
	CreateBusinessUnitContactHeader(context.Context, *CreateBusinessUnitContactHeaderRequest) (*BusinessUnitContactHeader, error)
	GetBusinessUnitContactHeader(context.Context, *GetBusinessUnitContactHeaderRequest) (*BusinessUnitContactHeader, error)
	UpdateBusinessUnitContactHeader(context.Context, *UpdateBusinessUnitContactHeaderRequest) (*BusinessUnitContactHeader, error)
	DeleteBusinessUnitContactHeader(context.Context, *DeleteBusinessUnitContactHeaderRequest) (*emptypb.Empty, error)
	// 取引先管理（連絡先）マスタ
	ListBusinessUnitContacts(context.Context, *ListBusinessUnitContactsRequest) (*ListBusinessUnitContactsResponse, error)
	CreateBusinessUnitContact(context.Context, *CreateBusinessUnitContactRequest) (*BusinessUnitContact, error)
	GetBusinessUnitContact(context.Context, *GetBusinessUnitContactRequest) (*BusinessUnitContact, error)
	UpdateBusinessUnitContact(context.Context, *UpdateBusinessUnitContactRequest) (*BusinessUnitContact, error)
	DeleteBusinessUnitContact(context.Context, *DeleteBusinessUnitContactRequest) (*emptypb.Empty, error)
	// 取引先管理（連絡先）社内管理データ
	ListBusinessUnitContactAttributes(context.Context, *ListBusinessUnitContactAttributesRequest) (*ListBusinessUnitContactAttributesResponse, error)
	CreateBusinessUnitContactAttribute(context.Context, *CreateBusinessUnitContactAttributeRequest) (*BusinessUnitContactAttribute, error)
	GetBusinessUnitContactAttribute(context.Context, *GetBusinessUnitContactAttributeRequest) (*BusinessUnitContactAttribute, error)
	UpdateBusinessUnitContactAttribute(context.Context, *UpdateBusinessUnitContactAttributeRequest) (*BusinessUnitContactAttribute, error)
	DeleteBusinessUnitContactAttribute(context.Context, *DeleteBusinessUnitContactAttributeRequest) (*emptypb.Empty, error)
	// TSRデータ
	ListTokyoShokoResearchs(context.Context, *ListTokyoShokoResearchsRequest) (*ListTokyoShokoResearchsResponse, error)
	CreateTokyoShokoResearch(context.Context, *CreateTokyoShokoResearchRequest) (*TokyoShokoResearch, error)
	GetTokyoShokoResearch(context.Context, *GetTokyoShokoResearchRequest) (*TokyoShokoResearch, error)
	UpdateTokyoShokoResearch(context.Context, *UpdateTokyoShokoResearchRequest) (*TokyoShokoResearch, error)
	DeleteTokyoShokoResearch(context.Context, *DeleteTokyoShokoResearchRequest) (*emptypb.Empty, error)
	// TSR企業情報データ
	ListTokyoShokoResearchCompanyProfiles(context.Context, *ListTokyoShokoResearchCompanyProfilesRequest) (*ListTokyoShokoResearchCompanyProfilesResponse, error)
	CreateTokyoShokoResearchCompanyProfile(context.Context, *CreateTokyoShokoResearchCompanyProfileRequest) (*TokyoShokoResearchCompanyProfile, error)
	GetTokyoShokoResearchCompanyProfile(context.Context, *GetTokyoShokoResearchCompanyProfileRequest) (*TokyoShokoResearchCompanyProfile, error)
	UpdateTokyoShokoResearchCompanyProfile(context.Context, *UpdateTokyoShokoResearchCompanyProfileRequest) (*TokyoShokoResearchCompanyProfile, error)
	DeleteTokyoShokoResearchCompanyProfile(context.Context, *DeleteTokyoShokoResearchCompanyProfileRequest) (*emptypb.Empty, error)
	// TSRリスクスコアデータ
	ListTokyoShokoResearchRiskScores(context.Context, *ListTokyoShokoResearchRiskScoresRequest) (*ListTokyoShokoResearchRiskScoresResponse, error)
	CreateTokyoShokoResearchRiskScore(context.Context, *CreateTokyoShokoResearchRiskScoreRequest) (*TokyoShokoResearchRiskScore, error)
	GetTokyoShokoResearchRiskScore(context.Context, *GetTokyoShokoResearchRiskScoreRequest) (*TokyoShokoResearchRiskScore, error)
	UpdateTokyoShokoResearchRiskScore(context.Context, *UpdateTokyoShokoResearchRiskScoreRequest) (*TokyoShokoResearchRiskScore, error)
	DeleteTokyoShokoResearchRiskScore(context.Context, *DeleteTokyoShokoResearchRiskScoreRequest) (*emptypb.Empty, error)
	// 第三者情報ファイルデータ
	ListBusinessUnitScoreAssets(context.Context, *ListBusinessUnitScoreAssetsRequest) (*ListBusinessUnitScoreAssetsResponse, error)
	CreateBusinessUnitScoreAsset(context.Context, *CreateBusinessUnitScoreAssetRequest) (*BusinessUnitScoreAsset, error)
	GetBusinessUnitScoreAsset(context.Context, *GetBusinessUnitScoreAssetRequest) (*BusinessUnitScoreAsset, error)
	UpdateBusinessUnitScoreAsset(context.Context, *UpdateBusinessUnitScoreAssetRequest) (*BusinessUnitScoreAsset, error)
	DeleteBusinessUnitScoreAsset(context.Context, *DeleteBusinessUnitScoreAssetRequest) (*emptypb.Empty, error)
	// 取引先管理（文書）マスタ
	ListBusinessUnitDocuments(context.Context, *ListBusinessUnitDocumentsRequest) (*ListBusinessUnitDocumentsResponse, error)
	CreateBusinessUnitDocument(context.Context, *CreateBusinessUnitDocumentRequest) (*BusinessUnitDocument, error)
	GetBusinessUnitDocument(context.Context, *GetBusinessUnitDocumentRequest) (*BusinessUnitDocument, error)
	UpdateBusinessUnitDocument(context.Context, *UpdateBusinessUnitDocumentRequest) (*BusinessUnitDocument, error)
	DeleteBusinessUnitDocument(context.Context, *DeleteBusinessUnitDocumentRequest) (*emptypb.Empty, error)
	// 有効管理データ（取引先）
	ListBusinessUnitActiveControls(context.Context, *ListBusinessUnitActiveControlsRequest) (*ListBusinessUnitActiveControlsResponse, error)
	CreateBusinessUnitActiveControl(context.Context, *CreateBusinessUnitActiveControlRequest) (*BusinessUnitActiveControl, error)
	GetBusinessUnitActiveControl(context.Context, *GetBusinessUnitActiveControlRequest) (*BusinessUnitActiveControl, error)
	UpdateBusinessUnitActiveControl(context.Context, *UpdateBusinessUnitActiveControlRequest) (*BusinessUnitActiveControl, error)
	DeleteBusinessUnitActiveControl(context.Context, *DeleteBusinessUnitActiveControlRequest) (*emptypb.Empty, error)
	// 取引先管理スナップショットデータ
	ListBusinessUnitSnapshots(context.Context, *ListBusinessUnitSnapshotsRequest) (*ListBusinessUnitSnapshotsResponse, error)
	CreateBusinessUnitSnapshot(context.Context, *CreateBusinessUnitSnapshotRequest) (*BusinessUnitSnapshot, error)
	GetBusinessUnitSnapshot(context.Context, *GetBusinessUnitSnapshotRequest) (*BusinessUnitSnapshot, error)
	UpdateBusinessUnitSnapshot(context.Context, *UpdateBusinessUnitSnapshotRequest) (*BusinessUnitSnapshot, error)
	DeleteBusinessUnitSnapshot(context.Context, *DeleteBusinessUnitSnapshotRequest) (*emptypb.Empty, error)
	// 更新通知データ
	ListBusinessUnitChangeNotifications(context.Context, *ListBusinessUnitChangeNotificationsRequest) (*ListBusinessUnitChangeNotificationsResponse, error)
	CreateBusinessUnitChangeNotification(context.Context, *CreateBusinessUnitChangeNotificationRequest) (*BusinessUnitChangeNotification, error)
	GetBusinessUnitChangeNotification(context.Context, *GetBusinessUnitChangeNotificationRequest) (*BusinessUnitChangeNotification, error)
	UpdateBusinessUnitChangeNotification(context.Context, *UpdateBusinessUnitChangeNotificationRequest) (*BusinessUnitChangeNotification, error)
	DeleteBusinessUnitChangeNotification(context.Context, *DeleteBusinessUnitChangeNotificationRequest) (*emptypb.Empty, error)
	// 取引先管理（連絡先）コンテンツ
	ListBusinessUnitContactContents(context.Context, *ListBusinessUnitContactContentsRequest) (*ListBusinessUnitContactContentsResponse, error)
	GetBusinessUnitContactContent(context.Context, *GetBusinessUnitContactContentRequest) (*BusinessUnitContactContent, error)
	// 取引先管理（第三者情報）コンテンツ
	ListBusinessUnitScoreContents(context.Context, *ListBusinessUnitScoreContentsRequest) (*ListBusinessUnitScoreContentsResponse, error)
	GetBusinessUnitScoreContent(context.Context, *GetBusinessUnitScoreContentRequest) (*BusinessUnitScoreContent, error)
	// 公開された 自社企業（基本情報）マスタ
	SharedListBusinessUnitProfiles(context.Context, *SharedListBusinessUnitProfilesRequest) (*SharedListBusinessUnitProfilesResponse, error)
	SharedGetBusinessUnitProfile(context.Context, *SharedGetBusinessUnitProfileRequest) (*BusinessUnitProfile, error)
	// 公開された 自社企業（決算）マスタ
	SharedListBusinessUnitFinancials(context.Context, *SharedListBusinessUnitFinancialsRequest) (*SharedListBusinessUnitFinancialsResponse, error)
	SharedGetBusinessUnitFinancial(context.Context, *SharedGetBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error)
	// 公開された 自社企業（拠点）マスタ
	SharedListBusinessUnitBranchs(context.Context, *SharedListBusinessUnitBranchsRequest) (*SharedListBusinessUnitBranchsResponse, error)
	SharedGetBusinessUnitBranch(context.Context, *SharedGetBusinessUnitBranchRequest) (*BusinessUnitBranch, error)
	// 公開された 自社企業（設備）マスタ
	SharedListBusinessUnitFacilitiess(context.Context, *SharedListBusinessUnitFacilitiessRequest) (*SharedListBusinessUnitFacilitiessResponse, error)
	SharedGetBusinessUnitFacilities(context.Context, *SharedGetBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error)
	// 公開された 自社企業（認証）マスタ
	SharedListBusinessUnitCertificates(context.Context, *SharedListBusinessUnitCertificatesRequest) (*SharedListBusinessUnitCertificatesResponse, error)
	SharedGetBusinessUnitCertificate(context.Context, *SharedGetBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error)
	// 公開された 自社企業（得意分野）マスタ
	SharedListBusinessUnitStrengths(context.Context, *SharedListBusinessUnitStrengthsRequest) (*SharedListBusinessUnitStrengthsResponse, error)
	SharedGetBusinessUnitStrength(context.Context, *SharedGetBusinessUnitStrengthRequest) (*BusinessUnitStrength, error)
	// 公開された 自社企業（技術情報）マスタ
	SharedListBusinessUnitSkills(context.Context, *SharedListBusinessUnitSkillsRequest) (*SharedListBusinessUnitSkillsResponse, error)
	SharedGetBusinessUnitSkill(context.Context, *SharedGetBusinessUnitSkillRequest) (*BusinessUnitSkill, error)
	// 取引先管理（連絡先）依頼データ を 公開する
	SharetoBusinessUnitContactHeader(context.Context, *SharetoBusinessUnitContactHeaderRequest) (*SharetoBusinessUnitContactHeaderResponse, error)
	// 取引先管理（連絡先）マスタ を 公開する
	SharetoBusinessUnitContact(context.Context, *SharetoBusinessUnitContactRequest) (*SharetoBusinessUnitContactResponse, error)
	// 有効管理データ（取引先） を 公開する
	SharetoBusinessUnitActiveControl(context.Context, *SharetoBusinessUnitActiveControlRequest) (*SharetoBusinessUnitActiveControlResponse, error)
	// Inactivate / Activate
	ActivateBusinessUnit(context.Context, *ActivateBusinessUnitRequest) (*ActivateBusinessUnitResponse, error)
	InactivateBusinessUnit(context.Context, *InactivateBusinessUnitRequest) (*InactivateBusinessUnitResponse, error)
	StartBusiness(context.Context, *StartBusinessRequest) (*StartBusinessResponse, error)
	StopBusiness(context.Context, *StopBusinessRequest) (*StopBusinessResponse, error)
	// 更新通知 を 確認済みにする
	ConfirmBusinessUnitChangeNotification(context.Context, *ConfirmBusinessUnitChangeNotificationRequest) (*ConfirmBusinessUnitChangeNotificationResponse, error)
	// 取引先管理情報 取込フォーマット出力（新フォーマット）
	ExportBusinessUnitManagements(context.Context, *ExportBusinessUnitManagementsRequest) (*ExportBusinessUnitManagementsResponse, error)
	// 取引先管理情報 取込（新フォーマット）
	ImportBusinessUnitManagements(context.Context, *ImportBusinessUnitManagementsRequest) (*ImportBusinessUnitManagementsResponse, error)
	// 取引先管理情報 取込フォーマット取得（新フォーマット）
	ListBusinessUnitManagementFormats(context.Context, *ListBusinessUnitManagementFormatsRequest) (*ListBusinessUnitManagementFormatsResponse, error)
	// 取引先管理（第三者情報）マスタ 取込フォーマット出力
	ExportBusinessUnitScores(context.Context, *ExportBusinessUnitScoresRequest) (*ExportBusinessUnitScoresResponse, error)
	// 取引先管理（第三者情報）マスタ 取込
	ImportBusinessUnitScores(context.Context, *ImportBusinessUnitScoresRequest) (*ImportBusinessUnitScoresResponse, error)
	// 取引先管理（第三者情報）マスタ 取込フォーマット取得
	ListBusinessUnitScoreFormats(context.Context, *ListBusinessUnitScoreFormatsRequest) (*ListBusinessUnitScoreFormatsResponse, error)
	// ItemValue 取込フォーマット出力
	ExportBusinessUnitManagementItemValues(context.Context, *ExportBusinessUnitManagementItemValuesRequest) (*ExportBusinessUnitManagementItemValuesResponse, error)
	// ItemValue 取込
	ImportBusinessUnitManagementItemValues(context.Context, *ImportBusinessUnitManagementItemValuesRequest) (*ImportBusinessUnitManagementItemValuesResponse, error)
	// ItemValue 取込フォーマット取得
	ListBusinessUnitManagementItemValueFormats(context.Context, *ListBusinessUnitManagementItemValueFormatsRequest) (*ListBusinessUnitManagementItemValueFormatsResponse, error)
	mustEmbedUnimplementedBusinessUnitManagementServiceServer()
}

// UnimplementedBusinessUnitManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessUnitManagementServiceServer struct {
}

func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitManagements(context.Context, *ListBusinessUnitManagementsRequest) (*ListBusinessUnitManagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitManagements not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitManagement(context.Context, *GetBusinessUnitManagementRequest) (*BusinessUnitManagement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitManagement not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitManagement(context.Context, *CreateBusinessUnitManagementRequest) (*BusinessUnitManagement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitManagement not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitManagement(context.Context, *UpdateBusinessUnitManagementRequest) (*BusinessUnitManagement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitManagement not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitManagement(context.Context, *DeleteBusinessUnitManagementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitManagement not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ImportOldBusinessUnitManagements(context.Context, *ImportOldBusinessUnitManagementsRequest) (*ImportOldBusinessUnitManagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOldBusinessUnitManagements not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ExportOldBusinessUnitManagements(context.Context, *ExportOldBusinessUnitManagementsRequest) (*ExportOldBusinessUnitManagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportOldBusinessUnitManagements not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListOldBusinessUnitManagementFormats(context.Context, *ListOldBusinessUnitManagementFormatsRequest) (*ListOldBusinessUnitManagementFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOldBusinessUnitManagementFormats not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitManagementContents(context.Context, *ListBusinessUnitManagementContentsRequest) (*ListBusinessUnitManagementContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitManagementContents not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitManagementContent(context.Context, *GetBusinessUnitManagementContentRequest) (*BusinessUnitManagementContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitManagementContent not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListHistorys(context.Context, *ListHistorysRequest) (*ListHistorysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistorys not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SendEmailTenantInvitation(context.Context, *SendEmailTenantInvitationRequest) (*SendEmailTenantInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailTenantInvitation not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitProfiles(context.Context, *ListBusinessUnitProfilesRequest) (*ListBusinessUnitProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitProfiles not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitProfile(context.Context, *CreateBusinessUnitProfileRequest) (*BusinessUnitProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitProfile(context.Context, *GetBusinessUnitProfileRequest) (*BusinessUnitProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitProfile(context.Context, *UpdateBusinessUnitProfileRequest) (*BusinessUnitProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitProfile(context.Context, *DeleteBusinessUnitProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateSystemNotificationUsersInBusinessUnitProfile(context.Context, *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) (*BusinessUnitProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemNotificationUsersInBusinessUnitProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitFinancials(context.Context, *ListBusinessUnitFinancialsRequest) (*ListBusinessUnitFinancialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitFinancials not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitFinancial(context.Context, *CreateBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitFinancial not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitFinancial(context.Context, *GetBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitFinancial not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitFinancial(context.Context, *UpdateBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitFinancial not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitFinancial(context.Context, *DeleteBusinessUnitFinancialRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitFinancial not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitBranchs(context.Context, *ListBusinessUnitBranchsRequest) (*ListBusinessUnitBranchsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitBranchs not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitBranch(context.Context, *CreateBusinessUnitBranchRequest) (*BusinessUnitBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitBranch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitBranch(context.Context, *GetBusinessUnitBranchRequest) (*BusinessUnitBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitBranch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitBranch(context.Context, *UpdateBusinessUnitBranchRequest) (*BusinessUnitBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitBranch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitBranch(context.Context, *DeleteBusinessUnitBranchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitBranch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitFacilitiess(context.Context, *ListBusinessUnitFacilitiessRequest) (*ListBusinessUnitFacilitiessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitFacilitiess not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitFacilities(context.Context, *CreateBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitFacilities not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitFacilities(context.Context, *GetBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitFacilities not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitFacilities(context.Context, *UpdateBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitFacilities not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitFacilities(context.Context, *DeleteBusinessUnitFacilitiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitFacilities not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitCertificates(context.Context, *ListBusinessUnitCertificatesRequest) (*ListBusinessUnitCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitCertificates not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitCertificate(context.Context, *CreateBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitCertificate not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitCertificate(context.Context, *GetBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitCertificate not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitCertificate(context.Context, *UpdateBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitCertificate not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitCertificate(context.Context, *DeleteBusinessUnitCertificateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitCertificate not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitStrengths(context.Context, *ListBusinessUnitStrengthsRequest) (*ListBusinessUnitStrengthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitStrengths not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitStrength(context.Context, *CreateBusinessUnitStrengthRequest) (*BusinessUnitStrength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitStrength not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitStrength(context.Context, *GetBusinessUnitStrengthRequest) (*BusinessUnitStrength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitStrength not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitStrength(context.Context, *UpdateBusinessUnitStrengthRequest) (*BusinessUnitStrength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitStrength not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitStrength(context.Context, *DeleteBusinessUnitStrengthRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitStrength not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitSkills(context.Context, *ListBusinessUnitSkillsRequest) (*ListBusinessUnitSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitSkills not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitSkill(context.Context, *CreateBusinessUnitSkillRequest) (*BusinessUnitSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitSkill not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitSkill(context.Context, *GetBusinessUnitSkillRequest) (*BusinessUnitSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitSkill not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitSkill(context.Context, *UpdateBusinessUnitSkillRequest) (*BusinessUnitSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitSkill not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitSkill(context.Context, *DeleteBusinessUnitSkillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitSkill not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitSkillTree(context.Context, *GetBusinessUnitSkillTreeRequest) (*BusinessUnitSkillTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitSkillTree not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitContactHeaders(context.Context, *ListBusinessUnitContactHeadersRequest) (*ListBusinessUnitContactHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitContactHeaders not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitContactHeader(context.Context, *CreateBusinessUnitContactHeaderRequest) (*BusinessUnitContactHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitContactHeader not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitContactHeader(context.Context, *GetBusinessUnitContactHeaderRequest) (*BusinessUnitContactHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitContactHeader not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitContactHeader(context.Context, *UpdateBusinessUnitContactHeaderRequest) (*BusinessUnitContactHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitContactHeader not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitContactHeader(context.Context, *DeleteBusinessUnitContactHeaderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitContactHeader not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitContacts(context.Context, *ListBusinessUnitContactsRequest) (*ListBusinessUnitContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitContacts not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitContact(context.Context, *CreateBusinessUnitContactRequest) (*BusinessUnitContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitContact not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitContact(context.Context, *GetBusinessUnitContactRequest) (*BusinessUnitContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitContact not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitContact(context.Context, *UpdateBusinessUnitContactRequest) (*BusinessUnitContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitContact not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitContact(context.Context, *DeleteBusinessUnitContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitContact not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitContactAttributes(context.Context, *ListBusinessUnitContactAttributesRequest) (*ListBusinessUnitContactAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitContactAttributes not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitContactAttribute(context.Context, *CreateBusinessUnitContactAttributeRequest) (*BusinessUnitContactAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitContactAttribute not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitContactAttribute(context.Context, *GetBusinessUnitContactAttributeRequest) (*BusinessUnitContactAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitContactAttribute not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitContactAttribute(context.Context, *UpdateBusinessUnitContactAttributeRequest) (*BusinessUnitContactAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitContactAttribute not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitContactAttribute(context.Context, *DeleteBusinessUnitContactAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitContactAttribute not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListTokyoShokoResearchs(context.Context, *ListTokyoShokoResearchsRequest) (*ListTokyoShokoResearchsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokyoShokoResearchs not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateTokyoShokoResearch(context.Context, *CreateTokyoShokoResearchRequest) (*TokyoShokoResearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokyoShokoResearch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetTokyoShokoResearch(context.Context, *GetTokyoShokoResearchRequest) (*TokyoShokoResearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokyoShokoResearch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateTokyoShokoResearch(context.Context, *UpdateTokyoShokoResearchRequest) (*TokyoShokoResearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokyoShokoResearch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteTokyoShokoResearch(context.Context, *DeleteTokyoShokoResearchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokyoShokoResearch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListTokyoShokoResearchCompanyProfiles(context.Context, *ListTokyoShokoResearchCompanyProfilesRequest) (*ListTokyoShokoResearchCompanyProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokyoShokoResearchCompanyProfiles not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateTokyoShokoResearchCompanyProfile(context.Context, *CreateTokyoShokoResearchCompanyProfileRequest) (*TokyoShokoResearchCompanyProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokyoShokoResearchCompanyProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetTokyoShokoResearchCompanyProfile(context.Context, *GetTokyoShokoResearchCompanyProfileRequest) (*TokyoShokoResearchCompanyProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokyoShokoResearchCompanyProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateTokyoShokoResearchCompanyProfile(context.Context, *UpdateTokyoShokoResearchCompanyProfileRequest) (*TokyoShokoResearchCompanyProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokyoShokoResearchCompanyProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteTokyoShokoResearchCompanyProfile(context.Context, *DeleteTokyoShokoResearchCompanyProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokyoShokoResearchCompanyProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListTokyoShokoResearchRiskScores(context.Context, *ListTokyoShokoResearchRiskScoresRequest) (*ListTokyoShokoResearchRiskScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokyoShokoResearchRiskScores not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateTokyoShokoResearchRiskScore(context.Context, *CreateTokyoShokoResearchRiskScoreRequest) (*TokyoShokoResearchRiskScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokyoShokoResearchRiskScore not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetTokyoShokoResearchRiskScore(context.Context, *GetTokyoShokoResearchRiskScoreRequest) (*TokyoShokoResearchRiskScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokyoShokoResearchRiskScore not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateTokyoShokoResearchRiskScore(context.Context, *UpdateTokyoShokoResearchRiskScoreRequest) (*TokyoShokoResearchRiskScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokyoShokoResearchRiskScore not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteTokyoShokoResearchRiskScore(context.Context, *DeleteTokyoShokoResearchRiskScoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokyoShokoResearchRiskScore not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitScoreAssets(context.Context, *ListBusinessUnitScoreAssetsRequest) (*ListBusinessUnitScoreAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitScoreAssets not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitScoreAsset(context.Context, *CreateBusinessUnitScoreAssetRequest) (*BusinessUnitScoreAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitScoreAsset not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitScoreAsset(context.Context, *GetBusinessUnitScoreAssetRequest) (*BusinessUnitScoreAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitScoreAsset not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitScoreAsset(context.Context, *UpdateBusinessUnitScoreAssetRequest) (*BusinessUnitScoreAsset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitScoreAsset not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitScoreAsset(context.Context, *DeleteBusinessUnitScoreAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitScoreAsset not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitDocuments(context.Context, *ListBusinessUnitDocumentsRequest) (*ListBusinessUnitDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitDocuments not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitDocument(context.Context, *CreateBusinessUnitDocumentRequest) (*BusinessUnitDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitDocument not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitDocument(context.Context, *GetBusinessUnitDocumentRequest) (*BusinessUnitDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitDocument not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitDocument(context.Context, *UpdateBusinessUnitDocumentRequest) (*BusinessUnitDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitDocument not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitDocument(context.Context, *DeleteBusinessUnitDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitDocument not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitActiveControls(context.Context, *ListBusinessUnitActiveControlsRequest) (*ListBusinessUnitActiveControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitActiveControls not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitActiveControl(context.Context, *CreateBusinessUnitActiveControlRequest) (*BusinessUnitActiveControl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitActiveControl not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitActiveControl(context.Context, *GetBusinessUnitActiveControlRequest) (*BusinessUnitActiveControl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitActiveControl not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitActiveControl(context.Context, *UpdateBusinessUnitActiveControlRequest) (*BusinessUnitActiveControl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitActiveControl not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitActiveControl(context.Context, *DeleteBusinessUnitActiveControlRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitActiveControl not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitSnapshots(context.Context, *ListBusinessUnitSnapshotsRequest) (*ListBusinessUnitSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitSnapshots not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitSnapshot(context.Context, *CreateBusinessUnitSnapshotRequest) (*BusinessUnitSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitSnapshot not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitSnapshot(context.Context, *GetBusinessUnitSnapshotRequest) (*BusinessUnitSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitSnapshot not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitSnapshot(context.Context, *UpdateBusinessUnitSnapshotRequest) (*BusinessUnitSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitSnapshot not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitSnapshot(context.Context, *DeleteBusinessUnitSnapshotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitSnapshot not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitChangeNotifications(context.Context, *ListBusinessUnitChangeNotificationsRequest) (*ListBusinessUnitChangeNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitChangeNotifications not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) CreateBusinessUnitChangeNotification(context.Context, *CreateBusinessUnitChangeNotificationRequest) (*BusinessUnitChangeNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUnitChangeNotification not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitChangeNotification(context.Context, *GetBusinessUnitChangeNotificationRequest) (*BusinessUnitChangeNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitChangeNotification not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) UpdateBusinessUnitChangeNotification(context.Context, *UpdateBusinessUnitChangeNotificationRequest) (*BusinessUnitChangeNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUnitChangeNotification not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) DeleteBusinessUnitChangeNotification(context.Context, *DeleteBusinessUnitChangeNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUnitChangeNotification not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitContactContents(context.Context, *ListBusinessUnitContactContentsRequest) (*ListBusinessUnitContactContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitContactContents not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitContactContent(context.Context, *GetBusinessUnitContactContentRequest) (*BusinessUnitContactContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitContactContent not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitScoreContents(context.Context, *ListBusinessUnitScoreContentsRequest) (*ListBusinessUnitScoreContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitScoreContents not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) GetBusinessUnitScoreContent(context.Context, *GetBusinessUnitScoreContentRequest) (*BusinessUnitScoreContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessUnitScoreContent not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitProfiles(context.Context, *SharedListBusinessUnitProfilesRequest) (*SharedListBusinessUnitProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitProfiles not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitProfile(context.Context, *SharedGetBusinessUnitProfileRequest) (*BusinessUnitProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitProfile not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitFinancials(context.Context, *SharedListBusinessUnitFinancialsRequest) (*SharedListBusinessUnitFinancialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitFinancials not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitFinancial(context.Context, *SharedGetBusinessUnitFinancialRequest) (*BusinessUnitFinancial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitFinancial not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitBranchs(context.Context, *SharedListBusinessUnitBranchsRequest) (*SharedListBusinessUnitBranchsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitBranchs not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitBranch(context.Context, *SharedGetBusinessUnitBranchRequest) (*BusinessUnitBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitBranch not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitFacilitiess(context.Context, *SharedListBusinessUnitFacilitiessRequest) (*SharedListBusinessUnitFacilitiessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitFacilitiess not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitFacilities(context.Context, *SharedGetBusinessUnitFacilitiesRequest) (*BusinessUnitFacilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitFacilities not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitCertificates(context.Context, *SharedListBusinessUnitCertificatesRequest) (*SharedListBusinessUnitCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitCertificates not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitCertificate(context.Context, *SharedGetBusinessUnitCertificateRequest) (*BusinessUnitCertificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitCertificate not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitStrengths(context.Context, *SharedListBusinessUnitStrengthsRequest) (*SharedListBusinessUnitStrengthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitStrengths not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitStrength(context.Context, *SharedGetBusinessUnitStrengthRequest) (*BusinessUnitStrength, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitStrength not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedListBusinessUnitSkills(context.Context, *SharedListBusinessUnitSkillsRequest) (*SharedListBusinessUnitSkillsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListBusinessUnitSkills not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharedGetBusinessUnitSkill(context.Context, *SharedGetBusinessUnitSkillRequest) (*BusinessUnitSkill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetBusinessUnitSkill not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharetoBusinessUnitContactHeader(context.Context, *SharetoBusinessUnitContactHeaderRequest) (*SharetoBusinessUnitContactHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoBusinessUnitContactHeader not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharetoBusinessUnitContact(context.Context, *SharetoBusinessUnitContactRequest) (*SharetoBusinessUnitContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoBusinessUnitContact not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) SharetoBusinessUnitActiveControl(context.Context, *SharetoBusinessUnitActiveControlRequest) (*SharetoBusinessUnitActiveControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoBusinessUnitActiveControl not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ActivateBusinessUnit(context.Context, *ActivateBusinessUnitRequest) (*ActivateBusinessUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateBusinessUnit not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) InactivateBusinessUnit(context.Context, *InactivateBusinessUnitRequest) (*InactivateBusinessUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactivateBusinessUnit not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) StartBusiness(context.Context, *StartBusinessRequest) (*StartBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBusiness not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) StopBusiness(context.Context, *StopBusinessRequest) (*StopBusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBusiness not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ConfirmBusinessUnitChangeNotification(context.Context, *ConfirmBusinessUnitChangeNotificationRequest) (*ConfirmBusinessUnitChangeNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmBusinessUnitChangeNotification not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ExportBusinessUnitManagements(context.Context, *ExportBusinessUnitManagementsRequest) (*ExportBusinessUnitManagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBusinessUnitManagements not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ImportBusinessUnitManagements(context.Context, *ImportBusinessUnitManagementsRequest) (*ImportBusinessUnitManagementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBusinessUnitManagements not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitManagementFormats(context.Context, *ListBusinessUnitManagementFormatsRequest) (*ListBusinessUnitManagementFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitManagementFormats not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ExportBusinessUnitScores(context.Context, *ExportBusinessUnitScoresRequest) (*ExportBusinessUnitScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBusinessUnitScores not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ImportBusinessUnitScores(context.Context, *ImportBusinessUnitScoresRequest) (*ImportBusinessUnitScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBusinessUnitScores not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitScoreFormats(context.Context, *ListBusinessUnitScoreFormatsRequest) (*ListBusinessUnitScoreFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitScoreFormats not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ExportBusinessUnitManagementItemValues(context.Context, *ExportBusinessUnitManagementItemValuesRequest) (*ExportBusinessUnitManagementItemValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBusinessUnitManagementItemValues not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ImportBusinessUnitManagementItemValues(context.Context, *ImportBusinessUnitManagementItemValuesRequest) (*ImportBusinessUnitManagementItemValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBusinessUnitManagementItemValues not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) ListBusinessUnitManagementItemValueFormats(context.Context, *ListBusinessUnitManagementItemValueFormatsRequest) (*ListBusinessUnitManagementItemValueFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessUnitManagementItemValueFormats not implemented")
}
func (UnimplementedBusinessUnitManagementServiceServer) mustEmbedUnimplementedBusinessUnitManagementServiceServer() {
}

// UnsafeBusinessUnitManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessUnitManagementServiceServer will
// result in compilation errors.
type UnsafeBusinessUnitManagementServiceServer interface {
	mustEmbedUnimplementedBusinessUnitManagementServiceServer()
}

func RegisterBusinessUnitManagementServiceServer(s grpc.ServiceRegistrar, srv BusinessUnitManagementServiceServer) {
	s.RegisterService(&BusinessUnitManagementService_ServiceDesc, srv)
}

func _BusinessUnitManagementService_ListBusinessUnitManagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitManagementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagements(ctx, req.(*ListBusinessUnitManagementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitManagement(ctx, req.(*GetBusinessUnitManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitManagement(ctx, req.(*CreateBusinessUnitManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitManagement(ctx, req.(*UpdateBusinessUnitManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitManagement(ctx, req.(*DeleteBusinessUnitManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ImportOldBusinessUnitManagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOldBusinessUnitManagementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ImportOldBusinessUnitManagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ImportOldBusinessUnitManagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ImportOldBusinessUnitManagements(ctx, req.(*ImportOldBusinessUnitManagementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ExportOldBusinessUnitManagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportOldBusinessUnitManagementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ExportOldBusinessUnitManagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ExportOldBusinessUnitManagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ExportOldBusinessUnitManagements(ctx, req.(*ExportOldBusinessUnitManagementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListOldBusinessUnitManagementFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOldBusinessUnitManagementFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListOldBusinessUnitManagementFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListOldBusinessUnitManagementFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListOldBusinessUnitManagementFormats(ctx, req.(*ListOldBusinessUnitManagementFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitManagementContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitManagementContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagementContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagementContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagementContents(ctx, req.(*ListBusinessUnitManagementContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitManagementContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitManagementContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitManagementContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitManagementContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitManagementContent(ctx, req.(*GetBusinessUnitManagementContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListHistorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistorysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListHistorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListHistorys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListHistorys(ctx, req.(*ListHistorysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SendEmailTenantInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailTenantInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SendEmailTenantInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SendEmailTenantInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SendEmailTenantInvitation(ctx, req.(*SendEmailTenantInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitProfiles(ctx, req.(*ListBusinessUnitProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitProfile(ctx, req.(*CreateBusinessUnitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitProfile(ctx, req.(*GetBusinessUnitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitProfile(ctx, req.(*UpdateBusinessUnitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitProfile(ctx, req.(*DeleteBusinessUnitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateSystemNotificationUsersInBusinessUnitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemNotificationUsersInBusinessUnitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateSystemNotificationUsersInBusinessUnitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateSystemNotificationUsersInBusinessUnitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateSystemNotificationUsersInBusinessUnitProfile(ctx, req.(*UpdateSystemNotificationUsersInBusinessUnitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitFinancials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitFinancialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitFinancials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitFinancials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitFinancials(ctx, req.(*ListBusinessUnitFinancialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitFinancial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitFinancialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitFinancial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitFinancial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitFinancial(ctx, req.(*CreateBusinessUnitFinancialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitFinancial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitFinancialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitFinancial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitFinancial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitFinancial(ctx, req.(*GetBusinessUnitFinancialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitFinancial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitFinancialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitFinancial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitFinancial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitFinancial(ctx, req.(*UpdateBusinessUnitFinancialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitFinancial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitFinancialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitFinancial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitFinancial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitFinancial(ctx, req.(*DeleteBusinessUnitFinancialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitBranchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitBranchsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitBranchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitBranchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitBranchs(ctx, req.(*ListBusinessUnitBranchsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitBranch(ctx, req.(*CreateBusinessUnitBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitBranch(ctx, req.(*GetBusinessUnitBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitBranch(ctx, req.(*UpdateBusinessUnitBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitBranch(ctx, req.(*DeleteBusinessUnitBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitFacilitiess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitFacilitiessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitFacilitiess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitFacilitiess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitFacilitiess(ctx, req.(*ListBusinessUnitFacilitiessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitFacilities(ctx, req.(*CreateBusinessUnitFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitFacilities(ctx, req.(*GetBusinessUnitFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitFacilities(ctx, req.(*UpdateBusinessUnitFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitFacilities(ctx, req.(*DeleteBusinessUnitFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitCertificates(ctx, req.(*ListBusinessUnitCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitCertificate(ctx, req.(*CreateBusinessUnitCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitCertificate(ctx, req.(*GetBusinessUnitCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitCertificate(ctx, req.(*UpdateBusinessUnitCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitCertificate(ctx, req.(*DeleteBusinessUnitCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitStrengths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitStrengthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitStrengths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitStrengths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitStrengths(ctx, req.(*ListBusinessUnitStrengthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitStrength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitStrengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitStrength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitStrength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitStrength(ctx, req.(*CreateBusinessUnitStrengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitStrength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitStrengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitStrength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitStrength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitStrength(ctx, req.(*GetBusinessUnitStrengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitStrength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitStrengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitStrength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitStrength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitStrength(ctx, req.(*UpdateBusinessUnitStrengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitStrength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitStrengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitStrength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitStrength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitStrength(ctx, req.(*DeleteBusinessUnitStrengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitSkills(ctx, req.(*ListBusinessUnitSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitSkill(ctx, req.(*CreateBusinessUnitSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitSkill(ctx, req.(*GetBusinessUnitSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitSkill(ctx, req.(*UpdateBusinessUnitSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitSkill(ctx, req.(*DeleteBusinessUnitSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitSkillTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitSkillTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitSkillTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitSkillTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitSkillTree(ctx, req.(*GetBusinessUnitSkillTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitContactHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitContactHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContactHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContactHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContactHeaders(ctx, req.(*ListBusinessUnitContactHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitContactHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitContactHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitContactHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitContactHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitContactHeader(ctx, req.(*CreateBusinessUnitContactHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitContactHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitContactHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContactHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContactHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContactHeader(ctx, req.(*GetBusinessUnitContactHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitContactHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitContactHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitContactHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitContactHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitContactHeader(ctx, req.(*UpdateBusinessUnitContactHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitContactHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitContactHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitContactHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitContactHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitContactHeader(ctx, req.(*DeleteBusinessUnitContactHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContacts(ctx, req.(*ListBusinessUnitContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitContact(ctx, req.(*CreateBusinessUnitContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContact(ctx, req.(*GetBusinessUnitContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitContact(ctx, req.(*UpdateBusinessUnitContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitContact(ctx, req.(*DeleteBusinessUnitContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitContactAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitContactAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContactAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContactAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContactAttributes(ctx, req.(*ListBusinessUnitContactAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitContactAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitContactAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitContactAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitContactAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitContactAttribute(ctx, req.(*CreateBusinessUnitContactAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitContactAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitContactAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContactAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContactAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContactAttribute(ctx, req.(*GetBusinessUnitContactAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitContactAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitContactAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitContactAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitContactAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitContactAttribute(ctx, req.(*UpdateBusinessUnitContactAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitContactAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitContactAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitContactAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitContactAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitContactAttribute(ctx, req.(*DeleteBusinessUnitContactAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListTokyoShokoResearchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokyoShokoResearchsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListTokyoShokoResearchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListTokyoShokoResearchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListTokyoShokoResearchs(ctx, req.(*ListTokyoShokoResearchsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateTokyoShokoResearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokyoShokoResearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateTokyoShokoResearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateTokyoShokoResearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateTokyoShokoResearch(ctx, req.(*CreateTokyoShokoResearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetTokyoShokoResearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokyoShokoResearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetTokyoShokoResearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetTokyoShokoResearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetTokyoShokoResearch(ctx, req.(*GetTokyoShokoResearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateTokyoShokoResearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokyoShokoResearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateTokyoShokoResearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateTokyoShokoResearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateTokyoShokoResearch(ctx, req.(*UpdateTokyoShokoResearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteTokyoShokoResearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokyoShokoResearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteTokyoShokoResearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteTokyoShokoResearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteTokyoShokoResearch(ctx, req.(*DeleteTokyoShokoResearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListTokyoShokoResearchCompanyProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokyoShokoResearchCompanyProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListTokyoShokoResearchCompanyProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListTokyoShokoResearchCompanyProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListTokyoShokoResearchCompanyProfiles(ctx, req.(*ListTokyoShokoResearchCompanyProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateTokyoShokoResearchCompanyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokyoShokoResearchCompanyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateTokyoShokoResearchCompanyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateTokyoShokoResearchCompanyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateTokyoShokoResearchCompanyProfile(ctx, req.(*CreateTokyoShokoResearchCompanyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetTokyoShokoResearchCompanyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokyoShokoResearchCompanyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetTokyoShokoResearchCompanyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetTokyoShokoResearchCompanyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetTokyoShokoResearchCompanyProfile(ctx, req.(*GetTokyoShokoResearchCompanyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateTokyoShokoResearchCompanyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokyoShokoResearchCompanyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateTokyoShokoResearchCompanyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateTokyoShokoResearchCompanyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateTokyoShokoResearchCompanyProfile(ctx, req.(*UpdateTokyoShokoResearchCompanyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteTokyoShokoResearchCompanyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokyoShokoResearchCompanyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteTokyoShokoResearchCompanyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteTokyoShokoResearchCompanyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteTokyoShokoResearchCompanyProfile(ctx, req.(*DeleteTokyoShokoResearchCompanyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListTokyoShokoResearchRiskScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokyoShokoResearchRiskScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListTokyoShokoResearchRiskScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListTokyoShokoResearchRiskScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListTokyoShokoResearchRiskScores(ctx, req.(*ListTokyoShokoResearchRiskScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateTokyoShokoResearchRiskScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokyoShokoResearchRiskScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateTokyoShokoResearchRiskScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateTokyoShokoResearchRiskScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateTokyoShokoResearchRiskScore(ctx, req.(*CreateTokyoShokoResearchRiskScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetTokyoShokoResearchRiskScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokyoShokoResearchRiskScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetTokyoShokoResearchRiskScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetTokyoShokoResearchRiskScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetTokyoShokoResearchRiskScore(ctx, req.(*GetTokyoShokoResearchRiskScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateTokyoShokoResearchRiskScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokyoShokoResearchRiskScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateTokyoShokoResearchRiskScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateTokyoShokoResearchRiskScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateTokyoShokoResearchRiskScore(ctx, req.(*UpdateTokyoShokoResearchRiskScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteTokyoShokoResearchRiskScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokyoShokoResearchRiskScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteTokyoShokoResearchRiskScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteTokyoShokoResearchRiskScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteTokyoShokoResearchRiskScore(ctx, req.(*DeleteTokyoShokoResearchRiskScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitScoreAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitScoreAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitScoreAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitScoreAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitScoreAssets(ctx, req.(*ListBusinessUnitScoreAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitScoreAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitScoreAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitScoreAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitScoreAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitScoreAsset(ctx, req.(*CreateBusinessUnitScoreAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitScoreAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitScoreAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitScoreAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitScoreAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitScoreAsset(ctx, req.(*GetBusinessUnitScoreAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitScoreAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitScoreAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitScoreAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitScoreAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitScoreAsset(ctx, req.(*UpdateBusinessUnitScoreAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitScoreAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitScoreAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitScoreAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitScoreAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitScoreAsset(ctx, req.(*DeleteBusinessUnitScoreAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitDocuments(ctx, req.(*ListBusinessUnitDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitDocument(ctx, req.(*CreateBusinessUnitDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitDocument(ctx, req.(*GetBusinessUnitDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitDocument(ctx, req.(*UpdateBusinessUnitDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitDocument(ctx, req.(*DeleteBusinessUnitDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitActiveControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitActiveControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitActiveControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitActiveControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitActiveControls(ctx, req.(*ListBusinessUnitActiveControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitActiveControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitActiveControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitActiveControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitActiveControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitActiveControl(ctx, req.(*CreateBusinessUnitActiveControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitActiveControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitActiveControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitActiveControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitActiveControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitActiveControl(ctx, req.(*GetBusinessUnitActiveControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitActiveControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitActiveControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitActiveControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitActiveControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitActiveControl(ctx, req.(*UpdateBusinessUnitActiveControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitActiveControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitActiveControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitActiveControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitActiveControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitActiveControl(ctx, req.(*DeleteBusinessUnitActiveControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitSnapshots(ctx, req.(*ListBusinessUnitSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitSnapshot(ctx, req.(*CreateBusinessUnitSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitSnapshot(ctx, req.(*GetBusinessUnitSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitSnapshot(ctx, req.(*UpdateBusinessUnitSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitSnapshot(ctx, req.(*DeleteBusinessUnitSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitChangeNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitChangeNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitChangeNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitChangeNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitChangeNotifications(ctx, req.(*ListBusinessUnitChangeNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_CreateBusinessUnitChangeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUnitChangeNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitChangeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/CreateBusinessUnitChangeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).CreateBusinessUnitChangeNotification(ctx, req.(*CreateBusinessUnitChangeNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitChangeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitChangeNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitChangeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitChangeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitChangeNotification(ctx, req.(*GetBusinessUnitChangeNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_UpdateBusinessUnitChangeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUnitChangeNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitChangeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/UpdateBusinessUnitChangeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).UpdateBusinessUnitChangeNotification(ctx, req.(*UpdateBusinessUnitChangeNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_DeleteBusinessUnitChangeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessUnitChangeNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitChangeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/DeleteBusinessUnitChangeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).DeleteBusinessUnitChangeNotification(ctx, req.(*DeleteBusinessUnitChangeNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitContactContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitContactContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContactContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitContactContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitContactContents(ctx, req.(*ListBusinessUnitContactContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitContactContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitContactContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContactContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitContactContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitContactContent(ctx, req.(*GetBusinessUnitContactContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitScoreContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitScoreContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitScoreContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitScoreContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitScoreContents(ctx, req.(*ListBusinessUnitScoreContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_GetBusinessUnitScoreContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessUnitScoreContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitScoreContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/GetBusinessUnitScoreContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).GetBusinessUnitScoreContent(ctx, req.(*GetBusinessUnitScoreContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitProfiles(ctx, req.(*SharedListBusinessUnitProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitProfile(ctx, req.(*SharedGetBusinessUnitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitFinancials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitFinancialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitFinancials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitFinancials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitFinancials(ctx, req.(*SharedListBusinessUnitFinancialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitFinancial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitFinancialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitFinancial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitFinancial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitFinancial(ctx, req.(*SharedGetBusinessUnitFinancialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitBranchs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitBranchsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitBranchs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitBranchs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitBranchs(ctx, req.(*SharedListBusinessUnitBranchsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitBranch(ctx, req.(*SharedGetBusinessUnitBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitFacilitiess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitFacilitiessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitFacilitiess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitFacilitiess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitFacilitiess(ctx, req.(*SharedListBusinessUnitFacilitiessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitFacilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitFacilities(ctx, req.(*SharedGetBusinessUnitFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitCertificates(ctx, req.(*SharedListBusinessUnitCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitCertificate(ctx, req.(*SharedGetBusinessUnitCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitStrengths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitStrengthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitStrengths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitStrengths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitStrengths(ctx, req.(*SharedListBusinessUnitStrengthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitStrength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitStrengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitStrength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitStrength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitStrength(ctx, req.(*SharedGetBusinessUnitStrengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedListBusinessUnitSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListBusinessUnitSkillsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedListBusinessUnitSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedListBusinessUnitSkills(ctx, req.(*SharedListBusinessUnitSkillsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharedGetBusinessUnitSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetBusinessUnitSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharedGetBusinessUnitSkill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharedGetBusinessUnitSkill(ctx, req.(*SharedGetBusinessUnitSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharetoBusinessUnitContactHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoBusinessUnitContactHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharetoBusinessUnitContactHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharetoBusinessUnitContactHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharetoBusinessUnitContactHeader(ctx, req.(*SharetoBusinessUnitContactHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharetoBusinessUnitContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoBusinessUnitContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharetoBusinessUnitContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharetoBusinessUnitContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharetoBusinessUnitContact(ctx, req.(*SharetoBusinessUnitContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_SharetoBusinessUnitActiveControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoBusinessUnitActiveControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).SharetoBusinessUnitActiveControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/SharetoBusinessUnitActiveControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).SharetoBusinessUnitActiveControl(ctx, req.(*SharetoBusinessUnitActiveControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ActivateBusinessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateBusinessUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ActivateBusinessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ActivateBusinessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ActivateBusinessUnit(ctx, req.(*ActivateBusinessUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_InactivateBusinessUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InactivateBusinessUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).InactivateBusinessUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/InactivateBusinessUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).InactivateBusinessUnit(ctx, req.(*InactivateBusinessUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_StartBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).StartBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/StartBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).StartBusiness(ctx, req.(*StartBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_StopBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).StopBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/StopBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).StopBusiness(ctx, req.(*StopBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ConfirmBusinessUnitChangeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmBusinessUnitChangeNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ConfirmBusinessUnitChangeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ConfirmBusinessUnitChangeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ConfirmBusinessUnitChangeNotification(ctx, req.(*ConfirmBusinessUnitChangeNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ExportBusinessUnitManagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBusinessUnitManagementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ExportBusinessUnitManagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ExportBusinessUnitManagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ExportBusinessUnitManagements(ctx, req.(*ExportBusinessUnitManagementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ImportBusinessUnitManagements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBusinessUnitManagementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ImportBusinessUnitManagements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ImportBusinessUnitManagements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ImportBusinessUnitManagements(ctx, req.(*ImportBusinessUnitManagementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitManagementFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitManagementFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagementFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagementFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagementFormats(ctx, req.(*ListBusinessUnitManagementFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ExportBusinessUnitScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBusinessUnitScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ExportBusinessUnitScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ExportBusinessUnitScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ExportBusinessUnitScores(ctx, req.(*ExportBusinessUnitScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ImportBusinessUnitScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBusinessUnitScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ImportBusinessUnitScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ImportBusinessUnitScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ImportBusinessUnitScores(ctx, req.(*ImportBusinessUnitScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitScoreFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitScoreFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitScoreFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitScoreFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitScoreFormats(ctx, req.(*ListBusinessUnitScoreFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ExportBusinessUnitManagementItemValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBusinessUnitManagementItemValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ExportBusinessUnitManagementItemValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ExportBusinessUnitManagementItemValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ExportBusinessUnitManagementItemValues(ctx, req.(*ExportBusinessUnitManagementItemValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ImportBusinessUnitManagementItemValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBusinessUnitManagementItemValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ImportBusinessUnitManagementItemValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ImportBusinessUnitManagementItemValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ImportBusinessUnitManagementItemValues(ctx, req.(*ImportBusinessUnitManagementItemValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessUnitManagementService_ListBusinessUnitManagementItemValueFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessUnitManagementItemValueFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagementItemValueFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.company.BusinessUnitManagementService/ListBusinessUnitManagementItemValueFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessUnitManagementServiceServer).ListBusinessUnitManagementItemValueFormats(ctx, req.(*ListBusinessUnitManagementItemValueFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessUnitManagementService_ServiceDesc is the grpc.ServiceDesc for BusinessUnitManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessUnitManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.company.BusinessUnitManagementService",
	HandlerType: (*BusinessUnitManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBusinessUnitManagements",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitManagements_Handler,
		},
		{
			MethodName: "GetBusinessUnitManagement",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitManagement_Handler,
		},
		{
			MethodName: "CreateBusinessUnitManagement",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitManagement_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitManagement",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitManagement_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitManagement",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitManagement_Handler,
		},
		{
			MethodName: "ImportOldBusinessUnitManagements",
			Handler:    _BusinessUnitManagementService_ImportOldBusinessUnitManagements_Handler,
		},
		{
			MethodName: "ExportOldBusinessUnitManagements",
			Handler:    _BusinessUnitManagementService_ExportOldBusinessUnitManagements_Handler,
		},
		{
			MethodName: "ListOldBusinessUnitManagementFormats",
			Handler:    _BusinessUnitManagementService_ListOldBusinessUnitManagementFormats_Handler,
		},
		{
			MethodName: "ListBusinessUnitManagementContents",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitManagementContents_Handler,
		},
		{
			MethodName: "GetBusinessUnitManagementContent",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitManagementContent_Handler,
		},
		{
			MethodName: "ListHistorys",
			Handler:    _BusinessUnitManagementService_ListHistorys_Handler,
		},
		{
			MethodName: "SendEmailTenantInvitation",
			Handler:    _BusinessUnitManagementService_SendEmailTenantInvitation_Handler,
		},
		{
			MethodName: "ListBusinessUnitProfiles",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitProfiles_Handler,
		},
		{
			MethodName: "CreateBusinessUnitProfile",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitProfile_Handler,
		},
		{
			MethodName: "GetBusinessUnitProfile",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitProfile_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitProfile",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitProfile_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitProfile",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitProfile_Handler,
		},
		{
			MethodName: "UpdateSystemNotificationUsersInBusinessUnitProfile",
			Handler:    _BusinessUnitManagementService_UpdateSystemNotificationUsersInBusinessUnitProfile_Handler,
		},
		{
			MethodName: "ListBusinessUnitFinancials",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitFinancials_Handler,
		},
		{
			MethodName: "CreateBusinessUnitFinancial",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitFinancial_Handler,
		},
		{
			MethodName: "GetBusinessUnitFinancial",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitFinancial_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitFinancial",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitFinancial_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitFinancial",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitFinancial_Handler,
		},
		{
			MethodName: "ListBusinessUnitBranchs",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitBranchs_Handler,
		},
		{
			MethodName: "CreateBusinessUnitBranch",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitBranch_Handler,
		},
		{
			MethodName: "GetBusinessUnitBranch",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitBranch_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitBranch",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitBranch_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitBranch",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitBranch_Handler,
		},
		{
			MethodName: "ListBusinessUnitFacilitiess",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitFacilitiess_Handler,
		},
		{
			MethodName: "CreateBusinessUnitFacilities",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitFacilities_Handler,
		},
		{
			MethodName: "GetBusinessUnitFacilities",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitFacilities_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitFacilities",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitFacilities_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitFacilities",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitFacilities_Handler,
		},
		{
			MethodName: "ListBusinessUnitCertificates",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitCertificates_Handler,
		},
		{
			MethodName: "CreateBusinessUnitCertificate",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitCertificate_Handler,
		},
		{
			MethodName: "GetBusinessUnitCertificate",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitCertificate_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitCertificate",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitCertificate_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitCertificate",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitCertificate_Handler,
		},
		{
			MethodName: "ListBusinessUnitStrengths",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitStrengths_Handler,
		},
		{
			MethodName: "CreateBusinessUnitStrength",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitStrength_Handler,
		},
		{
			MethodName: "GetBusinessUnitStrength",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitStrength_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitStrength",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitStrength_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitStrength",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitStrength_Handler,
		},
		{
			MethodName: "ListBusinessUnitSkills",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitSkills_Handler,
		},
		{
			MethodName: "CreateBusinessUnitSkill",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitSkill_Handler,
		},
		{
			MethodName: "GetBusinessUnitSkill",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitSkill_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitSkill",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitSkill_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitSkill",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitSkill_Handler,
		},
		{
			MethodName: "GetBusinessUnitSkillTree",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitSkillTree_Handler,
		},
		{
			MethodName: "ListBusinessUnitContactHeaders",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitContactHeaders_Handler,
		},
		{
			MethodName: "CreateBusinessUnitContactHeader",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitContactHeader_Handler,
		},
		{
			MethodName: "GetBusinessUnitContactHeader",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitContactHeader_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitContactHeader",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitContactHeader_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitContactHeader",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitContactHeader_Handler,
		},
		{
			MethodName: "ListBusinessUnitContacts",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitContacts_Handler,
		},
		{
			MethodName: "CreateBusinessUnitContact",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitContact_Handler,
		},
		{
			MethodName: "GetBusinessUnitContact",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitContact_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitContact",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitContact_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitContact",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitContact_Handler,
		},
		{
			MethodName: "ListBusinessUnitContactAttributes",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitContactAttributes_Handler,
		},
		{
			MethodName: "CreateBusinessUnitContactAttribute",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitContactAttribute_Handler,
		},
		{
			MethodName: "GetBusinessUnitContactAttribute",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitContactAttribute_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitContactAttribute",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitContactAttribute_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitContactAttribute",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitContactAttribute_Handler,
		},
		{
			MethodName: "ListTokyoShokoResearchs",
			Handler:    _BusinessUnitManagementService_ListTokyoShokoResearchs_Handler,
		},
		{
			MethodName: "CreateTokyoShokoResearch",
			Handler:    _BusinessUnitManagementService_CreateTokyoShokoResearch_Handler,
		},
		{
			MethodName: "GetTokyoShokoResearch",
			Handler:    _BusinessUnitManagementService_GetTokyoShokoResearch_Handler,
		},
		{
			MethodName: "UpdateTokyoShokoResearch",
			Handler:    _BusinessUnitManagementService_UpdateTokyoShokoResearch_Handler,
		},
		{
			MethodName: "DeleteTokyoShokoResearch",
			Handler:    _BusinessUnitManagementService_DeleteTokyoShokoResearch_Handler,
		},
		{
			MethodName: "ListTokyoShokoResearchCompanyProfiles",
			Handler:    _BusinessUnitManagementService_ListTokyoShokoResearchCompanyProfiles_Handler,
		},
		{
			MethodName: "CreateTokyoShokoResearchCompanyProfile",
			Handler:    _BusinessUnitManagementService_CreateTokyoShokoResearchCompanyProfile_Handler,
		},
		{
			MethodName: "GetTokyoShokoResearchCompanyProfile",
			Handler:    _BusinessUnitManagementService_GetTokyoShokoResearchCompanyProfile_Handler,
		},
		{
			MethodName: "UpdateTokyoShokoResearchCompanyProfile",
			Handler:    _BusinessUnitManagementService_UpdateTokyoShokoResearchCompanyProfile_Handler,
		},
		{
			MethodName: "DeleteTokyoShokoResearchCompanyProfile",
			Handler:    _BusinessUnitManagementService_DeleteTokyoShokoResearchCompanyProfile_Handler,
		},
		{
			MethodName: "ListTokyoShokoResearchRiskScores",
			Handler:    _BusinessUnitManagementService_ListTokyoShokoResearchRiskScores_Handler,
		},
		{
			MethodName: "CreateTokyoShokoResearchRiskScore",
			Handler:    _BusinessUnitManagementService_CreateTokyoShokoResearchRiskScore_Handler,
		},
		{
			MethodName: "GetTokyoShokoResearchRiskScore",
			Handler:    _BusinessUnitManagementService_GetTokyoShokoResearchRiskScore_Handler,
		},
		{
			MethodName: "UpdateTokyoShokoResearchRiskScore",
			Handler:    _BusinessUnitManagementService_UpdateTokyoShokoResearchRiskScore_Handler,
		},
		{
			MethodName: "DeleteTokyoShokoResearchRiskScore",
			Handler:    _BusinessUnitManagementService_DeleteTokyoShokoResearchRiskScore_Handler,
		},
		{
			MethodName: "ListBusinessUnitScoreAssets",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitScoreAssets_Handler,
		},
		{
			MethodName: "CreateBusinessUnitScoreAsset",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitScoreAsset_Handler,
		},
		{
			MethodName: "GetBusinessUnitScoreAsset",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitScoreAsset_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitScoreAsset",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitScoreAsset_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitScoreAsset",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitScoreAsset_Handler,
		},
		{
			MethodName: "ListBusinessUnitDocuments",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitDocuments_Handler,
		},
		{
			MethodName: "CreateBusinessUnitDocument",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitDocument_Handler,
		},
		{
			MethodName: "GetBusinessUnitDocument",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitDocument_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitDocument",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitDocument_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitDocument",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitDocument_Handler,
		},
		{
			MethodName: "ListBusinessUnitActiveControls",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitActiveControls_Handler,
		},
		{
			MethodName: "CreateBusinessUnitActiveControl",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitActiveControl_Handler,
		},
		{
			MethodName: "GetBusinessUnitActiveControl",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitActiveControl_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitActiveControl",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitActiveControl_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitActiveControl",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitActiveControl_Handler,
		},
		{
			MethodName: "ListBusinessUnitSnapshots",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitSnapshots_Handler,
		},
		{
			MethodName: "CreateBusinessUnitSnapshot",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitSnapshot_Handler,
		},
		{
			MethodName: "GetBusinessUnitSnapshot",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitSnapshot_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitSnapshot",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitSnapshot_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitSnapshot",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitSnapshot_Handler,
		},
		{
			MethodName: "ListBusinessUnitChangeNotifications",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitChangeNotifications_Handler,
		},
		{
			MethodName: "CreateBusinessUnitChangeNotification",
			Handler:    _BusinessUnitManagementService_CreateBusinessUnitChangeNotification_Handler,
		},
		{
			MethodName: "GetBusinessUnitChangeNotification",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitChangeNotification_Handler,
		},
		{
			MethodName: "UpdateBusinessUnitChangeNotification",
			Handler:    _BusinessUnitManagementService_UpdateBusinessUnitChangeNotification_Handler,
		},
		{
			MethodName: "DeleteBusinessUnitChangeNotification",
			Handler:    _BusinessUnitManagementService_DeleteBusinessUnitChangeNotification_Handler,
		},
		{
			MethodName: "ListBusinessUnitContactContents",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitContactContents_Handler,
		},
		{
			MethodName: "GetBusinessUnitContactContent",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitContactContent_Handler,
		},
		{
			MethodName: "ListBusinessUnitScoreContents",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitScoreContents_Handler,
		},
		{
			MethodName: "GetBusinessUnitScoreContent",
			Handler:    _BusinessUnitManagementService_GetBusinessUnitScoreContent_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitProfiles",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitProfiles_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitProfile",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitProfile_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitFinancials",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitFinancials_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitFinancial",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitFinancial_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitBranchs",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitBranchs_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitBranch",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitBranch_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitFacilitiess",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitFacilitiess_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitFacilities",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitFacilities_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitCertificates",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitCertificates_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitCertificate",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitCertificate_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitStrengths",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitStrengths_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitStrength",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitStrength_Handler,
		},
		{
			MethodName: "SharedListBusinessUnitSkills",
			Handler:    _BusinessUnitManagementService_SharedListBusinessUnitSkills_Handler,
		},
		{
			MethodName: "SharedGetBusinessUnitSkill",
			Handler:    _BusinessUnitManagementService_SharedGetBusinessUnitSkill_Handler,
		},
		{
			MethodName: "SharetoBusinessUnitContactHeader",
			Handler:    _BusinessUnitManagementService_SharetoBusinessUnitContactHeader_Handler,
		},
		{
			MethodName: "SharetoBusinessUnitContact",
			Handler:    _BusinessUnitManagementService_SharetoBusinessUnitContact_Handler,
		},
		{
			MethodName: "SharetoBusinessUnitActiveControl",
			Handler:    _BusinessUnitManagementService_SharetoBusinessUnitActiveControl_Handler,
		},
		{
			MethodName: "ActivateBusinessUnit",
			Handler:    _BusinessUnitManagementService_ActivateBusinessUnit_Handler,
		},
		{
			MethodName: "InactivateBusinessUnit",
			Handler:    _BusinessUnitManagementService_InactivateBusinessUnit_Handler,
		},
		{
			MethodName: "StartBusiness",
			Handler:    _BusinessUnitManagementService_StartBusiness_Handler,
		},
		{
			MethodName: "StopBusiness",
			Handler:    _BusinessUnitManagementService_StopBusiness_Handler,
		},
		{
			MethodName: "ConfirmBusinessUnitChangeNotification",
			Handler:    _BusinessUnitManagementService_ConfirmBusinessUnitChangeNotification_Handler,
		},
		{
			MethodName: "ExportBusinessUnitManagements",
			Handler:    _BusinessUnitManagementService_ExportBusinessUnitManagements_Handler,
		},
		{
			MethodName: "ImportBusinessUnitManagements",
			Handler:    _BusinessUnitManagementService_ImportBusinessUnitManagements_Handler,
		},
		{
			MethodName: "ListBusinessUnitManagementFormats",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitManagementFormats_Handler,
		},
		{
			MethodName: "ExportBusinessUnitScores",
			Handler:    _BusinessUnitManagementService_ExportBusinessUnitScores_Handler,
		},
		{
			MethodName: "ImportBusinessUnitScores",
			Handler:    _BusinessUnitManagementService_ImportBusinessUnitScores_Handler,
		},
		{
			MethodName: "ListBusinessUnitScoreFormats",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitScoreFormats_Handler,
		},
		{
			MethodName: "ExportBusinessUnitManagementItemValues",
			Handler:    _BusinessUnitManagementService_ExportBusinessUnitManagementItemValues_Handler,
		},
		{
			MethodName: "ImportBusinessUnitManagementItemValues",
			Handler:    _BusinessUnitManagementService_ImportBusinessUnitManagementItemValues_Handler,
		},
		{
			MethodName: "ListBusinessUnitManagementItemValueFormats",
			Handler:    _BusinessUnitManagementService_ListBusinessUnitManagementItemValueFormats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}
