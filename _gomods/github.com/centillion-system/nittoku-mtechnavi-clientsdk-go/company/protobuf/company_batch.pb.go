// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: company_batch.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskLinkBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// 紐づけるテナントID
	LinkTenantId string `protobuf:"bytes,2,opt,name=link_tenant_id,json=linkTenantId,proto3" json:"link_tenant_id,omitempty"`
	// 会社名
	CompanyDisplayName string `protobuf:"bytes,4,opt,name=company_display_name,json=companyDisplayName,proto3" json:"company_display_name,omitempty"`
	// 招待テナントID
	InviteBy string `protobuf:"bytes,3,opt,name=invite_by,json=inviteBy,proto3" json:"invite_by,omitempty"`
	// Adminユーザー
	AdminUser *protobuf.UserReference `protobuf:"bytes,5,opt,name=admin_user,json=adminUser,proto3" json:"admin_user,omitempty"`
}

func (x *TaskLinkBusinessUnitManagementRequest) Reset() {
	*x = TaskLinkBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLinkBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLinkBusinessUnitManagementRequest) ProtoMessage() {}

func (x *TaskLinkBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLinkBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*TaskLinkBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{0}
}

func (x *TaskLinkBusinessUnitManagementRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *TaskLinkBusinessUnitManagementRequest) GetLinkTenantId() string {
	if x != nil {
		return x.LinkTenantId
	}
	return ""
}

func (x *TaskLinkBusinessUnitManagementRequest) GetCompanyDisplayName() string {
	if x != nil {
		return x.CompanyDisplayName
	}
	return ""
}

func (x *TaskLinkBusinessUnitManagementRequest) GetInviteBy() string {
	if x != nil {
		return x.InviteBy
	}
	return ""
}

func (x *TaskLinkBusinessUnitManagementRequest) GetAdminUser() *protobuf.UserReference {
	if x != nil {
		return x.AdminUser
	}
	return nil
}

// 非同期Queue(バッチ) 履歴作成
// required tenant_id
// required history_category_name
// required content_name
// required occurred_at
// required type_name
// required record_id
type TaskCreateHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 分類
	HistoryCategoryName string `protobuf:"bytes,2,opt,name=history_category_name,json=historyCategoryName,proto3" json:"history_category_name,omitempty"`
	// 内容
	ContentName string `protobuf:"bytes,3,opt,name=content_name,json=contentName,proto3" json:"content_name,omitempty"`
	// 内容パラメータ
	ContentParamaters []string `protobuf:"bytes,4,rep,name=content_paramaters,json=contentParamaters,proto3" json:"content_paramaters,omitempty"`
	// 発生日
	OccurredAt int64 `protobuf:"varint,5,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// 通知レベル
	Level int64 `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	// 伝票種類
	TypeName string `protobuf:"bytes,7,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// 伝票ID
	RecordId string `protobuf:"bytes,8,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (x *TaskCreateHistoryRequest) Reset() {
	*x = TaskCreateHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateHistoryRequest) ProtoMessage() {}

func (x *TaskCreateHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateHistoryRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateHistoryRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{1}
}

func (x *TaskCreateHistoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetHistoryCategoryName() string {
	if x != nil {
		return x.HistoryCategoryName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetContentName() string {
	if x != nil {
		return x.ContentName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetContentParamaters() []string {
	if x != nil {
		return x.ContentParamaters
	}
	return nil
}

func (x *TaskCreateHistoryRequest) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *TaskCreateHistoryRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TaskCreateHistoryRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

// 非同期Queue(バッチ) メール送信
type TaskNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 通知ID
	NotificationId string `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	// 通知先企業名
	NotificationCompanyName string `protobuf:"bytes,3,opt,name=notification_company_name,json=notificationCompanyName,proto3" json:"notification_company_name,omitempty"`
	// 通知先アカウント
	NotificationUser *protobuf.UserReference `protobuf:"bytes,4,opt,name=notification_user,json=notificationUser,proto3" json:"notification_user,omitempty"`
	// 通知内容
	NotificationSetting *protobuf.NotificationSetting `protobuf:"bytes,5,opt,name=notification_setting,json=notificationSetting,proto3" json:"notification_setting,omitempty"`
}

func (x *TaskNotificationRequest) Reset() {
	*x = TaskNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNotificationRequest) ProtoMessage() {}

func (x *TaskNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNotificationRequest.ProtoReflect.Descriptor instead.
func (*TaskNotificationRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{2}
}

func (x *TaskNotificationRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskNotificationRequest) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *TaskNotificationRequest) GetNotificationCompanyName() string {
	if x != nil {
		return x.NotificationCompanyName
	}
	return ""
}

func (x *TaskNotificationRequest) GetNotificationUser() *protobuf.UserReference {
	if x != nil {
		return x.NotificationUser
	}
	return nil
}

func (x *TaskNotificationRequest) GetNotificationSetting() *protobuf.NotificationSetting {
	if x != nil {
		return x.NotificationSetting
	}
	return nil
}

// 日次（夜間）スケジュール実行
type ScheduleTaskSharetoBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScheduleTaskSharetoBusinessUnitManagementRequest) Reset() {
	*x = ScheduleTaskSharetoBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTaskSharetoBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskSharetoBusinessUnitManagementRequest) ProtoMessage() {}

func (x *ScheduleTaskSharetoBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskSharetoBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*ScheduleTaskSharetoBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{3}
}

// 非同期Queue(バッチ) 自社企業情報公開
// required tenant_id
type TaskSharetoBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 重複チェック用UUID
	ScheduleTaskId string `protobuf:"bytes,2,opt,name=schedule_task_id,json=scheduleTaskId,proto3" json:"schedule_task_id,omitempty"`
	// バッチ開始時間
	OccurredAt int64 `protobuf:"varint,3,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
}

func (x *TaskSharetoBusinessUnitManagementRequest) Reset() {
	*x = TaskSharetoBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSharetoBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSharetoBusinessUnitManagementRequest) ProtoMessage() {}

func (x *TaskSharetoBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSharetoBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*TaskSharetoBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{4}
}

func (x *TaskSharetoBusinessUnitManagementRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskSharetoBusinessUnitManagementRequest) GetScheduleTaskId() string {
	if x != nil {
		return x.ScheduleTaskId
	}
	return ""
}

func (x *TaskSharetoBusinessUnitManagementRequest) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

// 非同期Queue(バッチ) 自社代表連絡先作成
type TaskCreateMainContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// 代表連絡先
	MainContact *protobuf.UserReference `protobuf:"bytes,3,opt,name=main_contact,json=mainContact,proto3" json:"main_contact,omitempty"`
}

func (x *TaskCreateMainContactRequest) Reset() {
	*x = TaskCreateMainContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateMainContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateMainContactRequest) ProtoMessage() {}

func (x *TaskCreateMainContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateMainContactRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateMainContactRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{5}
}

func (x *TaskCreateMainContactRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateMainContactRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *TaskCreateMainContactRequest) GetMainContact() *protobuf.UserReference {
	if x != nil {
		return x.MainContact
	}
	return nil
}

// 非同期Queue(バッチ) 取引先管理（連絡先）公開
type TaskSharetoBusinessUnitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,2,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
}

func (x *TaskSharetoBusinessUnitContactRequest) Reset() {
	*x = TaskSharetoBusinessUnitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSharetoBusinessUnitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSharetoBusinessUnitContactRequest) ProtoMessage() {}

func (x *TaskSharetoBusinessUnitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSharetoBusinessUnitContactRequest.ProtoReflect.Descriptor instead.
func (*TaskSharetoBusinessUnitContactRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{6}
}

func (x *TaskSharetoBusinessUnitContactRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskSharetoBusinessUnitContactRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

// 非同期Queue(バッチ) 更新/通知有効化
type TaskActivateBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 紐づけるテナントID
	LinkTenantId string `protobuf:"bytes,2,opt,name=link_tenant_id,json=linkTenantId,proto3" json:"link_tenant_id,omitempty"`
}

func (x *TaskActivateBusinessUnitRequest) Reset() {
	*x = TaskActivateBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_batch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskActivateBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskActivateBusinessUnitRequest) ProtoMessage() {}

func (x *TaskActivateBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_batch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskActivateBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*TaskActivateBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_batch_proto_rawDescGZIP(), []int{7}
}

func (x *TaskActivateBusinessUnitRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskActivateBusinessUnitRequest) GetLinkTenantId() string {
	if x != nil {
		return x.LinkTenantId
	}
	return ""
}

var File_company_batch_proto protoreflect.FileDescriptor

var file_company_batch_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02, 0x0a, 0x25, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69,
	0x6e, 0x6b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x18,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a,
	0x17, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x32, 0x0a, 0x30, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x28, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1c,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x25, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1f, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x32, 0x9e, 0x07, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x1e, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x5c, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5a,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x29, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7c, 0x0a, 0x21, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x76, 0x0a,
	0x1e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12,
	0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x1c, 0x5a, 0x1a, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_batch_proto_rawDescOnce sync.Once
	file_company_batch_proto_rawDescData = file_company_batch_proto_rawDesc
)

func file_company_batch_proto_rawDescGZIP() []byte {
	file_company_batch_proto_rawDescOnce.Do(func() {
		file_company_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_batch_proto_rawDescData)
	})
	return file_company_batch_proto_rawDescData
}

var file_company_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_company_batch_proto_goTypes = []interface{}{
	(*TaskLinkBusinessUnitManagementRequest)(nil),            // 0: mtechnavi.api.company.TaskLinkBusinessUnitManagementRequest
	(*TaskCreateHistoryRequest)(nil),                         // 1: mtechnavi.api.company.TaskCreateHistoryRequest
	(*TaskNotificationRequest)(nil),                          // 2: mtechnavi.api.company.TaskNotificationRequest
	(*ScheduleTaskSharetoBusinessUnitManagementRequest)(nil), // 3: mtechnavi.api.company.ScheduleTaskSharetoBusinessUnitManagementRequest
	(*TaskSharetoBusinessUnitManagementRequest)(nil),         // 4: mtechnavi.api.company.TaskSharetoBusinessUnitManagementRequest
	(*TaskCreateMainContactRequest)(nil),                     // 5: mtechnavi.api.company.TaskCreateMainContactRequest
	(*TaskSharetoBusinessUnitContactRequest)(nil),            // 6: mtechnavi.api.company.TaskSharetoBusinessUnitContactRequest
	(*TaskActivateBusinessUnitRequest)(nil),                  // 7: mtechnavi.api.company.TaskActivateBusinessUnitRequest
	(*protobuf.UserReference)(nil),                           // 8: sharelib.UserReference
	(*protobuf.NotificationSetting)(nil),                     // 9: sharelib.NotificationSetting
	(*emptypb.Empty)(nil),                                    // 10: google.protobuf.Empty
}
var file_company_batch_proto_depIdxs = []int32{
	8,  // 0: mtechnavi.api.company.TaskLinkBusinessUnitManagementRequest.admin_user:type_name -> sharelib.UserReference
	8,  // 1: mtechnavi.api.company.TaskNotificationRequest.notification_user:type_name -> sharelib.UserReference
	9,  // 2: mtechnavi.api.company.TaskNotificationRequest.notification_setting:type_name -> sharelib.NotificationSetting
	8,  // 3: mtechnavi.api.company.TaskCreateMainContactRequest.main_contact:type_name -> sharelib.UserReference
	0,  // 4: mtechnavi.api.company.CompanyBatchService.TaskLinkBusinessUnitManagement:input_type -> mtechnavi.api.company.TaskLinkBusinessUnitManagementRequest
	1,  // 5: mtechnavi.api.company.CompanyBatchService.TaskCreateHistory:input_type -> mtechnavi.api.company.TaskCreateHistoryRequest
	2,  // 6: mtechnavi.api.company.CompanyBatchService.TaskNotification:input_type -> mtechnavi.api.company.TaskNotificationRequest
	3,  // 7: mtechnavi.api.company.CompanyBatchService.ScheduleTaskSharetoBusinessUnitManagement:input_type -> mtechnavi.api.company.ScheduleTaskSharetoBusinessUnitManagementRequest
	4,  // 8: mtechnavi.api.company.CompanyBatchService.TaskSharetoBusinessUnitManagement:input_type -> mtechnavi.api.company.TaskSharetoBusinessUnitManagementRequest
	5,  // 9: mtechnavi.api.company.CompanyBatchService.TaskCreateMainContact:input_type -> mtechnavi.api.company.TaskCreateMainContactRequest
	6,  // 10: mtechnavi.api.company.CompanyBatchService.TaskSharetoBusinessUnitContact:input_type -> mtechnavi.api.company.TaskSharetoBusinessUnitContactRequest
	7,  // 11: mtechnavi.api.company.CompanyBatchService.TaskActivateBusinessUnit:input_type -> mtechnavi.api.company.TaskActivateBusinessUnitRequest
	10, // 12: mtechnavi.api.company.CompanyBatchService.TaskLinkBusinessUnitManagement:output_type -> google.protobuf.Empty
	10, // 13: mtechnavi.api.company.CompanyBatchService.TaskCreateHistory:output_type -> google.protobuf.Empty
	10, // 14: mtechnavi.api.company.CompanyBatchService.TaskNotification:output_type -> google.protobuf.Empty
	10, // 15: mtechnavi.api.company.CompanyBatchService.ScheduleTaskSharetoBusinessUnitManagement:output_type -> google.protobuf.Empty
	10, // 16: mtechnavi.api.company.CompanyBatchService.TaskSharetoBusinessUnitManagement:output_type -> google.protobuf.Empty
	10, // 17: mtechnavi.api.company.CompanyBatchService.TaskCreateMainContact:output_type -> google.protobuf.Empty
	10, // 18: mtechnavi.api.company.CompanyBatchService.TaskSharetoBusinessUnitContact:output_type -> google.protobuf.Empty
	10, // 19: mtechnavi.api.company.CompanyBatchService.TaskActivateBusinessUnit:output_type -> google.protobuf.Empty
	12, // [12:20] is the sub-list for method output_type
	4,  // [4:12] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_company_batch_proto_init() }
func file_company_batch_proto_init() {
	if File_company_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_company_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLinkBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTaskSharetoBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSharetoBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateMainContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSharetoBusinessUnitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_batch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskActivateBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_company_batch_proto_goTypes,
		DependencyIndexes: file_company_batch_proto_depIdxs,
		MessageInfos:      file_company_batch_proto_msgTypes,
	}.Build()
	File_company_batch_proto = out.File
	file_company_batch_proto_rawDesc = nil
	file_company_batch_proto_goTypes = nil
	file_company_batch_proto_depIdxs = nil
}
