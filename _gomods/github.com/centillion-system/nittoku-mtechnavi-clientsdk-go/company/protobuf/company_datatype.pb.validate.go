// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: company_datatype.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CompanyStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyStatusMultiError, or
// nil if none found.
func (m *CompanyStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatusValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatusValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatusValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyStatusValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyStatusValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyStatusValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyStatusMultiError(errors)
	}

	return nil
}

// CompanyStatusMultiError is an error wrapping multiple validation errors
// returned by CompanyStatus.ValidateAll() if the designated constraints
// aren't met.
type CompanyStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyStatusMultiError) AllErrors() []error { return m }

// CompanyStatusValidationError is the validation error returned by
// CompanyStatus.Validate if the designated constraints aren't met.
type CompanyStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyStatusValidationError) ErrorName() string { return "CompanyStatusValidationError" }

// Error satisfies the builtin error interface
func (e CompanyStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyStatusValidationError{}

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WebsiteUrl

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepresentative()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "Representative",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "Representative",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepresentative()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "Representative",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCapitalStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "CapitalStock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "CapitalStock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapitalStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "CapitalStock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Industry

	// no validation rules for MainBusiness

	// no validation rules for PublicComment

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on CompanyLegalProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyLegalProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyLegalProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyLegalPropertiesMultiError, or nil if none found.
func (m *CompanyLegalProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyLegalProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyNumber

	// no validation rules for EligibleInvoiceAuthorizationNumber

	if len(errors) > 0 {
		return CompanyLegalPropertiesMultiError(errors)
	}

	return nil
}

// CompanyLegalPropertiesMultiError is an error wrapping multiple validation
// errors returned by CompanyLegalProperties.ValidateAll() if the designated
// constraints aren't met.
type CompanyLegalPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyLegalPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyLegalPropertiesMultiError) AllErrors() []error { return m }

// CompanyLegalPropertiesValidationError is the validation error returned by
// CompanyLegalProperties.Validate if the designated constraints aren't met.
type CompanyLegalPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyLegalPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyLegalPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyLegalPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyLegalPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyLegalPropertiesValidationError) ErrorName() string {
	return "CompanyLegalPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyLegalPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyLegalProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyLegalPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyLegalPropertiesValidationError{}

// Validate checks the field values on PostUnitProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostUnitProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostUnitProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostUnitPropertiesMultiError, or nil if none found.
func (m *PostUnitProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *PostUnitProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PostUnitPropertiesMultiError(errors)
	}

	return nil
}

// PostUnitPropertiesMultiError is an error wrapping multiple validation errors
// returned by PostUnitProperties.ValidateAll() if the designated constraints
// aren't met.
type PostUnitPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostUnitPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostUnitPropertiesMultiError) AllErrors() []error { return m }

// PostUnitPropertiesValidationError is the validation error returned by
// PostUnitProperties.Validate if the designated constraints aren't met.
type PostUnitPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostUnitPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostUnitPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostUnitPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostUnitPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostUnitPropertiesValidationError) ErrorName() string {
	return "PostUnitPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e PostUnitPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostUnitProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostUnitPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostUnitPropertiesValidationError{}

// Validate checks the field values on OrganizationUnitProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationUnitProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationUnitProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationUnitPropertiesMultiError, or nil if none found.
func (m *OrganizationUnitProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationUnitProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrganizationUnitPropertiesMultiError(errors)
	}

	return nil
}

// OrganizationUnitPropertiesMultiError is an error wrapping multiple
// validation errors returned by OrganizationUnitProperties.ValidateAll() if
// the designated constraints aren't met.
type OrganizationUnitPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationUnitPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationUnitPropertiesMultiError) AllErrors() []error { return m }

// OrganizationUnitPropertiesValidationError is the validation error returned
// by OrganizationUnitProperties.Validate if the designated constraints aren't met.
type OrganizationUnitPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationUnitPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationUnitPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationUnitPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationUnitPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationUnitPropertiesValidationError) ErrorName() string {
	return "OrganizationUnitPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationUnitPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationUnitProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationUnitPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationUnitPropertiesValidationError{}

// Validate checks the field values on DeliveryPointProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeliveryPointProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeliveryPointProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeliveryPointPropertiesMultiError, or nil if none found.
func (m *DeliveryPointProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *DeliveryPointProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeliveryPointPropertiesMultiError(errors)
	}

	return nil
}

// DeliveryPointPropertiesMultiError is an error wrapping multiple validation
// errors returned by DeliveryPointProperties.ValidateAll() if the designated
// constraints aren't met.
type DeliveryPointPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeliveryPointPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeliveryPointPropertiesMultiError) AllErrors() []error { return m }

// DeliveryPointPropertiesValidationError is the validation error returned by
// DeliveryPointProperties.Validate if the designated constraints aren't met.
type DeliveryPointPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliveryPointPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliveryPointPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliveryPointPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliveryPointPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliveryPointPropertiesValidationError) ErrorName() string {
	return "DeliveryPointPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e DeliveryPointPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliveryPointProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliveryPointPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliveryPointPropertiesValidationError{}

// Validate checks the field values on OfficeProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OfficeProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OfficeProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OfficePropertiesMultiError, or nil if none found.
func (m *OfficeProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *OfficeProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOfficeRank()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfficePropertiesValidationError{
					field:  "OfficeRank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfficePropertiesValidationError{
					field:  "OfficeRank",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOfficeRank()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficePropertiesValidationError{
				field:  "OfficeRank",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OfficePropertiesMultiError(errors)
	}

	return nil
}

// OfficePropertiesMultiError is an error wrapping multiple validation errors
// returned by OfficeProperties.ValidateAll() if the designated constraints
// aren't met.
type OfficePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfficePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfficePropertiesMultiError) AllErrors() []error { return m }

// OfficePropertiesValidationError is the validation error returned by
// OfficeProperties.Validate if the designated constraints aren't met.
type OfficePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficePropertiesValidationError) ErrorName() string { return "OfficePropertiesValidationError" }

// Error satisfies the builtin error interface
func (e OfficePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOfficeProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficePropertiesValidationError{}

// Validate checks the field values on ImageFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageFileMultiError, or nil
// if none found.
func (m *ImageFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for Metadata

	if len(errors) > 0 {
		return ImageFileMultiError(errors)
	}

	return nil
}

// ImageFileMultiError is an error wrapping multiple validation errors returned
// by ImageFile.ValidateAll() if the designated constraints aren't met.
type ImageFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageFileMultiError) AllErrors() []error { return m }

// ImageFileValidationError is the validation error returned by
// ImageFile.Validate if the designated constraints aren't met.
type ImageFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageFileValidationError) ErrorName() string { return "ImageFileValidationError" }

// Error satisfies the builtin error interface
func (e ImageFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageFileValidationError{}

// Validate checks the field values on PostUnit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostUnitMultiError, or nil
// if none found.
func (m *PostUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *PostUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComponentUnitId

	// no validation rules for PostUnitCode

	// no validation rules for DisplayName

	for idx, item := range m.GetPostUnitType() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostUnitValidationError{
						field:  fmt.Sprintf("PostUnitType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostUnitValidationError{
						field:  fmt.Sprintf("PostUnitType[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostUnitValidationError{
					field:  fmt.Sprintf("PostUnitType[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Remarks

	// no validation rules for ComponentUnitCategory

	if all {
		switch v := interface{}(m.GetUsable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostUnitValidationError{
					field:  "Usable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostUnitValidationError{
					field:  "Usable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostUnitValidationError{
				field:  "Usable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostUnitMultiError(errors)
	}

	return nil
}

// PostUnitMultiError is an error wrapping multiple validation errors returned
// by PostUnit.ValidateAll() if the designated constraints aren't met.
type PostUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostUnitMultiError) AllErrors() []error { return m }

// PostUnitValidationError is the validation error returned by
// PostUnit.Validate if the designated constraints aren't met.
type PostUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostUnitValidationError) ErrorName() string { return "PostUnitValidationError" }

// Error satisfies the builtin error interface
func (e PostUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostUnitValidationError{}

// Validate checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProcessMultiError, or nil if none found.
func (m *Process) ValidateAll() error {
	return m.validate(true)
}

func (m *Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcessedAt

	if all {
		switch v := interface{}(m.GetProcessedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "ProcessedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "ProcessedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "ProcessedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProcessedComment

	if len(errors) > 0 {
		return ProcessMultiError(errors)
	}

	return nil
}

// ProcessMultiError is an error wrapping multiple validation errors returned
// by Process.ValidateAll() if the designated constraints aren't met.
type ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessMultiError) AllErrors() []error { return m }

// ProcessValidationError is the validation error returned by Process.Validate
// if the designated constraints aren't met.
type ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessValidationError) ErrorName() string { return "ProcessValidationError" }

// Error satisfies the builtin error interface
func (e ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessValidationError{}

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCountry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressValidationError{
					field:  "Country",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PostalCode

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddressValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddressValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddressValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

// Validate checks the field values on CompanyProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompanyProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyProfile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompanyProfileMultiError,
// or nil if none found.
func (m *CompanyProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayNameLang

	if all {
		switch v := interface{}(m.GetCompanyLegalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "CompanyLegalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "CompanyLegalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompanyLegalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfileValidationError{
				field:  "CompanyLegalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WebsiteUrl

	if all {
		switch v := interface{}(m.GetRepresentative()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "Representative",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "Representative",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepresentative()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfileValidationError{
				field:  "Representative",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfileValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetEmployees()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "Employees",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "Employees",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmployees()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfileValidationError{
				field:  "Employees",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCapitalStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "CapitalStock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfileValidationError{
					field:  "CapitalStock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapitalStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfileValidationError{
				field:  "CapitalStock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MainShareholder

	// no validation rules for MainBank

	// no validation rules for MainSupplier

	// no validation rules for MainCustomer

	// no validation rules for MainBusiness

	if len(errors) > 0 {
		return CompanyProfileMultiError(errors)
	}

	return nil
}

// CompanyProfileMultiError is an error wrapping multiple validation errors
// returned by CompanyProfile.ValidateAll() if the designated constraints
// aren't met.
type CompanyProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyProfileMultiError) AllErrors() []error { return m }

// CompanyProfileValidationError is the validation error returned by
// CompanyProfile.Validate if the designated constraints aren't met.
type CompanyProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyProfileValidationError) ErrorName() string { return "CompanyProfileValidationError" }

// Error satisfies the builtin error interface
func (e CompanyProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyProfileValidationError{}

// Validate checks the field values on ItemValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemValueMultiError, or nil
// if none found.
func (m *ItemValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemKey

	// no validation rules for ItemValue

	// no validation rules for Code

	if len(errors) > 0 {
		return ItemValueMultiError(errors)
	}

	return nil
}

// ItemValueMultiError is an error wrapping multiple validation errors returned
// by ItemValue.ValidateAll() if the designated constraints aren't met.
type ItemValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemValueMultiError) AllErrors() []error { return m }

// ItemValueValidationError is the validation error returned by
// ItemValue.Validate if the designated constraints aren't met.
type ItemValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValueValidationError) ErrorName() string { return "ItemValueValidationError" }

// Error satisfies the builtin error interface
func (e ItemValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValueValidationError{}

// Validate checks the field values on ComparisonItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComparisonItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComparisonItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComparisonItemMultiError,
// or nil if none found.
func (m *ComparisonItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ComparisonItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return ComparisonItemMultiError(errors)
	}

	return nil
}

// ComparisonItemMultiError is an error wrapping multiple validation errors
// returned by ComparisonItem.ValidateAll() if the designated constraints
// aren't met.
type ComparisonItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComparisonItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComparisonItemMultiError) AllErrors() []error { return m }

// ComparisonItemValidationError is the validation error returned by
// ComparisonItem.Validate if the designated constraints aren't met.
type ComparisonItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComparisonItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComparisonItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComparisonItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComparisonItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComparisonItemValidationError) ErrorName() string { return "ComparisonItemValidationError" }

// Error satisfies the builtin error interface
func (e ComparisonItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComparisonItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComparisonItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComparisonItemValidationError{}

// Validate checks the field values on DiffItemBusinessUnitProfile with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiffItemBusinessUnitProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffItemBusinessUnitProfile with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiffItemBusinessUnitProfileMultiError, or nil if none found.
func (m *DiffItemBusinessUnitProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffItemBusinessUnitProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyValue

	if all {
		switch v := interface{}(m.GetDisplayNameLangJa()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "DisplayNameLangJa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "DisplayNameLangJa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDisplayNameLangJa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitProfileValidationError{
				field:  "DisplayNameLangJa",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompanyNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "CompanyNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "CompanyNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompanyNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitProfileValidationError{
				field:  "CompanyNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepresentativeDisplayNameLangJa()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "RepresentativeDisplayNameLangJa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "RepresentativeDisplayNameLangJa",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepresentativeDisplayNameLangJa()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitProfileValidationError{
				field:  "RepresentativeDisplayNameLangJa",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPostalCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "PostalCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "PostalCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostalCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitProfileValidationError{
				field:  "PostalCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitProfileValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCapitalStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "CapitalStock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitProfileValidationError{
					field:  "CapitalStock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapitalStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitProfileValidationError{
				field:  "CapitalStock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiffItemBusinessUnitProfileMultiError(errors)
	}

	return nil
}

// DiffItemBusinessUnitProfileMultiError is an error wrapping multiple
// validation errors returned by DiffItemBusinessUnitProfile.ValidateAll() if
// the designated constraints aren't met.
type DiffItemBusinessUnitProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffItemBusinessUnitProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffItemBusinessUnitProfileMultiError) AllErrors() []error { return m }

// DiffItemBusinessUnitProfileValidationError is the validation error returned
// by DiffItemBusinessUnitProfile.Validate if the designated constraints
// aren't met.
type DiffItemBusinessUnitProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffItemBusinessUnitProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffItemBusinessUnitProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffItemBusinessUnitProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffItemBusinessUnitProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffItemBusinessUnitProfileValidationError) ErrorName() string {
	return "DiffItemBusinessUnitProfileValidationError"
}

// Error satisfies the builtin error interface
func (e DiffItemBusinessUnitProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffItemBusinessUnitProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffItemBusinessUnitProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffItemBusinessUnitProfileValidationError{}

// Validate checks the field values on DiffItemBusinessUnitBranch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiffItemBusinessUnitBranch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffItemBusinessUnitBranch with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiffItemBusinessUnitBranchMultiError, or nil if none found.
func (m *DiffItemBusinessUnitBranch) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffItemBusinessUnitBranch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyValue

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitBranchValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitBranchValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitBranchValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitBranchValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitBranchValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitBranchValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFaxNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitBranchValidationError{
					field:  "FaxNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitBranchValidationError{
					field:  "FaxNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaxNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitBranchValidationError{
				field:  "FaxNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiffItemBusinessUnitBranchMultiError(errors)
	}

	return nil
}

// DiffItemBusinessUnitBranchMultiError is an error wrapping multiple
// validation errors returned by DiffItemBusinessUnitBranch.ValidateAll() if
// the designated constraints aren't met.
type DiffItemBusinessUnitBranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffItemBusinessUnitBranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffItemBusinessUnitBranchMultiError) AllErrors() []error { return m }

// DiffItemBusinessUnitBranchValidationError is the validation error returned
// by DiffItemBusinessUnitBranch.Validate if the designated constraints aren't met.
type DiffItemBusinessUnitBranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffItemBusinessUnitBranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffItemBusinessUnitBranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffItemBusinessUnitBranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffItemBusinessUnitBranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffItemBusinessUnitBranchValidationError) ErrorName() string {
	return "DiffItemBusinessUnitBranchValidationError"
}

// Error satisfies the builtin error interface
func (e DiffItemBusinessUnitBranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffItemBusinessUnitBranch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffItemBusinessUnitBranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffItemBusinessUnitBranchValidationError{}

// Validate checks the field values on DiffItemBusinessUnitCertificate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiffItemBusinessUnitCertificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffItemBusinessUnitCertificate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DiffItemBusinessUnitCertificateMultiError, or nil if none found.
func (m *DiffItemBusinessUnitCertificate) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffItemBusinessUnitCertificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyValue

	if all {
		switch v := interface{}(m.GetObtained()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "Obtained",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "Obtained",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObtained()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "Obtained",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCertificateNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "CertificateNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "CertificateNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificateNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "CertificateNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObtainedDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ObtainedDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ObtainedDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObtainedDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "ObtainedDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpirationDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ExpirationDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ExpirationDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "ExpirationDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObtainPlanDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ObtainPlanDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ObtainPlanDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObtainPlanDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "ObtainPlanDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObtainPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ObtainPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ObtainPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObtainPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "ObtainPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScopeProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ScopeProduct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ScopeProduct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScopeProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "ScopeProduct",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScopeBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ScopeBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitCertificateValidationError{
					field:  "ScopeBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScopeBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitCertificateValidationError{
				field:  "ScopeBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiffItemBusinessUnitCertificateMultiError(errors)
	}

	return nil
}

// DiffItemBusinessUnitCertificateMultiError is an error wrapping multiple
// validation errors returned by DiffItemBusinessUnitCertificate.ValidateAll()
// if the designated constraints aren't met.
type DiffItemBusinessUnitCertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffItemBusinessUnitCertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffItemBusinessUnitCertificateMultiError) AllErrors() []error { return m }

// DiffItemBusinessUnitCertificateValidationError is the validation error
// returned by DiffItemBusinessUnitCertificate.Validate if the designated
// constraints aren't met.
type DiffItemBusinessUnitCertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffItemBusinessUnitCertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffItemBusinessUnitCertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffItemBusinessUnitCertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffItemBusinessUnitCertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffItemBusinessUnitCertificateValidationError) ErrorName() string {
	return "DiffItemBusinessUnitCertificateValidationError"
}

// Error satisfies the builtin error interface
func (e DiffItemBusinessUnitCertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffItemBusinessUnitCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffItemBusinessUnitCertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffItemBusinessUnitCertificateValidationError{}

// Validate checks the field values on DiffItemBusinessUnitContact with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiffItemBusinessUnitContact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffItemBusinessUnitContact with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiffItemBusinessUnitContactMultiError, or nil if none found.
func (m *DiffItemBusinessUnitContact) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffItemBusinessUnitContact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyValue

	if all {
		switch v := interface{}(m.GetBusinessUnitBranchDisplayName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "BusinessUnitBranchDisplayName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "BusinessUnitBranchDisplayName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitBranchDisplayName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitContactValidationError{
				field:  "BusinessUnitBranchDisplayName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitContactValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhoneNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "PhoneNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhoneNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitContactValidationError{
				field:  "PhoneNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFaxNumber()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "FaxNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "FaxNumber",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFaxNumber()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitContactValidationError{
				field:  "FaxNumber",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAlias()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "Alias",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "Alias",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlias()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitContactValidationError{
				field:  "Alias",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotificationUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "NotificationUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffItemBusinessUnitContactValidationError{
					field:  "NotificationUsers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotificationUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffItemBusinessUnitContactValidationError{
				field:  "NotificationUsers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiffItemBusinessUnitContactMultiError(errors)
	}

	return nil
}

// DiffItemBusinessUnitContactMultiError is an error wrapping multiple
// validation errors returned by DiffItemBusinessUnitContact.ValidateAll() if
// the designated constraints aren't met.
type DiffItemBusinessUnitContactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffItemBusinessUnitContactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffItemBusinessUnitContactMultiError) AllErrors() []error { return m }

// DiffItemBusinessUnitContactValidationError is the validation error returned
// by DiffItemBusinessUnitContact.Validate if the designated constraints
// aren't met.
type DiffItemBusinessUnitContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffItemBusinessUnitContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffItemBusinessUnitContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffItemBusinessUnitContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffItemBusinessUnitContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffItemBusinessUnitContactValidationError) ErrorName() string {
	return "DiffItemBusinessUnitContactValidationError"
}

// Error satisfies the builtin error interface
func (e DiffItemBusinessUnitContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffItemBusinessUnitContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffItemBusinessUnitContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffItemBusinessUnitContactValidationError{}

// Validate checks the field values on BusinessUnitBranchProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitBranchProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitBranchProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitBranchPropertiesMultiError, or nil if none found.
func (m *BusinessUnitBranchProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitBranchProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitBranchId

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitBranchPropertiesValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitBranchPropertiesValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitBranchPropertiesValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	// no validation rules for FaxNumber

	if len(errors) > 0 {
		return BusinessUnitBranchPropertiesMultiError(errors)
	}

	return nil
}

// BusinessUnitBranchPropertiesMultiError is an error wrapping multiple
// validation errors returned by BusinessUnitBranchProperties.ValidateAll() if
// the designated constraints aren't met.
type BusinessUnitBranchPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitBranchPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitBranchPropertiesMultiError) AllErrors() []error { return m }

// BusinessUnitBranchPropertiesValidationError is the validation error returned
// by BusinessUnitBranchProperties.Validate if the designated constraints
// aren't met.
type BusinessUnitBranchPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitBranchPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitBranchPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitBranchPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitBranchPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitBranchPropertiesValidationError) ErrorName() string {
	return "BusinessUnitBranchPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitBranchPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitBranchProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitBranchPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitBranchPropertiesValidationError{}

// Validate checks the field values on Profile_Representative with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Profile_Representative) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile_Representative with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Profile_RepresentativeMultiError, or nil if none found.
func (m *Profile_Representative) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile_Representative) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayNameLang

	// no validation rules for Position

	if len(errors) > 0 {
		return Profile_RepresentativeMultiError(errors)
	}

	return nil
}

// Profile_RepresentativeMultiError is an error wrapping multiple validation
// errors returned by Profile_Representative.ValidateAll() if the designated
// constraints aren't met.
type Profile_RepresentativeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Profile_RepresentativeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Profile_RepresentativeMultiError) AllErrors() []error { return m }

// Profile_RepresentativeValidationError is the validation error returned by
// Profile_Representative.Validate if the designated constraints aren't met.
type Profile_RepresentativeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Profile_RepresentativeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Profile_RepresentativeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Profile_RepresentativeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Profile_RepresentativeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Profile_RepresentativeValidationError) ErrorName() string {
	return "Profile_RepresentativeValidationError"
}

// Error satisfies the builtin error interface
func (e Profile_RepresentativeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile_Representative.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Profile_RepresentativeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Profile_RepresentativeValidationError{}

// Validate checks the field values on CompanyProfile_Representative with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyProfile_Representative) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyProfile_Representative with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompanyProfile_RepresentativeMultiError, or nil if none found.
func (m *CompanyProfile_Representative) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyProfile_Representative) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayNameLang

	// no validation rules for Position

	if all {
		switch v := interface{}(m.GetBirthDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfile_RepresentativeValidationError{
					field:  "BirthDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfile_RepresentativeValidationError{
					field:  "BirthDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfile_RepresentativeValidationError{
				field:  "BirthDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyProfile_RepresentativeMultiError(errors)
	}

	return nil
}

// CompanyProfile_RepresentativeMultiError is an error wrapping multiple
// validation errors returned by CompanyProfile_Representative.ValidateAll()
// if the designated constraints aren't met.
type CompanyProfile_RepresentativeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyProfile_RepresentativeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyProfile_RepresentativeMultiError) AllErrors() []error { return m }

// CompanyProfile_RepresentativeValidationError is the validation error
// returned by CompanyProfile_Representative.Validate if the designated
// constraints aren't met.
type CompanyProfile_RepresentativeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyProfile_RepresentativeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyProfile_RepresentativeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyProfile_RepresentativeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyProfile_RepresentativeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyProfile_RepresentativeValidationError) ErrorName() string {
	return "CompanyProfile_RepresentativeValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyProfile_RepresentativeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyProfile_Representative.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyProfile_RepresentativeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyProfile_RepresentativeValidationError{}

// Validate checks the field values on CompanyProfile_Employees with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyProfile_Employees) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyProfile_Employees with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyProfile_EmployeesMultiError, or nil if none found.
func (m *CompanyProfile_Employees) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyProfile_Employees) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	if all {
		switch v := interface{}(m.GetAverageAge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyProfile_EmployeesValidationError{
					field:  "AverageAge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyProfile_EmployeesValidationError{
					field:  "AverageAge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAverageAge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyProfile_EmployeesValidationError{
				field:  "AverageAge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyProfile_EmployeesMultiError(errors)
	}

	return nil
}

// CompanyProfile_EmployeesMultiError is an error wrapping multiple validation
// errors returned by CompanyProfile_Employees.ValidateAll() if the designated
// constraints aren't met.
type CompanyProfile_EmployeesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyProfile_EmployeesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyProfile_EmployeesMultiError) AllErrors() []error { return m }

// CompanyProfile_EmployeesValidationError is the validation error returned by
// CompanyProfile_Employees.Validate if the designated constraints aren't met.
type CompanyProfile_EmployeesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyProfile_EmployeesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyProfile_EmployeesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyProfile_EmployeesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyProfile_EmployeesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyProfile_EmployeesValidationError) ErrorName() string {
	return "CompanyProfile_EmployeesValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyProfile_EmployeesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyProfile_Employees.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyProfile_EmployeesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyProfile_EmployeesValidationError{}
