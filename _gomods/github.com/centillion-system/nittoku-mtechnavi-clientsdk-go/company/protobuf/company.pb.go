// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: company.proto

package protobuf

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCompanyRequest) Reset() {
	*x = GetCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyRequest) ProtoMessage() {}

func (x *GetCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{0}
}

type UpdateCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company *Company `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *UpdateCompanyRequest) Reset() {
	*x = UpdateCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyRequest) ProtoMessage() {}

func (x *UpdateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCompanyRequest) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

type CreateComponentUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentUnit *ComponentUnit `protobuf:"bytes,1,opt,name=component_unit,json=componentUnit,proto3" json:"component_unit,omitempty"`
}

func (x *CreateComponentUnitRequest) Reset() {
	*x = CreateComponentUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateComponentUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComponentUnitRequest) ProtoMessage() {}

func (x *CreateComponentUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComponentUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateComponentUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{2}
}

func (x *CreateComponentUnitRequest) GetComponentUnit() *ComponentUnit {
	if x != nil {
		return x.ComponentUnit
	}
	return nil
}

type ListComponentUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListComponentUnitsRequest) Reset() {
	*x = ListComponentUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComponentUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComponentUnitsRequest) ProtoMessage() {}

func (x *ListComponentUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComponentUnitsRequest.ProtoReflect.Descriptor instead.
func (*ListComponentUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{3}
}

type ListComponentUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*ComponentUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListComponentUnitsResponse) Reset() {
	*x = ListComponentUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComponentUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComponentUnitsResponse) ProtoMessage() {}

func (x *ListComponentUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComponentUnitsResponse.ProtoReflect.Descriptor instead.
func (*ListComponentUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{4}
}

func (x *ListComponentUnitsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListComponentUnitsResponse) GetItems() []*ComponentUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type PublicListComponentUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicListComponentUnitsRequest) Reset() {
	*x = PublicListComponentUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListComponentUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListComponentUnitsRequest) ProtoMessage() {}

func (x *PublicListComponentUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListComponentUnitsRequest.ProtoReflect.Descriptor instead.
func (*PublicListComponentUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{5}
}

type PublicListComponentUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*ComponentUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PublicListComponentUnitsResponse) Reset() {
	*x = PublicListComponentUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListComponentUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListComponentUnitsResponse) ProtoMessage() {}

func (x *PublicListComponentUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListComponentUnitsResponse.ProtoReflect.Descriptor instead.
func (*PublicListComponentUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{6}
}

func (x *PublicListComponentUnitsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PublicListComponentUnitsResponse) GetItems() []*ComponentUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetComponentUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentUnitId string `protobuf:"bytes,1,opt,name=component_unit_id,json=componentUnitId,proto3" json:"component_unit_id,omitempty"`
}

func (x *GetComponentUnitRequest) Reset() {
	*x = GetComponentUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComponentUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComponentUnitRequest) ProtoMessage() {}

func (x *GetComponentUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComponentUnitRequest.ProtoReflect.Descriptor instead.
func (*GetComponentUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{7}
}

func (x *GetComponentUnitRequest) GetComponentUnitId() string {
	if x != nil {
		return x.ComponentUnitId
	}
	return ""
}

type UpdateComponentUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentUnit *ComponentUnit `protobuf:"bytes,1,opt,name=component_unit,json=componentUnit,proto3" json:"component_unit,omitempty"`
}

func (x *UpdateComponentUnitRequest) Reset() {
	*x = UpdateComponentUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateComponentUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateComponentUnitRequest) ProtoMessage() {}

func (x *UpdateComponentUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateComponentUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateComponentUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateComponentUnitRequest) GetComponentUnit() *ComponentUnit {
	if x != nil {
		return x.ComponentUnit
	}
	return nil
}

type DeleteComponentUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentUnit *ComponentUnit `protobuf:"bytes,1,opt,name=component_unit,json=componentUnit,proto3" json:"component_unit,omitempty"`
}

func (x *DeleteComponentUnitRequest) Reset() {
	*x = DeleteComponentUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteComponentUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteComponentUnitRequest) ProtoMessage() {}

func (x *DeleteComponentUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteComponentUnitRequest.ProtoReflect.Descriptor instead.
func (*DeleteComponentUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteComponentUnitRequest) GetComponentUnit() *ComponentUnit {
	if x != nil {
		return x.ComponentUnit
	}
	return nil
}

type CreateBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnit *BusinessUnit `protobuf:"bytes,1,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`
}

func (x *CreateBusinessUnitRequest) Reset() {
	*x = CreateBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitRequest) ProtoMessage() {}

func (x *CreateBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{10}
}

func (x *CreateBusinessUnitRequest) GetBusinessUnit() *BusinessUnit {
	if x != nil {
		return x.BusinessUnit
	}
	return nil
}

type ListBusinessUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// businessUnit_ids
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListBusinessUnitsRequest) Reset() {
	*x = ListBusinessUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitsRequest) ProtoMessage() {}

func (x *ListBusinessUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{11}
}

func (x *ListBusinessUnitsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListBusinessUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*BusinessUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitsResponse) Reset() {
	*x = ListBusinessUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitsResponse) ProtoMessage() {}

func (x *ListBusinessUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{12}
}

func (x *ListBusinessUnitsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitsResponse) GetItems() []*BusinessUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitId string `protobuf:"bytes,1,opt,name=business_unit_id,json=businessUnitId,proto3" json:"business_unit_id,omitempty"`
}

func (x *GetBusinessUnitRequest) Reset() {
	*x = GetBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitRequest) ProtoMessage() {}

func (x *GetBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{13}
}

func (x *GetBusinessUnitRequest) GetBusinessUnitId() string {
	if x != nil {
		return x.BusinessUnitId
	}
	return ""
}

type UpdateBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnit *BusinessUnit `protobuf:"bytes,1,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`
}

func (x *UpdateBusinessUnitRequest) Reset() {
	*x = UpdateBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateBusinessUnitRequest) GetBusinessUnit() *BusinessUnit {
	if x != nil {
		return x.BusinessUnit
	}
	return nil
}

type DeleteBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnit *BusinessUnit `protobuf:"bytes,1,opt,name=business_unit,json=businessUnit,proto3" json:"business_unit,omitempty"`
}

func (x *DeleteBusinessUnitRequest) Reset() {
	*x = DeleteBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteBusinessUnitRequest) GetBusinessUnit() *BusinessUnit {
	if x != nil {
		return x.BusinessUnit
	}
	return nil
}

type PublicListCompanyAndBusinessUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicListCompanyAndBusinessUnitsRequest) Reset() {
	*x = PublicListCompanyAndBusinessUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListCompanyAndBusinessUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListCompanyAndBusinessUnitsRequest) ProtoMessage() {}

func (x *PublicListCompanyAndBusinessUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListCompanyAndBusinessUnitsRequest.ProtoReflect.Descriptor instead.
func (*PublicListCompanyAndBusinessUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{16}
}

type PublicListCompanyAndBusinessUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*CompanyAndBusinessUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PublicListCompanyAndBusinessUnitsResponse) Reset() {
	*x = PublicListCompanyAndBusinessUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListCompanyAndBusinessUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListCompanyAndBusinessUnitsResponse) ProtoMessage() {}

func (x *PublicListCompanyAndBusinessUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListCompanyAndBusinessUnitsResponse.ProtoReflect.Descriptor instead.
func (*PublicListCompanyAndBusinessUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{17}
}

func (x *PublicListCompanyAndBusinessUnitsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PublicListCompanyAndBusinessUnitsResponse) GetItems() []*CompanyAndBusinessUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type PublicListCompanyAndComponentUnitAndBusinessUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) Reset() {
	*x = PublicListCompanyAndComponentUnitAndBusinessUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) ProtoMessage() {}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListCompanyAndComponentUnitAndBusinessUnitsRequest.ProtoReflect.Descriptor instead.
func (*PublicListCompanyAndComponentUnitAndBusinessUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{18}
}

type PublicListCompanyAndComponentUnitAndBusinessUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*CompanyAndComponentUnitAndBusinessUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) Reset() {
	*x = PublicListCompanyAndComponentUnitAndBusinessUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) ProtoMessage() {}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListCompanyAndComponentUnitAndBusinessUnitsResponse.ProtoReflect.Descriptor instead.
func (*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{19}
}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PublicListCompanyAndComponentUnitAndBusinessUnitsResponse) GetItems() []*CompanyAndComponentUnitAndBusinessUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) Reset() {
	*x = PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) ProtoMessage() {}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{20}
}

type PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                                                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*PostUnitAndCompanyAndComponentUnitAndBusinessUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) Reset() {
	*x = PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) ProtoMessage() {}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse.ProtoReflect.Descriptor instead.
func (*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{21}
}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse) GetItems() []*PostUnitAndCompanyAndComponentUnitAndBusinessUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateBusinessUnitRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequest *BusinessUnitRequest `protobuf:"bytes,1,opt,name=business_unit_request,json=businessUnitRequest,proto3" json:"business_unit_request,omitempty"`
}

func (x *CreateBusinessUnitRequestRequest) Reset() {
	*x = CreateBusinessUnitRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitRequestRequest) ProtoMessage() {}

func (x *CreateBusinessUnitRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitRequestRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{22}
}

func (x *CreateBusinessUnitRequestRequest) GetBusinessUnitRequest() *BusinessUnitRequest {
	if x != nil {
		return x.BusinessUnitRequest
	}
	return nil
}

type ListBusinessUnitRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBusinessUnitRequestsRequest) Reset() {
	*x = ListBusinessUnitRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitRequestsRequest) ProtoMessage() {}

func (x *ListBusinessUnitRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitRequestsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{23}
}

type ListBusinessUnitRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*BusinessUnitRequest `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitRequestsResponse) Reset() {
	*x = ListBusinessUnitRequestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitRequestsResponse) ProtoMessage() {}

func (x *ListBusinessUnitRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitRequestsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{24}
}

func (x *ListBusinessUnitRequestsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitRequestsResponse) GetItems() []*BusinessUnitRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

// required business_unit_request_id
type GetBusinessUnitRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequestId string `protobuf:"bytes,1,opt,name=business_unit_request_id,json=businessUnitRequestId,proto3" json:"business_unit_request_id,omitempty"`
}

func (x *GetBusinessUnitRequestRequest) Reset() {
	*x = GetBusinessUnitRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitRequestRequest) ProtoMessage() {}

func (x *GetBusinessUnitRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitRequestRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitRequestRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{25}
}

func (x *GetBusinessUnitRequestRequest) GetBusinessUnitRequestId() string {
	if x != nil {
		return x.BusinessUnitRequestId
	}
	return ""
}

type UpdateBusinessUnitRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequest *BusinessUnitRequest `protobuf:"bytes,1,opt,name=business_unit_request,json=businessUnitRequest,proto3" json:"business_unit_request,omitempty"`
}

func (x *UpdateBusinessUnitRequestRequest) Reset() {
	*x = UpdateBusinessUnitRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitRequestRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitRequestRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitRequestRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateBusinessUnitRequestRequest) GetBusinessUnitRequest() *BusinessUnitRequest {
	if x != nil {
		return x.BusinessUnitRequest
	}
	return nil
}

type DeleteBusinessUnitRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequest *BusinessUnitRequest `protobuf:"bytes,1,opt,name=business_unit_request,json=businessUnitRequest,proto3" json:"business_unit_request,omitempty"`
}

func (x *DeleteBusinessUnitRequestRequest) Reset() {
	*x = DeleteBusinessUnitRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitRequestRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitRequestRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitRequestRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteBusinessUnitRequestRequest) GetBusinessUnitRequest() *BusinessUnitRequest {
	if x != nil {
		return x.BusinessUnitRequest
	}
	return nil
}

type CreateBusinessUnitRequestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequestResult *BusinessUnitRequestResult `protobuf:"bytes,1,opt,name=business_unit_request_result,json=businessUnitRequestResult,proto3" json:"business_unit_request_result,omitempty"`
	// 元となる取引開始依頼
	BusinessUnitRequest *BusinessUnitRequest `protobuf:"bytes,2,opt,name=business_unit_request,json=businessUnitRequest,proto3" json:"business_unit_request,omitempty"`
}

func (x *CreateBusinessUnitRequestResultRequest) Reset() {
	*x = CreateBusinessUnitRequestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitRequestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitRequestResultRequest) ProtoMessage() {}

func (x *CreateBusinessUnitRequestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitRequestResultRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitRequestResultRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{28}
}

func (x *CreateBusinessUnitRequestResultRequest) GetBusinessUnitRequestResult() *BusinessUnitRequestResult {
	if x != nil {
		return x.BusinessUnitRequestResult
	}
	return nil
}

func (x *CreateBusinessUnitRequestResultRequest) GetBusinessUnitRequest() *BusinessUnitRequest {
	if x != nil {
		return x.BusinessUnitRequest
	}
	return nil
}

type ListBusinessUnitRequestResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBusinessUnitRequestResultsRequest) Reset() {
	*x = ListBusinessUnitRequestResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitRequestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitRequestResultsRequest) ProtoMessage() {}

func (x *ListBusinessUnitRequestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitRequestResultsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitRequestResultsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{29}
}

type ListBusinessUnitRequestResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*BusinessUnitRequestResult `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitRequestResultsResponse) Reset() {
	*x = ListBusinessUnitRequestResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitRequestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitRequestResultsResponse) ProtoMessage() {}

func (x *ListBusinessUnitRequestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitRequestResultsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitRequestResultsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{30}
}

func (x *ListBusinessUnitRequestResultsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitRequestResultsResponse) GetItems() []*BusinessUnitRequestResult {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetBusinessUnitRequestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequestResultId string `protobuf:"bytes,1,opt,name=business_unit_request_result_id,json=businessUnitRequestResultId,proto3" json:"business_unit_request_result_id,omitempty"`
}

func (x *GetBusinessUnitRequestResultRequest) Reset() {
	*x = GetBusinessUnitRequestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitRequestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitRequestResultRequest) ProtoMessage() {}

func (x *GetBusinessUnitRequestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitRequestResultRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitRequestResultRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{31}
}

func (x *GetBusinessUnitRequestResultRequest) GetBusinessUnitRequestResultId() string {
	if x != nil {
		return x.BusinessUnitRequestResultId
	}
	return ""
}

type UpdateBusinessUnitRequestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequestResult *BusinessUnitRequestResult `protobuf:"bytes,1,opt,name=business_unit_request_result,json=businessUnitRequestResult,proto3" json:"business_unit_request_result,omitempty"`
}

func (x *UpdateBusinessUnitRequestResultRequest) Reset() {
	*x = UpdateBusinessUnitRequestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitRequestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitRequestResultRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitRequestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitRequestResultRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitRequestResultRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateBusinessUnitRequestResultRequest) GetBusinessUnitRequestResult() *BusinessUnitRequestResult {
	if x != nil {
		return x.BusinessUnitRequestResult
	}
	return nil
}

type DeleteBusinessUnitRequestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitRequestResult *BusinessUnitRequestResult `protobuf:"bytes,1,opt,name=business_unit_request_result,json=businessUnitRequestResult,proto3" json:"business_unit_request_result,omitempty"`
}

func (x *DeleteBusinessUnitRequestResultRequest) Reset() {
	*x = DeleteBusinessUnitRequestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitRequestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitRequestResultRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitRequestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitRequestResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitRequestResultRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteBusinessUnitRequestResultRequest) GetBusinessUnitRequestResult() *BusinessUnitRequestResult {
	if x != nil {
		return x.BusinessUnitRequestResult
	}
	return nil
}

type SharetoBusinessUnitRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// business_unit_request_id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SharetoBusinessUnitRequestRequest) Reset() {
	*x = SharetoBusinessUnitRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitRequestRequest) ProtoMessage() {}

func (x *SharetoBusinessUnitRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitRequestRequest.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitRequestRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{34}
}

func (x *SharetoBusinessUnitRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SharetoBusinessUnitRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoBusinessUnitRequestResponse) Reset() {
	*x = SharetoBusinessUnitRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitRequestResponse) ProtoMessage() {}

func (x *SharetoBusinessUnitRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitRequestResponse.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitRequestResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{35}
}

type SharetoBusinessUnitRequestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// business_unit_request_result_id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SharetoBusinessUnitRequestResultRequest) Reset() {
	*x = SharetoBusinessUnitRequestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitRequestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitRequestResultRequest) ProtoMessage() {}

func (x *SharetoBusinessUnitRequestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitRequestResultRequest.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitRequestResultRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{36}
}

func (x *SharetoBusinessUnitRequestResultRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SharetoBusinessUnitRequestResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoBusinessUnitRequestResultResponse) Reset() {
	*x = SharetoBusinessUnitRequestResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitRequestResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitRequestResultResponse) ProtoMessage() {}

func (x *SharetoBusinessUnitRequestResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitRequestResultResponse.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitRequestResultResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{37}
}

type ListStaffsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 紐付アカウント
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ListStaffsRequest) Reset() {
	*x = ListStaffsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaffsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffsRequest) ProtoMessage() {}

func (x *ListStaffsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffsRequest.ProtoReflect.Descriptor instead.
func (*ListStaffsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{38}
}

func (x *ListStaffsRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ListStaffsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Staff `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListStaffsResponse) Reset() {
	*x = ListStaffsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaffsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffsResponse) ProtoMessage() {}

func (x *ListStaffsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffsResponse.ProtoReflect.Descriptor instead.
func (*ListStaffsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{39}
}

func (x *ListStaffsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListStaffsResponse) GetItems() []*Staff {
	if x != nil {
		return x.Items
	}
	return nil
}

// required staff_id
type GetStaffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StaffId string `protobuf:"bytes,1,opt,name=staff_id,json=staffId,proto3" json:"staff_id,omitempty"`
}

func (x *GetStaffRequest) Reset() {
	*x = GetStaffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStaffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStaffRequest) ProtoMessage() {}

func (x *GetStaffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStaffRequest.ProtoReflect.Descriptor instead.
func (*GetStaffRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{40}
}

func (x *GetStaffRequest) GetStaffId() string {
	if x != nil {
		return x.StaffId
	}
	return ""
}

type ListStaffAndComponentUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Staff.email
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ListStaffAndComponentUnitsRequest) Reset() {
	*x = ListStaffAndComponentUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaffAndComponentUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffAndComponentUnitsRequest) ProtoMessage() {}

func (x *ListStaffAndComponentUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffAndComponentUnitsRequest.ProtoReflect.Descriptor instead.
func (*ListStaffAndComponentUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{41}
}

func (x *ListStaffAndComponentUnitsRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ListStaffAndComponentUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*StaffAndComponentUnit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListStaffAndComponentUnitsResponse) Reset() {
	*x = ListStaffAndComponentUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaffAndComponentUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffAndComponentUnitsResponse) ProtoMessage() {}

func (x *ListStaffAndComponentUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffAndComponentUnitsResponse.ProtoReflect.Descriptor instead.
func (*ListStaffAndComponentUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{42}
}

func (x *ListStaffAndComponentUnitsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListStaffAndComponentUnitsResponse) GetItems() []*StaffAndComponentUnit {
	if x != nil {
		return x.Items
	}
	return nil
}

type ImportStaffsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportStaffsRequest) Reset() {
	*x = ImportStaffsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportStaffsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportStaffsRequest) ProtoMessage() {}

func (x *ImportStaffsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportStaffsRequest.ProtoReflect.Descriptor instead.
func (*ImportStaffsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{43}
}

func (x *ImportStaffsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportStaffsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportStaffsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportStaffsRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportStaffsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportStaffsResponse) Reset() {
	*x = ImportStaffsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportStaffsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportStaffsResponse) ProtoMessage() {}

func (x *ImportStaffsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportStaffsResponse.ProtoReflect.Descriptor instead.
func (*ImportStaffsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{44}
}

func (x *ImportStaffsResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportStaffsResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportStaffsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ExportStaffsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staff_ids
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportStaffsRequest) Reset() {
	*x = ExportStaffsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStaffsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStaffsRequest) ProtoMessage() {}

func (x *ExportStaffsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStaffsRequest.ProtoReflect.Descriptor instead.
func (*ExportStaffsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{45}
}

func (x *ExportStaffsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportStaffsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportStaffsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportStaffsResponse) Reset() {
	*x = ExportStaffsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportStaffsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportStaffsResponse) ProtoMessage() {}

func (x *ExportStaffsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportStaffsResponse.ProtoReflect.Descriptor instead.
func (*ExportStaffsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{46}
}

func (x *ExportStaffsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ImportComponentUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportComponentUnitsRequest) Reset() {
	*x = ImportComponentUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportComponentUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportComponentUnitsRequest) ProtoMessage() {}

func (x *ImportComponentUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportComponentUnitsRequest.ProtoReflect.Descriptor instead.
func (*ImportComponentUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{47}
}

func (x *ImportComponentUnitsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportComponentUnitsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportComponentUnitsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportComponentUnitsRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportComponentUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportComponentUnitsResponse) Reset() {
	*x = ImportComponentUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportComponentUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportComponentUnitsResponse) ProtoMessage() {}

func (x *ImportComponentUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportComponentUnitsResponse.ProtoReflect.Descriptor instead.
func (*ImportComponentUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{48}
}

func (x *ImportComponentUnitsResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportComponentUnitsResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportComponentUnitsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ExportComponentUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// component_unit_ids
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportComponentUnitsRequest) Reset() {
	*x = ExportComponentUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportComponentUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportComponentUnitsRequest) ProtoMessage() {}

func (x *ExportComponentUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportComponentUnitsRequest.ProtoReflect.Descriptor instead.
func (*ExportComponentUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{49}
}

func (x *ExportComponentUnitsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportComponentUnitsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportComponentUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportComponentUnitsResponse) Reset() {
	*x = ExportComponentUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportComponentUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportComponentUnitsResponse) ProtoMessage() {}

func (x *ExportComponentUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportComponentUnitsResponse.ProtoReflect.Descriptor instead.
func (*ExportComponentUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{50}
}

func (x *ExportComponentUnitsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ImportBusinessUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportBusinessUnitsRequest) Reset() {
	*x = ImportBusinessUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitsRequest) ProtoMessage() {}

func (x *ImportBusinessUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitsRequest.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{51}
}

func (x *ImportBusinessUnitsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportBusinessUnitsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportBusinessUnitsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportBusinessUnitsRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportBusinessUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportBusinessUnitsResponse) Reset() {
	*x = ImportBusinessUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitsResponse) ProtoMessage() {}

func (x *ImportBusinessUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitsResponse.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{52}
}

func (x *ImportBusinessUnitsResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportBusinessUnitsResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportBusinessUnitsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ExportBusinessUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// business_unit_ids
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportBusinessUnitsRequest) Reset() {
	*x = ExportBusinessUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitsRequest) ProtoMessage() {}

func (x *ExportBusinessUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitsRequest.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{53}
}

func (x *ExportBusinessUnitsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportBusinessUnitsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportBusinessUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportBusinessUnitsResponse) Reset() {
	*x = ExportBusinessUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitsResponse) ProtoMessage() {}

func (x *ExportBusinessUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitsResponse.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{54}
}

func (x *ExportBusinessUnitsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ListComponentUnitFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListComponentUnitFormatsRequest) Reset() {
	*x = ListComponentUnitFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComponentUnitFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComponentUnitFormatsRequest) ProtoMessage() {}

func (x *ListComponentUnitFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComponentUnitFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListComponentUnitFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{55}
}

type ListComponentUnitFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListComponentUnitFormatsResponse) Reset() {
	*x = ListComponentUnitFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListComponentUnitFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListComponentUnitFormatsResponse) ProtoMessage() {}

func (x *ListComponentUnitFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListComponentUnitFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListComponentUnitFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{56}
}

func (x *ListComponentUnitFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListComponentUnitFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListBusinessUnitFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBusinessUnitFormatsRequest) Reset() {
	*x = ListBusinessUnitFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitFormatsRequest) ProtoMessage() {}

func (x *ListBusinessUnitFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{57}
}

type ListBusinessUnitFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitFormatsResponse) Reset() {
	*x = ListBusinessUnitFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitFormatsResponse) ProtoMessage() {}

func (x *ListBusinessUnitFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{58}
}

func (x *ListBusinessUnitFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListStaffFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStaffFormatsRequest) Reset() {
	*x = ListStaffFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaffFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffFormatsRequest) ProtoMessage() {}

func (x *ListStaffFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListStaffFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{59}
}

type ListStaffFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListStaffFormatsResponse) Reset() {
	*x = ListStaffFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaffFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaffFormatsResponse) ProtoMessage() {}

func (x *ListStaffFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaffFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListStaffFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{60}
}

func (x *ListStaffFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListStaffFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

// 公開企業
// required company_id
type PublicGetCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 企業ID
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *PublicGetCompanyRequest) Reset() {
	*x = PublicGetCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicGetCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicGetCompanyRequest) ProtoMessage() {}

func (x *PublicGetCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicGetCompanyRequest.ProtoReflect.Descriptor instead.
func (*PublicGetCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{61}
}

func (x *PublicGetCompanyRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

type PublicListCompanysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *PublicListCompanysRequest) Reset() {
	*x = PublicListCompanysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListCompanysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListCompanysRequest) ProtoMessage() {}

func (x *PublicListCompanysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListCompanysRequest.ProtoReflect.Descriptor instead.
func (*PublicListCompanysRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{62}
}

func (x *PublicListCompanysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type PublicListCompanysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 公開企業マスタ
	Items []*Company `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *PublicListCompanysResponse) Reset() {
	*x = PublicListCompanysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicListCompanysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicListCompanysResponse) ProtoMessage() {}

func (x *PublicListCompanysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicListCompanysResponse.ProtoReflect.Descriptor instead.
func (*PublicListCompanysResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{63}
}

func (x *PublicListCompanysResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PublicListCompanysResponse) GetItems() []*Company {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PublicListCompanysResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 取引先管理
type ListBusinessUnitManagementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitManagementsRequest) Reset() {
	*x = ListBusinessUnitManagementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementsRequest) ProtoMessage() {}

func (x *ListBusinessUnitManagementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{64}
}

func (x *ListBusinessUnitManagementsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListBusinessUnitManagementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理マスタ
	Items []*BusinessUnitManagement `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitManagementsResponse) Reset() {
	*x = ListBusinessUnitManagementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementsResponse) ProtoMessage() {}

func (x *ListBusinessUnitManagementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{65}
}

func (x *ListBusinessUnitManagementsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitManagementsResponse) GetItems() []*BusinessUnitManagement {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitManagementsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_management_id
type GetBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
}

func (x *GetBusinessUnitManagementRequest) Reset() {
	*x = GetBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitManagementRequest) ProtoMessage() {}

func (x *GetBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{66}
}

func (x *GetBusinessUnitManagementRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

type ListOldBusinessUnitManagementFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOldBusinessUnitManagementFormatsRequest) Reset() {
	*x = ListOldBusinessUnitManagementFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOldBusinessUnitManagementFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOldBusinessUnitManagementFormatsRequest) ProtoMessage() {}

func (x *ListOldBusinessUnitManagementFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOldBusinessUnitManagementFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListOldBusinessUnitManagementFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{67}
}

func (x *ListOldBusinessUnitManagementFormatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListOldBusinessUnitManagementFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 　件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListOldBusinessUnitManagementFormatsResponse) Reset() {
	*x = ListOldBusinessUnitManagementFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOldBusinessUnitManagementFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOldBusinessUnitManagementFormatsResponse) ProtoMessage() {}

func (x *ListOldBusinessUnitManagementFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOldBusinessUnitManagementFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListOldBusinessUnitManagementFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{68}
}

func (x *ListOldBusinessUnitManagementFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListOldBusinessUnitManagementFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListOldBusinessUnitManagementFormatsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_management
type CreateBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BusinessUnitManagement *BusinessUnitManagement `protobuf:"bytes,1,opt,name=business_unit_management,json=businessUnitManagement,proto3" json:"business_unit_management,omitempty"`
}

func (x *CreateBusinessUnitManagementRequest) Reset() {
	*x = CreateBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitManagementRequest) ProtoMessage() {}

func (x *CreateBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{69}
}

func (x *CreateBusinessUnitManagementRequest) GetBusinessUnitManagement() *BusinessUnitManagement {
	if x != nil {
		return x.BusinessUnitManagement
	}
	return nil
}

// required business_unit_management
type UpdateBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required business_unit_management_id
	// required updated_at
	BusinessUnitManagement *BusinessUnitManagement `protobuf:"bytes,1,opt,name=business_unit_management,json=businessUnitManagement,proto3" json:"business_unit_management,omitempty"`
}

func (x *UpdateBusinessUnitManagementRequest) Reset() {
	*x = UpdateBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitManagementRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateBusinessUnitManagementRequest) GetBusinessUnitManagement() *BusinessUnitManagement {
	if x != nil {
		return x.BusinessUnitManagement
	}
	return nil
}

// required business_unit_management
type DeleteBusinessUnitManagementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required business_unit_management_id
	// required updated_at
	BusinessUnitManagement *BusinessUnitManagement `protobuf:"bytes,1,opt,name=business_unit_management,json=businessUnitManagement,proto3" json:"business_unit_management,omitempty"`
}

func (x *DeleteBusinessUnitManagementRequest) Reset() {
	*x = DeleteBusinessUnitManagementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitManagementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitManagementRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitManagementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitManagementRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitManagementRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteBusinessUnitManagementRequest) GetBusinessUnitManagement() *BusinessUnitManagement {
	if x != nil {
		return x.BusinessUnitManagement
	}
	return nil
}

// required url
// required file_format
type ImportOldBusinessUnitManagementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportOldBusinessUnitManagementsRequest) Reset() {
	*x = ImportOldBusinessUnitManagementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOldBusinessUnitManagementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOldBusinessUnitManagementsRequest) ProtoMessage() {}

func (x *ImportOldBusinessUnitManagementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOldBusinessUnitManagementsRequest.ProtoReflect.Descriptor instead.
func (*ImportOldBusinessUnitManagementsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{72}
}

func (x *ImportOldBusinessUnitManagementsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportOldBusinessUnitManagementsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportOldBusinessUnitManagementsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportOldBusinessUnitManagementsRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportOldBusinessUnitManagementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル アセットID（一時領域）
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportOldBusinessUnitManagementsResponse) Reset() {
	*x = ImportOldBusinessUnitManagementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportOldBusinessUnitManagementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportOldBusinessUnitManagementsResponse) ProtoMessage() {}

func (x *ImportOldBusinessUnitManagementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportOldBusinessUnitManagementsResponse.ProtoReflect.Descriptor instead.
func (*ImportOldBusinessUnitManagementsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{73}
}

func (x *ImportOldBusinessUnitManagementsResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportOldBusinessUnitManagementsResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportOldBusinessUnitManagementsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

type ListBusinessUnitManagementContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitManagementContentsRequest) Reset() {
	*x = ListBusinessUnitManagementContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementContentsRequest) ProtoMessage() {}

func (x *ListBusinessUnitManagementContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementContentsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementContentsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{74}
}

func (x *ListBusinessUnitManagementContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListBusinessUnitManagementContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理マスタ
	Items []*BusinessUnitManagementContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitManagementContentsResponse) Reset() {
	*x = ListBusinessUnitManagementContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementContentsResponse) ProtoMessage() {}

func (x *ListBusinessUnitManagementContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementContentsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementContentsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{75}
}

func (x *ListBusinessUnitManagementContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitManagementContentsResponse) GetItems() []*BusinessUnitManagementContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitManagementContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_management_id
type GetBusinessUnitManagementContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
}

func (x *GetBusinessUnitManagementContentRequest) Reset() {
	*x = GetBusinessUnitManagementContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitManagementContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitManagementContentRequest) ProtoMessage() {}

func (x *GetBusinessUnitManagementContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitManagementContentRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitManagementContentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{76}
}

func (x *GetBusinessUnitManagementContentRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

// required file_format
type ExportOldBusinessUnitManagementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// business_unit_ids
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportOldBusinessUnitManagementsRequest) Reset() {
	*x = ExportOldBusinessUnitManagementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportOldBusinessUnitManagementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportOldBusinessUnitManagementsRequest) ProtoMessage() {}

func (x *ExportOldBusinessUnitManagementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportOldBusinessUnitManagementsRequest.ProtoReflect.Descriptor instead.
func (*ExportOldBusinessUnitManagementsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{77}
}

func (x *ExportOldBusinessUnitManagementsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportOldBusinessUnitManagementsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportOldBusinessUnitManagementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// アセットID（一時領域）
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportOldBusinessUnitManagementsResponse) Reset() {
	*x = ExportOldBusinessUnitManagementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportOldBusinessUnitManagementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportOldBusinessUnitManagementsResponse) ProtoMessage() {}

func (x *ExportOldBusinessUnitManagementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportOldBusinessUnitManagementsResponse.ProtoReflect.Descriptor instead.
func (*ExportOldBusinessUnitManagementsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{78}
}

func (x *ExportOldBusinessUnitManagementsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 履歴データ
// required type_name
type ListHistorysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// レコードタイプ
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// レコードID
	RecordIds []string `protobuf:"bytes,3,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ListHistorysRequest) Reset() {
	*x = ListHistorysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistorysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistorysRequest) ProtoMessage() {}

func (x *ListHistorysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistorysRequest.ProtoReflect.Descriptor instead.
func (*ListHistorysRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{79}
}

func (x *ListHistorysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHistorysRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListHistorysRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type ListHistorysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 履歴
	Items []*History `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListHistorysResponse) Reset() {
	*x = ListHistorysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistorysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistorysResponse) ProtoMessage() {}

func (x *ListHistorysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistorysResponse.ProtoReflect.Descriptor instead.
func (*ListHistorysResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{80}
}

func (x *ListHistorysResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHistorysResponse) GetItems() []*History {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListHistorysResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type SendEmailTenantInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
	// 個別メッセージ
	IndividualMessage string `protobuf:"bytes,2,opt,name=individual_message,json=individualMessage,proto3" json:"individual_message,omitempty"`
	// 問い合わせ先メッセージ
	ContactInformationMessage string `protobuf:"bytes,3,opt,name=contact_information_message,json=contactInformationMessage,proto3" json:"contact_information_message,omitempty"`
}

func (x *SendEmailTenantInvitationRequest) Reset() {
	*x = SendEmailTenantInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEmailTenantInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmailTenantInvitationRequest) ProtoMessage() {}

func (x *SendEmailTenantInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmailTenantInvitationRequest.ProtoReflect.Descriptor instead.
func (*SendEmailTenantInvitationRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{81}
}

func (x *SendEmailTenantInvitationRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

func (x *SendEmailTenantInvitationRequest) GetIndividualMessage() string {
	if x != nil {
		return x.IndividualMessage
	}
	return ""
}

func (x *SendEmailTenantInvitationRequest) GetContactInformationMessage() string {
	if x != nil {
		return x.ContactInformationMessage
	}
	return ""
}

type SendEmailTenantInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendEmailTenantInvitationResponse) Reset() {
	*x = SendEmailTenantInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEmailTenantInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmailTenantInvitationResponse) ProtoMessage() {}

func (x *SendEmailTenantInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmailTenantInvitationResponse.ProtoReflect.Descriptor instead.
func (*SendEmailTenantInvitationResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{82}
}

// --------------------
// リクエスト/レスポンス
// --------------------
// 自社企業（基本情報）マスタ
type ListBusinessUnitProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitProfilesRequest) Reset() {
	*x = ListBusinessUnitProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitProfilesRequest) ProtoMessage() {}

func (x *ListBusinessUnitProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitProfilesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{83}
}

func (x *ListBusinessUnitProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitProfilesRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（基本情報）マスタ
	Items []*BusinessUnitProfile `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitProfilesResponse) Reset() {
	*x = ListBusinessUnitProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitProfilesResponse) ProtoMessage() {}

func (x *ListBusinessUnitProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitProfilesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{84}
}

func (x *ListBusinessUnitProfilesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitProfilesResponse) GetItems() []*BusinessUnitProfile {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitProfilesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_profile
type CreateBusinessUnitProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）マスタ
	// required company_id
	BusinessUnitProfile *BusinessUnitProfile `protobuf:"bytes,1,opt,name=business_unit_profile,json=businessUnitProfile,proto3" json:"business_unit_profile,omitempty"`
}

func (x *CreateBusinessUnitProfileRequest) Reset() {
	*x = CreateBusinessUnitProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitProfileRequest) ProtoMessage() {}

func (x *CreateBusinessUnitProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{85}
}

func (x *CreateBusinessUnitProfileRequest) GetBusinessUnitProfile() *BusinessUnitProfile {
	if x != nil {
		return x.BusinessUnitProfile
	}
	return nil
}

// required business_unit_profile_id
type GetBusinessUnitProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）ID
	BusinessUnitProfileId string `protobuf:"bytes,1,opt,name=business_unit_profile_id,json=businessUnitProfileId,proto3" json:"business_unit_profile_id,omitempty"`
}

func (x *GetBusinessUnitProfileRequest) Reset() {
	*x = GetBusinessUnitProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitProfileRequest) ProtoMessage() {}

func (x *GetBusinessUnitProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitProfileRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{86}
}

func (x *GetBusinessUnitProfileRequest) GetBusinessUnitProfileId() string {
	if x != nil {
		return x.BusinessUnitProfileId
	}
	return ""
}

// required business_unit_profile
type UpdateBusinessUnitProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）マスタ
	// required business_unit_profile_id
	// required updated_at
	BusinessUnitProfile *BusinessUnitProfile `protobuf:"bytes,1,opt,name=business_unit_profile,json=businessUnitProfile,proto3" json:"business_unit_profile,omitempty"`
}

func (x *UpdateBusinessUnitProfileRequest) Reset() {
	*x = UpdateBusinessUnitProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitProfileRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateBusinessUnitProfileRequest) GetBusinessUnitProfile() *BusinessUnitProfile {
	if x != nil {
		return x.BusinessUnitProfile
	}
	return nil
}

// required business_unit_profile
type DeleteBusinessUnitProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）マスタ
	// required business_unit_profile_id
	// required updated_at
	BusinessUnitProfile *BusinessUnitProfile `protobuf:"bytes,1,opt,name=business_unit_profile,json=businessUnitProfile,proto3" json:"business_unit_profile,omitempty"`
}

func (x *DeleteBusinessUnitProfileRequest) Reset() {
	*x = DeleteBusinessUnitProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitProfileRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteBusinessUnitProfileRequest) GetBusinessUnitProfile() *BusinessUnitProfile {
	if x != nil {
		return x.BusinessUnitProfile
	}
	return nil
}

// 自社企業（基本情報）マスタ.システム通知先
// required business_unit_profile_id
// required updated_at
type UpdateSystemNotificationUsersInBusinessUnitProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）ID
	BusinessUnitProfileId string `protobuf:"bytes,1,opt,name=business_unit_profile_id,json=businessUnitProfileId,proto3" json:"business_unit_profile_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,2,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	UpdatedAt               int64                     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) Reset() {
	*x = UpdateSystemNotificationUsersInBusinessUnitProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemNotificationUsersInBusinessUnitProfileRequest) ProtoMessage() {}

func (x *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemNotificationUsersInBusinessUnitProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateSystemNotificationUsersInBusinessUnitProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) GetBusinessUnitProfileId() string {
	if x != nil {
		return x.BusinessUnitProfileId
	}
	return ""
}

func (x *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *UpdateSystemNotificationUsersInBusinessUnitProfileRequest) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 自社企業（決算）マスタ
type ListBusinessUnitFinancialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitFinancialsRequest) Reset() {
	*x = ListBusinessUnitFinancialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitFinancialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitFinancialsRequest) ProtoMessage() {}

func (x *ListBusinessUnitFinancialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitFinancialsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitFinancialsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{90}
}

func (x *ListBusinessUnitFinancialsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitFinancialsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitFinancialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（決算）マスタ
	Items []*BusinessUnitFinancial `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitFinancialsResponse) Reset() {
	*x = ListBusinessUnitFinancialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitFinancialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitFinancialsResponse) ProtoMessage() {}

func (x *ListBusinessUnitFinancialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitFinancialsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitFinancialsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{91}
}

func (x *ListBusinessUnitFinancialsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitFinancialsResponse) GetItems() []*BusinessUnitFinancial {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitFinancialsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_financial
type CreateBusinessUnitFinancialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（決算）マスタ
	// required company_id
	BusinessUnitFinancial *BusinessUnitFinancial `protobuf:"bytes,1,opt,name=business_unit_financial,json=businessUnitFinancial,proto3" json:"business_unit_financial,omitempty"`
}

func (x *CreateBusinessUnitFinancialRequest) Reset() {
	*x = CreateBusinessUnitFinancialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitFinancialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitFinancialRequest) ProtoMessage() {}

func (x *CreateBusinessUnitFinancialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitFinancialRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitFinancialRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{92}
}

func (x *CreateBusinessUnitFinancialRequest) GetBusinessUnitFinancial() *BusinessUnitFinancial {
	if x != nil {
		return x.BusinessUnitFinancial
	}
	return nil
}

// required business_unit_financial_id
type GetBusinessUnitFinancialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（決算）ID
	BusinessUnitFinancialId string `protobuf:"bytes,1,opt,name=business_unit_financial_id,json=businessUnitFinancialId,proto3" json:"business_unit_financial_id,omitempty"`
}

func (x *GetBusinessUnitFinancialRequest) Reset() {
	*x = GetBusinessUnitFinancialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitFinancialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitFinancialRequest) ProtoMessage() {}

func (x *GetBusinessUnitFinancialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitFinancialRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitFinancialRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{93}
}

func (x *GetBusinessUnitFinancialRequest) GetBusinessUnitFinancialId() string {
	if x != nil {
		return x.BusinessUnitFinancialId
	}
	return ""
}

// required business_unit_financial
type UpdateBusinessUnitFinancialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（決算）マスタ
	// required business_unit_financial_id
	// required updated_at
	BusinessUnitFinancial *BusinessUnitFinancial `protobuf:"bytes,1,opt,name=business_unit_financial,json=businessUnitFinancial,proto3" json:"business_unit_financial,omitempty"`
}

func (x *UpdateBusinessUnitFinancialRequest) Reset() {
	*x = UpdateBusinessUnitFinancialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitFinancialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitFinancialRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitFinancialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitFinancialRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitFinancialRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateBusinessUnitFinancialRequest) GetBusinessUnitFinancial() *BusinessUnitFinancial {
	if x != nil {
		return x.BusinessUnitFinancial
	}
	return nil
}

// required business_unit_financial
type DeleteBusinessUnitFinancialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（決算）マスタ
	// required business_unit_financial_id
	// required updated_at
	BusinessUnitFinancial *BusinessUnitFinancial `protobuf:"bytes,1,opt,name=business_unit_financial,json=businessUnitFinancial,proto3" json:"business_unit_financial,omitempty"`
}

func (x *DeleteBusinessUnitFinancialRequest) Reset() {
	*x = DeleteBusinessUnitFinancialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitFinancialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitFinancialRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitFinancialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitFinancialRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitFinancialRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{95}
}

func (x *DeleteBusinessUnitFinancialRequest) GetBusinessUnitFinancial() *BusinessUnitFinancial {
	if x != nil {
		return x.BusinessUnitFinancial
	}
	return nil
}

// 自社企業（拠点）マスタ
type ListBusinessUnitBranchsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitBranchsRequest) Reset() {
	*x = ListBusinessUnitBranchsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitBranchsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitBranchsRequest) ProtoMessage() {}

func (x *ListBusinessUnitBranchsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitBranchsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitBranchsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{96}
}

func (x *ListBusinessUnitBranchsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitBranchsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitBranchsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（拠点）マスタ
	Items []*BusinessUnitBranch `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitBranchsResponse) Reset() {
	*x = ListBusinessUnitBranchsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitBranchsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitBranchsResponse) ProtoMessage() {}

func (x *ListBusinessUnitBranchsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitBranchsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitBranchsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{97}
}

func (x *ListBusinessUnitBranchsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitBranchsResponse) GetItems() []*BusinessUnitBranch {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitBranchsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_branch
type CreateBusinessUnitBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（拠点）マスタ
	// required company_id
	BusinessUnitBranch *BusinessUnitBranch `protobuf:"bytes,1,opt,name=business_unit_branch,json=businessUnitBranch,proto3" json:"business_unit_branch,omitempty"`
}

func (x *CreateBusinessUnitBranchRequest) Reset() {
	*x = CreateBusinessUnitBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitBranchRequest) ProtoMessage() {}

func (x *CreateBusinessUnitBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitBranchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{98}
}

func (x *CreateBusinessUnitBranchRequest) GetBusinessUnitBranch() *BusinessUnitBranch {
	if x != nil {
		return x.BusinessUnitBranch
	}
	return nil
}

// required business_unit_branch_id
type GetBusinessUnitBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（拠点）ID
	BusinessUnitBranchId string `protobuf:"bytes,1,opt,name=business_unit_branch_id,json=businessUnitBranchId,proto3" json:"business_unit_branch_id,omitempty"`
}

func (x *GetBusinessUnitBranchRequest) Reset() {
	*x = GetBusinessUnitBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitBranchRequest) ProtoMessage() {}

func (x *GetBusinessUnitBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitBranchRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitBranchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{99}
}

func (x *GetBusinessUnitBranchRequest) GetBusinessUnitBranchId() string {
	if x != nil {
		return x.BusinessUnitBranchId
	}
	return ""
}

// required business_unit_branch
type UpdateBusinessUnitBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（拠点）マスタ
	// required business_unit_branch_id
	// required updated_at
	BusinessUnitBranch *BusinessUnitBranch `protobuf:"bytes,1,opt,name=business_unit_branch,json=businessUnitBranch,proto3" json:"business_unit_branch,omitempty"`
}

func (x *UpdateBusinessUnitBranchRequest) Reset() {
	*x = UpdateBusinessUnitBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitBranchRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitBranchRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitBranchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateBusinessUnitBranchRequest) GetBusinessUnitBranch() *BusinessUnitBranch {
	if x != nil {
		return x.BusinessUnitBranch
	}
	return nil
}

// required business_unit_branch
type DeleteBusinessUnitBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（拠点）マスタ
	// required business_unit_branch_id
	// required updated_at
	BusinessUnitBranch *BusinessUnitBranch `protobuf:"bytes,1,opt,name=business_unit_branch,json=businessUnitBranch,proto3" json:"business_unit_branch,omitempty"`
}

func (x *DeleteBusinessUnitBranchRequest) Reset() {
	*x = DeleteBusinessUnitBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitBranchRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitBranchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteBusinessUnitBranchRequest) GetBusinessUnitBranch() *BusinessUnitBranch {
	if x != nil {
		return x.BusinessUnitBranch
	}
	return nil
}

// 自社企業（設備）マスタ
type ListBusinessUnitFacilitiessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitFacilitiessRequest) Reset() {
	*x = ListBusinessUnitFacilitiessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitFacilitiessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitFacilitiessRequest) ProtoMessage() {}

func (x *ListBusinessUnitFacilitiessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitFacilitiessRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitFacilitiessRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{102}
}

func (x *ListBusinessUnitFacilitiessRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitFacilitiessRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitFacilitiessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（設備）マスタ
	Items []*BusinessUnitFacilities `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitFacilitiessResponse) Reset() {
	*x = ListBusinessUnitFacilitiessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitFacilitiessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitFacilitiessResponse) ProtoMessage() {}

func (x *ListBusinessUnitFacilitiessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitFacilitiessResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitFacilitiessResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{103}
}

func (x *ListBusinessUnitFacilitiessResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitFacilitiessResponse) GetItems() []*BusinessUnitFacilities {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitFacilitiessResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_facilities
type CreateBusinessUnitFacilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（設備）マスタ
	// required company_id
	BusinessUnitFacilities *BusinessUnitFacilities `protobuf:"bytes,1,opt,name=business_unit_facilities,json=businessUnitFacilities,proto3" json:"business_unit_facilities,omitempty"`
}

func (x *CreateBusinessUnitFacilitiesRequest) Reset() {
	*x = CreateBusinessUnitFacilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitFacilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitFacilitiesRequest) ProtoMessage() {}

func (x *CreateBusinessUnitFacilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitFacilitiesRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitFacilitiesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{104}
}

func (x *CreateBusinessUnitFacilitiesRequest) GetBusinessUnitFacilities() *BusinessUnitFacilities {
	if x != nil {
		return x.BusinessUnitFacilities
	}
	return nil
}

// required business_unit_facilities_id
type GetBusinessUnitFacilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（設備）ID
	BusinessUnitFacilitiesId string `protobuf:"bytes,1,opt,name=business_unit_facilities_id,json=businessUnitFacilitiesId,proto3" json:"business_unit_facilities_id,omitempty"`
}

func (x *GetBusinessUnitFacilitiesRequest) Reset() {
	*x = GetBusinessUnitFacilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitFacilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitFacilitiesRequest) ProtoMessage() {}

func (x *GetBusinessUnitFacilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitFacilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitFacilitiesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{105}
}

func (x *GetBusinessUnitFacilitiesRequest) GetBusinessUnitFacilitiesId() string {
	if x != nil {
		return x.BusinessUnitFacilitiesId
	}
	return ""
}

// required business_unit_facilities
type UpdateBusinessUnitFacilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（設備）マスタ
	// required business_unit_facilities_id
	// required updated_at
	BusinessUnitFacilities *BusinessUnitFacilities `protobuf:"bytes,1,opt,name=business_unit_facilities,json=businessUnitFacilities,proto3" json:"business_unit_facilities,omitempty"`
}

func (x *UpdateBusinessUnitFacilitiesRequest) Reset() {
	*x = UpdateBusinessUnitFacilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitFacilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitFacilitiesRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitFacilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitFacilitiesRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitFacilitiesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{106}
}

func (x *UpdateBusinessUnitFacilitiesRequest) GetBusinessUnitFacilities() *BusinessUnitFacilities {
	if x != nil {
		return x.BusinessUnitFacilities
	}
	return nil
}

// required business_unit_facilities
type DeleteBusinessUnitFacilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（設備）マスタ
	// required business_unit_facilities_id
	// required updated_at
	BusinessUnitFacilities *BusinessUnitFacilities `protobuf:"bytes,1,opt,name=business_unit_facilities,json=businessUnitFacilities,proto3" json:"business_unit_facilities,omitempty"`
}

func (x *DeleteBusinessUnitFacilitiesRequest) Reset() {
	*x = DeleteBusinessUnitFacilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitFacilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitFacilitiesRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitFacilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitFacilitiesRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitFacilitiesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteBusinessUnitFacilitiesRequest) GetBusinessUnitFacilities() *BusinessUnitFacilities {
	if x != nil {
		return x.BusinessUnitFacilities
	}
	return nil
}

// 自社企業（認証）マスタ
type ListBusinessUnitCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitCertificatesRequest) Reset() {
	*x = ListBusinessUnitCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitCertificatesRequest) ProtoMessage() {}

func (x *ListBusinessUnitCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitCertificatesRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{108}
}

func (x *ListBusinessUnitCertificatesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitCertificatesRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（認証）マスタ
	Items []*BusinessUnitCertificate `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitCertificatesResponse) Reset() {
	*x = ListBusinessUnitCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitCertificatesResponse) ProtoMessage() {}

func (x *ListBusinessUnitCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitCertificatesResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{109}
}

func (x *ListBusinessUnitCertificatesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitCertificatesResponse) GetItems() []*BusinessUnitCertificate {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitCertificatesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_certificate
type CreateBusinessUnitCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（認証）マスタ
	// required company_id
	BusinessUnitCertificate *BusinessUnitCertificate `protobuf:"bytes,1,opt,name=business_unit_certificate,json=businessUnitCertificate,proto3" json:"business_unit_certificate,omitempty"`
}

func (x *CreateBusinessUnitCertificateRequest) Reset() {
	*x = CreateBusinessUnitCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitCertificateRequest) ProtoMessage() {}

func (x *CreateBusinessUnitCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitCertificateRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitCertificateRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{110}
}

func (x *CreateBusinessUnitCertificateRequest) GetBusinessUnitCertificate() *BusinessUnitCertificate {
	if x != nil {
		return x.BusinessUnitCertificate
	}
	return nil
}

// required business_unit_certificate_id
type GetBusinessUnitCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（認証）ID
	BusinessUnitCertificateId string `protobuf:"bytes,1,opt,name=business_unit_certificate_id,json=businessUnitCertificateId,proto3" json:"business_unit_certificate_id,omitempty"`
}

func (x *GetBusinessUnitCertificateRequest) Reset() {
	*x = GetBusinessUnitCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitCertificateRequest) ProtoMessage() {}

func (x *GetBusinessUnitCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitCertificateRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{111}
}

func (x *GetBusinessUnitCertificateRequest) GetBusinessUnitCertificateId() string {
	if x != nil {
		return x.BusinessUnitCertificateId
	}
	return ""
}

// required business_unit_certificate
type UpdateBusinessUnitCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（認証）マスタ
	// required business_unit_certificate_id
	// required updated_at
	BusinessUnitCertificate *BusinessUnitCertificate `protobuf:"bytes,1,opt,name=business_unit_certificate,json=businessUnitCertificate,proto3" json:"business_unit_certificate,omitempty"`
}

func (x *UpdateBusinessUnitCertificateRequest) Reset() {
	*x = UpdateBusinessUnitCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitCertificateRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitCertificateRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitCertificateRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{112}
}

func (x *UpdateBusinessUnitCertificateRequest) GetBusinessUnitCertificate() *BusinessUnitCertificate {
	if x != nil {
		return x.BusinessUnitCertificate
	}
	return nil
}

// required business_unit_certificate
type DeleteBusinessUnitCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（認証）マスタ
	// required business_unit_certificate_id
	// required updated_at
	BusinessUnitCertificate *BusinessUnitCertificate `protobuf:"bytes,1,opt,name=business_unit_certificate,json=businessUnitCertificate,proto3" json:"business_unit_certificate,omitempty"`
}

func (x *DeleteBusinessUnitCertificateRequest) Reset() {
	*x = DeleteBusinessUnitCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitCertificateRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitCertificateRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitCertificateRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{113}
}

func (x *DeleteBusinessUnitCertificateRequest) GetBusinessUnitCertificate() *BusinessUnitCertificate {
	if x != nil {
		return x.BusinessUnitCertificate
	}
	return nil
}

// 自社企業（得意分野）マスタ
type ListBusinessUnitStrengthsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitStrengthsRequest) Reset() {
	*x = ListBusinessUnitStrengthsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitStrengthsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitStrengthsRequest) ProtoMessage() {}

func (x *ListBusinessUnitStrengthsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitStrengthsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitStrengthsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{114}
}

func (x *ListBusinessUnitStrengthsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitStrengthsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitStrengthsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（得意分野）マスタ
	Items []*BusinessUnitStrength `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitStrengthsResponse) Reset() {
	*x = ListBusinessUnitStrengthsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitStrengthsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitStrengthsResponse) ProtoMessage() {}

func (x *ListBusinessUnitStrengthsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitStrengthsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitStrengthsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{115}
}

func (x *ListBusinessUnitStrengthsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitStrengthsResponse) GetItems() []*BusinessUnitStrength {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitStrengthsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_strength
type CreateBusinessUnitStrengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（得意分野）マスタ
	// required company_id
	BusinessUnitStrength *BusinessUnitStrength `protobuf:"bytes,1,opt,name=business_unit_strength,json=businessUnitStrength,proto3" json:"business_unit_strength,omitempty"`
}

func (x *CreateBusinessUnitStrengthRequest) Reset() {
	*x = CreateBusinessUnitStrengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitStrengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitStrengthRequest) ProtoMessage() {}

func (x *CreateBusinessUnitStrengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitStrengthRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitStrengthRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{116}
}

func (x *CreateBusinessUnitStrengthRequest) GetBusinessUnitStrength() *BusinessUnitStrength {
	if x != nil {
		return x.BusinessUnitStrength
	}
	return nil
}

// required business_unit_strength_id
type GetBusinessUnitStrengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（得意分野）ID
	BusinessUnitStrengthId string `protobuf:"bytes,1,opt,name=business_unit_strength_id,json=businessUnitStrengthId,proto3" json:"business_unit_strength_id,omitempty"`
}

func (x *GetBusinessUnitStrengthRequest) Reset() {
	*x = GetBusinessUnitStrengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitStrengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitStrengthRequest) ProtoMessage() {}

func (x *GetBusinessUnitStrengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitStrengthRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitStrengthRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{117}
}

func (x *GetBusinessUnitStrengthRequest) GetBusinessUnitStrengthId() string {
	if x != nil {
		return x.BusinessUnitStrengthId
	}
	return ""
}

// required business_unit_strength
type UpdateBusinessUnitStrengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（得意分野）マスタ
	// required business_unit_strength_id
	// required updated_at
	BusinessUnitStrength *BusinessUnitStrength `protobuf:"bytes,1,opt,name=business_unit_strength,json=businessUnitStrength,proto3" json:"business_unit_strength,omitempty"`
}

func (x *UpdateBusinessUnitStrengthRequest) Reset() {
	*x = UpdateBusinessUnitStrengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitStrengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitStrengthRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitStrengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitStrengthRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitStrengthRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateBusinessUnitStrengthRequest) GetBusinessUnitStrength() *BusinessUnitStrength {
	if x != nil {
		return x.BusinessUnitStrength
	}
	return nil
}

// required business_unit_strength
type DeleteBusinessUnitStrengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（得意分野）マスタ
	// required business_unit_strength_id
	// required updated_at
	BusinessUnitStrength *BusinessUnitStrength `protobuf:"bytes,1,opt,name=business_unit_strength,json=businessUnitStrength,proto3" json:"business_unit_strength,omitempty"`
}

func (x *DeleteBusinessUnitStrengthRequest) Reset() {
	*x = DeleteBusinessUnitStrengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitStrengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitStrengthRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitStrengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitStrengthRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitStrengthRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{119}
}

func (x *DeleteBusinessUnitStrengthRequest) GetBusinessUnitStrength() *BusinessUnitStrength {
	if x != nil {
		return x.BusinessUnitStrength
	}
	return nil
}

// 自社企業（技術情報）マスタ
type ListBusinessUnitSkillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitSkillsRequest) Reset() {
	*x = ListBusinessUnitSkillsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitSkillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitSkillsRequest) ProtoMessage() {}

func (x *ListBusinessUnitSkillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitSkillsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitSkillsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{120}
}

func (x *ListBusinessUnitSkillsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitSkillsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitSkillsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（技術情報）マスタ
	Items []*BusinessUnitSkill `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitSkillsResponse) Reset() {
	*x = ListBusinessUnitSkillsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitSkillsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitSkillsResponse) ProtoMessage() {}

func (x *ListBusinessUnitSkillsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitSkillsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitSkillsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{121}
}

func (x *ListBusinessUnitSkillsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitSkillsResponse) GetItems() []*BusinessUnitSkill {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitSkillsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_skill
type CreateBusinessUnitSkillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（技術情報）マスタ
	// required company_id
	BusinessUnitSkill *BusinessUnitSkill `protobuf:"bytes,1,opt,name=business_unit_skill,json=businessUnitSkill,proto3" json:"business_unit_skill,omitempty"`
}

func (x *CreateBusinessUnitSkillRequest) Reset() {
	*x = CreateBusinessUnitSkillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitSkillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitSkillRequest) ProtoMessage() {}

func (x *CreateBusinessUnitSkillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitSkillRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitSkillRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{122}
}

func (x *CreateBusinessUnitSkillRequest) GetBusinessUnitSkill() *BusinessUnitSkill {
	if x != nil {
		return x.BusinessUnitSkill
	}
	return nil
}

// required business_unit_skill_id
type GetBusinessUnitSkillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（技術情報）ID
	BusinessUnitSkillId string `protobuf:"bytes,1,opt,name=business_unit_skill_id,json=businessUnitSkillId,proto3" json:"business_unit_skill_id,omitempty"`
}

func (x *GetBusinessUnitSkillRequest) Reset() {
	*x = GetBusinessUnitSkillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitSkillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitSkillRequest) ProtoMessage() {}

func (x *GetBusinessUnitSkillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitSkillRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitSkillRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{123}
}

func (x *GetBusinessUnitSkillRequest) GetBusinessUnitSkillId() string {
	if x != nil {
		return x.BusinessUnitSkillId
	}
	return ""
}

// required business_unit_skill
type UpdateBusinessUnitSkillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（技術情報）マスタ
	// required business_unit_skill_id
	// required updated_at
	BusinessUnitSkill *BusinessUnitSkill `protobuf:"bytes,1,opt,name=business_unit_skill,json=businessUnitSkill,proto3" json:"business_unit_skill,omitempty"`
}

func (x *UpdateBusinessUnitSkillRequest) Reset() {
	*x = UpdateBusinessUnitSkillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitSkillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitSkillRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitSkillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitSkillRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitSkillRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{124}
}

func (x *UpdateBusinessUnitSkillRequest) GetBusinessUnitSkill() *BusinessUnitSkill {
	if x != nil {
		return x.BusinessUnitSkill
	}
	return nil
}

// required business_unit_skill
type DeleteBusinessUnitSkillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（技術情報）マスタ
	// required business_unit_skill_id
	// required updated_at
	BusinessUnitSkill *BusinessUnitSkill `protobuf:"bytes,1,opt,name=business_unit_skill,json=businessUnitSkill,proto3" json:"business_unit_skill,omitempty"`
}

func (x *DeleteBusinessUnitSkillRequest) Reset() {
	*x = DeleteBusinessUnitSkillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitSkillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitSkillRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitSkillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitSkillRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitSkillRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{125}
}

func (x *DeleteBusinessUnitSkillRequest) GetBusinessUnitSkill() *BusinessUnitSkill {
	if x != nil {
		return x.BusinessUnitSkill
	}
	return nil
}

// 取引先管理（連絡先）依頼データ
type ListBusinessUnitContactHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementIds []string `protobuf:"bytes,3,rep,name=business_unit_management_ids,json=businessUnitManagementIds,proto3" json:"business_unit_management_ids,omitempty"`
}

func (x *ListBusinessUnitContactHeadersRequest) Reset() {
	*x = ListBusinessUnitContactHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactHeadersRequest) ProtoMessage() {}

func (x *ListBusinessUnitContactHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactHeadersRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactHeadersRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{126}
}

func (x *ListBusinessUnitContactHeadersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitContactHeadersRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *ListBusinessUnitContactHeadersRequest) GetBusinessUnitManagementIds() []string {
	if x != nil {
		return x.BusinessUnitManagementIds
	}
	return nil
}

type ListBusinessUnitContactHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理（連絡先）依頼データ
	Items []*BusinessUnitContactHeader `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitContactHeadersResponse) Reset() {
	*x = ListBusinessUnitContactHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactHeadersResponse) ProtoMessage() {}

func (x *ListBusinessUnitContactHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactHeadersResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactHeadersResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{127}
}

func (x *ListBusinessUnitContactHeadersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitContactHeadersResponse) GetItems() []*BusinessUnitContactHeader {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitContactHeadersResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_contact_header
type CreateBusinessUnitContactHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）依頼データ
	BusinessUnitContactHeader *BusinessUnitContactHeader `protobuf:"bytes,1,opt,name=business_unit_contact_header,json=businessUnitContactHeader,proto3" json:"business_unit_contact_header,omitempty"`
}

func (x *CreateBusinessUnitContactHeaderRequest) Reset() {
	*x = CreateBusinessUnitContactHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitContactHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitContactHeaderRequest) ProtoMessage() {}

func (x *CreateBusinessUnitContactHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitContactHeaderRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitContactHeaderRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{128}
}

func (x *CreateBusinessUnitContactHeaderRequest) GetBusinessUnitContactHeader() *BusinessUnitContactHeader {
	if x != nil {
		return x.BusinessUnitContactHeader
	}
	return nil
}

// required business_unit_contact_header_id
type GetBusinessUnitContactHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）依頼ID
	BusinessUnitContactHeaderId string `protobuf:"bytes,1,opt,name=business_unit_contact_header_id,json=businessUnitContactHeaderId,proto3" json:"business_unit_contact_header_id,omitempty"`
}

func (x *GetBusinessUnitContactHeaderRequest) Reset() {
	*x = GetBusinessUnitContactHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitContactHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitContactHeaderRequest) ProtoMessage() {}

func (x *GetBusinessUnitContactHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitContactHeaderRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitContactHeaderRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{129}
}

func (x *GetBusinessUnitContactHeaderRequest) GetBusinessUnitContactHeaderId() string {
	if x != nil {
		return x.BusinessUnitContactHeaderId
	}
	return ""
}

// required business_unit_contact_header
type UpdateBusinessUnitContactHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）依頼データ
	// required business_unit_contact_header_id
	// required updated_at
	BusinessUnitContactHeader *BusinessUnitContactHeader `protobuf:"bytes,1,opt,name=business_unit_contact_header,json=businessUnitContactHeader,proto3" json:"business_unit_contact_header,omitempty"`
}

func (x *UpdateBusinessUnitContactHeaderRequest) Reset() {
	*x = UpdateBusinessUnitContactHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitContactHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitContactHeaderRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitContactHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitContactHeaderRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitContactHeaderRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{130}
}

func (x *UpdateBusinessUnitContactHeaderRequest) GetBusinessUnitContactHeader() *BusinessUnitContactHeader {
	if x != nil {
		return x.BusinessUnitContactHeader
	}
	return nil
}

// required business_unit_contact_header
type DeleteBusinessUnitContactHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）依頼データ
	// required business_unit_contact_header_id
	// required updated_at
	BusinessUnitContactHeader *BusinessUnitContactHeader `protobuf:"bytes,1,opt,name=business_unit_contact_header,json=businessUnitContactHeader,proto3" json:"business_unit_contact_header,omitempty"`
}

func (x *DeleteBusinessUnitContactHeaderRequest) Reset() {
	*x = DeleteBusinessUnitContactHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitContactHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitContactHeaderRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitContactHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitContactHeaderRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitContactHeaderRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{131}
}

func (x *DeleteBusinessUnitContactHeaderRequest) GetBusinessUnitContactHeader() *BusinessUnitContactHeader {
	if x != nil {
		return x.BusinessUnitContactHeader
	}
	return nil
}

// 取引先管理（連絡先）マスタ
type ListBusinessUnitContactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementIds []string `protobuf:"bytes,3,rep,name=business_unit_management_ids,json=businessUnitManagementIds,proto3" json:"business_unit_management_ids,omitempty"`
}

func (x *ListBusinessUnitContactsRequest) Reset() {
	*x = ListBusinessUnitContactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactsRequest) ProtoMessage() {}

func (x *ListBusinessUnitContactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{132}
}

func (x *ListBusinessUnitContactsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitContactsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *ListBusinessUnitContactsRequest) GetBusinessUnitManagementIds() []string {
	if x != nil {
		return x.BusinessUnitManagementIds
	}
	return nil
}

type ListBusinessUnitContactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理（連絡先）マスタ
	Items []*BusinessUnitContact `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitContactsResponse) Reset() {
	*x = ListBusinessUnitContactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactsResponse) ProtoMessage() {}

func (x *ListBusinessUnitContactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{133}
}

func (x *ListBusinessUnitContactsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitContactsResponse) GetItems() []*BusinessUnitContact {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitContactsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_contact
type CreateBusinessUnitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）マスタ
	BusinessUnitContact *BusinessUnitContact `protobuf:"bytes,1,opt,name=business_unit_contact,json=businessUnitContact,proto3" json:"business_unit_contact,omitempty"`
}

func (x *CreateBusinessUnitContactRequest) Reset() {
	*x = CreateBusinessUnitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitContactRequest) ProtoMessage() {}

func (x *CreateBusinessUnitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitContactRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitContactRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{134}
}

func (x *CreateBusinessUnitContactRequest) GetBusinessUnitContact() *BusinessUnitContact {
	if x != nil {
		return x.BusinessUnitContact
	}
	return nil
}

// required business_unit_contact_id
type GetBusinessUnitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）ID
	BusinessUnitContactId string `protobuf:"bytes,1,opt,name=business_unit_contact_id,json=businessUnitContactId,proto3" json:"business_unit_contact_id,omitempty"`
}

func (x *GetBusinessUnitContactRequest) Reset() {
	*x = GetBusinessUnitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitContactRequest) ProtoMessage() {}

func (x *GetBusinessUnitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitContactRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitContactRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{135}
}

func (x *GetBusinessUnitContactRequest) GetBusinessUnitContactId() string {
	if x != nil {
		return x.BusinessUnitContactId
	}
	return ""
}

// required business_unit_contact
type UpdateBusinessUnitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）マスタ
	// required business_unit_contact_id
	// required updated_at
	BusinessUnitContact *BusinessUnitContact `protobuf:"bytes,1,opt,name=business_unit_contact,json=businessUnitContact,proto3" json:"business_unit_contact,omitempty"`
}

func (x *UpdateBusinessUnitContactRequest) Reset() {
	*x = UpdateBusinessUnitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitContactRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitContactRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitContactRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{136}
}

func (x *UpdateBusinessUnitContactRequest) GetBusinessUnitContact() *BusinessUnitContact {
	if x != nil {
		return x.BusinessUnitContact
	}
	return nil
}

// required business_unit_contact
type DeleteBusinessUnitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）マスタ
	// required business_unit_contact_id
	// required updated_at
	BusinessUnitContact *BusinessUnitContact `protobuf:"bytes,1,opt,name=business_unit_contact,json=businessUnitContact,proto3" json:"business_unit_contact,omitempty"`
}

func (x *DeleteBusinessUnitContactRequest) Reset() {
	*x = DeleteBusinessUnitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitContactRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitContactRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitContactRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{137}
}

func (x *DeleteBusinessUnitContactRequest) GetBusinessUnitContact() *BusinessUnitContact {
	if x != nil {
		return x.BusinessUnitContact
	}
	return nil
}

// 取引先管理（連絡先）社内管理データ
type ListBusinessUnitContactAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementIds []string `protobuf:"bytes,2,rep,name=business_unit_management_ids,json=businessUnitManagementIds,proto3" json:"business_unit_management_ids,omitempty"`
}

func (x *ListBusinessUnitContactAttributesRequest) Reset() {
	*x = ListBusinessUnitContactAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactAttributesRequest) ProtoMessage() {}

func (x *ListBusinessUnitContactAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactAttributesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{138}
}

func (x *ListBusinessUnitContactAttributesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitContactAttributesRequest) GetBusinessUnitManagementIds() []string {
	if x != nil {
		return x.BusinessUnitManagementIds
	}
	return nil
}

type ListBusinessUnitContactAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理（連絡先）社内管理データ
	Items []*BusinessUnitContactAttribute `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitContactAttributesResponse) Reset() {
	*x = ListBusinessUnitContactAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactAttributesResponse) ProtoMessage() {}

func (x *ListBusinessUnitContactAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactAttributesResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactAttributesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{139}
}

func (x *ListBusinessUnitContactAttributesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitContactAttributesResponse) GetItems() []*BusinessUnitContactAttribute {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitContactAttributesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_contact_attribute
type CreateBusinessUnitContactAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）社内管理データ
	// required business_unit_management_id
	BusinessUnitContactAttribute *BusinessUnitContactAttribute `protobuf:"bytes,1,opt,name=business_unit_contact_attribute,json=businessUnitContactAttribute,proto3" json:"business_unit_contact_attribute,omitempty"`
}

func (x *CreateBusinessUnitContactAttributeRequest) Reset() {
	*x = CreateBusinessUnitContactAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitContactAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitContactAttributeRequest) ProtoMessage() {}

func (x *CreateBusinessUnitContactAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitContactAttributeRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitContactAttributeRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{140}
}

func (x *CreateBusinessUnitContactAttributeRequest) GetBusinessUnitContactAttribute() *BusinessUnitContactAttribute {
	if x != nil {
		return x.BusinessUnitContactAttribute
	}
	return nil
}

// required business_unit_contact_attribute_id
type GetBusinessUnitContactAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）社内管理ID
	BusinessUnitContactAttributeId string `protobuf:"bytes,1,opt,name=business_unit_contact_attribute_id,json=businessUnitContactAttributeId,proto3" json:"business_unit_contact_attribute_id,omitempty"`
}

func (x *GetBusinessUnitContactAttributeRequest) Reset() {
	*x = GetBusinessUnitContactAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitContactAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitContactAttributeRequest) ProtoMessage() {}

func (x *GetBusinessUnitContactAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitContactAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitContactAttributeRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{141}
}

func (x *GetBusinessUnitContactAttributeRequest) GetBusinessUnitContactAttributeId() string {
	if x != nil {
		return x.BusinessUnitContactAttributeId
	}
	return ""
}

// required business_unit_contact_attribute
type UpdateBusinessUnitContactAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）社内管理データ
	// required business_unit_contact_attribute_id
	// required updated_at
	BusinessUnitContactAttribute *BusinessUnitContactAttribute `protobuf:"bytes,1,opt,name=business_unit_contact_attribute,json=businessUnitContactAttribute,proto3" json:"business_unit_contact_attribute,omitempty"`
}

func (x *UpdateBusinessUnitContactAttributeRequest) Reset() {
	*x = UpdateBusinessUnitContactAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitContactAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitContactAttributeRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitContactAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitContactAttributeRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitContactAttributeRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{142}
}

func (x *UpdateBusinessUnitContactAttributeRequest) GetBusinessUnitContactAttribute() *BusinessUnitContactAttribute {
	if x != nil {
		return x.BusinessUnitContactAttribute
	}
	return nil
}

// required business_unit_contact_attribute
type DeleteBusinessUnitContactAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）社内管理データ
	// required business_unit_contact_attribute_id
	// required updated_at
	BusinessUnitContactAttribute *BusinessUnitContactAttribute `protobuf:"bytes,1,opt,name=business_unit_contact_attribute,json=businessUnitContactAttribute,proto3" json:"business_unit_contact_attribute,omitempty"`
}

func (x *DeleteBusinessUnitContactAttributeRequest) Reset() {
	*x = DeleteBusinessUnitContactAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitContactAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitContactAttributeRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitContactAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitContactAttributeRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitContactAttributeRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{143}
}

func (x *DeleteBusinessUnitContactAttributeRequest) GetBusinessUnitContactAttribute() *BusinessUnitContactAttribute {
	if x != nil {
		return x.BusinessUnitContactAttribute
	}
	return nil
}

// TSRデータ
type ListTokyoShokoResearchsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 識別コード
	Codes []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *ListTokyoShokoResearchsRequest) Reset() {
	*x = ListTokyoShokoResearchsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokyoShokoResearchsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokyoShokoResearchsRequest) ProtoMessage() {}

func (x *ListTokyoShokoResearchsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokyoShokoResearchsRequest.ProtoReflect.Descriptor instead.
func (*ListTokyoShokoResearchsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{144}
}

func (x *ListTokyoShokoResearchsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTokyoShokoResearchsRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type ListTokyoShokoResearchsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// TSRデータ
	Items []*TokyoShokoResearch `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTokyoShokoResearchsResponse) Reset() {
	*x = ListTokyoShokoResearchsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokyoShokoResearchsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokyoShokoResearchsResponse) ProtoMessage() {}

func (x *ListTokyoShokoResearchsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokyoShokoResearchsResponse.ProtoReflect.Descriptor instead.
func (*ListTokyoShokoResearchsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{145}
}

func (x *ListTokyoShokoResearchsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTokyoShokoResearchsResponse) GetItems() []*TokyoShokoResearch {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTokyoShokoResearchsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required tokyo_shoko_research
type CreateTokyoShokoResearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRデータ
	// required code
	TokyoShokoResearch *TokyoShokoResearch `protobuf:"bytes,1,opt,name=tokyo_shoko_research,json=tokyoShokoResearch,proto3" json:"tokyo_shoko_research,omitempty"`
}

func (x *CreateTokyoShokoResearchRequest) Reset() {
	*x = CreateTokyoShokoResearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokyoShokoResearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokyoShokoResearchRequest) ProtoMessage() {}

func (x *CreateTokyoShokoResearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokyoShokoResearchRequest.ProtoReflect.Descriptor instead.
func (*CreateTokyoShokoResearchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{146}
}

func (x *CreateTokyoShokoResearchRequest) GetTokyoShokoResearch() *TokyoShokoResearch {
	if x != nil {
		return x.TokyoShokoResearch
	}
	return nil
}

// required tokyo_shoko_research_id
type GetTokyoShokoResearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRID
	TokyoShokoResearchId string `protobuf:"bytes,1,opt,name=tokyo_shoko_research_id,json=tokyoShokoResearchId,proto3" json:"tokyo_shoko_research_id,omitempty"`
}

func (x *GetTokyoShokoResearchRequest) Reset() {
	*x = GetTokyoShokoResearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokyoShokoResearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokyoShokoResearchRequest) ProtoMessage() {}

func (x *GetTokyoShokoResearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokyoShokoResearchRequest.ProtoReflect.Descriptor instead.
func (*GetTokyoShokoResearchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{147}
}

func (x *GetTokyoShokoResearchRequest) GetTokyoShokoResearchId() string {
	if x != nil {
		return x.TokyoShokoResearchId
	}
	return ""
}

// required tokyo_shoko_research
type UpdateTokyoShokoResearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRデータ
	// required tokyo_shoko_research_id
	// required updated_at
	TokyoShokoResearch *TokyoShokoResearch `protobuf:"bytes,1,opt,name=tokyo_shoko_research,json=tokyoShokoResearch,proto3" json:"tokyo_shoko_research,omitempty"`
}

func (x *UpdateTokyoShokoResearchRequest) Reset() {
	*x = UpdateTokyoShokoResearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokyoShokoResearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokyoShokoResearchRequest) ProtoMessage() {}

func (x *UpdateTokyoShokoResearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokyoShokoResearchRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokyoShokoResearchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{148}
}

func (x *UpdateTokyoShokoResearchRequest) GetTokyoShokoResearch() *TokyoShokoResearch {
	if x != nil {
		return x.TokyoShokoResearch
	}
	return nil
}

// required tokyo_shoko_research
type DeleteTokyoShokoResearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRデータ
	// required tokyo_shoko_research_id
	// required updated_at
	TokyoShokoResearch *TokyoShokoResearch `protobuf:"bytes,1,opt,name=tokyo_shoko_research,json=tokyoShokoResearch,proto3" json:"tokyo_shoko_research,omitempty"`
}

func (x *DeleteTokyoShokoResearchRequest) Reset() {
	*x = DeleteTokyoShokoResearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTokyoShokoResearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokyoShokoResearchRequest) ProtoMessage() {}

func (x *DeleteTokyoShokoResearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokyoShokoResearchRequest.ProtoReflect.Descriptor instead.
func (*DeleteTokyoShokoResearchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{149}
}

func (x *DeleteTokyoShokoResearchRequest) GetTokyoShokoResearch() *TokyoShokoResearch {
	if x != nil {
		return x.TokyoShokoResearch
	}
	return nil
}

// TSR企業情報データ
type ListTokyoShokoResearchCompanyProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 識別コード
	Codes []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *ListTokyoShokoResearchCompanyProfilesRequest) Reset() {
	*x = ListTokyoShokoResearchCompanyProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokyoShokoResearchCompanyProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokyoShokoResearchCompanyProfilesRequest) ProtoMessage() {}

func (x *ListTokyoShokoResearchCompanyProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokyoShokoResearchCompanyProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListTokyoShokoResearchCompanyProfilesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{150}
}

func (x *ListTokyoShokoResearchCompanyProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTokyoShokoResearchCompanyProfilesRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type ListTokyoShokoResearchCompanyProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// TSR企業情報データ
	Items []*TokyoShokoResearchCompanyProfile `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTokyoShokoResearchCompanyProfilesResponse) Reset() {
	*x = ListTokyoShokoResearchCompanyProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokyoShokoResearchCompanyProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokyoShokoResearchCompanyProfilesResponse) ProtoMessage() {}

func (x *ListTokyoShokoResearchCompanyProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokyoShokoResearchCompanyProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListTokyoShokoResearchCompanyProfilesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{151}
}

func (x *ListTokyoShokoResearchCompanyProfilesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTokyoShokoResearchCompanyProfilesResponse) GetItems() []*TokyoShokoResearchCompanyProfile {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTokyoShokoResearchCompanyProfilesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required tokyo_shoko_research_company_profile
type CreateTokyoShokoResearchCompanyProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR企業情報データ
	// required code
	TokyoShokoResearchCompanyProfile *TokyoShokoResearchCompanyProfile `protobuf:"bytes,1,opt,name=tokyo_shoko_research_company_profile,json=tokyoShokoResearchCompanyProfile,proto3" json:"tokyo_shoko_research_company_profile,omitempty"`
}

func (x *CreateTokyoShokoResearchCompanyProfileRequest) Reset() {
	*x = CreateTokyoShokoResearchCompanyProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokyoShokoResearchCompanyProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokyoShokoResearchCompanyProfileRequest) ProtoMessage() {}

func (x *CreateTokyoShokoResearchCompanyProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokyoShokoResearchCompanyProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateTokyoShokoResearchCompanyProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{152}
}

func (x *CreateTokyoShokoResearchCompanyProfileRequest) GetTokyoShokoResearchCompanyProfile() *TokyoShokoResearchCompanyProfile {
	if x != nil {
		return x.TokyoShokoResearchCompanyProfile
	}
	return nil
}

// required tokyo_shoko_research_company_profile_id
type GetTokyoShokoResearchCompanyProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR_CP_ID
	TokyoShokoResearchCompanyProfileId string `protobuf:"bytes,1,opt,name=tokyo_shoko_research_company_profile_id,json=tokyoShokoResearchCompanyProfileId,proto3" json:"tokyo_shoko_research_company_profile_id,omitempty"`
}

func (x *GetTokyoShokoResearchCompanyProfileRequest) Reset() {
	*x = GetTokyoShokoResearchCompanyProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokyoShokoResearchCompanyProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokyoShokoResearchCompanyProfileRequest) ProtoMessage() {}

func (x *GetTokyoShokoResearchCompanyProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokyoShokoResearchCompanyProfileRequest.ProtoReflect.Descriptor instead.
func (*GetTokyoShokoResearchCompanyProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{153}
}

func (x *GetTokyoShokoResearchCompanyProfileRequest) GetTokyoShokoResearchCompanyProfileId() string {
	if x != nil {
		return x.TokyoShokoResearchCompanyProfileId
	}
	return ""
}

// required tokyo_shoko_research_company_profile
type UpdateTokyoShokoResearchCompanyProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR企業情報データ
	// required tokyo_shoko_research_company_profile_id
	// required updated_at
	TokyoShokoResearchCompanyProfile *TokyoShokoResearchCompanyProfile `protobuf:"bytes,1,opt,name=tokyo_shoko_research_company_profile,json=tokyoShokoResearchCompanyProfile,proto3" json:"tokyo_shoko_research_company_profile,omitempty"`
}

func (x *UpdateTokyoShokoResearchCompanyProfileRequest) Reset() {
	*x = UpdateTokyoShokoResearchCompanyProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokyoShokoResearchCompanyProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokyoShokoResearchCompanyProfileRequest) ProtoMessage() {}

func (x *UpdateTokyoShokoResearchCompanyProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokyoShokoResearchCompanyProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokyoShokoResearchCompanyProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{154}
}

func (x *UpdateTokyoShokoResearchCompanyProfileRequest) GetTokyoShokoResearchCompanyProfile() *TokyoShokoResearchCompanyProfile {
	if x != nil {
		return x.TokyoShokoResearchCompanyProfile
	}
	return nil
}

// required tokyo_shoko_research_company_profile
type DeleteTokyoShokoResearchCompanyProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR企業情報データ
	// required tokyo_shoko_research_company_profile_id
	// required updated_at
	TokyoShokoResearchCompanyProfile *TokyoShokoResearchCompanyProfile `protobuf:"bytes,1,opt,name=tokyo_shoko_research_company_profile,json=tokyoShokoResearchCompanyProfile,proto3" json:"tokyo_shoko_research_company_profile,omitempty"`
}

func (x *DeleteTokyoShokoResearchCompanyProfileRequest) Reset() {
	*x = DeleteTokyoShokoResearchCompanyProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTokyoShokoResearchCompanyProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokyoShokoResearchCompanyProfileRequest) ProtoMessage() {}

func (x *DeleteTokyoShokoResearchCompanyProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokyoShokoResearchCompanyProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteTokyoShokoResearchCompanyProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{155}
}

func (x *DeleteTokyoShokoResearchCompanyProfileRequest) GetTokyoShokoResearchCompanyProfile() *TokyoShokoResearchCompanyProfile {
	if x != nil {
		return x.TokyoShokoResearchCompanyProfile
	}
	return nil
}

// TSRリスクスコアデータ
type ListTokyoShokoResearchRiskScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 識別コード
	Codes []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *ListTokyoShokoResearchRiskScoresRequest) Reset() {
	*x = ListTokyoShokoResearchRiskScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokyoShokoResearchRiskScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokyoShokoResearchRiskScoresRequest) ProtoMessage() {}

func (x *ListTokyoShokoResearchRiskScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokyoShokoResearchRiskScoresRequest.ProtoReflect.Descriptor instead.
func (*ListTokyoShokoResearchRiskScoresRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{156}
}

func (x *ListTokyoShokoResearchRiskScoresRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTokyoShokoResearchRiskScoresRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type ListTokyoShokoResearchRiskScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// TSRリスクスコアデータ
	Items []*TokyoShokoResearchRiskScore `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTokyoShokoResearchRiskScoresResponse) Reset() {
	*x = ListTokyoShokoResearchRiskScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTokyoShokoResearchRiskScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTokyoShokoResearchRiskScoresResponse) ProtoMessage() {}

func (x *ListTokyoShokoResearchRiskScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTokyoShokoResearchRiskScoresResponse.ProtoReflect.Descriptor instead.
func (*ListTokyoShokoResearchRiskScoresResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{157}
}

func (x *ListTokyoShokoResearchRiskScoresResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTokyoShokoResearchRiskScoresResponse) GetItems() []*TokyoShokoResearchRiskScore {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListTokyoShokoResearchRiskScoresResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required tokyo_shoko_research_risk_score
type CreateTokyoShokoResearchRiskScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRリスクスコアデータ
	// required code
	TokyoShokoResearchRiskScore *TokyoShokoResearchRiskScore `protobuf:"bytes,1,opt,name=tokyo_shoko_research_risk_score,json=tokyoShokoResearchRiskScore,proto3" json:"tokyo_shoko_research_risk_score,omitempty"`
}

func (x *CreateTokyoShokoResearchRiskScoreRequest) Reset() {
	*x = CreateTokyoShokoResearchRiskScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokyoShokoResearchRiskScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokyoShokoResearchRiskScoreRequest) ProtoMessage() {}

func (x *CreateTokyoShokoResearchRiskScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokyoShokoResearchRiskScoreRequest.ProtoReflect.Descriptor instead.
func (*CreateTokyoShokoResearchRiskScoreRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{158}
}

func (x *CreateTokyoShokoResearchRiskScoreRequest) GetTokyoShokoResearchRiskScore() *TokyoShokoResearchRiskScore {
	if x != nil {
		return x.TokyoShokoResearchRiskScore
	}
	return nil
}

// required tokyo_shoko_research_risk_score_id
type GetTokyoShokoResearchRiskScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSR_RS_ID
	TokyoShokoResearchRiskScoreId string `protobuf:"bytes,1,opt,name=tokyo_shoko_research_risk_score_id,json=tokyoShokoResearchRiskScoreId,proto3" json:"tokyo_shoko_research_risk_score_id,omitempty"`
}

func (x *GetTokyoShokoResearchRiskScoreRequest) Reset() {
	*x = GetTokyoShokoResearchRiskScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokyoShokoResearchRiskScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokyoShokoResearchRiskScoreRequest) ProtoMessage() {}

func (x *GetTokyoShokoResearchRiskScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokyoShokoResearchRiskScoreRequest.ProtoReflect.Descriptor instead.
func (*GetTokyoShokoResearchRiskScoreRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{159}
}

func (x *GetTokyoShokoResearchRiskScoreRequest) GetTokyoShokoResearchRiskScoreId() string {
	if x != nil {
		return x.TokyoShokoResearchRiskScoreId
	}
	return ""
}

// required tokyo_shoko_research_risk_score
type UpdateTokyoShokoResearchRiskScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRリスクスコアデータ
	// required tokyo_shoko_research_risk_score_id
	// required updated_at
	TokyoShokoResearchRiskScore *TokyoShokoResearchRiskScore `protobuf:"bytes,1,opt,name=tokyo_shoko_research_risk_score,json=tokyoShokoResearchRiskScore,proto3" json:"tokyo_shoko_research_risk_score,omitempty"`
}

func (x *UpdateTokyoShokoResearchRiskScoreRequest) Reset() {
	*x = UpdateTokyoShokoResearchRiskScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokyoShokoResearchRiskScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokyoShokoResearchRiskScoreRequest) ProtoMessage() {}

func (x *UpdateTokyoShokoResearchRiskScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokyoShokoResearchRiskScoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokyoShokoResearchRiskScoreRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{160}
}

func (x *UpdateTokyoShokoResearchRiskScoreRequest) GetTokyoShokoResearchRiskScore() *TokyoShokoResearchRiskScore {
	if x != nil {
		return x.TokyoShokoResearchRiskScore
	}
	return nil
}

// required tokyo_shoko_research_risk_score
type DeleteTokyoShokoResearchRiskScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TSRリスクスコアデータ
	// required tokyo_shoko_research_risk_score_id
	// required updated_at
	TokyoShokoResearchRiskScore *TokyoShokoResearchRiskScore `protobuf:"bytes,1,opt,name=tokyo_shoko_research_risk_score,json=tokyoShokoResearchRiskScore,proto3" json:"tokyo_shoko_research_risk_score,omitempty"`
}

func (x *DeleteTokyoShokoResearchRiskScoreRequest) Reset() {
	*x = DeleteTokyoShokoResearchRiskScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTokyoShokoResearchRiskScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTokyoShokoResearchRiskScoreRequest) ProtoMessage() {}

func (x *DeleteTokyoShokoResearchRiskScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTokyoShokoResearchRiskScoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteTokyoShokoResearchRiskScoreRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{161}
}

func (x *DeleteTokyoShokoResearchRiskScoreRequest) GetTokyoShokoResearchRiskScore() *TokyoShokoResearchRiskScore {
	if x != nil {
		return x.TokyoShokoResearchRiskScore
	}
	return nil
}

// 第三者情報ファイルデータ
type ListBusinessUnitScoreAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 識別コード
	Codes []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *ListBusinessUnitScoreAssetsRequest) Reset() {
	*x = ListBusinessUnitScoreAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitScoreAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitScoreAssetsRequest) ProtoMessage() {}

func (x *ListBusinessUnitScoreAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitScoreAssetsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitScoreAssetsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{162}
}

func (x *ListBusinessUnitScoreAssetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitScoreAssetsRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type ListBusinessUnitScoreAssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 第三者情報ファイルデータ
	Items []*BusinessUnitScoreAsset `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitScoreAssetsResponse) Reset() {
	*x = ListBusinessUnitScoreAssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitScoreAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitScoreAssetsResponse) ProtoMessage() {}

func (x *ListBusinessUnitScoreAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitScoreAssetsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitScoreAssetsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{163}
}

func (x *ListBusinessUnitScoreAssetsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitScoreAssetsResponse) GetItems() []*BusinessUnitScoreAsset {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitScoreAssetsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_score_asset
type CreateBusinessUnitScoreAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第三者情報ファイルデータ
	// required code
	// required category
	BusinessUnitScoreAsset *BusinessUnitScoreAsset `protobuf:"bytes,1,opt,name=business_unit_score_asset,json=businessUnitScoreAsset,proto3" json:"business_unit_score_asset,omitempty"`
}

func (x *CreateBusinessUnitScoreAssetRequest) Reset() {
	*x = CreateBusinessUnitScoreAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitScoreAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitScoreAssetRequest) ProtoMessage() {}

func (x *CreateBusinessUnitScoreAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitScoreAssetRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitScoreAssetRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{164}
}

func (x *CreateBusinessUnitScoreAssetRequest) GetBusinessUnitScoreAsset() *BusinessUnitScoreAsset {
	if x != nil {
		return x.BusinessUnitScoreAsset
	}
	return nil
}

// required business_unit_score_asset_id
type GetBusinessUnitScoreAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第三者情報ファイルID
	BusinessUnitScoreAssetId string `protobuf:"bytes,1,opt,name=business_unit_score_asset_id,json=businessUnitScoreAssetId,proto3" json:"business_unit_score_asset_id,omitempty"`
}

func (x *GetBusinessUnitScoreAssetRequest) Reset() {
	*x = GetBusinessUnitScoreAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitScoreAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitScoreAssetRequest) ProtoMessage() {}

func (x *GetBusinessUnitScoreAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitScoreAssetRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitScoreAssetRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{165}
}

func (x *GetBusinessUnitScoreAssetRequest) GetBusinessUnitScoreAssetId() string {
	if x != nil {
		return x.BusinessUnitScoreAssetId
	}
	return ""
}

// required business_unit_score_asset
type UpdateBusinessUnitScoreAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第三者情報ファイルデータ
	// required business_unit_score_asset_id
	// required updated_at
	BusinessUnitScoreAsset *BusinessUnitScoreAsset `protobuf:"bytes,1,opt,name=business_unit_score_asset,json=businessUnitScoreAsset,proto3" json:"business_unit_score_asset,omitempty"`
}

func (x *UpdateBusinessUnitScoreAssetRequest) Reset() {
	*x = UpdateBusinessUnitScoreAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitScoreAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitScoreAssetRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitScoreAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitScoreAssetRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitScoreAssetRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{166}
}

func (x *UpdateBusinessUnitScoreAssetRequest) GetBusinessUnitScoreAsset() *BusinessUnitScoreAsset {
	if x != nil {
		return x.BusinessUnitScoreAsset
	}
	return nil
}

// required business_unit_score_asset
type DeleteBusinessUnitScoreAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 第三者情報ファイルデータ
	// required business_unit_score_asset_id
	// required updated_at
	BusinessUnitScoreAsset *BusinessUnitScoreAsset `protobuf:"bytes,1,opt,name=business_unit_score_asset,json=businessUnitScoreAsset,proto3" json:"business_unit_score_asset,omitempty"`
}

func (x *DeleteBusinessUnitScoreAssetRequest) Reset() {
	*x = DeleteBusinessUnitScoreAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitScoreAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitScoreAssetRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitScoreAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitScoreAssetRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitScoreAssetRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{167}
}

func (x *DeleteBusinessUnitScoreAssetRequest) GetBusinessUnitScoreAsset() *BusinessUnitScoreAsset {
	if x != nil {
		return x.BusinessUnitScoreAsset
	}
	return nil
}

// 取引先管理（文書）マスタ
type ListBusinessUnitDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementIds []string `protobuf:"bytes,2,rep,name=business_unit_management_ids,json=businessUnitManagementIds,proto3" json:"business_unit_management_ids,omitempty"`
}

func (x *ListBusinessUnitDocumentsRequest) Reset() {
	*x = ListBusinessUnitDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitDocumentsRequest) ProtoMessage() {}

func (x *ListBusinessUnitDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitDocumentsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{168}
}

func (x *ListBusinessUnitDocumentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitDocumentsRequest) GetBusinessUnitManagementIds() []string {
	if x != nil {
		return x.BusinessUnitManagementIds
	}
	return nil
}

type ListBusinessUnitDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理（文書）マスタ
	Items []*BusinessUnitDocument `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitDocumentsResponse) Reset() {
	*x = ListBusinessUnitDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitDocumentsResponse) ProtoMessage() {}

func (x *ListBusinessUnitDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitDocumentsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{169}
}

func (x *ListBusinessUnitDocumentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitDocumentsResponse) GetItems() []*BusinessUnitDocument {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitDocumentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_document
type CreateBusinessUnitDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（文書）マスタ
	// required business_unit_management_id
	BusinessUnitDocument *BusinessUnitDocument `protobuf:"bytes,1,opt,name=business_unit_document,json=businessUnitDocument,proto3" json:"business_unit_document,omitempty"`
}

func (x *CreateBusinessUnitDocumentRequest) Reset() {
	*x = CreateBusinessUnitDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitDocumentRequest) ProtoMessage() {}

func (x *CreateBusinessUnitDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitDocumentRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitDocumentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{170}
}

func (x *CreateBusinessUnitDocumentRequest) GetBusinessUnitDocument() *BusinessUnitDocument {
	if x != nil {
		return x.BusinessUnitDocument
	}
	return nil
}

// required business_unit_document_id
type GetBusinessUnitDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（文書）ID
	BusinessUnitDocumentId string `protobuf:"bytes,1,opt,name=business_unit_document_id,json=businessUnitDocumentId,proto3" json:"business_unit_document_id,omitempty"`
}

func (x *GetBusinessUnitDocumentRequest) Reset() {
	*x = GetBusinessUnitDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitDocumentRequest) ProtoMessage() {}

func (x *GetBusinessUnitDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitDocumentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{171}
}

func (x *GetBusinessUnitDocumentRequest) GetBusinessUnitDocumentId() string {
	if x != nil {
		return x.BusinessUnitDocumentId
	}
	return ""
}

// required business_unit_document
type UpdateBusinessUnitDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（文書）マスタ
	// required business_unit_document_id
	// required updated_at
	BusinessUnitDocument *BusinessUnitDocument `protobuf:"bytes,1,opt,name=business_unit_document,json=businessUnitDocument,proto3" json:"business_unit_document,omitempty"`
}

func (x *UpdateBusinessUnitDocumentRequest) Reset() {
	*x = UpdateBusinessUnitDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitDocumentRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitDocumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitDocumentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{172}
}

func (x *UpdateBusinessUnitDocumentRequest) GetBusinessUnitDocument() *BusinessUnitDocument {
	if x != nil {
		return x.BusinessUnitDocument
	}
	return nil
}

// required business_unit_document
type DeleteBusinessUnitDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（文書）マスタ
	// required business_unit_document_id
	// required updated_at
	BusinessUnitDocument *BusinessUnitDocument `protobuf:"bytes,1,opt,name=business_unit_document,json=businessUnitDocument,proto3" json:"business_unit_document,omitempty"`
}

func (x *DeleteBusinessUnitDocumentRequest) Reset() {
	*x = DeleteBusinessUnitDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitDocumentRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitDocumentRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitDocumentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{173}
}

func (x *DeleteBusinessUnitDocumentRequest) GetBusinessUnitDocument() *BusinessUnitDocument {
	if x != nil {
		return x.BusinessUnitDocument
	}
	return nil
}

// 有効管理データ（取引先）
type ListBusinessUnitActiveControlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *ListBusinessUnitActiveControlsRequest) Reset() {
	*x = ListBusinessUnitActiveControlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitActiveControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitActiveControlsRequest) ProtoMessage() {}

func (x *ListBusinessUnitActiveControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitActiveControlsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitActiveControlsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{174}
}

func (x *ListBusinessUnitActiveControlsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitActiveControlsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListBusinessUnitActiveControlsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 有効管理データ（取引先）
	Items []*BusinessUnitActiveControl `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitActiveControlsResponse) Reset() {
	*x = ListBusinessUnitActiveControlsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitActiveControlsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitActiveControlsResponse) ProtoMessage() {}

func (x *ListBusinessUnitActiveControlsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitActiveControlsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitActiveControlsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{175}
}

func (x *ListBusinessUnitActiveControlsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitActiveControlsResponse) GetItems() []*BusinessUnitActiveControl {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitActiveControlsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_active_control
type CreateBusinessUnitActiveControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理データ（取引先）
	// required company_id
	BusinessUnitActiveControl *BusinessUnitActiveControl `protobuf:"bytes,1,opt,name=business_unit_active_control,json=businessUnitActiveControl,proto3" json:"business_unit_active_control,omitempty"`
}

func (x *CreateBusinessUnitActiveControlRequest) Reset() {
	*x = CreateBusinessUnitActiveControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitActiveControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitActiveControlRequest) ProtoMessage() {}

func (x *CreateBusinessUnitActiveControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitActiveControlRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitActiveControlRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{176}
}

func (x *CreateBusinessUnitActiveControlRequest) GetBusinessUnitActiveControl() *BusinessUnitActiveControl {
	if x != nil {
		return x.BusinessUnitActiveControl
	}
	return nil
}

// required business_unit_active_control_id
type GetBusinessUnitActiveControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理ID
	BusinessUnitActiveControlId string `protobuf:"bytes,1,opt,name=business_unit_active_control_id,json=businessUnitActiveControlId,proto3" json:"business_unit_active_control_id,omitempty"`
}

func (x *GetBusinessUnitActiveControlRequest) Reset() {
	*x = GetBusinessUnitActiveControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitActiveControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitActiveControlRequest) ProtoMessage() {}

func (x *GetBusinessUnitActiveControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitActiveControlRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitActiveControlRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{177}
}

func (x *GetBusinessUnitActiveControlRequest) GetBusinessUnitActiveControlId() string {
	if x != nil {
		return x.BusinessUnitActiveControlId
	}
	return ""
}

// required business_unit_active_control
type UpdateBusinessUnitActiveControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理データ（取引先）
	// required business_unit_active_control_id
	// required updated_at
	BusinessUnitActiveControl *BusinessUnitActiveControl `protobuf:"bytes,1,opt,name=business_unit_active_control,json=businessUnitActiveControl,proto3" json:"business_unit_active_control,omitempty"`
}

func (x *UpdateBusinessUnitActiveControlRequest) Reset() {
	*x = UpdateBusinessUnitActiveControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitActiveControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitActiveControlRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitActiveControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitActiveControlRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitActiveControlRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{178}
}

func (x *UpdateBusinessUnitActiveControlRequest) GetBusinessUnitActiveControl() *BusinessUnitActiveControl {
	if x != nil {
		return x.BusinessUnitActiveControl
	}
	return nil
}

// required business_unit_active_control
type DeleteBusinessUnitActiveControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理データ（取引先）
	// required business_unit_active_control_id
	// required updated_at
	BusinessUnitActiveControl *BusinessUnitActiveControl `protobuf:"bytes,1,opt,name=business_unit_active_control,json=businessUnitActiveControl,proto3" json:"business_unit_active_control,omitempty"`
}

func (x *DeleteBusinessUnitActiveControlRequest) Reset() {
	*x = DeleteBusinessUnitActiveControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitActiveControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitActiveControlRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitActiveControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitActiveControlRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitActiveControlRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{179}
}

func (x *DeleteBusinessUnitActiveControlRequest) GetBusinessUnitActiveControl() *BusinessUnitActiveControl {
	if x != nil {
		return x.BusinessUnitActiveControl
	}
	return nil
}

// 取引先管理スナップショットデータ
type ListBusinessUnitSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// type_name
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// record_id
	RecordIds []string `protobuf:"bytes,3,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ListBusinessUnitSnapshotsRequest) Reset() {
	*x = ListBusinessUnitSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitSnapshotsRequest) ProtoMessage() {}

func (x *ListBusinessUnitSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{180}
}

func (x *ListBusinessUnitSnapshotsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitSnapshotsRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListBusinessUnitSnapshotsRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type ListBusinessUnitSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理スナップショットデータ
	Items []*BusinessUnitSnapshot `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitSnapshotsResponse) Reset() {
	*x = ListBusinessUnitSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitSnapshotsResponse) ProtoMessage() {}

func (x *ListBusinessUnitSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{181}
}

func (x *ListBusinessUnitSnapshotsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitSnapshotsResponse) GetItems() []*BusinessUnitSnapshot {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitSnapshotsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_snapshot
type CreateBusinessUnitSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理スナップショットデータ
	// required type_name
	// required record_id
	BusinessUnitSnapshot *BusinessUnitSnapshot `protobuf:"bytes,1,opt,name=business_unit_snapshot,json=businessUnitSnapshot,proto3" json:"business_unit_snapshot,omitempty"`
}

func (x *CreateBusinessUnitSnapshotRequest) Reset() {
	*x = CreateBusinessUnitSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitSnapshotRequest) ProtoMessage() {}

func (x *CreateBusinessUnitSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{182}
}

func (x *CreateBusinessUnitSnapshotRequest) GetBusinessUnitSnapshot() *BusinessUnitSnapshot {
	if x != nil {
		return x.BusinessUnitSnapshot
	}
	return nil
}

// required business_unit_snapshot_id
type GetBusinessUnitSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理スナップショットID
	BusinessUnitSnapshotId string `protobuf:"bytes,1,opt,name=business_unit_snapshot_id,json=businessUnitSnapshotId,proto3" json:"business_unit_snapshot_id,omitempty"`
}

func (x *GetBusinessUnitSnapshotRequest) Reset() {
	*x = GetBusinessUnitSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitSnapshotRequest) ProtoMessage() {}

func (x *GetBusinessUnitSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{183}
}

func (x *GetBusinessUnitSnapshotRequest) GetBusinessUnitSnapshotId() string {
	if x != nil {
		return x.BusinessUnitSnapshotId
	}
	return ""
}

// required business_unit_snapshot
type UpdateBusinessUnitSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理スナップショットデータ
	// required business_unit_snapshot_id
	// required updated_at
	BusinessUnitSnapshot *BusinessUnitSnapshot `protobuf:"bytes,1,opt,name=business_unit_snapshot,json=businessUnitSnapshot,proto3" json:"business_unit_snapshot,omitempty"`
}

func (x *UpdateBusinessUnitSnapshotRequest) Reset() {
	*x = UpdateBusinessUnitSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitSnapshotRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitSnapshotRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{184}
}

func (x *UpdateBusinessUnitSnapshotRequest) GetBusinessUnitSnapshot() *BusinessUnitSnapshot {
	if x != nil {
		return x.BusinessUnitSnapshot
	}
	return nil
}

// required business_unit_snapshot
type DeleteBusinessUnitSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理スナップショットデータ
	// required business_unit_snapshot_id
	// required updated_at
	BusinessUnitSnapshot *BusinessUnitSnapshot `protobuf:"bytes,1,opt,name=business_unit_snapshot,json=businessUnitSnapshot,proto3" json:"business_unit_snapshot,omitempty"`
}

func (x *DeleteBusinessUnitSnapshotRequest) Reset() {
	*x = DeleteBusinessUnitSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitSnapshotRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{185}
}

func (x *DeleteBusinessUnitSnapshotRequest) GetBusinessUnitSnapshot() *BusinessUnitSnapshot {
	if x != nil {
		return x.BusinessUnitSnapshot
	}
	return nil
}

// 更新通知データ
type ListBusinessUnitChangeNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// base_type_name
	BaseTypeName string `protobuf:"bytes,2,opt,name=base_type_name,json=baseTypeName,proto3" json:"base_type_name,omitempty"`
	// base_record_id
	BaseRecordIds []string `protobuf:"bytes,3,rep,name=base_record_ids,json=baseRecordIds,proto3" json:"base_record_ids,omitempty"`
	// type_name
	TypeName string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// record_id
	RecordIds []string `protobuf:"bytes,5,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ListBusinessUnitChangeNotificationsRequest) Reset() {
	*x = ListBusinessUnitChangeNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitChangeNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitChangeNotificationsRequest) ProtoMessage() {}

func (x *ListBusinessUnitChangeNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitChangeNotificationsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitChangeNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{186}
}

func (x *ListBusinessUnitChangeNotificationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitChangeNotificationsRequest) GetBaseTypeName() string {
	if x != nil {
		return x.BaseTypeName
	}
	return ""
}

func (x *ListBusinessUnitChangeNotificationsRequest) GetBaseRecordIds() []string {
	if x != nil {
		return x.BaseRecordIds
	}
	return nil
}

func (x *ListBusinessUnitChangeNotificationsRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListBusinessUnitChangeNotificationsRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type ListBusinessUnitChangeNotificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 更新通知データ
	Items []*BusinessUnitChangeNotification `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitChangeNotificationsResponse) Reset() {
	*x = ListBusinessUnitChangeNotificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitChangeNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitChangeNotificationsResponse) ProtoMessage() {}

func (x *ListBusinessUnitChangeNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitChangeNotificationsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitChangeNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{187}
}

func (x *ListBusinessUnitChangeNotificationsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitChangeNotificationsResponse) GetItems() []*BusinessUnitChangeNotification {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitChangeNotificationsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_change_notification
type CreateBusinessUnitChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新通知データ
	// required type_name
	// required record_id
	BusinessUnitChangeNotification *BusinessUnitChangeNotification `protobuf:"bytes,1,opt,name=business_unit_change_notification,json=businessUnitChangeNotification,proto3" json:"business_unit_change_notification,omitempty"`
}

func (x *CreateBusinessUnitChangeNotificationRequest) Reset() {
	*x = CreateBusinessUnitChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBusinessUnitChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBusinessUnitChangeNotificationRequest) ProtoMessage() {}

func (x *CreateBusinessUnitChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBusinessUnitChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*CreateBusinessUnitChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{188}
}

func (x *CreateBusinessUnitChangeNotificationRequest) GetBusinessUnitChangeNotification() *BusinessUnitChangeNotification {
	if x != nil {
		return x.BusinessUnitChangeNotification
	}
	return nil
}

// required business_unit_change_notification_id
type GetBusinessUnitChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新通知ID
	BusinessUnitChangeNotificationId string `protobuf:"bytes,1,opt,name=business_unit_change_notification_id,json=businessUnitChangeNotificationId,proto3" json:"business_unit_change_notification_id,omitempty"`
}

func (x *GetBusinessUnitChangeNotificationRequest) Reset() {
	*x = GetBusinessUnitChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitChangeNotificationRequest) ProtoMessage() {}

func (x *GetBusinessUnitChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{189}
}

func (x *GetBusinessUnitChangeNotificationRequest) GetBusinessUnitChangeNotificationId() string {
	if x != nil {
		return x.BusinessUnitChangeNotificationId
	}
	return ""
}

// required business_unit_change_notification
type UpdateBusinessUnitChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新通知データ
	// required business_unit_change_notification_id
	// required updated_at
	BusinessUnitChangeNotification *BusinessUnitChangeNotification `protobuf:"bytes,1,opt,name=business_unit_change_notification,json=businessUnitChangeNotification,proto3" json:"business_unit_change_notification,omitempty"`
}

func (x *UpdateBusinessUnitChangeNotificationRequest) Reset() {
	*x = UpdateBusinessUnitChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBusinessUnitChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBusinessUnitChangeNotificationRequest) ProtoMessage() {}

func (x *UpdateBusinessUnitChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBusinessUnitChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateBusinessUnitChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{190}
}

func (x *UpdateBusinessUnitChangeNotificationRequest) GetBusinessUnitChangeNotification() *BusinessUnitChangeNotification {
	if x != nil {
		return x.BusinessUnitChangeNotification
	}
	return nil
}

// required business_unit_change_notification
type DeleteBusinessUnitChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新通知データ
	// required business_unit_change_notification_id
	// required updated_at
	BusinessUnitChangeNotification *BusinessUnitChangeNotification `protobuf:"bytes,1,opt,name=business_unit_change_notification,json=businessUnitChangeNotification,proto3" json:"business_unit_change_notification,omitempty"`
}

func (x *DeleteBusinessUnitChangeNotificationRequest) Reset() {
	*x = DeleteBusinessUnitChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBusinessUnitChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBusinessUnitChangeNotificationRequest) ProtoMessage() {}

func (x *DeleteBusinessUnitChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBusinessUnitChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*DeleteBusinessUnitChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{191}
}

func (x *DeleteBusinessUnitChangeNotificationRequest) GetBusinessUnitChangeNotification() *BusinessUnitChangeNotification {
	if x != nil {
		return x.BusinessUnitChangeNotification
	}
	return nil
}

// 取引先管理（連絡先）コンテンツ
type ListBusinessUnitContactContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 取引先管理ID
	BusinessUnitManagementIds []string `protobuf:"bytes,2,rep,name=business_unit_management_ids,json=businessUnitManagementIds,proto3" json:"business_unit_management_ids,omitempty"`
}

func (x *ListBusinessUnitContactContentsRequest) Reset() {
	*x = ListBusinessUnitContactContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactContentsRequest) ProtoMessage() {}

func (x *ListBusinessUnitContactContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactContentsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactContentsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{192}
}

func (x *ListBusinessUnitContactContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitContactContentsRequest) GetBusinessUnitManagementIds() []string {
	if x != nil {
		return x.BusinessUnitManagementIds
	}
	return nil
}

type ListBusinessUnitContactContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理（連絡先）コンテンツ
	Items []*BusinessUnitContactContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitContactContentsResponse) Reset() {
	*x = ListBusinessUnitContactContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitContactContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitContactContentsResponse) ProtoMessage() {}

func (x *ListBusinessUnitContactContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitContactContentsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitContactContentsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{193}
}

func (x *ListBusinessUnitContactContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitContactContentsResponse) GetItems() []*BusinessUnitContactContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitContactContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_contact_id
type GetBusinessUnitContactContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）ID
	BusinessUnitContactId string `protobuf:"bytes,1,opt,name=business_unit_contact_id,json=businessUnitContactId,proto3" json:"business_unit_contact_id,omitempty"`
}

func (x *GetBusinessUnitContactContentRequest) Reset() {
	*x = GetBusinessUnitContactContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitContactContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitContactContentRequest) ProtoMessage() {}

func (x *GetBusinessUnitContactContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitContactContentRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitContactContentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{194}
}

func (x *GetBusinessUnitContactContentRequest) GetBusinessUnitContactId() string {
	if x != nil {
		return x.BusinessUnitContactId
	}
	return ""
}

// 取引先管理（第三者情報）コンテンツ
// required codes
type ListBusinessUnitScoreContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 識別コード
	Codes []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
	// データ種類
	Categorys []string `protobuf:"bytes,3,rep,name=categorys,proto3" json:"categorys,omitempty"`
}

func (x *ListBusinessUnitScoreContentsRequest) Reset() {
	*x = ListBusinessUnitScoreContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitScoreContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitScoreContentsRequest) ProtoMessage() {}

func (x *ListBusinessUnitScoreContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitScoreContentsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitScoreContentsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{195}
}

func (x *ListBusinessUnitScoreContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBusinessUnitScoreContentsRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *ListBusinessUnitScoreContentsRequest) GetCategorys() []string {
	if x != nil {
		return x.Categorys
	}
	return nil
}

type ListBusinessUnitScoreContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 取引先管理（第三者情報）コンテンツ
	Items []*BusinessUnitScoreContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListBusinessUnitScoreContentsResponse) Reset() {
	*x = ListBusinessUnitScoreContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitScoreContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitScoreContentsResponse) ProtoMessage() {}

func (x *ListBusinessUnitScoreContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitScoreContentsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitScoreContentsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{196}
}

func (x *ListBusinessUnitScoreContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitScoreContentsResponse) GetItems() []*BusinessUnitScoreContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListBusinessUnitScoreContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required code
// required category
type GetBusinessUnitScoreContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 識別コード
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// データ種類
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *GetBusinessUnitScoreContentRequest) Reset() {
	*x = GetBusinessUnitScoreContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitScoreContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitScoreContentRequest) ProtoMessage() {}

func (x *GetBusinessUnitScoreContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitScoreContentRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitScoreContentRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{197}
}

func (x *GetBusinessUnitScoreContentRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetBusinessUnitScoreContentRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// 公開された 自社企業（基本情報）マスタ
type SharedListBusinessUnitProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitProfilesRequest) Reset() {
	*x = SharedListBusinessUnitProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitProfilesRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitProfilesRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitProfilesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{198}
}

func (x *SharedListBusinessUnitProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitProfilesRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（基本情報）マスタ
	Items []*BusinessUnitProfile `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitProfilesResponse) Reset() {
	*x = SharedListBusinessUnitProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitProfilesResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitProfilesResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitProfilesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{199}
}

func (x *SharedListBusinessUnitProfilesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitProfilesResponse) GetItems() []*BusinessUnitProfile {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitProfilesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_contact_id
type SharedGetBusinessUnitProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（基本情報）ID
	BusinessUnitProfileId string `protobuf:"bytes,1,opt,name=business_unit_profile_id,json=businessUnitProfileId,proto3" json:"business_unit_profile_id,omitempty"`
}

func (x *SharedGetBusinessUnitProfileRequest) Reset() {
	*x = SharedGetBusinessUnitProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitProfileRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitProfileRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitProfileRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{200}
}

func (x *SharedGetBusinessUnitProfileRequest) GetBusinessUnitProfileId() string {
	if x != nil {
		return x.BusinessUnitProfileId
	}
	return ""
}

// 公開された 自社企業（決算）マスタ
type SharedListBusinessUnitFinancialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitFinancialsRequest) Reset() {
	*x = SharedListBusinessUnitFinancialsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitFinancialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitFinancialsRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitFinancialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitFinancialsRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitFinancialsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{201}
}

func (x *SharedListBusinessUnitFinancialsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitFinancialsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitFinancialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（決算）マスタ
	Items []*BusinessUnitFinancial `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitFinancialsResponse) Reset() {
	*x = SharedListBusinessUnitFinancialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitFinancialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitFinancialsResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitFinancialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitFinancialsResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitFinancialsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{202}
}

func (x *SharedListBusinessUnitFinancialsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitFinancialsResponse) GetItems() []*BusinessUnitFinancial {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitFinancialsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_contact_id
type SharedGetBusinessUnitFinancialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（決算）ID
	BusinessUnitFinancialId string `protobuf:"bytes,1,opt,name=business_unit_financial_id,json=businessUnitFinancialId,proto3" json:"business_unit_financial_id,omitempty"`
}

func (x *SharedGetBusinessUnitFinancialRequest) Reset() {
	*x = SharedGetBusinessUnitFinancialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitFinancialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitFinancialRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitFinancialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitFinancialRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitFinancialRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{203}
}

func (x *SharedGetBusinessUnitFinancialRequest) GetBusinessUnitFinancialId() string {
	if x != nil {
		return x.BusinessUnitFinancialId
	}
	return ""
}

// 公開された 自社企業（拠点）マスタ
type SharedListBusinessUnitBranchsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitBranchsRequest) Reset() {
	*x = SharedListBusinessUnitBranchsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitBranchsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitBranchsRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitBranchsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitBranchsRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitBranchsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{204}
}

func (x *SharedListBusinessUnitBranchsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitBranchsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitBranchsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（拠点）マスタ
	Items []*BusinessUnitBranch `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitBranchsResponse) Reset() {
	*x = SharedListBusinessUnitBranchsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitBranchsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitBranchsResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitBranchsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitBranchsResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitBranchsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{205}
}

func (x *SharedListBusinessUnitBranchsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitBranchsResponse) GetItems() []*BusinessUnitBranch {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitBranchsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_branch_id
type SharedGetBusinessUnitBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（拠点）ID
	BusinessUnitBranchId string `protobuf:"bytes,1,opt,name=business_unit_branch_id,json=businessUnitBranchId,proto3" json:"business_unit_branch_id,omitempty"`
}

func (x *SharedGetBusinessUnitBranchRequest) Reset() {
	*x = SharedGetBusinessUnitBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitBranchRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitBranchRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitBranchRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{206}
}

func (x *SharedGetBusinessUnitBranchRequest) GetBusinessUnitBranchId() string {
	if x != nil {
		return x.BusinessUnitBranchId
	}
	return ""
}

// 公開された 自社企業（設備）マスタ
type SharedListBusinessUnitFacilitiessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitFacilitiessRequest) Reset() {
	*x = SharedListBusinessUnitFacilitiessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitFacilitiessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitFacilitiessRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitFacilitiessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitFacilitiessRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitFacilitiessRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{207}
}

func (x *SharedListBusinessUnitFacilitiessRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitFacilitiessRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitFacilitiessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（設備）マスタ
	Items []*BusinessUnitFacilities `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitFacilitiessResponse) Reset() {
	*x = SharedListBusinessUnitFacilitiessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitFacilitiessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitFacilitiessResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitFacilitiessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitFacilitiessResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitFacilitiessResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{208}
}

func (x *SharedListBusinessUnitFacilitiessResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitFacilitiessResponse) GetItems() []*BusinessUnitFacilities {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitFacilitiessResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_facilities_id
type SharedGetBusinessUnitFacilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（設備）ID
	BusinessUnitFacilitiesId string `protobuf:"bytes,1,opt,name=business_unit_facilities_id,json=businessUnitFacilitiesId,proto3" json:"business_unit_facilities_id,omitempty"`
}

func (x *SharedGetBusinessUnitFacilitiesRequest) Reset() {
	*x = SharedGetBusinessUnitFacilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitFacilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitFacilitiesRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitFacilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitFacilitiesRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitFacilitiesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{209}
}

func (x *SharedGetBusinessUnitFacilitiesRequest) GetBusinessUnitFacilitiesId() string {
	if x != nil {
		return x.BusinessUnitFacilitiesId
	}
	return ""
}

// 公開された 自社企業（認証）マスタ
type SharedListBusinessUnitCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitCertificatesRequest) Reset() {
	*x = SharedListBusinessUnitCertificatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitCertificatesRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitCertificatesRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{210}
}

func (x *SharedListBusinessUnitCertificatesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitCertificatesRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（認証）マスタ
	Items []*BusinessUnitCertificate `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitCertificatesResponse) Reset() {
	*x = SharedListBusinessUnitCertificatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitCertificatesResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitCertificatesResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{211}
}

func (x *SharedListBusinessUnitCertificatesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitCertificatesResponse) GetItems() []*BusinessUnitCertificate {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitCertificatesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_certificate_id
type SharedGetBusinessUnitCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（認証）ID
	BusinessUnitCertificateId string `protobuf:"bytes,1,opt,name=business_unit_certificate_id,json=businessUnitCertificateId,proto3" json:"business_unit_certificate_id,omitempty"`
}

func (x *SharedGetBusinessUnitCertificateRequest) Reset() {
	*x = SharedGetBusinessUnitCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitCertificateRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitCertificateRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitCertificateRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{212}
}

func (x *SharedGetBusinessUnitCertificateRequest) GetBusinessUnitCertificateId() string {
	if x != nil {
		return x.BusinessUnitCertificateId
	}
	return ""
}

// 公開された 自社企業（得意分野）マスタ
type SharedListBusinessUnitStrengthsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitStrengthsRequest) Reset() {
	*x = SharedListBusinessUnitStrengthsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitStrengthsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitStrengthsRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitStrengthsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitStrengthsRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitStrengthsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{213}
}

func (x *SharedListBusinessUnitStrengthsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitStrengthsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitStrengthsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（得意分野）マスタ
	Items []*BusinessUnitStrength `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitStrengthsResponse) Reset() {
	*x = SharedListBusinessUnitStrengthsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitStrengthsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitStrengthsResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitStrengthsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitStrengthsResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitStrengthsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{214}
}

func (x *SharedListBusinessUnitStrengthsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitStrengthsResponse) GetItems() []*BusinessUnitStrength {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitStrengthsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_strength_id
type SharedGetBusinessUnitStrengthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（得意分野）ID
	BusinessUnitStrengthId string `protobuf:"bytes,1,opt,name=business_unit_strength_id,json=businessUnitStrengthId,proto3" json:"business_unit_strength_id,omitempty"`
}

func (x *SharedGetBusinessUnitStrengthRequest) Reset() {
	*x = SharedGetBusinessUnitStrengthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitStrengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitStrengthRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitStrengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitStrengthRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitStrengthRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{215}
}

func (x *SharedGetBusinessUnitStrengthRequest) GetBusinessUnitStrengthId() string {
	if x != nil {
		return x.BusinessUnitStrengthId
	}
	return ""
}

// 公開された 自社企業（技術情報）マスタ
type SharedListBusinessUnitSkillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// 自社企業ID
	CompanyIds []string `protobuf:"bytes,2,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
}

func (x *SharedListBusinessUnitSkillsRequest) Reset() {
	*x = SharedListBusinessUnitSkillsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitSkillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitSkillsRequest) ProtoMessage() {}

func (x *SharedListBusinessUnitSkillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitSkillsRequest.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitSkillsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{216}
}

func (x *SharedListBusinessUnitSkillsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SharedListBusinessUnitSkillsRequest) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type SharedListBusinessUnitSkillsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 自社企業（技術情報）マスタ
	Items []*BusinessUnitSkill `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SharedListBusinessUnitSkillsResponse) Reset() {
	*x = SharedListBusinessUnitSkillsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedListBusinessUnitSkillsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedListBusinessUnitSkillsResponse) ProtoMessage() {}

func (x *SharedListBusinessUnitSkillsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedListBusinessUnitSkillsResponse.ProtoReflect.Descriptor instead.
func (*SharedListBusinessUnitSkillsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{217}
}

func (x *SharedListBusinessUnitSkillsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SharedListBusinessUnitSkillsResponse) GetItems() []*BusinessUnitSkill {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SharedListBusinessUnitSkillsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required business_unit_skill_id
type SharedGetBusinessUnitSkillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自社企業（技術情報）ID
	BusinessUnitSkillId string `protobuf:"bytes,1,opt,name=business_unit_skill_id,json=businessUnitSkillId,proto3" json:"business_unit_skill_id,omitempty"`
}

func (x *SharedGetBusinessUnitSkillRequest) Reset() {
	*x = SharedGetBusinessUnitSkillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedGetBusinessUnitSkillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedGetBusinessUnitSkillRequest) ProtoMessage() {}

func (x *SharedGetBusinessUnitSkillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedGetBusinessUnitSkillRequest.ProtoReflect.Descriptor instead.
func (*SharedGetBusinessUnitSkillRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{218}
}

func (x *SharedGetBusinessUnitSkillRequest) GetBusinessUnitSkillId() string {
	if x != nil {
		return x.BusinessUnitSkillId
	}
	return ""
}

// 取引先管理（連絡先）依頼データ を 公開する
// required business_unit_contact_header
type SharetoBusinessUnitContactHeaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）依頼データ
	// required business_unit_contact_header_id
	// required updated_at
	BusinessUnitContactHeader *BusinessUnitContactHeader `protobuf:"bytes,1,opt,name=business_unit_contact_header,json=businessUnitContactHeader,proto3" json:"business_unit_contact_header,omitempty"`
}

func (x *SharetoBusinessUnitContactHeaderRequest) Reset() {
	*x = SharetoBusinessUnitContactHeaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitContactHeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitContactHeaderRequest) ProtoMessage() {}

func (x *SharetoBusinessUnitContactHeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitContactHeaderRequest.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitContactHeaderRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{219}
}

func (x *SharetoBusinessUnitContactHeaderRequest) GetBusinessUnitContactHeader() *BusinessUnitContactHeader {
	if x != nil {
		return x.BusinessUnitContactHeader
	}
	return nil
}

type SharetoBusinessUnitContactHeaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoBusinessUnitContactHeaderResponse) Reset() {
	*x = SharetoBusinessUnitContactHeaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitContactHeaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitContactHeaderResponse) ProtoMessage() {}

func (x *SharetoBusinessUnitContactHeaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitContactHeaderResponse.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitContactHeaderResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{220}
}

// 取引先管理（連絡先）マスタ を 公開する
// required business_unit_contact
type SharetoBusinessUnitContactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（連絡先）マスタ
	// required business_unit_contact_id
	// required updated_at
	BusinessUnitContact *BusinessUnitContact `protobuf:"bytes,1,opt,name=business_unit_contact,json=businessUnitContact,proto3" json:"business_unit_contact,omitempty"`
}

func (x *SharetoBusinessUnitContactRequest) Reset() {
	*x = SharetoBusinessUnitContactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitContactRequest) ProtoMessage() {}

func (x *SharetoBusinessUnitContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitContactRequest.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitContactRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{221}
}

func (x *SharetoBusinessUnitContactRequest) GetBusinessUnitContact() *BusinessUnitContact {
	if x != nil {
		return x.BusinessUnitContact
	}
	return nil
}

type SharetoBusinessUnitContactResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoBusinessUnitContactResponse) Reset() {
	*x = SharetoBusinessUnitContactResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitContactResponse) ProtoMessage() {}

func (x *SharetoBusinessUnitContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitContactResponse.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitContactResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{222}
}

// 有効管理データ（取引先） を 公開する
// required business_unit_active_control
type SharetoBusinessUnitActiveControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理データ（取引先）
	// required business_unit_active_control_id
	// required updated_at
	BusinessUnitActiveControl *BusinessUnitActiveControl `protobuf:"bytes,1,opt,name=business_unit_active_control,json=businessUnitActiveControl,proto3" json:"business_unit_active_control,omitempty"`
}

func (x *SharetoBusinessUnitActiveControlRequest) Reset() {
	*x = SharetoBusinessUnitActiveControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitActiveControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitActiveControlRequest) ProtoMessage() {}

func (x *SharetoBusinessUnitActiveControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitActiveControlRequest.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitActiveControlRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{223}
}

func (x *SharetoBusinessUnitActiveControlRequest) GetBusinessUnitActiveControl() *BusinessUnitActiveControl {
	if x != nil {
		return x.BusinessUnitActiveControl
	}
	return nil
}

type SharetoBusinessUnitActiveControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SharetoBusinessUnitActiveControlResponse) Reset() {
	*x = SharetoBusinessUnitActiveControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharetoBusinessUnitActiveControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharetoBusinessUnitActiveControlResponse) ProtoMessage() {}

func (x *SharetoBusinessUnitActiveControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharetoBusinessUnitActiveControlResponse.ProtoReflect.Descriptor instead.
func (*SharetoBusinessUnitActiveControlResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{224}
}

// Inactivate / Activate
// required company_id
type ActivateBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ActivateBusinessUnitRequest) Reset() {
	*x = ActivateBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateBusinessUnitRequest) ProtoMessage() {}

func (x *ActivateBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*ActivateBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{225}
}

func (x *ActivateBusinessUnitRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ActivateBusinessUnitRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ActivateBusinessUnitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理データ（取引先）
	BusinessUnitActiveControl *BusinessUnitActiveControl `protobuf:"bytes,1,opt,name=business_unit_active_control,json=businessUnitActiveControl,proto3" json:"business_unit_active_control,omitempty"`
}

func (x *ActivateBusinessUnitResponse) Reset() {
	*x = ActivateBusinessUnitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateBusinessUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateBusinessUnitResponse) ProtoMessage() {}

func (x *ActivateBusinessUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateBusinessUnitResponse.ProtoReflect.Descriptor instead.
func (*ActivateBusinessUnitResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{226}
}

func (x *ActivateBusinessUnitResponse) GetBusinessUnitActiveControl() *BusinessUnitActiveControl {
	if x != nil {
		return x.BusinessUnitActiveControl
	}
	return nil
}

// required company_id
type InactivateBusinessUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *InactivateBusinessUnitRequest) Reset() {
	*x = InactivateBusinessUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InactivateBusinessUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactivateBusinessUnitRequest) ProtoMessage() {}

func (x *InactivateBusinessUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactivateBusinessUnitRequest.ProtoReflect.Descriptor instead.
func (*InactivateBusinessUnitRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{227}
}

func (x *InactivateBusinessUnitRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *InactivateBusinessUnitRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type InactivateBusinessUnitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 有効管理データ（取引先）
	BusinessUnitActiveControl *BusinessUnitActiveControl `protobuf:"bytes,1,opt,name=business_unit_active_control,json=businessUnitActiveControl,proto3" json:"business_unit_active_control,omitempty"`
}

func (x *InactivateBusinessUnitResponse) Reset() {
	*x = InactivateBusinessUnitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InactivateBusinessUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InactivateBusinessUnitResponse) ProtoMessage() {}

func (x *InactivateBusinessUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InactivateBusinessUnitResponse.ProtoReflect.Descriptor instead.
func (*InactivateBusinessUnitResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{228}
}

func (x *InactivateBusinessUnitResponse) GetBusinessUnitActiveControl() *BusinessUnitActiveControl {
	if x != nil {
		return x.BusinessUnitActiveControl
	}
	return nil
}

// required business_unit_management_id
type StartBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
}

func (x *StartBusinessRequest) Reset() {
	*x = StartBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBusinessRequest) ProtoMessage() {}

func (x *StartBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBusinessRequest.ProtoReflect.Descriptor instead.
func (*StartBusinessRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{229}
}

func (x *StartBusinessRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

type StartBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartBusinessResponse) Reset() {
	*x = StartBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBusinessResponse) ProtoMessage() {}

func (x *StartBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBusinessResponse.ProtoReflect.Descriptor instead.
func (*StartBusinessResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{230}
}

// required business_unit_management_id
type StopBusinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	BusinessUnitManagementId string `protobuf:"bytes,1,opt,name=business_unit_management_id,json=businessUnitManagementId,proto3" json:"business_unit_management_id,omitempty"`
}

func (x *StopBusinessRequest) Reset() {
	*x = StopBusinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopBusinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBusinessRequest) ProtoMessage() {}

func (x *StopBusinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBusinessRequest.ProtoReflect.Descriptor instead.
func (*StopBusinessRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{231}
}

func (x *StopBusinessRequest) GetBusinessUnitManagementId() string {
	if x != nil {
		return x.BusinessUnitManagementId
	}
	return ""
}

type StopBusinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopBusinessResponse) Reset() {
	*x = StopBusinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopBusinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopBusinessResponse) ProtoMessage() {}

func (x *StopBusinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopBusinessResponse.ProtoReflect.Descriptor instead.
func (*StopBusinessResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{232}
}

// 更新通知 を 確認済みにする
// required type_name
// required record_ids
type ConfirmBusinessUnitChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type_name
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// record_id
	RecordIds []string `protobuf:"bytes,2,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ConfirmBusinessUnitChangeNotificationRequest) Reset() {
	*x = ConfirmBusinessUnitChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmBusinessUnitChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmBusinessUnitChangeNotificationRequest) ProtoMessage() {}

func (x *ConfirmBusinessUnitChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmBusinessUnitChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*ConfirmBusinessUnitChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{233}
}

func (x *ConfirmBusinessUnitChangeNotificationRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ConfirmBusinessUnitChangeNotificationRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type ConfirmBusinessUnitChangeNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmBusinessUnitChangeNotificationResponse) Reset() {
	*x = ConfirmBusinessUnitChangeNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmBusinessUnitChangeNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmBusinessUnitChangeNotificationResponse) ProtoMessage() {}

func (x *ConfirmBusinessUnitChangeNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmBusinessUnitChangeNotificationResponse.ProtoReflect.Descriptor instead.
func (*ConfirmBusinessUnitChangeNotificationResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{234}
}

// 取引先管理情報 取込フォーマット出力（新フォーマット）
type ExportBusinessUnitManagementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理ID
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportBusinessUnitManagementsRequest) Reset() {
	*x = ExportBusinessUnitManagementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitManagementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitManagementsRequest) ProtoMessage() {}

func (x *ExportBusinessUnitManagementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitManagementsRequest.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitManagementsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{235}
}

func (x *ExportBusinessUnitManagementsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportBusinessUnitManagementsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportBusinessUnitManagementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportBusinessUnitManagementsResponse) Reset() {
	*x = ExportBusinessUnitManagementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitManagementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitManagementsResponse) ProtoMessage() {}

func (x *ExportBusinessUnitManagementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitManagementsResponse.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitManagementsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{236}
}

func (x *ExportBusinessUnitManagementsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 取引先管理情報 取込（新フォーマット）
type ImportBusinessUnitManagementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportBusinessUnitManagementsRequest) Reset() {
	*x = ImportBusinessUnitManagementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitManagementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitManagementsRequest) ProtoMessage() {}

func (x *ImportBusinessUnitManagementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitManagementsRequest.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitManagementsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{237}
}

func (x *ImportBusinessUnitManagementsRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportBusinessUnitManagementsRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportBusinessUnitManagementsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportBusinessUnitManagementsRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportBusinessUnitManagementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportBusinessUnitManagementsResponse) Reset() {
	*x = ImportBusinessUnitManagementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitManagementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitManagementsResponse) ProtoMessage() {}

func (x *ImportBusinessUnitManagementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitManagementsResponse.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitManagementsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{238}
}

func (x *ImportBusinessUnitManagementsResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportBusinessUnitManagementsResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportBusinessUnitManagementsResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 取引先管理情報 取込フォーマット取得（新フォーマット）
type ListBusinessUnitManagementFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBusinessUnitManagementFormatsRequest) Reset() {
	*x = ListBusinessUnitManagementFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementFormatsRequest) ProtoMessage() {}

func (x *ListBusinessUnitManagementFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{239}
}

type ListBusinessUnitManagementFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitManagementFormatsResponse) Reset() {
	*x = ListBusinessUnitManagementFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementFormatsResponse) ProtoMessage() {}

func (x *ListBusinessUnitManagementFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{240}
}

func (x *ListBusinessUnitManagementFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitManagementFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

// 取引先管理（第三者情報）マスタ 取込フォーマット出力
type ExportBusinessUnitScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取引先管理（第三者情報）ID
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportBusinessUnitScoresRequest) Reset() {
	*x = ExportBusinessUnitScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitScoresRequest) ProtoMessage() {}

func (x *ExportBusinessUnitScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitScoresRequest.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitScoresRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{241}
}

func (x *ExportBusinessUnitScoresRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportBusinessUnitScoresRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportBusinessUnitScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportBusinessUnitScoresResponse) Reset() {
	*x = ExportBusinessUnitScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitScoresResponse) ProtoMessage() {}

func (x *ExportBusinessUnitScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitScoresResponse.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitScoresResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{242}
}

func (x *ExportBusinessUnitScoresResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 取引先管理（第三者情報）マスタ 取込
type ImportBusinessUnitScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportBusinessUnitScoresRequest) Reset() {
	*x = ImportBusinessUnitScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitScoresRequest) ProtoMessage() {}

func (x *ImportBusinessUnitScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitScoresRequest.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitScoresRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{243}
}

func (x *ImportBusinessUnitScoresRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportBusinessUnitScoresRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportBusinessUnitScoresRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportBusinessUnitScoresRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportBusinessUnitScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportBusinessUnitScoresResponse) Reset() {
	*x = ImportBusinessUnitScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitScoresResponse) ProtoMessage() {}

func (x *ImportBusinessUnitScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitScoresResponse.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitScoresResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{244}
}

func (x *ImportBusinessUnitScoresResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportBusinessUnitScoresResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportBusinessUnitScoresResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 取引先管理（第三者情報）マスタ 取込フォーマット取得
type ListBusinessUnitScoreFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBusinessUnitScoreFormatsRequest) Reset() {
	*x = ListBusinessUnitScoreFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitScoreFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitScoreFormatsRequest) ProtoMessage() {}

func (x *ListBusinessUnitScoreFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitScoreFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitScoreFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{245}
}

type ListBusinessUnitScoreFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitScoreFormatsResponse) Reset() {
	*x = ListBusinessUnitScoreFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitScoreFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitScoreFormatsResponse) ProtoMessage() {}

func (x *ListBusinessUnitScoreFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitScoreFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitScoreFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{246}
}

func (x *ListBusinessUnitScoreFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitScoreFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

// ItemValue 取込フォーマット出力
type ExportBusinessUnitManagementItemValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportBusinessUnitManagementItemValuesRequest) Reset() {
	*x = ExportBusinessUnitManagementItemValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitManagementItemValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitManagementItemValuesRequest) ProtoMessage() {}

func (x *ExportBusinessUnitManagementItemValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitManagementItemValuesRequest.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitManagementItemValuesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{247}
}

func (x *ExportBusinessUnitManagementItemValuesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportBusinessUnitManagementItemValuesRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportBusinessUnitManagementItemValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportBusinessUnitManagementItemValuesResponse) Reset() {
	*x = ExportBusinessUnitManagementItemValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportBusinessUnitManagementItemValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportBusinessUnitManagementItemValuesResponse) ProtoMessage() {}

func (x *ExportBusinessUnitManagementItemValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportBusinessUnitManagementItemValuesResponse.ProtoReflect.Descriptor instead.
func (*ExportBusinessUnitManagementItemValuesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{248}
}

func (x *ExportBusinessUnitManagementItemValuesResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// ItemValue 取込
type ImportBusinessUnitManagementItemValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 取込ファイルアップデート時の書き込みURL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
	// 処理（検査/取込）
	DryRun bool `protobuf:"varint,3,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// エラーファイル出力
	ExportError bool `protobuf:"varint,4,opt,name=export_error,json=exportError,proto3" json:"export_error,omitempty"`
}

func (x *ImportBusinessUnitManagementItemValuesRequest) Reset() {
	*x = ImportBusinessUnitManagementItemValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitManagementItemValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitManagementItemValuesRequest) ProtoMessage() {}

func (x *ImportBusinessUnitManagementItemValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitManagementItemValuesRequest.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitManagementItemValuesRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{249}
}

func (x *ImportBusinessUnitManagementItemValuesRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImportBusinessUnitManagementItemValuesRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

func (x *ImportBusinessUnitManagementItemValuesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ImportBusinessUnitManagementItemValuesRequest) GetExportError() bool {
	if x != nil {
		return x.ExportError
	}
	return false
}

type ImportBusinessUnitManagementItemValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 処理まとめ
	Summary *protobuf.ImportSummary `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	// エラー内容
	Errors []*protobuf.ImportError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// エラー・警告ファイル
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ImportBusinessUnitManagementItemValuesResponse) Reset() {
	*x = ImportBusinessUnitManagementItemValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportBusinessUnitManagementItemValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportBusinessUnitManagementItemValuesResponse) ProtoMessage() {}

func (x *ImportBusinessUnitManagementItemValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportBusinessUnitManagementItemValuesResponse.ProtoReflect.Descriptor instead.
func (*ImportBusinessUnitManagementItemValuesResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{250}
}

func (x *ImportBusinessUnitManagementItemValuesResponse) GetSummary() *protobuf.ImportSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ImportBusinessUnitManagementItemValuesResponse) GetErrors() []*protobuf.ImportError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ImportBusinessUnitManagementItemValuesResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// ItemValue 取込フォーマット取得
type ListBusinessUnitManagementItemValueFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBusinessUnitManagementItemValueFormatsRequest) Reset() {
	*x = ListBusinessUnitManagementItemValueFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementItemValueFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementItemValueFormatsRequest) ProtoMessage() {}

func (x *ListBusinessUnitManagementItemValueFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementItemValueFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementItemValueFormatsRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{251}
}

type ListBusinessUnitManagementItemValueFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBusinessUnitManagementItemValueFormatsResponse) Reset() {
	*x = ListBusinessUnitManagementItemValueFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBusinessUnitManagementItemValueFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBusinessUnitManagementItemValueFormatsResponse) ProtoMessage() {}

func (x *ListBusinessUnitManagementItemValueFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBusinessUnitManagementItemValueFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListBusinessUnitManagementItemValueFormatsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{252}
}

func (x *ListBusinessUnitManagementItemValueFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBusinessUnitManagementItemValueFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetBusinessUnitSkillTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBusinessUnitSkillTreeRequest) Reset() {
	*x = GetBusinessUnitSkillTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessUnitSkillTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessUnitSkillTreeRequest) ProtoMessage() {}

func (x *GetBusinessUnitSkillTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessUnitSkillTreeRequest.ProtoReflect.Descriptor instead.
func (*GetBusinessUnitSkillTreeRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{253}
}

var File_company_proto protoreflect.FileDescriptor

var file_company_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x73, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x1b, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x74, 0x0a,
	0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x22,
	0x73, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x2c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x6c, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x42, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x29, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x3a, 0x0a, 0x38,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x39, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x44, 0x0a, 0x42, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a,
	0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x68, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x26,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x68, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a,
	0x25, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x6b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7b, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3c, 0x0a, 0x21,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x42, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5e, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x66, 0x66, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x7e, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x31, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1b, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x9b, 0x01, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x39, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x65, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x38, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a,
	0x1f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x38, 0x0a, 0x17, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x87, 0x01, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x43, 0x0a, 0x22, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x9f, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x61, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6c, 0x64,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a,
	0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x67, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x27, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x28, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xad, 0x01, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x68, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x72, 0x0a, 0x27, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x45, 0x0a, 0x28, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xd0, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x15,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x58, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x20,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x13, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xe8, 0x01, 0x0a, 0x39, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x63, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x8a, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x5e, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x8a, 0x01,
	0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x22, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x64, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x7e, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x22, 0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x7e, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x64, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73,
	0x22, 0x9f, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x16, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x67, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22,
	0xa1, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x44,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x19,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x92,
	0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x17, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x19,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x62, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x61, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x14, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x22, 0x5b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x61, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x14, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x5f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x52, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x7a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a,
	0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa5,
	0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x71, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x6b, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x9b, 0x01, 0x0a, 0x26,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x19,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a,
	0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x58, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0x8a, 0x01, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xab, 0x01, 0x0a,
	0x29, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x49, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x29, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x22, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x29, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x7a, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x55,
	0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7e, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68,
	0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68,
	0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x12, 0x74, 0x6f, 0x6b,
	0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
	0x55, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x74, 0x6f, 0x6b,
	0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x12, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x7e, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x74, 0x6f, 0x6b,
	0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x12, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x63, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x2d,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68,
	0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x20, 0x74, 0x6f, 0x6b,
	0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x2a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x27,
	0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x74,
	0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xb9, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68,
	0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x20, 0x74, 0x6f, 0x6b,
	0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb9, 0x01,
	0x0a, 0x2d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f,
	0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x87, 0x01, 0x0a, 0x24, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x20, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68,
	0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x27, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x28, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x78, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52,
	0x1b, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x72, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x22, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73,
	0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x22, 0xa4, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a,
	0x1f, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69,
	0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1f, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x5f, 0x73, 0x68,
	0x6f, 0x6b, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x1b, 0x74, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x59,
	0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x62, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x16, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x16, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61,
	0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x5b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a,
	0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x67, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x26, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22,
	0x6b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a,
	0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x9b, 0x01, 0x0a, 0x26, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x19, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x7d, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x5b,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x14,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xd5, 0x01,
	0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x24, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x2b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x21, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a,
	0x26, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x5f, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x79, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x22, 0xa3, 0x01,
	0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x67, 0x0a, 0x25, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x26, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5e, 0x0a, 0x23, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x64, 0x0a, 0x25, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x1a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x24, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x25, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x6a, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x29, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x43, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x26, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49, 0x64, 0x22, 0x6b, 0x0a,
	0x29, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x2a, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x44, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x68, 0x0a, 0x26, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x27, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x61,
	0x0a, 0x24, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49,
	0x64, 0x22, 0x65, 0x0a, 0x23, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x24, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x58, 0x0a, 0x21, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x49, 0x64,
	0x22, 0x9c, 0x01, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x2a, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x21,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5e, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x13, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x27, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x19, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74,
	0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x56, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x58,
	0x0a, 0x1d, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x19, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x55,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x2c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x24, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x42, 0x0a, 0x25, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xab,
	0x01, 0x0a, 0x24, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa4, 0x01, 0x0a,
	0x25, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x6d, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6a,
	0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x3d, 0x0a, 0x20, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1f, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x24, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x78, 0x0a, 0x2d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x4b, 0x0a, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x2d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x35, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0xc6, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x5c,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x32, 0xcd, 0x07, 0x0a,
	0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x79, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x6e, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7f, 0x0a, 0x14,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b,
	0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xc8, 0x06, 0x0a,
	0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x6b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x7c, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c,
	0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x05, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x91, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x87, 0x15, 0x0a, 0x14, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x79, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x10,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0xa6, 0x01, 0x0a, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x31, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4f, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xf4, 0x01, 0x0a, 0x3b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x59, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x6e, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74,
	0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x9d,
	0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x92, 0x01,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x78, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa3, 0x01, 0x0a,
	0x20, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74,
	0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74,
	0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x88, 0x9b, 0x01, 0x0a, 0x1d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x89,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa3,
	0x01, 0x0a, 0x20, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x24, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x12, 0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x6c, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a,
	0x22, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x19, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x7a,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x6c, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x32,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x50, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x91, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x80, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x86, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x70, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x77, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x33,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x7d,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x6a, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x94, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x89, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61,
	0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x72,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x35, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x83, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x74, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x68, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x8c, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x78, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x7a, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa6, 0x01, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x95, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x7e, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x36, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f,
	0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x77, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x7d, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x6a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0xb2, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x43,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x26, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b,
	0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x44, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69,
	0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x79,
	0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69,
	0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53,
	0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f,
	0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52,
	0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x79, 0x6f, 0x53, 0x68, 0x6f, 0x6b, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x94, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x89, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x83, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x72,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x3a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6e,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x9d,
	0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92,
	0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x78, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12,
	0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x6e, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xac, 0x01,
	0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x9b, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa1,
	0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x9d, 0x01, 0x0a, 0x1e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa3,
	0x01, 0x0a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x83, 0x01, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0xa6, 0x01, 0x0a, 0x21, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x1f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0xa9, 0x01, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x97, 0x01, 0x0a, 0x1c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1a,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0xa3,
	0x01, 0x0a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3e, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x74, 0x6f, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x85, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb2, 0x01, 0x0a,
	0x25, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a,
	0x01, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x26, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x26, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x2a, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x48, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1c,
	0x5a, 0x1a, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_proto_rawDescOnce sync.Once
	file_company_proto_rawDescData = file_company_proto_rawDesc
)

func file_company_proto_rawDescGZIP() []byte {
	file_company_proto_rawDescOnce.Do(func() {
		file_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_proto_rawDescData)
	})
	return file_company_proto_rawDescData
}

var file_company_proto_msgTypes = make([]protoimpl.MessageInfo, 254)
var file_company_proto_goTypes = []interface{}{
	(*GetCompanyRequest)(nil),                                                   // 0: mtechnavi.api.company.GetCompanyRequest
	(*UpdateCompanyRequest)(nil),                                                // 1: mtechnavi.api.company.UpdateCompanyRequest
	(*CreateComponentUnitRequest)(nil),                                          // 2: mtechnavi.api.company.CreateComponentUnitRequest
	(*ListComponentUnitsRequest)(nil),                                           // 3: mtechnavi.api.company.ListComponentUnitsRequest
	(*ListComponentUnitsResponse)(nil),                                          // 4: mtechnavi.api.company.ListComponentUnitsResponse
	(*PublicListComponentUnitsRequest)(nil),                                     // 5: mtechnavi.api.company.PublicListComponentUnitsRequest
	(*PublicListComponentUnitsResponse)(nil),                                    // 6: mtechnavi.api.company.PublicListComponentUnitsResponse
	(*GetComponentUnitRequest)(nil),                                             // 7: mtechnavi.api.company.GetComponentUnitRequest
	(*UpdateComponentUnitRequest)(nil),                                          // 8: mtechnavi.api.company.UpdateComponentUnitRequest
	(*DeleteComponentUnitRequest)(nil),                                          // 9: mtechnavi.api.company.DeleteComponentUnitRequest
	(*CreateBusinessUnitRequest)(nil),                                           // 10: mtechnavi.api.company.CreateBusinessUnitRequest
	(*ListBusinessUnitsRequest)(nil),                                            // 11: mtechnavi.api.company.ListBusinessUnitsRequest
	(*ListBusinessUnitsResponse)(nil),                                           // 12: mtechnavi.api.company.ListBusinessUnitsResponse
	(*GetBusinessUnitRequest)(nil),                                              // 13: mtechnavi.api.company.GetBusinessUnitRequest
	(*UpdateBusinessUnitRequest)(nil),                                           // 14: mtechnavi.api.company.UpdateBusinessUnitRequest
	(*DeleteBusinessUnitRequest)(nil),                                           // 15: mtechnavi.api.company.DeleteBusinessUnitRequest
	(*PublicListCompanyAndBusinessUnitsRequest)(nil),                            // 16: mtechnavi.api.company.PublicListCompanyAndBusinessUnitsRequest
	(*PublicListCompanyAndBusinessUnitsResponse)(nil),                           // 17: mtechnavi.api.company.PublicListCompanyAndBusinessUnitsResponse
	(*PublicListCompanyAndComponentUnitAndBusinessUnitsRequest)(nil),            // 18: mtechnavi.api.company.PublicListCompanyAndComponentUnitAndBusinessUnitsRequest
	(*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse)(nil),           // 19: mtechnavi.api.company.PublicListCompanyAndComponentUnitAndBusinessUnitsResponse
	(*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest)(nil),  // 20: mtechnavi.api.company.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest
	(*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse)(nil), // 21: mtechnavi.api.company.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse
	(*CreateBusinessUnitRequestRequest)(nil),                                    // 22: mtechnavi.api.company.CreateBusinessUnitRequestRequest
	(*ListBusinessUnitRequestsRequest)(nil),                                     // 23: mtechnavi.api.company.ListBusinessUnitRequestsRequest
	(*ListBusinessUnitRequestsResponse)(nil),                                    // 24: mtechnavi.api.company.ListBusinessUnitRequestsResponse
	(*GetBusinessUnitRequestRequest)(nil),                                       // 25: mtechnavi.api.company.GetBusinessUnitRequestRequest
	(*UpdateBusinessUnitRequestRequest)(nil),                                    // 26: mtechnavi.api.company.UpdateBusinessUnitRequestRequest
	(*DeleteBusinessUnitRequestRequest)(nil),                                    // 27: mtechnavi.api.company.DeleteBusinessUnitRequestRequest
	(*CreateBusinessUnitRequestResultRequest)(nil),                              // 28: mtechnavi.api.company.CreateBusinessUnitRequestResultRequest
	(*ListBusinessUnitRequestResultsRequest)(nil),                               // 29: mtechnavi.api.company.ListBusinessUnitRequestResultsRequest
	(*ListBusinessUnitRequestResultsResponse)(nil),                              // 30: mtechnavi.api.company.ListBusinessUnitRequestResultsResponse
	(*GetBusinessUnitRequestResultRequest)(nil),                                 // 31: mtechnavi.api.company.GetBusinessUnitRequestResultRequest
	(*UpdateBusinessUnitRequestResultRequest)(nil),                              // 32: mtechnavi.api.company.UpdateBusinessUnitRequestResultRequest
	(*DeleteBusinessUnitRequestResultRequest)(nil),                              // 33: mtechnavi.api.company.DeleteBusinessUnitRequestResultRequest
	(*SharetoBusinessUnitRequestRequest)(nil),                                   // 34: mtechnavi.api.company.SharetoBusinessUnitRequestRequest
	(*SharetoBusinessUnitRequestResponse)(nil),                                  // 35: mtechnavi.api.company.SharetoBusinessUnitRequestResponse
	(*SharetoBusinessUnitRequestResultRequest)(nil),                             // 36: mtechnavi.api.company.SharetoBusinessUnitRequestResultRequest
	(*SharetoBusinessUnitRequestResultResponse)(nil),                            // 37: mtechnavi.api.company.SharetoBusinessUnitRequestResultResponse
	(*ListStaffsRequest)(nil),                                                   // 38: mtechnavi.api.company.ListStaffsRequest
	(*ListStaffsResponse)(nil),                                                  // 39: mtechnavi.api.company.ListStaffsResponse
	(*GetStaffRequest)(nil),                                                     // 40: mtechnavi.api.company.GetStaffRequest
	(*ListStaffAndComponentUnitsRequest)(nil),                                   // 41: mtechnavi.api.company.ListStaffAndComponentUnitsRequest
	(*ListStaffAndComponentUnitsResponse)(nil),                                  // 42: mtechnavi.api.company.ListStaffAndComponentUnitsResponse
	(*ImportStaffsRequest)(nil),                                                 // 43: mtechnavi.api.company.ImportStaffsRequest
	(*ImportStaffsResponse)(nil),                                                // 44: mtechnavi.api.company.ImportStaffsResponse
	(*ExportStaffsRequest)(nil),                                                 // 45: mtechnavi.api.company.ExportStaffsRequest
	(*ExportStaffsResponse)(nil),                                                // 46: mtechnavi.api.company.ExportStaffsResponse
	(*ImportComponentUnitsRequest)(nil),                                         // 47: mtechnavi.api.company.ImportComponentUnitsRequest
	(*ImportComponentUnitsResponse)(nil),                                        // 48: mtechnavi.api.company.ImportComponentUnitsResponse
	(*ExportComponentUnitsRequest)(nil),                                         // 49: mtechnavi.api.company.ExportComponentUnitsRequest
	(*ExportComponentUnitsResponse)(nil),                                        // 50: mtechnavi.api.company.ExportComponentUnitsResponse
	(*ImportBusinessUnitsRequest)(nil),                                          // 51: mtechnavi.api.company.ImportBusinessUnitsRequest
	(*ImportBusinessUnitsResponse)(nil),                                         // 52: mtechnavi.api.company.ImportBusinessUnitsResponse
	(*ExportBusinessUnitsRequest)(nil),                                          // 53: mtechnavi.api.company.ExportBusinessUnitsRequest
	(*ExportBusinessUnitsResponse)(nil),                                         // 54: mtechnavi.api.company.ExportBusinessUnitsResponse
	(*ListComponentUnitFormatsRequest)(nil),                                     // 55: mtechnavi.api.company.ListComponentUnitFormatsRequest
	(*ListComponentUnitFormatsResponse)(nil),                                    // 56: mtechnavi.api.company.ListComponentUnitFormatsResponse
	(*ListBusinessUnitFormatsRequest)(nil),                                      // 57: mtechnavi.api.company.ListBusinessUnitFormatsRequest
	(*ListBusinessUnitFormatsResponse)(nil),                                     // 58: mtechnavi.api.company.ListBusinessUnitFormatsResponse
	(*ListStaffFormatsRequest)(nil),                                             // 59: mtechnavi.api.company.ListStaffFormatsRequest
	(*ListStaffFormatsResponse)(nil),                                            // 60: mtechnavi.api.company.ListStaffFormatsResponse
	(*PublicGetCompanyRequest)(nil),                                             // 61: mtechnavi.api.company.PublicGetCompanyRequest
	(*PublicListCompanysRequest)(nil),                                           // 62: mtechnavi.api.company.PublicListCompanysRequest
	(*PublicListCompanysResponse)(nil),                                          // 63: mtechnavi.api.company.PublicListCompanysResponse
	(*ListBusinessUnitManagementsRequest)(nil),                                  // 64: mtechnavi.api.company.ListBusinessUnitManagementsRequest
	(*ListBusinessUnitManagementsResponse)(nil),                                 // 65: mtechnavi.api.company.ListBusinessUnitManagementsResponse
	(*GetBusinessUnitManagementRequest)(nil),                                    // 66: mtechnavi.api.company.GetBusinessUnitManagementRequest
	(*ListOldBusinessUnitManagementFormatsRequest)(nil),                         // 67: mtechnavi.api.company.ListOldBusinessUnitManagementFormatsRequest
	(*ListOldBusinessUnitManagementFormatsResponse)(nil),                        // 68: mtechnavi.api.company.ListOldBusinessUnitManagementFormatsResponse
	(*CreateBusinessUnitManagementRequest)(nil),                                 // 69: mtechnavi.api.company.CreateBusinessUnitManagementRequest
	(*UpdateBusinessUnitManagementRequest)(nil),                                 // 70: mtechnavi.api.company.UpdateBusinessUnitManagementRequest
	(*DeleteBusinessUnitManagementRequest)(nil),                                 // 71: mtechnavi.api.company.DeleteBusinessUnitManagementRequest
	(*ImportOldBusinessUnitManagementsRequest)(nil),                             // 72: mtechnavi.api.company.ImportOldBusinessUnitManagementsRequest
	(*ImportOldBusinessUnitManagementsResponse)(nil),                            // 73: mtechnavi.api.company.ImportOldBusinessUnitManagementsResponse
	(*ListBusinessUnitManagementContentsRequest)(nil),                           // 74: mtechnavi.api.company.ListBusinessUnitManagementContentsRequest
	(*ListBusinessUnitManagementContentsResponse)(nil),                          // 75: mtechnavi.api.company.ListBusinessUnitManagementContentsResponse
	(*GetBusinessUnitManagementContentRequest)(nil),                             // 76: mtechnavi.api.company.GetBusinessUnitManagementContentRequest
	(*ExportOldBusinessUnitManagementsRequest)(nil),                             // 77: mtechnavi.api.company.ExportOldBusinessUnitManagementsRequest
	(*ExportOldBusinessUnitManagementsResponse)(nil),                            // 78: mtechnavi.api.company.ExportOldBusinessUnitManagementsResponse
	(*ListHistorysRequest)(nil),                                                 // 79: mtechnavi.api.company.ListHistorysRequest
	(*ListHistorysResponse)(nil),                                                // 80: mtechnavi.api.company.ListHistorysResponse
	(*SendEmailTenantInvitationRequest)(nil),                                    // 81: mtechnavi.api.company.SendEmailTenantInvitationRequest
	(*SendEmailTenantInvitationResponse)(nil),                                   // 82: mtechnavi.api.company.SendEmailTenantInvitationResponse
	(*ListBusinessUnitProfilesRequest)(nil),                                     // 83: mtechnavi.api.company.ListBusinessUnitProfilesRequest
	(*ListBusinessUnitProfilesResponse)(nil),                                    // 84: mtechnavi.api.company.ListBusinessUnitProfilesResponse
	(*CreateBusinessUnitProfileRequest)(nil),                                    // 85: mtechnavi.api.company.CreateBusinessUnitProfileRequest
	(*GetBusinessUnitProfileRequest)(nil),                                       // 86: mtechnavi.api.company.GetBusinessUnitProfileRequest
	(*UpdateBusinessUnitProfileRequest)(nil),                                    // 87: mtechnavi.api.company.UpdateBusinessUnitProfileRequest
	(*DeleteBusinessUnitProfileRequest)(nil),                                    // 88: mtechnavi.api.company.DeleteBusinessUnitProfileRequest
	(*UpdateSystemNotificationUsersInBusinessUnitProfileRequest)(nil),           // 89: mtechnavi.api.company.UpdateSystemNotificationUsersInBusinessUnitProfileRequest
	(*ListBusinessUnitFinancialsRequest)(nil),                                   // 90: mtechnavi.api.company.ListBusinessUnitFinancialsRequest
	(*ListBusinessUnitFinancialsResponse)(nil),                                  // 91: mtechnavi.api.company.ListBusinessUnitFinancialsResponse
	(*CreateBusinessUnitFinancialRequest)(nil),                                  // 92: mtechnavi.api.company.CreateBusinessUnitFinancialRequest
	(*GetBusinessUnitFinancialRequest)(nil),                                     // 93: mtechnavi.api.company.GetBusinessUnitFinancialRequest
	(*UpdateBusinessUnitFinancialRequest)(nil),                                  // 94: mtechnavi.api.company.UpdateBusinessUnitFinancialRequest
	(*DeleteBusinessUnitFinancialRequest)(nil),                                  // 95: mtechnavi.api.company.DeleteBusinessUnitFinancialRequest
	(*ListBusinessUnitBranchsRequest)(nil),                                      // 96: mtechnavi.api.company.ListBusinessUnitBranchsRequest
	(*ListBusinessUnitBranchsResponse)(nil),                                     // 97: mtechnavi.api.company.ListBusinessUnitBranchsResponse
	(*CreateBusinessUnitBranchRequest)(nil),                                     // 98: mtechnavi.api.company.CreateBusinessUnitBranchRequest
	(*GetBusinessUnitBranchRequest)(nil),                                        // 99: mtechnavi.api.company.GetBusinessUnitBranchRequest
	(*UpdateBusinessUnitBranchRequest)(nil),                                     // 100: mtechnavi.api.company.UpdateBusinessUnitBranchRequest
	(*DeleteBusinessUnitBranchRequest)(nil),                                     // 101: mtechnavi.api.company.DeleteBusinessUnitBranchRequest
	(*ListBusinessUnitFacilitiessRequest)(nil),                                  // 102: mtechnavi.api.company.ListBusinessUnitFacilitiessRequest
	(*ListBusinessUnitFacilitiessResponse)(nil),                                 // 103: mtechnavi.api.company.ListBusinessUnitFacilitiessResponse
	(*CreateBusinessUnitFacilitiesRequest)(nil),                                 // 104: mtechnavi.api.company.CreateBusinessUnitFacilitiesRequest
	(*GetBusinessUnitFacilitiesRequest)(nil),                                    // 105: mtechnavi.api.company.GetBusinessUnitFacilitiesRequest
	(*UpdateBusinessUnitFacilitiesRequest)(nil),                                 // 106: mtechnavi.api.company.UpdateBusinessUnitFacilitiesRequest
	(*DeleteBusinessUnitFacilitiesRequest)(nil),                                 // 107: mtechnavi.api.company.DeleteBusinessUnitFacilitiesRequest
	(*ListBusinessUnitCertificatesRequest)(nil),                                 // 108: mtechnavi.api.company.ListBusinessUnitCertificatesRequest
	(*ListBusinessUnitCertificatesResponse)(nil),                                // 109: mtechnavi.api.company.ListBusinessUnitCertificatesResponse
	(*CreateBusinessUnitCertificateRequest)(nil),                                // 110: mtechnavi.api.company.CreateBusinessUnitCertificateRequest
	(*GetBusinessUnitCertificateRequest)(nil),                                   // 111: mtechnavi.api.company.GetBusinessUnitCertificateRequest
	(*UpdateBusinessUnitCertificateRequest)(nil),                                // 112: mtechnavi.api.company.UpdateBusinessUnitCertificateRequest
	(*DeleteBusinessUnitCertificateRequest)(nil),                                // 113: mtechnavi.api.company.DeleteBusinessUnitCertificateRequest
	(*ListBusinessUnitStrengthsRequest)(nil),                                    // 114: mtechnavi.api.company.ListBusinessUnitStrengthsRequest
	(*ListBusinessUnitStrengthsResponse)(nil),                                   // 115: mtechnavi.api.company.ListBusinessUnitStrengthsResponse
	(*CreateBusinessUnitStrengthRequest)(nil),                                   // 116: mtechnavi.api.company.CreateBusinessUnitStrengthRequest
	(*GetBusinessUnitStrengthRequest)(nil),                                      // 117: mtechnavi.api.company.GetBusinessUnitStrengthRequest
	(*UpdateBusinessUnitStrengthRequest)(nil),                                   // 118: mtechnavi.api.company.UpdateBusinessUnitStrengthRequest
	(*DeleteBusinessUnitStrengthRequest)(nil),                                   // 119: mtechnavi.api.company.DeleteBusinessUnitStrengthRequest
	(*ListBusinessUnitSkillsRequest)(nil),                                       // 120: mtechnavi.api.company.ListBusinessUnitSkillsRequest
	(*ListBusinessUnitSkillsResponse)(nil),                                      // 121: mtechnavi.api.company.ListBusinessUnitSkillsResponse
	(*CreateBusinessUnitSkillRequest)(nil),                                      // 122: mtechnavi.api.company.CreateBusinessUnitSkillRequest
	(*GetBusinessUnitSkillRequest)(nil),                                         // 123: mtechnavi.api.company.GetBusinessUnitSkillRequest
	(*UpdateBusinessUnitSkillRequest)(nil),                                      // 124: mtechnavi.api.company.UpdateBusinessUnitSkillRequest
	(*DeleteBusinessUnitSkillRequest)(nil),                                      // 125: mtechnavi.api.company.DeleteBusinessUnitSkillRequest
	(*ListBusinessUnitContactHeadersRequest)(nil),                               // 126: mtechnavi.api.company.ListBusinessUnitContactHeadersRequest
	(*ListBusinessUnitContactHeadersResponse)(nil),                              // 127: mtechnavi.api.company.ListBusinessUnitContactHeadersResponse
	(*CreateBusinessUnitContactHeaderRequest)(nil),                              // 128: mtechnavi.api.company.CreateBusinessUnitContactHeaderRequest
	(*GetBusinessUnitContactHeaderRequest)(nil),                                 // 129: mtechnavi.api.company.GetBusinessUnitContactHeaderRequest
	(*UpdateBusinessUnitContactHeaderRequest)(nil),                              // 130: mtechnavi.api.company.UpdateBusinessUnitContactHeaderRequest
	(*DeleteBusinessUnitContactHeaderRequest)(nil),                              // 131: mtechnavi.api.company.DeleteBusinessUnitContactHeaderRequest
	(*ListBusinessUnitContactsRequest)(nil),                                     // 132: mtechnavi.api.company.ListBusinessUnitContactsRequest
	(*ListBusinessUnitContactsResponse)(nil),                                    // 133: mtechnavi.api.company.ListBusinessUnitContactsResponse
	(*CreateBusinessUnitContactRequest)(nil),                                    // 134: mtechnavi.api.company.CreateBusinessUnitContactRequest
	(*GetBusinessUnitContactRequest)(nil),                                       // 135: mtechnavi.api.company.GetBusinessUnitContactRequest
	(*UpdateBusinessUnitContactRequest)(nil),                                    // 136: mtechnavi.api.company.UpdateBusinessUnitContactRequest
	(*DeleteBusinessUnitContactRequest)(nil),                                    // 137: mtechnavi.api.company.DeleteBusinessUnitContactRequest
	(*ListBusinessUnitContactAttributesRequest)(nil),                            // 138: mtechnavi.api.company.ListBusinessUnitContactAttributesRequest
	(*ListBusinessUnitContactAttributesResponse)(nil),                           // 139: mtechnavi.api.company.ListBusinessUnitContactAttributesResponse
	(*CreateBusinessUnitContactAttributeRequest)(nil),                           // 140: mtechnavi.api.company.CreateBusinessUnitContactAttributeRequest
	(*GetBusinessUnitContactAttributeRequest)(nil),                              // 141: mtechnavi.api.company.GetBusinessUnitContactAttributeRequest
	(*UpdateBusinessUnitContactAttributeRequest)(nil),                           // 142: mtechnavi.api.company.UpdateBusinessUnitContactAttributeRequest
	(*DeleteBusinessUnitContactAttributeRequest)(nil),                           // 143: mtechnavi.api.company.DeleteBusinessUnitContactAttributeRequest
	(*ListTokyoShokoResearchsRequest)(nil),                                      // 144: mtechnavi.api.company.ListTokyoShokoResearchsRequest
	(*ListTokyoShokoResearchsResponse)(nil),                                     // 145: mtechnavi.api.company.ListTokyoShokoResearchsResponse
	(*CreateTokyoShokoResearchRequest)(nil),                                     // 146: mtechnavi.api.company.CreateTokyoShokoResearchRequest
	(*GetTokyoShokoResearchRequest)(nil),                                        // 147: mtechnavi.api.company.GetTokyoShokoResearchRequest
	(*UpdateTokyoShokoResearchRequest)(nil),                                     // 148: mtechnavi.api.company.UpdateTokyoShokoResearchRequest
	(*DeleteTokyoShokoResearchRequest)(nil),                                     // 149: mtechnavi.api.company.DeleteTokyoShokoResearchRequest
	(*ListTokyoShokoResearchCompanyProfilesRequest)(nil),                        // 150: mtechnavi.api.company.ListTokyoShokoResearchCompanyProfilesRequest
	(*ListTokyoShokoResearchCompanyProfilesResponse)(nil),                       // 151: mtechnavi.api.company.ListTokyoShokoResearchCompanyProfilesResponse
	(*CreateTokyoShokoResearchCompanyProfileRequest)(nil),                       // 152: mtechnavi.api.company.CreateTokyoShokoResearchCompanyProfileRequest
	(*GetTokyoShokoResearchCompanyProfileRequest)(nil),                          // 153: mtechnavi.api.company.GetTokyoShokoResearchCompanyProfileRequest
	(*UpdateTokyoShokoResearchCompanyProfileRequest)(nil),                       // 154: mtechnavi.api.company.UpdateTokyoShokoResearchCompanyProfileRequest
	(*DeleteTokyoShokoResearchCompanyProfileRequest)(nil),                       // 155: mtechnavi.api.company.DeleteTokyoShokoResearchCompanyProfileRequest
	(*ListTokyoShokoResearchRiskScoresRequest)(nil),                             // 156: mtechnavi.api.company.ListTokyoShokoResearchRiskScoresRequest
	(*ListTokyoShokoResearchRiskScoresResponse)(nil),                            // 157: mtechnavi.api.company.ListTokyoShokoResearchRiskScoresResponse
	(*CreateTokyoShokoResearchRiskScoreRequest)(nil),                            // 158: mtechnavi.api.company.CreateTokyoShokoResearchRiskScoreRequest
	(*GetTokyoShokoResearchRiskScoreRequest)(nil),                               // 159: mtechnavi.api.company.GetTokyoShokoResearchRiskScoreRequest
	(*UpdateTokyoShokoResearchRiskScoreRequest)(nil),                            // 160: mtechnavi.api.company.UpdateTokyoShokoResearchRiskScoreRequest
	(*DeleteTokyoShokoResearchRiskScoreRequest)(nil),                            // 161: mtechnavi.api.company.DeleteTokyoShokoResearchRiskScoreRequest
	(*ListBusinessUnitScoreAssetsRequest)(nil),                                  // 162: mtechnavi.api.company.ListBusinessUnitScoreAssetsRequest
	(*ListBusinessUnitScoreAssetsResponse)(nil),                                 // 163: mtechnavi.api.company.ListBusinessUnitScoreAssetsResponse
	(*CreateBusinessUnitScoreAssetRequest)(nil),                                 // 164: mtechnavi.api.company.CreateBusinessUnitScoreAssetRequest
	(*GetBusinessUnitScoreAssetRequest)(nil),                                    // 165: mtechnavi.api.company.GetBusinessUnitScoreAssetRequest
	(*UpdateBusinessUnitScoreAssetRequest)(nil),                                 // 166: mtechnavi.api.company.UpdateBusinessUnitScoreAssetRequest
	(*DeleteBusinessUnitScoreAssetRequest)(nil),                                 // 167: mtechnavi.api.company.DeleteBusinessUnitScoreAssetRequest
	(*ListBusinessUnitDocumentsRequest)(nil),                                    // 168: mtechnavi.api.company.ListBusinessUnitDocumentsRequest
	(*ListBusinessUnitDocumentsResponse)(nil),                                   // 169: mtechnavi.api.company.ListBusinessUnitDocumentsResponse
	(*CreateBusinessUnitDocumentRequest)(nil),                                   // 170: mtechnavi.api.company.CreateBusinessUnitDocumentRequest
	(*GetBusinessUnitDocumentRequest)(nil),                                      // 171: mtechnavi.api.company.GetBusinessUnitDocumentRequest
	(*UpdateBusinessUnitDocumentRequest)(nil),                                   // 172: mtechnavi.api.company.UpdateBusinessUnitDocumentRequest
	(*DeleteBusinessUnitDocumentRequest)(nil),                                   // 173: mtechnavi.api.company.DeleteBusinessUnitDocumentRequest
	(*ListBusinessUnitActiveControlsRequest)(nil),                               // 174: mtechnavi.api.company.ListBusinessUnitActiveControlsRequest
	(*ListBusinessUnitActiveControlsResponse)(nil),                              // 175: mtechnavi.api.company.ListBusinessUnitActiveControlsResponse
	(*CreateBusinessUnitActiveControlRequest)(nil),                              // 176: mtechnavi.api.company.CreateBusinessUnitActiveControlRequest
	(*GetBusinessUnitActiveControlRequest)(nil),                                 // 177: mtechnavi.api.company.GetBusinessUnitActiveControlRequest
	(*UpdateBusinessUnitActiveControlRequest)(nil),                              // 178: mtechnavi.api.company.UpdateBusinessUnitActiveControlRequest
	(*DeleteBusinessUnitActiveControlRequest)(nil),                              // 179: mtechnavi.api.company.DeleteBusinessUnitActiveControlRequest
	(*ListBusinessUnitSnapshotsRequest)(nil),                                    // 180: mtechnavi.api.company.ListBusinessUnitSnapshotsRequest
	(*ListBusinessUnitSnapshotsResponse)(nil),                                   // 181: mtechnavi.api.company.ListBusinessUnitSnapshotsResponse
	(*CreateBusinessUnitSnapshotRequest)(nil),                                   // 182: mtechnavi.api.company.CreateBusinessUnitSnapshotRequest
	(*GetBusinessUnitSnapshotRequest)(nil),                                      // 183: mtechnavi.api.company.GetBusinessUnitSnapshotRequest
	(*UpdateBusinessUnitSnapshotRequest)(nil),                                   // 184: mtechnavi.api.company.UpdateBusinessUnitSnapshotRequest
	(*DeleteBusinessUnitSnapshotRequest)(nil),                                   // 185: mtechnavi.api.company.DeleteBusinessUnitSnapshotRequest
	(*ListBusinessUnitChangeNotificationsRequest)(nil),                          // 186: mtechnavi.api.company.ListBusinessUnitChangeNotificationsRequest
	(*ListBusinessUnitChangeNotificationsResponse)(nil),                         // 187: mtechnavi.api.company.ListBusinessUnitChangeNotificationsResponse
	(*CreateBusinessUnitChangeNotificationRequest)(nil),                         // 188: mtechnavi.api.company.CreateBusinessUnitChangeNotificationRequest
	(*GetBusinessUnitChangeNotificationRequest)(nil),                            // 189: mtechnavi.api.company.GetBusinessUnitChangeNotificationRequest
	(*UpdateBusinessUnitChangeNotificationRequest)(nil),                         // 190: mtechnavi.api.company.UpdateBusinessUnitChangeNotificationRequest
	(*DeleteBusinessUnitChangeNotificationRequest)(nil),                         // 191: mtechnavi.api.company.DeleteBusinessUnitChangeNotificationRequest
	(*ListBusinessUnitContactContentsRequest)(nil),                              // 192: mtechnavi.api.company.ListBusinessUnitContactContentsRequest
	(*ListBusinessUnitContactContentsResponse)(nil),                             // 193: mtechnavi.api.company.ListBusinessUnitContactContentsResponse
	(*GetBusinessUnitContactContentRequest)(nil),                                // 194: mtechnavi.api.company.GetBusinessUnitContactContentRequest
	(*ListBusinessUnitScoreContentsRequest)(nil),                                // 195: mtechnavi.api.company.ListBusinessUnitScoreContentsRequest
	(*ListBusinessUnitScoreContentsResponse)(nil),                               // 196: mtechnavi.api.company.ListBusinessUnitScoreContentsResponse
	(*GetBusinessUnitScoreContentRequest)(nil),                                  // 197: mtechnavi.api.company.GetBusinessUnitScoreContentRequest
	(*SharedListBusinessUnitProfilesRequest)(nil),                               // 198: mtechnavi.api.company.SharedListBusinessUnitProfilesRequest
	(*SharedListBusinessUnitProfilesResponse)(nil),                              // 199: mtechnavi.api.company.SharedListBusinessUnitProfilesResponse
	(*SharedGetBusinessUnitProfileRequest)(nil),                                 // 200: mtechnavi.api.company.SharedGetBusinessUnitProfileRequest
	(*SharedListBusinessUnitFinancialsRequest)(nil),                             // 201: mtechnavi.api.company.SharedListBusinessUnitFinancialsRequest
	(*SharedListBusinessUnitFinancialsResponse)(nil),                            // 202: mtechnavi.api.company.SharedListBusinessUnitFinancialsResponse
	(*SharedGetBusinessUnitFinancialRequest)(nil),                               // 203: mtechnavi.api.company.SharedGetBusinessUnitFinancialRequest
	(*SharedListBusinessUnitBranchsRequest)(nil),                                // 204: mtechnavi.api.company.SharedListBusinessUnitBranchsRequest
	(*SharedListBusinessUnitBranchsResponse)(nil),                               // 205: mtechnavi.api.company.SharedListBusinessUnitBranchsResponse
	(*SharedGetBusinessUnitBranchRequest)(nil),                                  // 206: mtechnavi.api.company.SharedGetBusinessUnitBranchRequest
	(*SharedListBusinessUnitFacilitiessRequest)(nil),                            // 207: mtechnavi.api.company.SharedListBusinessUnitFacilitiessRequest
	(*SharedListBusinessUnitFacilitiessResponse)(nil),                           // 208: mtechnavi.api.company.SharedListBusinessUnitFacilitiessResponse
	(*SharedGetBusinessUnitFacilitiesRequest)(nil),                              // 209: mtechnavi.api.company.SharedGetBusinessUnitFacilitiesRequest
	(*SharedListBusinessUnitCertificatesRequest)(nil),                           // 210: mtechnavi.api.company.SharedListBusinessUnitCertificatesRequest
	(*SharedListBusinessUnitCertificatesResponse)(nil),                          // 211: mtechnavi.api.company.SharedListBusinessUnitCertificatesResponse
	(*SharedGetBusinessUnitCertificateRequest)(nil),                             // 212: mtechnavi.api.company.SharedGetBusinessUnitCertificateRequest
	(*SharedListBusinessUnitStrengthsRequest)(nil),                              // 213: mtechnavi.api.company.SharedListBusinessUnitStrengthsRequest
	(*SharedListBusinessUnitStrengthsResponse)(nil),                             // 214: mtechnavi.api.company.SharedListBusinessUnitStrengthsResponse
	(*SharedGetBusinessUnitStrengthRequest)(nil),                                // 215: mtechnavi.api.company.SharedGetBusinessUnitStrengthRequest
	(*SharedListBusinessUnitSkillsRequest)(nil),                                 // 216: mtechnavi.api.company.SharedListBusinessUnitSkillsRequest
	(*SharedListBusinessUnitSkillsResponse)(nil),                                // 217: mtechnavi.api.company.SharedListBusinessUnitSkillsResponse
	(*SharedGetBusinessUnitSkillRequest)(nil),                                   // 218: mtechnavi.api.company.SharedGetBusinessUnitSkillRequest
	(*SharetoBusinessUnitContactHeaderRequest)(nil),                             // 219: mtechnavi.api.company.SharetoBusinessUnitContactHeaderRequest
	(*SharetoBusinessUnitContactHeaderResponse)(nil),                            // 220: mtechnavi.api.company.SharetoBusinessUnitContactHeaderResponse
	(*SharetoBusinessUnitContactRequest)(nil),                                   // 221: mtechnavi.api.company.SharetoBusinessUnitContactRequest
	(*SharetoBusinessUnitContactResponse)(nil),                                  // 222: mtechnavi.api.company.SharetoBusinessUnitContactResponse
	(*SharetoBusinessUnitActiveControlRequest)(nil),                             // 223: mtechnavi.api.company.SharetoBusinessUnitActiveControlRequest
	(*SharetoBusinessUnitActiveControlResponse)(nil),                            // 224: mtechnavi.api.company.SharetoBusinessUnitActiveControlResponse
	(*ActivateBusinessUnitRequest)(nil),                                         // 225: mtechnavi.api.company.ActivateBusinessUnitRequest
	(*ActivateBusinessUnitResponse)(nil),                                        // 226: mtechnavi.api.company.ActivateBusinessUnitResponse
	(*InactivateBusinessUnitRequest)(nil),                                       // 227: mtechnavi.api.company.InactivateBusinessUnitRequest
	(*InactivateBusinessUnitResponse)(nil),                                      // 228: mtechnavi.api.company.InactivateBusinessUnitResponse
	(*StartBusinessRequest)(nil),                                                // 229: mtechnavi.api.company.StartBusinessRequest
	(*StartBusinessResponse)(nil),                                               // 230: mtechnavi.api.company.StartBusinessResponse
	(*StopBusinessRequest)(nil),                                                 // 231: mtechnavi.api.company.StopBusinessRequest
	(*StopBusinessResponse)(nil),                                                // 232: mtechnavi.api.company.StopBusinessResponse
	(*ConfirmBusinessUnitChangeNotificationRequest)(nil),                        // 233: mtechnavi.api.company.ConfirmBusinessUnitChangeNotificationRequest
	(*ConfirmBusinessUnitChangeNotificationResponse)(nil),                       // 234: mtechnavi.api.company.ConfirmBusinessUnitChangeNotificationResponse
	(*ExportBusinessUnitManagementsRequest)(nil),                                // 235: mtechnavi.api.company.ExportBusinessUnitManagementsRequest
	(*ExportBusinessUnitManagementsResponse)(nil),                               // 236: mtechnavi.api.company.ExportBusinessUnitManagementsResponse
	(*ImportBusinessUnitManagementsRequest)(nil),                                // 237: mtechnavi.api.company.ImportBusinessUnitManagementsRequest
	(*ImportBusinessUnitManagementsResponse)(nil),                               // 238: mtechnavi.api.company.ImportBusinessUnitManagementsResponse
	(*ListBusinessUnitManagementFormatsRequest)(nil),                            // 239: mtechnavi.api.company.ListBusinessUnitManagementFormatsRequest
	(*ListBusinessUnitManagementFormatsResponse)(nil),                           // 240: mtechnavi.api.company.ListBusinessUnitManagementFormatsResponse
	(*ExportBusinessUnitScoresRequest)(nil),                                     // 241: mtechnavi.api.company.ExportBusinessUnitScoresRequest
	(*ExportBusinessUnitScoresResponse)(nil),                                    // 242: mtechnavi.api.company.ExportBusinessUnitScoresResponse
	(*ImportBusinessUnitScoresRequest)(nil),                                     // 243: mtechnavi.api.company.ImportBusinessUnitScoresRequest
	(*ImportBusinessUnitScoresResponse)(nil),                                    // 244: mtechnavi.api.company.ImportBusinessUnitScoresResponse
	(*ListBusinessUnitScoreFormatsRequest)(nil),                                 // 245: mtechnavi.api.company.ListBusinessUnitScoreFormatsRequest
	(*ListBusinessUnitScoreFormatsResponse)(nil),                                // 246: mtechnavi.api.company.ListBusinessUnitScoreFormatsResponse
	(*ExportBusinessUnitManagementItemValuesRequest)(nil),                       // 247: mtechnavi.api.company.ExportBusinessUnitManagementItemValuesRequest
	(*ExportBusinessUnitManagementItemValuesResponse)(nil),                      // 248: mtechnavi.api.company.ExportBusinessUnitManagementItemValuesResponse
	(*ImportBusinessUnitManagementItemValuesRequest)(nil),                       // 249: mtechnavi.api.company.ImportBusinessUnitManagementItemValuesRequest
	(*ImportBusinessUnitManagementItemValuesResponse)(nil),                      // 250: mtechnavi.api.company.ImportBusinessUnitManagementItemValuesResponse
	(*ListBusinessUnitManagementItemValueFormatsRequest)(nil),                   // 251: mtechnavi.api.company.ListBusinessUnitManagementItemValueFormatsRequest
	(*ListBusinessUnitManagementItemValueFormatsResponse)(nil),                  // 252: mtechnavi.api.company.ListBusinessUnitManagementItemValueFormatsResponse
	(*GetBusinessUnitSkillTreeRequest)(nil),                                     // 253: mtechnavi.api.company.GetBusinessUnitSkillTreeRequest
	(*Company)(nil),                                                             // 254: mtechnavi.api.company.Company
	(*ComponentUnit)(nil),                                                       // 255: mtechnavi.api.company.ComponentUnit
	(*BusinessUnit)(nil),                                                        // 256: mtechnavi.api.company.BusinessUnit
	(*CompanyAndBusinessUnit)(nil),                                              // 257: mtechnavi.api.company.CompanyAndBusinessUnit
	(*CompanyAndComponentUnitAndBusinessUnit)(nil),                              // 258: mtechnavi.api.company.CompanyAndComponentUnitAndBusinessUnit
	(*PostUnitAndCompanyAndComponentUnitAndBusinessUnit)(nil),                   // 259: mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit
	(*BusinessUnitRequest)(nil),                                                 // 260: mtechnavi.api.company.BusinessUnitRequest
	(*BusinessUnitRequestResult)(nil),                                           // 261: mtechnavi.api.company.BusinessUnitRequestResult
	(*Staff)(nil),                                                               // 262: mtechnavi.api.company.Staff
	(*StaffAndComponentUnit)(nil),                                               // 263: mtechnavi.api.company.StaffAndComponentUnit
	(*protobuf.FileFormat)(nil),                                                 // 264: sharelib.FileFormat
	(*protobuf.ImportSummary)(nil),                                              // 265: sharelib.ImportSummary
	(*protobuf.ImportError)(nil),                                                // 266: sharelib.ImportError
	(*BusinessUnitManagement)(nil),                                              // 267: mtechnavi.api.company.BusinessUnitManagement
	(*BusinessUnitManagementContent)(nil),                                       // 268: mtechnavi.api.company.BusinessUnitManagementContent
	(*History)(nil),                                                             // 269: mtechnavi.api.company.History
	(*BusinessUnitProfile)(nil),                                                 // 270: mtechnavi.api.company.BusinessUnitProfile
	(*protobuf.UserReference)(nil),                                              // 271: sharelib.UserReference
	(*BusinessUnitFinancial)(nil),                                               // 272: mtechnavi.api.company.BusinessUnitFinancial
	(*BusinessUnitBranch)(nil),                                                  // 273: mtechnavi.api.company.BusinessUnitBranch
	(*BusinessUnitFacilities)(nil),                                              // 274: mtechnavi.api.company.BusinessUnitFacilities
	(*BusinessUnitCertificate)(nil),                                             // 275: mtechnavi.api.company.BusinessUnitCertificate
	(*BusinessUnitStrength)(nil),                                                // 276: mtechnavi.api.company.BusinessUnitStrength
	(*BusinessUnitSkill)(nil),                                                   // 277: mtechnavi.api.company.BusinessUnitSkill
	(*BusinessUnitContactHeader)(nil),                                           // 278: mtechnavi.api.company.BusinessUnitContactHeader
	(*BusinessUnitContact)(nil),                                                 // 279: mtechnavi.api.company.BusinessUnitContact
	(*BusinessUnitContactAttribute)(nil),                                        // 280: mtechnavi.api.company.BusinessUnitContactAttribute
	(*TokyoShokoResearch)(nil),                                                  // 281: mtechnavi.api.company.TokyoShokoResearch
	(*TokyoShokoResearchCompanyProfile)(nil),                                    // 282: mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	(*TokyoShokoResearchRiskScore)(nil),                                         // 283: mtechnavi.api.company.TokyoShokoResearchRiskScore
	(*BusinessUnitScoreAsset)(nil),                                              // 284: mtechnavi.api.company.BusinessUnitScoreAsset
	(*BusinessUnitDocument)(nil),                                                // 285: mtechnavi.api.company.BusinessUnitDocument
	(*BusinessUnitActiveControl)(nil),                                           // 286: mtechnavi.api.company.BusinessUnitActiveControl
	(*BusinessUnitSnapshot)(nil),                                                // 287: mtechnavi.api.company.BusinessUnitSnapshot
	(*BusinessUnitChangeNotification)(nil),                                      // 288: mtechnavi.api.company.BusinessUnitChangeNotification
	(*BusinessUnitContactContent)(nil),                                          // 289: mtechnavi.api.company.BusinessUnitContactContent
	(*BusinessUnitScoreContent)(nil),                                            // 290: mtechnavi.api.company.BusinessUnitScoreContent
	(*emptypb.Empty)(nil),                                                       // 291: google.protobuf.Empty
	(*BusinessUnitSkillTree)(nil),                                               // 292: mtechnavi.api.company.BusinessUnitSkillTree
}
var file_company_proto_depIdxs = []int32{
	254, // 0: mtechnavi.api.company.UpdateCompanyRequest.company:type_name -> mtechnavi.api.company.Company
	255, // 1: mtechnavi.api.company.CreateComponentUnitRequest.component_unit:type_name -> mtechnavi.api.company.ComponentUnit
	255, // 2: mtechnavi.api.company.ListComponentUnitsResponse.items:type_name -> mtechnavi.api.company.ComponentUnit
	255, // 3: mtechnavi.api.company.PublicListComponentUnitsResponse.items:type_name -> mtechnavi.api.company.ComponentUnit
	255, // 4: mtechnavi.api.company.UpdateComponentUnitRequest.component_unit:type_name -> mtechnavi.api.company.ComponentUnit
	255, // 5: mtechnavi.api.company.DeleteComponentUnitRequest.component_unit:type_name -> mtechnavi.api.company.ComponentUnit
	256, // 6: mtechnavi.api.company.CreateBusinessUnitRequest.business_unit:type_name -> mtechnavi.api.company.BusinessUnit
	256, // 7: mtechnavi.api.company.ListBusinessUnitsResponse.items:type_name -> mtechnavi.api.company.BusinessUnit
	256, // 8: mtechnavi.api.company.UpdateBusinessUnitRequest.business_unit:type_name -> mtechnavi.api.company.BusinessUnit
	256, // 9: mtechnavi.api.company.DeleteBusinessUnitRequest.business_unit:type_name -> mtechnavi.api.company.BusinessUnit
	257, // 10: mtechnavi.api.company.PublicListCompanyAndBusinessUnitsResponse.items:type_name -> mtechnavi.api.company.CompanyAndBusinessUnit
	258, // 11: mtechnavi.api.company.PublicListCompanyAndComponentUnitAndBusinessUnitsResponse.items:type_name -> mtechnavi.api.company.CompanyAndComponentUnitAndBusinessUnit
	259, // 12: mtechnavi.api.company.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse.items:type_name -> mtechnavi.api.company.PostUnitAndCompanyAndComponentUnitAndBusinessUnit
	260, // 13: mtechnavi.api.company.CreateBusinessUnitRequestRequest.business_unit_request:type_name -> mtechnavi.api.company.BusinessUnitRequest
	260, // 14: mtechnavi.api.company.ListBusinessUnitRequestsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitRequest
	260, // 15: mtechnavi.api.company.UpdateBusinessUnitRequestRequest.business_unit_request:type_name -> mtechnavi.api.company.BusinessUnitRequest
	260, // 16: mtechnavi.api.company.DeleteBusinessUnitRequestRequest.business_unit_request:type_name -> mtechnavi.api.company.BusinessUnitRequest
	261, // 17: mtechnavi.api.company.CreateBusinessUnitRequestResultRequest.business_unit_request_result:type_name -> mtechnavi.api.company.BusinessUnitRequestResult
	260, // 18: mtechnavi.api.company.CreateBusinessUnitRequestResultRequest.business_unit_request:type_name -> mtechnavi.api.company.BusinessUnitRequest
	261, // 19: mtechnavi.api.company.ListBusinessUnitRequestResultsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitRequestResult
	261, // 20: mtechnavi.api.company.UpdateBusinessUnitRequestResultRequest.business_unit_request_result:type_name -> mtechnavi.api.company.BusinessUnitRequestResult
	261, // 21: mtechnavi.api.company.DeleteBusinessUnitRequestResultRequest.business_unit_request_result:type_name -> mtechnavi.api.company.BusinessUnitRequestResult
	262, // 22: mtechnavi.api.company.ListStaffsResponse.items:type_name -> mtechnavi.api.company.Staff
	263, // 23: mtechnavi.api.company.ListStaffAndComponentUnitsResponse.items:type_name -> mtechnavi.api.company.StaffAndComponentUnit
	264, // 24: mtechnavi.api.company.ImportStaffsRequest.file_format:type_name -> sharelib.FileFormat
	265, // 25: mtechnavi.api.company.ImportStaffsResponse.summary:type_name -> sharelib.ImportSummary
	266, // 26: mtechnavi.api.company.ImportStaffsResponse.errors:type_name -> sharelib.ImportError
	264, // 27: mtechnavi.api.company.ExportStaffsRequest.file_format:type_name -> sharelib.FileFormat
	264, // 28: mtechnavi.api.company.ImportComponentUnitsRequest.file_format:type_name -> sharelib.FileFormat
	265, // 29: mtechnavi.api.company.ImportComponentUnitsResponse.summary:type_name -> sharelib.ImportSummary
	266, // 30: mtechnavi.api.company.ImportComponentUnitsResponse.errors:type_name -> sharelib.ImportError
	264, // 31: mtechnavi.api.company.ExportComponentUnitsRequest.file_format:type_name -> sharelib.FileFormat
	264, // 32: mtechnavi.api.company.ImportBusinessUnitsRequest.file_format:type_name -> sharelib.FileFormat
	265, // 33: mtechnavi.api.company.ImportBusinessUnitsResponse.summary:type_name -> sharelib.ImportSummary
	266, // 34: mtechnavi.api.company.ImportBusinessUnitsResponse.errors:type_name -> sharelib.ImportError
	264, // 35: mtechnavi.api.company.ExportBusinessUnitsRequest.file_format:type_name -> sharelib.FileFormat
	264, // 36: mtechnavi.api.company.ListComponentUnitFormatsResponse.items:type_name -> sharelib.FileFormat
	264, // 37: mtechnavi.api.company.ListBusinessUnitFormatsResponse.items:type_name -> sharelib.FileFormat
	264, // 38: mtechnavi.api.company.ListStaffFormatsResponse.items:type_name -> sharelib.FileFormat
	254, // 39: mtechnavi.api.company.PublicListCompanysResponse.items:type_name -> mtechnavi.api.company.Company
	267, // 40: mtechnavi.api.company.ListBusinessUnitManagementsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitManagement
	264, // 41: mtechnavi.api.company.ListOldBusinessUnitManagementFormatsResponse.items:type_name -> sharelib.FileFormat
	267, // 42: mtechnavi.api.company.CreateBusinessUnitManagementRequest.business_unit_management:type_name -> mtechnavi.api.company.BusinessUnitManagement
	267, // 43: mtechnavi.api.company.UpdateBusinessUnitManagementRequest.business_unit_management:type_name -> mtechnavi.api.company.BusinessUnitManagement
	267, // 44: mtechnavi.api.company.DeleteBusinessUnitManagementRequest.business_unit_management:type_name -> mtechnavi.api.company.BusinessUnitManagement
	264, // 45: mtechnavi.api.company.ImportOldBusinessUnitManagementsRequest.file_format:type_name -> sharelib.FileFormat
	265, // 46: mtechnavi.api.company.ImportOldBusinessUnitManagementsResponse.summary:type_name -> sharelib.ImportSummary
	266, // 47: mtechnavi.api.company.ImportOldBusinessUnitManagementsResponse.errors:type_name -> sharelib.ImportError
	268, // 48: mtechnavi.api.company.ListBusinessUnitManagementContentsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitManagementContent
	264, // 49: mtechnavi.api.company.ExportOldBusinessUnitManagementsRequest.file_format:type_name -> sharelib.FileFormat
	269, // 50: mtechnavi.api.company.ListHistorysResponse.items:type_name -> mtechnavi.api.company.History
	270, // 51: mtechnavi.api.company.ListBusinessUnitProfilesResponse.items:type_name -> mtechnavi.api.company.BusinessUnitProfile
	270, // 52: mtechnavi.api.company.CreateBusinessUnitProfileRequest.business_unit_profile:type_name -> mtechnavi.api.company.BusinessUnitProfile
	270, // 53: mtechnavi.api.company.UpdateBusinessUnitProfileRequest.business_unit_profile:type_name -> mtechnavi.api.company.BusinessUnitProfile
	270, // 54: mtechnavi.api.company.DeleteBusinessUnitProfileRequest.business_unit_profile:type_name -> mtechnavi.api.company.BusinessUnitProfile
	271, // 55: mtechnavi.api.company.UpdateSystemNotificationUsersInBusinessUnitProfileRequest.system_notification_users:type_name -> sharelib.UserReference
	272, // 56: mtechnavi.api.company.ListBusinessUnitFinancialsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitFinancial
	272, // 57: mtechnavi.api.company.CreateBusinessUnitFinancialRequest.business_unit_financial:type_name -> mtechnavi.api.company.BusinessUnitFinancial
	272, // 58: mtechnavi.api.company.UpdateBusinessUnitFinancialRequest.business_unit_financial:type_name -> mtechnavi.api.company.BusinessUnitFinancial
	272, // 59: mtechnavi.api.company.DeleteBusinessUnitFinancialRequest.business_unit_financial:type_name -> mtechnavi.api.company.BusinessUnitFinancial
	273, // 60: mtechnavi.api.company.ListBusinessUnitBranchsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitBranch
	273, // 61: mtechnavi.api.company.CreateBusinessUnitBranchRequest.business_unit_branch:type_name -> mtechnavi.api.company.BusinessUnitBranch
	273, // 62: mtechnavi.api.company.UpdateBusinessUnitBranchRequest.business_unit_branch:type_name -> mtechnavi.api.company.BusinessUnitBranch
	273, // 63: mtechnavi.api.company.DeleteBusinessUnitBranchRequest.business_unit_branch:type_name -> mtechnavi.api.company.BusinessUnitBranch
	274, // 64: mtechnavi.api.company.ListBusinessUnitFacilitiessResponse.items:type_name -> mtechnavi.api.company.BusinessUnitFacilities
	274, // 65: mtechnavi.api.company.CreateBusinessUnitFacilitiesRequest.business_unit_facilities:type_name -> mtechnavi.api.company.BusinessUnitFacilities
	274, // 66: mtechnavi.api.company.UpdateBusinessUnitFacilitiesRequest.business_unit_facilities:type_name -> mtechnavi.api.company.BusinessUnitFacilities
	274, // 67: mtechnavi.api.company.DeleteBusinessUnitFacilitiesRequest.business_unit_facilities:type_name -> mtechnavi.api.company.BusinessUnitFacilities
	275, // 68: mtechnavi.api.company.ListBusinessUnitCertificatesResponse.items:type_name -> mtechnavi.api.company.BusinessUnitCertificate
	275, // 69: mtechnavi.api.company.CreateBusinessUnitCertificateRequest.business_unit_certificate:type_name -> mtechnavi.api.company.BusinessUnitCertificate
	275, // 70: mtechnavi.api.company.UpdateBusinessUnitCertificateRequest.business_unit_certificate:type_name -> mtechnavi.api.company.BusinessUnitCertificate
	275, // 71: mtechnavi.api.company.DeleteBusinessUnitCertificateRequest.business_unit_certificate:type_name -> mtechnavi.api.company.BusinessUnitCertificate
	276, // 72: mtechnavi.api.company.ListBusinessUnitStrengthsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitStrength
	276, // 73: mtechnavi.api.company.CreateBusinessUnitStrengthRequest.business_unit_strength:type_name -> mtechnavi.api.company.BusinessUnitStrength
	276, // 74: mtechnavi.api.company.UpdateBusinessUnitStrengthRequest.business_unit_strength:type_name -> mtechnavi.api.company.BusinessUnitStrength
	276, // 75: mtechnavi.api.company.DeleteBusinessUnitStrengthRequest.business_unit_strength:type_name -> mtechnavi.api.company.BusinessUnitStrength
	277, // 76: mtechnavi.api.company.ListBusinessUnitSkillsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitSkill
	277, // 77: mtechnavi.api.company.CreateBusinessUnitSkillRequest.business_unit_skill:type_name -> mtechnavi.api.company.BusinessUnitSkill
	277, // 78: mtechnavi.api.company.UpdateBusinessUnitSkillRequest.business_unit_skill:type_name -> mtechnavi.api.company.BusinessUnitSkill
	277, // 79: mtechnavi.api.company.DeleteBusinessUnitSkillRequest.business_unit_skill:type_name -> mtechnavi.api.company.BusinessUnitSkill
	278, // 80: mtechnavi.api.company.ListBusinessUnitContactHeadersResponse.items:type_name -> mtechnavi.api.company.BusinessUnitContactHeader
	278, // 81: mtechnavi.api.company.CreateBusinessUnitContactHeaderRequest.business_unit_contact_header:type_name -> mtechnavi.api.company.BusinessUnitContactHeader
	278, // 82: mtechnavi.api.company.UpdateBusinessUnitContactHeaderRequest.business_unit_contact_header:type_name -> mtechnavi.api.company.BusinessUnitContactHeader
	278, // 83: mtechnavi.api.company.DeleteBusinessUnitContactHeaderRequest.business_unit_contact_header:type_name -> mtechnavi.api.company.BusinessUnitContactHeader
	279, // 84: mtechnavi.api.company.ListBusinessUnitContactsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitContact
	279, // 85: mtechnavi.api.company.CreateBusinessUnitContactRequest.business_unit_contact:type_name -> mtechnavi.api.company.BusinessUnitContact
	279, // 86: mtechnavi.api.company.UpdateBusinessUnitContactRequest.business_unit_contact:type_name -> mtechnavi.api.company.BusinessUnitContact
	279, // 87: mtechnavi.api.company.DeleteBusinessUnitContactRequest.business_unit_contact:type_name -> mtechnavi.api.company.BusinessUnitContact
	280, // 88: mtechnavi.api.company.ListBusinessUnitContactAttributesResponse.items:type_name -> mtechnavi.api.company.BusinessUnitContactAttribute
	280, // 89: mtechnavi.api.company.CreateBusinessUnitContactAttributeRequest.business_unit_contact_attribute:type_name -> mtechnavi.api.company.BusinessUnitContactAttribute
	280, // 90: mtechnavi.api.company.UpdateBusinessUnitContactAttributeRequest.business_unit_contact_attribute:type_name -> mtechnavi.api.company.BusinessUnitContactAttribute
	280, // 91: mtechnavi.api.company.DeleteBusinessUnitContactAttributeRequest.business_unit_contact_attribute:type_name -> mtechnavi.api.company.BusinessUnitContactAttribute
	281, // 92: mtechnavi.api.company.ListTokyoShokoResearchsResponse.items:type_name -> mtechnavi.api.company.TokyoShokoResearch
	281, // 93: mtechnavi.api.company.CreateTokyoShokoResearchRequest.tokyo_shoko_research:type_name -> mtechnavi.api.company.TokyoShokoResearch
	281, // 94: mtechnavi.api.company.UpdateTokyoShokoResearchRequest.tokyo_shoko_research:type_name -> mtechnavi.api.company.TokyoShokoResearch
	281, // 95: mtechnavi.api.company.DeleteTokyoShokoResearchRequest.tokyo_shoko_research:type_name -> mtechnavi.api.company.TokyoShokoResearch
	282, // 96: mtechnavi.api.company.ListTokyoShokoResearchCompanyProfilesResponse.items:type_name -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	282, // 97: mtechnavi.api.company.CreateTokyoShokoResearchCompanyProfileRequest.tokyo_shoko_research_company_profile:type_name -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	282, // 98: mtechnavi.api.company.UpdateTokyoShokoResearchCompanyProfileRequest.tokyo_shoko_research_company_profile:type_name -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	282, // 99: mtechnavi.api.company.DeleteTokyoShokoResearchCompanyProfileRequest.tokyo_shoko_research_company_profile:type_name -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	283, // 100: mtechnavi.api.company.ListTokyoShokoResearchRiskScoresResponse.items:type_name -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	283, // 101: mtechnavi.api.company.CreateTokyoShokoResearchRiskScoreRequest.tokyo_shoko_research_risk_score:type_name -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	283, // 102: mtechnavi.api.company.UpdateTokyoShokoResearchRiskScoreRequest.tokyo_shoko_research_risk_score:type_name -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	283, // 103: mtechnavi.api.company.DeleteTokyoShokoResearchRiskScoreRequest.tokyo_shoko_research_risk_score:type_name -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	284, // 104: mtechnavi.api.company.ListBusinessUnitScoreAssetsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitScoreAsset
	284, // 105: mtechnavi.api.company.CreateBusinessUnitScoreAssetRequest.business_unit_score_asset:type_name -> mtechnavi.api.company.BusinessUnitScoreAsset
	284, // 106: mtechnavi.api.company.UpdateBusinessUnitScoreAssetRequest.business_unit_score_asset:type_name -> mtechnavi.api.company.BusinessUnitScoreAsset
	284, // 107: mtechnavi.api.company.DeleteBusinessUnitScoreAssetRequest.business_unit_score_asset:type_name -> mtechnavi.api.company.BusinessUnitScoreAsset
	285, // 108: mtechnavi.api.company.ListBusinessUnitDocumentsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitDocument
	285, // 109: mtechnavi.api.company.CreateBusinessUnitDocumentRequest.business_unit_document:type_name -> mtechnavi.api.company.BusinessUnitDocument
	285, // 110: mtechnavi.api.company.UpdateBusinessUnitDocumentRequest.business_unit_document:type_name -> mtechnavi.api.company.BusinessUnitDocument
	285, // 111: mtechnavi.api.company.DeleteBusinessUnitDocumentRequest.business_unit_document:type_name -> mtechnavi.api.company.BusinessUnitDocument
	286, // 112: mtechnavi.api.company.ListBusinessUnitActiveControlsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 113: mtechnavi.api.company.CreateBusinessUnitActiveControlRequest.business_unit_active_control:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 114: mtechnavi.api.company.UpdateBusinessUnitActiveControlRequest.business_unit_active_control:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 115: mtechnavi.api.company.DeleteBusinessUnitActiveControlRequest.business_unit_active_control:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	287, // 116: mtechnavi.api.company.ListBusinessUnitSnapshotsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitSnapshot
	287, // 117: mtechnavi.api.company.CreateBusinessUnitSnapshotRequest.business_unit_snapshot:type_name -> mtechnavi.api.company.BusinessUnitSnapshot
	287, // 118: mtechnavi.api.company.UpdateBusinessUnitSnapshotRequest.business_unit_snapshot:type_name -> mtechnavi.api.company.BusinessUnitSnapshot
	287, // 119: mtechnavi.api.company.DeleteBusinessUnitSnapshotRequest.business_unit_snapshot:type_name -> mtechnavi.api.company.BusinessUnitSnapshot
	288, // 120: mtechnavi.api.company.ListBusinessUnitChangeNotificationsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitChangeNotification
	288, // 121: mtechnavi.api.company.CreateBusinessUnitChangeNotificationRequest.business_unit_change_notification:type_name -> mtechnavi.api.company.BusinessUnitChangeNotification
	288, // 122: mtechnavi.api.company.UpdateBusinessUnitChangeNotificationRequest.business_unit_change_notification:type_name -> mtechnavi.api.company.BusinessUnitChangeNotification
	288, // 123: mtechnavi.api.company.DeleteBusinessUnitChangeNotificationRequest.business_unit_change_notification:type_name -> mtechnavi.api.company.BusinessUnitChangeNotification
	289, // 124: mtechnavi.api.company.ListBusinessUnitContactContentsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitContactContent
	290, // 125: mtechnavi.api.company.ListBusinessUnitScoreContentsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitScoreContent
	270, // 126: mtechnavi.api.company.SharedListBusinessUnitProfilesResponse.items:type_name -> mtechnavi.api.company.BusinessUnitProfile
	272, // 127: mtechnavi.api.company.SharedListBusinessUnitFinancialsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitFinancial
	273, // 128: mtechnavi.api.company.SharedListBusinessUnitBranchsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitBranch
	274, // 129: mtechnavi.api.company.SharedListBusinessUnitFacilitiessResponse.items:type_name -> mtechnavi.api.company.BusinessUnitFacilities
	275, // 130: mtechnavi.api.company.SharedListBusinessUnitCertificatesResponse.items:type_name -> mtechnavi.api.company.BusinessUnitCertificate
	276, // 131: mtechnavi.api.company.SharedListBusinessUnitStrengthsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitStrength
	277, // 132: mtechnavi.api.company.SharedListBusinessUnitSkillsResponse.items:type_name -> mtechnavi.api.company.BusinessUnitSkill
	278, // 133: mtechnavi.api.company.SharetoBusinessUnitContactHeaderRequest.business_unit_contact_header:type_name -> mtechnavi.api.company.BusinessUnitContactHeader
	279, // 134: mtechnavi.api.company.SharetoBusinessUnitContactRequest.business_unit_contact:type_name -> mtechnavi.api.company.BusinessUnitContact
	286, // 135: mtechnavi.api.company.SharetoBusinessUnitActiveControlRequest.business_unit_active_control:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 136: mtechnavi.api.company.ActivateBusinessUnitResponse.business_unit_active_control:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 137: mtechnavi.api.company.InactivateBusinessUnitResponse.business_unit_active_control:type_name -> mtechnavi.api.company.BusinessUnitActiveControl
	264, // 138: mtechnavi.api.company.ExportBusinessUnitManagementsRequest.file_format:type_name -> sharelib.FileFormat
	264, // 139: mtechnavi.api.company.ImportBusinessUnitManagementsRequest.file_format:type_name -> sharelib.FileFormat
	265, // 140: mtechnavi.api.company.ImportBusinessUnitManagementsResponse.summary:type_name -> sharelib.ImportSummary
	266, // 141: mtechnavi.api.company.ImportBusinessUnitManagementsResponse.errors:type_name -> sharelib.ImportError
	264, // 142: mtechnavi.api.company.ListBusinessUnitManagementFormatsResponse.items:type_name -> sharelib.FileFormat
	264, // 143: mtechnavi.api.company.ExportBusinessUnitScoresRequest.file_format:type_name -> sharelib.FileFormat
	264, // 144: mtechnavi.api.company.ImportBusinessUnitScoresRequest.file_format:type_name -> sharelib.FileFormat
	265, // 145: mtechnavi.api.company.ImportBusinessUnitScoresResponse.summary:type_name -> sharelib.ImportSummary
	266, // 146: mtechnavi.api.company.ImportBusinessUnitScoresResponse.errors:type_name -> sharelib.ImportError
	264, // 147: mtechnavi.api.company.ListBusinessUnitScoreFormatsResponse.items:type_name -> sharelib.FileFormat
	264, // 148: mtechnavi.api.company.ExportBusinessUnitManagementItemValuesRequest.file_format:type_name -> sharelib.FileFormat
	264, // 149: mtechnavi.api.company.ImportBusinessUnitManagementItemValuesRequest.file_format:type_name -> sharelib.FileFormat
	265, // 150: mtechnavi.api.company.ImportBusinessUnitManagementItemValuesResponse.summary:type_name -> sharelib.ImportSummary
	266, // 151: mtechnavi.api.company.ImportBusinessUnitManagementItemValuesResponse.errors:type_name -> sharelib.ImportError
	264, // 152: mtechnavi.api.company.ListBusinessUnitManagementItemValueFormatsResponse.items:type_name -> sharelib.FileFormat
	0,   // 153: mtechnavi.api.company.CompanyService.GetCompany:input_type -> mtechnavi.api.company.GetCompanyRequest
	1,   // 154: mtechnavi.api.company.CompanyService.UpdateCompany:input_type -> mtechnavi.api.company.UpdateCompanyRequest
	2,   // 155: mtechnavi.api.company.ComponentUnitService.CreateComponentUnit:input_type -> mtechnavi.api.company.CreateComponentUnitRequest
	3,   // 156: mtechnavi.api.company.ComponentUnitService.ListComponentUnits:input_type -> mtechnavi.api.company.ListComponentUnitsRequest
	7,   // 157: mtechnavi.api.company.ComponentUnitService.GetComponentUnit:input_type -> mtechnavi.api.company.GetComponentUnitRequest
	8,   // 158: mtechnavi.api.company.ComponentUnitService.UpdateComponentUnit:input_type -> mtechnavi.api.company.UpdateComponentUnitRequest
	9,   // 159: mtechnavi.api.company.ComponentUnitService.DeleteComponentUnit:input_type -> mtechnavi.api.company.DeleteComponentUnitRequest
	47,  // 160: mtechnavi.api.company.ComponentUnitService.ImportComponentUnits:input_type -> mtechnavi.api.company.ImportComponentUnitsRequest
	49,  // 161: mtechnavi.api.company.ComponentUnitService.ExportComponentUnits:input_type -> mtechnavi.api.company.ExportComponentUnitsRequest
	55,  // 162: mtechnavi.api.company.ComponentUnitService.ListComponentUnitFormats:input_type -> mtechnavi.api.company.ListComponentUnitFormatsRequest
	11,  // 163: mtechnavi.api.company.BusinessUnitService.ListBusinessUnits:input_type -> mtechnavi.api.company.ListBusinessUnitsRequest
	13,  // 164: mtechnavi.api.company.BusinessUnitService.GetBusinessUnit:input_type -> mtechnavi.api.company.GetBusinessUnitRequest
	14,  // 165: mtechnavi.api.company.BusinessUnitService.UpdateBusinessUnit:input_type -> mtechnavi.api.company.UpdateBusinessUnitRequest
	15,  // 166: mtechnavi.api.company.BusinessUnitService.DeleteBusinessUnit:input_type -> mtechnavi.api.company.DeleteBusinessUnitRequest
	51,  // 167: mtechnavi.api.company.BusinessUnitService.ImportBusinessUnits:input_type -> mtechnavi.api.company.ImportBusinessUnitsRequest
	53,  // 168: mtechnavi.api.company.BusinessUnitService.ExportBusinessUnits:input_type -> mtechnavi.api.company.ExportBusinessUnitsRequest
	57,  // 169: mtechnavi.api.company.BusinessUnitService.ListBusinessUnitFormats:input_type -> mtechnavi.api.company.ListBusinessUnitFormatsRequest
	38,  // 170: mtechnavi.api.company.StaffService.ListStaffs:input_type -> mtechnavi.api.company.ListStaffsRequest
	40,  // 171: mtechnavi.api.company.StaffService.GetStaff:input_type -> mtechnavi.api.company.GetStaffRequest
	41,  // 172: mtechnavi.api.company.StaffService.ListStaffAndComponentUnits:input_type -> mtechnavi.api.company.ListStaffAndComponentUnitsRequest
	43,  // 173: mtechnavi.api.company.StaffService.ImportStaffs:input_type -> mtechnavi.api.company.ImportStaffsRequest
	45,  // 174: mtechnavi.api.company.StaffService.ExportStaffs:input_type -> mtechnavi.api.company.ExportStaffsRequest
	59,  // 175: mtechnavi.api.company.StaffService.ListStaffFormats:input_type -> mtechnavi.api.company.ListStaffFormatsRequest
	62,  // 176: mtechnavi.api.company.PublicCompanyService.PublicListCompanys:input_type -> mtechnavi.api.company.PublicListCompanysRequest
	61,  // 177: mtechnavi.api.company.PublicCompanyService.PublicGetCompany:input_type -> mtechnavi.api.company.PublicGetCompanyRequest
	16,  // 178: mtechnavi.api.company.PublicCompanyService.PublicListCompanyAndBusinessUnits:input_type -> mtechnavi.api.company.PublicListCompanyAndBusinessUnitsRequest
	5,   // 179: mtechnavi.api.company.PublicCompanyService.PublicListComponentUnits:input_type -> mtechnavi.api.company.PublicListComponentUnitsRequest
	18,  // 180: mtechnavi.api.company.PublicCompanyService.PublicListCompanyAndComponentUnitAndBusinessUnits:input_type -> mtechnavi.api.company.PublicListCompanyAndComponentUnitAndBusinessUnitsRequest
	20,  // 181: mtechnavi.api.company.PublicCompanyService.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit:input_type -> mtechnavi.api.company.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest
	22,  // 182: mtechnavi.api.company.PublicCompanyService.CreateBusinessUnitRequest:input_type -> mtechnavi.api.company.CreateBusinessUnitRequestRequest
	23,  // 183: mtechnavi.api.company.PublicCompanyService.ListBusinessUnitRequests:input_type -> mtechnavi.api.company.ListBusinessUnitRequestsRequest
	25,  // 184: mtechnavi.api.company.PublicCompanyService.GetBusinessUnitRequest:input_type -> mtechnavi.api.company.GetBusinessUnitRequestRequest
	26,  // 185: mtechnavi.api.company.PublicCompanyService.UpdateBusinessUnitRequest:input_type -> mtechnavi.api.company.UpdateBusinessUnitRequestRequest
	27,  // 186: mtechnavi.api.company.PublicCompanyService.DeleteBusinessUnitRequest:input_type -> mtechnavi.api.company.DeleteBusinessUnitRequestRequest
	34,  // 187: mtechnavi.api.company.PublicCompanyService.SharetoBusinessUnitRequest:input_type -> mtechnavi.api.company.SharetoBusinessUnitRequestRequest
	28,  // 188: mtechnavi.api.company.PublicCompanyService.CreateBusinessUnitRequestResult:input_type -> mtechnavi.api.company.CreateBusinessUnitRequestResultRequest
	29,  // 189: mtechnavi.api.company.PublicCompanyService.ListBusinessUnitRequestResults:input_type -> mtechnavi.api.company.ListBusinessUnitRequestResultsRequest
	31,  // 190: mtechnavi.api.company.PublicCompanyService.GetBusinessUnitRequestResult:input_type -> mtechnavi.api.company.GetBusinessUnitRequestResultRequest
	32,  // 191: mtechnavi.api.company.PublicCompanyService.UpdateBusinessUnitRequestResult:input_type -> mtechnavi.api.company.UpdateBusinessUnitRequestResultRequest
	33,  // 192: mtechnavi.api.company.PublicCompanyService.DeleteBusinessUnitRequestResult:input_type -> mtechnavi.api.company.DeleteBusinessUnitRequestResultRequest
	36,  // 193: mtechnavi.api.company.PublicCompanyService.SharetoBusinessUnitRequestResult:input_type -> mtechnavi.api.company.SharetoBusinessUnitRequestResultRequest
	64,  // 194: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagements:input_type -> mtechnavi.api.company.ListBusinessUnitManagementsRequest
	66,  // 195: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitManagement:input_type -> mtechnavi.api.company.GetBusinessUnitManagementRequest
	69,  // 196: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitManagement:input_type -> mtechnavi.api.company.CreateBusinessUnitManagementRequest
	70,  // 197: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitManagement:input_type -> mtechnavi.api.company.UpdateBusinessUnitManagementRequest
	71,  // 198: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitManagement:input_type -> mtechnavi.api.company.DeleteBusinessUnitManagementRequest
	72,  // 199: mtechnavi.api.company.BusinessUnitManagementService.ImportOldBusinessUnitManagements:input_type -> mtechnavi.api.company.ImportOldBusinessUnitManagementsRequest
	77,  // 200: mtechnavi.api.company.BusinessUnitManagementService.ExportOldBusinessUnitManagements:input_type -> mtechnavi.api.company.ExportOldBusinessUnitManagementsRequest
	67,  // 201: mtechnavi.api.company.BusinessUnitManagementService.ListOldBusinessUnitManagementFormats:input_type -> mtechnavi.api.company.ListOldBusinessUnitManagementFormatsRequest
	74,  // 202: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagementContents:input_type -> mtechnavi.api.company.ListBusinessUnitManagementContentsRequest
	76,  // 203: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitManagementContent:input_type -> mtechnavi.api.company.GetBusinessUnitManagementContentRequest
	79,  // 204: mtechnavi.api.company.BusinessUnitManagementService.ListHistorys:input_type -> mtechnavi.api.company.ListHistorysRequest
	81,  // 205: mtechnavi.api.company.BusinessUnitManagementService.SendEmailTenantInvitation:input_type -> mtechnavi.api.company.SendEmailTenantInvitationRequest
	83,  // 206: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitProfiles:input_type -> mtechnavi.api.company.ListBusinessUnitProfilesRequest
	85,  // 207: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitProfile:input_type -> mtechnavi.api.company.CreateBusinessUnitProfileRequest
	86,  // 208: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitProfile:input_type -> mtechnavi.api.company.GetBusinessUnitProfileRequest
	87,  // 209: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitProfile:input_type -> mtechnavi.api.company.UpdateBusinessUnitProfileRequest
	88,  // 210: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitProfile:input_type -> mtechnavi.api.company.DeleteBusinessUnitProfileRequest
	89,  // 211: mtechnavi.api.company.BusinessUnitManagementService.UpdateSystemNotificationUsersInBusinessUnitProfile:input_type -> mtechnavi.api.company.UpdateSystemNotificationUsersInBusinessUnitProfileRequest
	90,  // 212: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitFinancials:input_type -> mtechnavi.api.company.ListBusinessUnitFinancialsRequest
	92,  // 213: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitFinancial:input_type -> mtechnavi.api.company.CreateBusinessUnitFinancialRequest
	93,  // 214: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitFinancial:input_type -> mtechnavi.api.company.GetBusinessUnitFinancialRequest
	94,  // 215: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitFinancial:input_type -> mtechnavi.api.company.UpdateBusinessUnitFinancialRequest
	95,  // 216: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitFinancial:input_type -> mtechnavi.api.company.DeleteBusinessUnitFinancialRequest
	96,  // 217: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitBranchs:input_type -> mtechnavi.api.company.ListBusinessUnitBranchsRequest
	98,  // 218: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitBranch:input_type -> mtechnavi.api.company.CreateBusinessUnitBranchRequest
	99,  // 219: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitBranch:input_type -> mtechnavi.api.company.GetBusinessUnitBranchRequest
	100, // 220: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitBranch:input_type -> mtechnavi.api.company.UpdateBusinessUnitBranchRequest
	101, // 221: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitBranch:input_type -> mtechnavi.api.company.DeleteBusinessUnitBranchRequest
	102, // 222: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitFacilitiess:input_type -> mtechnavi.api.company.ListBusinessUnitFacilitiessRequest
	104, // 223: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitFacilities:input_type -> mtechnavi.api.company.CreateBusinessUnitFacilitiesRequest
	105, // 224: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitFacilities:input_type -> mtechnavi.api.company.GetBusinessUnitFacilitiesRequest
	106, // 225: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitFacilities:input_type -> mtechnavi.api.company.UpdateBusinessUnitFacilitiesRequest
	107, // 226: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitFacilities:input_type -> mtechnavi.api.company.DeleteBusinessUnitFacilitiesRequest
	108, // 227: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitCertificates:input_type -> mtechnavi.api.company.ListBusinessUnitCertificatesRequest
	110, // 228: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitCertificate:input_type -> mtechnavi.api.company.CreateBusinessUnitCertificateRequest
	111, // 229: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitCertificate:input_type -> mtechnavi.api.company.GetBusinessUnitCertificateRequest
	112, // 230: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitCertificate:input_type -> mtechnavi.api.company.UpdateBusinessUnitCertificateRequest
	113, // 231: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitCertificate:input_type -> mtechnavi.api.company.DeleteBusinessUnitCertificateRequest
	114, // 232: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitStrengths:input_type -> mtechnavi.api.company.ListBusinessUnitStrengthsRequest
	116, // 233: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitStrength:input_type -> mtechnavi.api.company.CreateBusinessUnitStrengthRequest
	117, // 234: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitStrength:input_type -> mtechnavi.api.company.GetBusinessUnitStrengthRequest
	118, // 235: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitStrength:input_type -> mtechnavi.api.company.UpdateBusinessUnitStrengthRequest
	119, // 236: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitStrength:input_type -> mtechnavi.api.company.DeleteBusinessUnitStrengthRequest
	120, // 237: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitSkills:input_type -> mtechnavi.api.company.ListBusinessUnitSkillsRequest
	122, // 238: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitSkill:input_type -> mtechnavi.api.company.CreateBusinessUnitSkillRequest
	123, // 239: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitSkill:input_type -> mtechnavi.api.company.GetBusinessUnitSkillRequest
	124, // 240: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitSkill:input_type -> mtechnavi.api.company.UpdateBusinessUnitSkillRequest
	125, // 241: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitSkill:input_type -> mtechnavi.api.company.DeleteBusinessUnitSkillRequest
	253, // 242: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitSkillTree:input_type -> mtechnavi.api.company.GetBusinessUnitSkillTreeRequest
	126, // 243: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContactHeaders:input_type -> mtechnavi.api.company.ListBusinessUnitContactHeadersRequest
	128, // 244: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitContactHeader:input_type -> mtechnavi.api.company.CreateBusinessUnitContactHeaderRequest
	129, // 245: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContactHeader:input_type -> mtechnavi.api.company.GetBusinessUnitContactHeaderRequest
	130, // 246: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitContactHeader:input_type -> mtechnavi.api.company.UpdateBusinessUnitContactHeaderRequest
	131, // 247: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitContactHeader:input_type -> mtechnavi.api.company.DeleteBusinessUnitContactHeaderRequest
	132, // 248: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContacts:input_type -> mtechnavi.api.company.ListBusinessUnitContactsRequest
	134, // 249: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitContact:input_type -> mtechnavi.api.company.CreateBusinessUnitContactRequest
	135, // 250: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContact:input_type -> mtechnavi.api.company.GetBusinessUnitContactRequest
	136, // 251: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitContact:input_type -> mtechnavi.api.company.UpdateBusinessUnitContactRequest
	137, // 252: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitContact:input_type -> mtechnavi.api.company.DeleteBusinessUnitContactRequest
	138, // 253: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContactAttributes:input_type -> mtechnavi.api.company.ListBusinessUnitContactAttributesRequest
	140, // 254: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitContactAttribute:input_type -> mtechnavi.api.company.CreateBusinessUnitContactAttributeRequest
	141, // 255: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContactAttribute:input_type -> mtechnavi.api.company.GetBusinessUnitContactAttributeRequest
	142, // 256: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitContactAttribute:input_type -> mtechnavi.api.company.UpdateBusinessUnitContactAttributeRequest
	143, // 257: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitContactAttribute:input_type -> mtechnavi.api.company.DeleteBusinessUnitContactAttributeRequest
	144, // 258: mtechnavi.api.company.BusinessUnitManagementService.ListTokyoShokoResearchs:input_type -> mtechnavi.api.company.ListTokyoShokoResearchsRequest
	146, // 259: mtechnavi.api.company.BusinessUnitManagementService.CreateTokyoShokoResearch:input_type -> mtechnavi.api.company.CreateTokyoShokoResearchRequest
	147, // 260: mtechnavi.api.company.BusinessUnitManagementService.GetTokyoShokoResearch:input_type -> mtechnavi.api.company.GetTokyoShokoResearchRequest
	148, // 261: mtechnavi.api.company.BusinessUnitManagementService.UpdateTokyoShokoResearch:input_type -> mtechnavi.api.company.UpdateTokyoShokoResearchRequest
	149, // 262: mtechnavi.api.company.BusinessUnitManagementService.DeleteTokyoShokoResearch:input_type -> mtechnavi.api.company.DeleteTokyoShokoResearchRequest
	150, // 263: mtechnavi.api.company.BusinessUnitManagementService.ListTokyoShokoResearchCompanyProfiles:input_type -> mtechnavi.api.company.ListTokyoShokoResearchCompanyProfilesRequest
	152, // 264: mtechnavi.api.company.BusinessUnitManagementService.CreateTokyoShokoResearchCompanyProfile:input_type -> mtechnavi.api.company.CreateTokyoShokoResearchCompanyProfileRequest
	153, // 265: mtechnavi.api.company.BusinessUnitManagementService.GetTokyoShokoResearchCompanyProfile:input_type -> mtechnavi.api.company.GetTokyoShokoResearchCompanyProfileRequest
	154, // 266: mtechnavi.api.company.BusinessUnitManagementService.UpdateTokyoShokoResearchCompanyProfile:input_type -> mtechnavi.api.company.UpdateTokyoShokoResearchCompanyProfileRequest
	155, // 267: mtechnavi.api.company.BusinessUnitManagementService.DeleteTokyoShokoResearchCompanyProfile:input_type -> mtechnavi.api.company.DeleteTokyoShokoResearchCompanyProfileRequest
	156, // 268: mtechnavi.api.company.BusinessUnitManagementService.ListTokyoShokoResearchRiskScores:input_type -> mtechnavi.api.company.ListTokyoShokoResearchRiskScoresRequest
	158, // 269: mtechnavi.api.company.BusinessUnitManagementService.CreateTokyoShokoResearchRiskScore:input_type -> mtechnavi.api.company.CreateTokyoShokoResearchRiskScoreRequest
	159, // 270: mtechnavi.api.company.BusinessUnitManagementService.GetTokyoShokoResearchRiskScore:input_type -> mtechnavi.api.company.GetTokyoShokoResearchRiskScoreRequest
	160, // 271: mtechnavi.api.company.BusinessUnitManagementService.UpdateTokyoShokoResearchRiskScore:input_type -> mtechnavi.api.company.UpdateTokyoShokoResearchRiskScoreRequest
	161, // 272: mtechnavi.api.company.BusinessUnitManagementService.DeleteTokyoShokoResearchRiskScore:input_type -> mtechnavi.api.company.DeleteTokyoShokoResearchRiskScoreRequest
	162, // 273: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitScoreAssets:input_type -> mtechnavi.api.company.ListBusinessUnitScoreAssetsRequest
	164, // 274: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitScoreAsset:input_type -> mtechnavi.api.company.CreateBusinessUnitScoreAssetRequest
	165, // 275: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitScoreAsset:input_type -> mtechnavi.api.company.GetBusinessUnitScoreAssetRequest
	166, // 276: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitScoreAsset:input_type -> mtechnavi.api.company.UpdateBusinessUnitScoreAssetRequest
	167, // 277: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitScoreAsset:input_type -> mtechnavi.api.company.DeleteBusinessUnitScoreAssetRequest
	168, // 278: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitDocuments:input_type -> mtechnavi.api.company.ListBusinessUnitDocumentsRequest
	170, // 279: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitDocument:input_type -> mtechnavi.api.company.CreateBusinessUnitDocumentRequest
	171, // 280: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitDocument:input_type -> mtechnavi.api.company.GetBusinessUnitDocumentRequest
	172, // 281: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitDocument:input_type -> mtechnavi.api.company.UpdateBusinessUnitDocumentRequest
	173, // 282: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitDocument:input_type -> mtechnavi.api.company.DeleteBusinessUnitDocumentRequest
	174, // 283: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitActiveControls:input_type -> mtechnavi.api.company.ListBusinessUnitActiveControlsRequest
	176, // 284: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitActiveControl:input_type -> mtechnavi.api.company.CreateBusinessUnitActiveControlRequest
	177, // 285: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitActiveControl:input_type -> mtechnavi.api.company.GetBusinessUnitActiveControlRequest
	178, // 286: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitActiveControl:input_type -> mtechnavi.api.company.UpdateBusinessUnitActiveControlRequest
	179, // 287: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitActiveControl:input_type -> mtechnavi.api.company.DeleteBusinessUnitActiveControlRequest
	180, // 288: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitSnapshots:input_type -> mtechnavi.api.company.ListBusinessUnitSnapshotsRequest
	182, // 289: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitSnapshot:input_type -> mtechnavi.api.company.CreateBusinessUnitSnapshotRequest
	183, // 290: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitSnapshot:input_type -> mtechnavi.api.company.GetBusinessUnitSnapshotRequest
	184, // 291: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitSnapshot:input_type -> mtechnavi.api.company.UpdateBusinessUnitSnapshotRequest
	185, // 292: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitSnapshot:input_type -> mtechnavi.api.company.DeleteBusinessUnitSnapshotRequest
	186, // 293: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitChangeNotifications:input_type -> mtechnavi.api.company.ListBusinessUnitChangeNotificationsRequest
	188, // 294: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitChangeNotification:input_type -> mtechnavi.api.company.CreateBusinessUnitChangeNotificationRequest
	189, // 295: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitChangeNotification:input_type -> mtechnavi.api.company.GetBusinessUnitChangeNotificationRequest
	190, // 296: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitChangeNotification:input_type -> mtechnavi.api.company.UpdateBusinessUnitChangeNotificationRequest
	191, // 297: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitChangeNotification:input_type -> mtechnavi.api.company.DeleteBusinessUnitChangeNotificationRequest
	192, // 298: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContactContents:input_type -> mtechnavi.api.company.ListBusinessUnitContactContentsRequest
	194, // 299: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContactContent:input_type -> mtechnavi.api.company.GetBusinessUnitContactContentRequest
	195, // 300: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitScoreContents:input_type -> mtechnavi.api.company.ListBusinessUnitScoreContentsRequest
	197, // 301: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitScoreContent:input_type -> mtechnavi.api.company.GetBusinessUnitScoreContentRequest
	198, // 302: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitProfiles:input_type -> mtechnavi.api.company.SharedListBusinessUnitProfilesRequest
	200, // 303: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitProfile:input_type -> mtechnavi.api.company.SharedGetBusinessUnitProfileRequest
	201, // 304: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitFinancials:input_type -> mtechnavi.api.company.SharedListBusinessUnitFinancialsRequest
	203, // 305: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitFinancial:input_type -> mtechnavi.api.company.SharedGetBusinessUnitFinancialRequest
	204, // 306: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitBranchs:input_type -> mtechnavi.api.company.SharedListBusinessUnitBranchsRequest
	206, // 307: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitBranch:input_type -> mtechnavi.api.company.SharedGetBusinessUnitBranchRequest
	207, // 308: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitFacilitiess:input_type -> mtechnavi.api.company.SharedListBusinessUnitFacilitiessRequest
	209, // 309: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitFacilities:input_type -> mtechnavi.api.company.SharedGetBusinessUnitFacilitiesRequest
	210, // 310: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitCertificates:input_type -> mtechnavi.api.company.SharedListBusinessUnitCertificatesRequest
	212, // 311: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitCertificate:input_type -> mtechnavi.api.company.SharedGetBusinessUnitCertificateRequest
	213, // 312: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitStrengths:input_type -> mtechnavi.api.company.SharedListBusinessUnitStrengthsRequest
	215, // 313: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitStrength:input_type -> mtechnavi.api.company.SharedGetBusinessUnitStrengthRequest
	216, // 314: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitSkills:input_type -> mtechnavi.api.company.SharedListBusinessUnitSkillsRequest
	218, // 315: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitSkill:input_type -> mtechnavi.api.company.SharedGetBusinessUnitSkillRequest
	219, // 316: mtechnavi.api.company.BusinessUnitManagementService.SharetoBusinessUnitContactHeader:input_type -> mtechnavi.api.company.SharetoBusinessUnitContactHeaderRequest
	221, // 317: mtechnavi.api.company.BusinessUnitManagementService.SharetoBusinessUnitContact:input_type -> mtechnavi.api.company.SharetoBusinessUnitContactRequest
	223, // 318: mtechnavi.api.company.BusinessUnitManagementService.SharetoBusinessUnitActiveControl:input_type -> mtechnavi.api.company.SharetoBusinessUnitActiveControlRequest
	225, // 319: mtechnavi.api.company.BusinessUnitManagementService.ActivateBusinessUnit:input_type -> mtechnavi.api.company.ActivateBusinessUnitRequest
	227, // 320: mtechnavi.api.company.BusinessUnitManagementService.InactivateBusinessUnit:input_type -> mtechnavi.api.company.InactivateBusinessUnitRequest
	229, // 321: mtechnavi.api.company.BusinessUnitManagementService.StartBusiness:input_type -> mtechnavi.api.company.StartBusinessRequest
	231, // 322: mtechnavi.api.company.BusinessUnitManagementService.StopBusiness:input_type -> mtechnavi.api.company.StopBusinessRequest
	233, // 323: mtechnavi.api.company.BusinessUnitManagementService.ConfirmBusinessUnitChangeNotification:input_type -> mtechnavi.api.company.ConfirmBusinessUnitChangeNotificationRequest
	235, // 324: mtechnavi.api.company.BusinessUnitManagementService.ExportBusinessUnitManagements:input_type -> mtechnavi.api.company.ExportBusinessUnitManagementsRequest
	237, // 325: mtechnavi.api.company.BusinessUnitManagementService.ImportBusinessUnitManagements:input_type -> mtechnavi.api.company.ImportBusinessUnitManagementsRequest
	239, // 326: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagementFormats:input_type -> mtechnavi.api.company.ListBusinessUnitManagementFormatsRequest
	241, // 327: mtechnavi.api.company.BusinessUnitManagementService.ExportBusinessUnitScores:input_type -> mtechnavi.api.company.ExportBusinessUnitScoresRequest
	243, // 328: mtechnavi.api.company.BusinessUnitManagementService.ImportBusinessUnitScores:input_type -> mtechnavi.api.company.ImportBusinessUnitScoresRequest
	245, // 329: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitScoreFormats:input_type -> mtechnavi.api.company.ListBusinessUnitScoreFormatsRequest
	247, // 330: mtechnavi.api.company.BusinessUnitManagementService.ExportBusinessUnitManagementItemValues:input_type -> mtechnavi.api.company.ExportBusinessUnitManagementItemValuesRequest
	249, // 331: mtechnavi.api.company.BusinessUnitManagementService.ImportBusinessUnitManagementItemValues:input_type -> mtechnavi.api.company.ImportBusinessUnitManagementItemValuesRequest
	251, // 332: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagementItemValueFormats:input_type -> mtechnavi.api.company.ListBusinessUnitManagementItemValueFormatsRequest
	254, // 333: mtechnavi.api.company.CompanyService.GetCompany:output_type -> mtechnavi.api.company.Company
	254, // 334: mtechnavi.api.company.CompanyService.UpdateCompany:output_type -> mtechnavi.api.company.Company
	255, // 335: mtechnavi.api.company.ComponentUnitService.CreateComponentUnit:output_type -> mtechnavi.api.company.ComponentUnit
	4,   // 336: mtechnavi.api.company.ComponentUnitService.ListComponentUnits:output_type -> mtechnavi.api.company.ListComponentUnitsResponse
	255, // 337: mtechnavi.api.company.ComponentUnitService.GetComponentUnit:output_type -> mtechnavi.api.company.ComponentUnit
	255, // 338: mtechnavi.api.company.ComponentUnitService.UpdateComponentUnit:output_type -> mtechnavi.api.company.ComponentUnit
	291, // 339: mtechnavi.api.company.ComponentUnitService.DeleteComponentUnit:output_type -> google.protobuf.Empty
	48,  // 340: mtechnavi.api.company.ComponentUnitService.ImportComponentUnits:output_type -> mtechnavi.api.company.ImportComponentUnitsResponse
	50,  // 341: mtechnavi.api.company.ComponentUnitService.ExportComponentUnits:output_type -> mtechnavi.api.company.ExportComponentUnitsResponse
	56,  // 342: mtechnavi.api.company.ComponentUnitService.ListComponentUnitFormats:output_type -> mtechnavi.api.company.ListComponentUnitFormatsResponse
	12,  // 343: mtechnavi.api.company.BusinessUnitService.ListBusinessUnits:output_type -> mtechnavi.api.company.ListBusinessUnitsResponse
	256, // 344: mtechnavi.api.company.BusinessUnitService.GetBusinessUnit:output_type -> mtechnavi.api.company.BusinessUnit
	256, // 345: mtechnavi.api.company.BusinessUnitService.UpdateBusinessUnit:output_type -> mtechnavi.api.company.BusinessUnit
	291, // 346: mtechnavi.api.company.BusinessUnitService.DeleteBusinessUnit:output_type -> google.protobuf.Empty
	52,  // 347: mtechnavi.api.company.BusinessUnitService.ImportBusinessUnits:output_type -> mtechnavi.api.company.ImportBusinessUnitsResponse
	54,  // 348: mtechnavi.api.company.BusinessUnitService.ExportBusinessUnits:output_type -> mtechnavi.api.company.ExportBusinessUnitsResponse
	58,  // 349: mtechnavi.api.company.BusinessUnitService.ListBusinessUnitFormats:output_type -> mtechnavi.api.company.ListBusinessUnitFormatsResponse
	39,  // 350: mtechnavi.api.company.StaffService.ListStaffs:output_type -> mtechnavi.api.company.ListStaffsResponse
	262, // 351: mtechnavi.api.company.StaffService.GetStaff:output_type -> mtechnavi.api.company.Staff
	42,  // 352: mtechnavi.api.company.StaffService.ListStaffAndComponentUnits:output_type -> mtechnavi.api.company.ListStaffAndComponentUnitsResponse
	44,  // 353: mtechnavi.api.company.StaffService.ImportStaffs:output_type -> mtechnavi.api.company.ImportStaffsResponse
	46,  // 354: mtechnavi.api.company.StaffService.ExportStaffs:output_type -> mtechnavi.api.company.ExportStaffsResponse
	60,  // 355: mtechnavi.api.company.StaffService.ListStaffFormats:output_type -> mtechnavi.api.company.ListStaffFormatsResponse
	63,  // 356: mtechnavi.api.company.PublicCompanyService.PublicListCompanys:output_type -> mtechnavi.api.company.PublicListCompanysResponse
	254, // 357: mtechnavi.api.company.PublicCompanyService.PublicGetCompany:output_type -> mtechnavi.api.company.Company
	17,  // 358: mtechnavi.api.company.PublicCompanyService.PublicListCompanyAndBusinessUnits:output_type -> mtechnavi.api.company.PublicListCompanyAndBusinessUnitsResponse
	6,   // 359: mtechnavi.api.company.PublicCompanyService.PublicListComponentUnits:output_type -> mtechnavi.api.company.PublicListComponentUnitsResponse
	19,  // 360: mtechnavi.api.company.PublicCompanyService.PublicListCompanyAndComponentUnitAndBusinessUnits:output_type -> mtechnavi.api.company.PublicListCompanyAndComponentUnitAndBusinessUnitsResponse
	21,  // 361: mtechnavi.api.company.PublicCompanyService.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnit:output_type -> mtechnavi.api.company.PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse
	260, // 362: mtechnavi.api.company.PublicCompanyService.CreateBusinessUnitRequest:output_type -> mtechnavi.api.company.BusinessUnitRequest
	24,  // 363: mtechnavi.api.company.PublicCompanyService.ListBusinessUnitRequests:output_type -> mtechnavi.api.company.ListBusinessUnitRequestsResponse
	260, // 364: mtechnavi.api.company.PublicCompanyService.GetBusinessUnitRequest:output_type -> mtechnavi.api.company.BusinessUnitRequest
	260, // 365: mtechnavi.api.company.PublicCompanyService.UpdateBusinessUnitRequest:output_type -> mtechnavi.api.company.BusinessUnitRequest
	291, // 366: mtechnavi.api.company.PublicCompanyService.DeleteBusinessUnitRequest:output_type -> google.protobuf.Empty
	35,  // 367: mtechnavi.api.company.PublicCompanyService.SharetoBusinessUnitRequest:output_type -> mtechnavi.api.company.SharetoBusinessUnitRequestResponse
	261, // 368: mtechnavi.api.company.PublicCompanyService.CreateBusinessUnitRequestResult:output_type -> mtechnavi.api.company.BusinessUnitRequestResult
	30,  // 369: mtechnavi.api.company.PublicCompanyService.ListBusinessUnitRequestResults:output_type -> mtechnavi.api.company.ListBusinessUnitRequestResultsResponse
	261, // 370: mtechnavi.api.company.PublicCompanyService.GetBusinessUnitRequestResult:output_type -> mtechnavi.api.company.BusinessUnitRequestResult
	261, // 371: mtechnavi.api.company.PublicCompanyService.UpdateBusinessUnitRequestResult:output_type -> mtechnavi.api.company.BusinessUnitRequestResult
	291, // 372: mtechnavi.api.company.PublicCompanyService.DeleteBusinessUnitRequestResult:output_type -> google.protobuf.Empty
	37,  // 373: mtechnavi.api.company.PublicCompanyService.SharetoBusinessUnitRequestResult:output_type -> mtechnavi.api.company.SharetoBusinessUnitRequestResultResponse
	65,  // 374: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagements:output_type -> mtechnavi.api.company.ListBusinessUnitManagementsResponse
	267, // 375: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitManagement:output_type -> mtechnavi.api.company.BusinessUnitManagement
	267, // 376: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitManagement:output_type -> mtechnavi.api.company.BusinessUnitManagement
	267, // 377: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitManagement:output_type -> mtechnavi.api.company.BusinessUnitManagement
	291, // 378: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitManagement:output_type -> google.protobuf.Empty
	73,  // 379: mtechnavi.api.company.BusinessUnitManagementService.ImportOldBusinessUnitManagements:output_type -> mtechnavi.api.company.ImportOldBusinessUnitManagementsResponse
	78,  // 380: mtechnavi.api.company.BusinessUnitManagementService.ExportOldBusinessUnitManagements:output_type -> mtechnavi.api.company.ExportOldBusinessUnitManagementsResponse
	68,  // 381: mtechnavi.api.company.BusinessUnitManagementService.ListOldBusinessUnitManagementFormats:output_type -> mtechnavi.api.company.ListOldBusinessUnitManagementFormatsResponse
	75,  // 382: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagementContents:output_type -> mtechnavi.api.company.ListBusinessUnitManagementContentsResponse
	268, // 383: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitManagementContent:output_type -> mtechnavi.api.company.BusinessUnitManagementContent
	80,  // 384: mtechnavi.api.company.BusinessUnitManagementService.ListHistorys:output_type -> mtechnavi.api.company.ListHistorysResponse
	82,  // 385: mtechnavi.api.company.BusinessUnitManagementService.SendEmailTenantInvitation:output_type -> mtechnavi.api.company.SendEmailTenantInvitationResponse
	84,  // 386: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitProfiles:output_type -> mtechnavi.api.company.ListBusinessUnitProfilesResponse
	270, // 387: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitProfile:output_type -> mtechnavi.api.company.BusinessUnitProfile
	270, // 388: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitProfile:output_type -> mtechnavi.api.company.BusinessUnitProfile
	270, // 389: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitProfile:output_type -> mtechnavi.api.company.BusinessUnitProfile
	291, // 390: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitProfile:output_type -> google.protobuf.Empty
	270, // 391: mtechnavi.api.company.BusinessUnitManagementService.UpdateSystemNotificationUsersInBusinessUnitProfile:output_type -> mtechnavi.api.company.BusinessUnitProfile
	91,  // 392: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitFinancials:output_type -> mtechnavi.api.company.ListBusinessUnitFinancialsResponse
	272, // 393: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitFinancial:output_type -> mtechnavi.api.company.BusinessUnitFinancial
	272, // 394: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitFinancial:output_type -> mtechnavi.api.company.BusinessUnitFinancial
	272, // 395: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitFinancial:output_type -> mtechnavi.api.company.BusinessUnitFinancial
	291, // 396: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitFinancial:output_type -> google.protobuf.Empty
	97,  // 397: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitBranchs:output_type -> mtechnavi.api.company.ListBusinessUnitBranchsResponse
	273, // 398: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitBranch:output_type -> mtechnavi.api.company.BusinessUnitBranch
	273, // 399: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitBranch:output_type -> mtechnavi.api.company.BusinessUnitBranch
	273, // 400: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitBranch:output_type -> mtechnavi.api.company.BusinessUnitBranch
	291, // 401: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitBranch:output_type -> google.protobuf.Empty
	103, // 402: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitFacilitiess:output_type -> mtechnavi.api.company.ListBusinessUnitFacilitiessResponse
	274, // 403: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitFacilities:output_type -> mtechnavi.api.company.BusinessUnitFacilities
	274, // 404: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitFacilities:output_type -> mtechnavi.api.company.BusinessUnitFacilities
	274, // 405: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitFacilities:output_type -> mtechnavi.api.company.BusinessUnitFacilities
	291, // 406: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitFacilities:output_type -> google.protobuf.Empty
	109, // 407: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitCertificates:output_type -> mtechnavi.api.company.ListBusinessUnitCertificatesResponse
	275, // 408: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitCertificate:output_type -> mtechnavi.api.company.BusinessUnitCertificate
	275, // 409: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitCertificate:output_type -> mtechnavi.api.company.BusinessUnitCertificate
	275, // 410: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitCertificate:output_type -> mtechnavi.api.company.BusinessUnitCertificate
	291, // 411: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitCertificate:output_type -> google.protobuf.Empty
	115, // 412: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitStrengths:output_type -> mtechnavi.api.company.ListBusinessUnitStrengthsResponse
	276, // 413: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitStrength:output_type -> mtechnavi.api.company.BusinessUnitStrength
	276, // 414: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitStrength:output_type -> mtechnavi.api.company.BusinessUnitStrength
	276, // 415: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitStrength:output_type -> mtechnavi.api.company.BusinessUnitStrength
	291, // 416: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitStrength:output_type -> google.protobuf.Empty
	121, // 417: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitSkills:output_type -> mtechnavi.api.company.ListBusinessUnitSkillsResponse
	277, // 418: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitSkill:output_type -> mtechnavi.api.company.BusinessUnitSkill
	277, // 419: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitSkill:output_type -> mtechnavi.api.company.BusinessUnitSkill
	277, // 420: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitSkill:output_type -> mtechnavi.api.company.BusinessUnitSkill
	291, // 421: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitSkill:output_type -> google.protobuf.Empty
	292, // 422: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitSkillTree:output_type -> mtechnavi.api.company.BusinessUnitSkillTree
	127, // 423: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContactHeaders:output_type -> mtechnavi.api.company.ListBusinessUnitContactHeadersResponse
	278, // 424: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitContactHeader:output_type -> mtechnavi.api.company.BusinessUnitContactHeader
	278, // 425: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContactHeader:output_type -> mtechnavi.api.company.BusinessUnitContactHeader
	278, // 426: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitContactHeader:output_type -> mtechnavi.api.company.BusinessUnitContactHeader
	291, // 427: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitContactHeader:output_type -> google.protobuf.Empty
	133, // 428: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContacts:output_type -> mtechnavi.api.company.ListBusinessUnitContactsResponse
	279, // 429: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitContact:output_type -> mtechnavi.api.company.BusinessUnitContact
	279, // 430: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContact:output_type -> mtechnavi.api.company.BusinessUnitContact
	279, // 431: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitContact:output_type -> mtechnavi.api.company.BusinessUnitContact
	291, // 432: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitContact:output_type -> google.protobuf.Empty
	139, // 433: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContactAttributes:output_type -> mtechnavi.api.company.ListBusinessUnitContactAttributesResponse
	280, // 434: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitContactAttribute:output_type -> mtechnavi.api.company.BusinessUnitContactAttribute
	280, // 435: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContactAttribute:output_type -> mtechnavi.api.company.BusinessUnitContactAttribute
	280, // 436: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitContactAttribute:output_type -> mtechnavi.api.company.BusinessUnitContactAttribute
	291, // 437: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitContactAttribute:output_type -> google.protobuf.Empty
	145, // 438: mtechnavi.api.company.BusinessUnitManagementService.ListTokyoShokoResearchs:output_type -> mtechnavi.api.company.ListTokyoShokoResearchsResponse
	281, // 439: mtechnavi.api.company.BusinessUnitManagementService.CreateTokyoShokoResearch:output_type -> mtechnavi.api.company.TokyoShokoResearch
	281, // 440: mtechnavi.api.company.BusinessUnitManagementService.GetTokyoShokoResearch:output_type -> mtechnavi.api.company.TokyoShokoResearch
	281, // 441: mtechnavi.api.company.BusinessUnitManagementService.UpdateTokyoShokoResearch:output_type -> mtechnavi.api.company.TokyoShokoResearch
	291, // 442: mtechnavi.api.company.BusinessUnitManagementService.DeleteTokyoShokoResearch:output_type -> google.protobuf.Empty
	151, // 443: mtechnavi.api.company.BusinessUnitManagementService.ListTokyoShokoResearchCompanyProfiles:output_type -> mtechnavi.api.company.ListTokyoShokoResearchCompanyProfilesResponse
	282, // 444: mtechnavi.api.company.BusinessUnitManagementService.CreateTokyoShokoResearchCompanyProfile:output_type -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	282, // 445: mtechnavi.api.company.BusinessUnitManagementService.GetTokyoShokoResearchCompanyProfile:output_type -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	282, // 446: mtechnavi.api.company.BusinessUnitManagementService.UpdateTokyoShokoResearchCompanyProfile:output_type -> mtechnavi.api.company.TokyoShokoResearchCompanyProfile
	291, // 447: mtechnavi.api.company.BusinessUnitManagementService.DeleteTokyoShokoResearchCompanyProfile:output_type -> google.protobuf.Empty
	157, // 448: mtechnavi.api.company.BusinessUnitManagementService.ListTokyoShokoResearchRiskScores:output_type -> mtechnavi.api.company.ListTokyoShokoResearchRiskScoresResponse
	283, // 449: mtechnavi.api.company.BusinessUnitManagementService.CreateTokyoShokoResearchRiskScore:output_type -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	283, // 450: mtechnavi.api.company.BusinessUnitManagementService.GetTokyoShokoResearchRiskScore:output_type -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	283, // 451: mtechnavi.api.company.BusinessUnitManagementService.UpdateTokyoShokoResearchRiskScore:output_type -> mtechnavi.api.company.TokyoShokoResearchRiskScore
	291, // 452: mtechnavi.api.company.BusinessUnitManagementService.DeleteTokyoShokoResearchRiskScore:output_type -> google.protobuf.Empty
	163, // 453: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitScoreAssets:output_type -> mtechnavi.api.company.ListBusinessUnitScoreAssetsResponse
	284, // 454: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitScoreAsset:output_type -> mtechnavi.api.company.BusinessUnitScoreAsset
	284, // 455: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitScoreAsset:output_type -> mtechnavi.api.company.BusinessUnitScoreAsset
	284, // 456: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitScoreAsset:output_type -> mtechnavi.api.company.BusinessUnitScoreAsset
	291, // 457: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitScoreAsset:output_type -> google.protobuf.Empty
	169, // 458: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitDocuments:output_type -> mtechnavi.api.company.ListBusinessUnitDocumentsResponse
	285, // 459: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitDocument:output_type -> mtechnavi.api.company.BusinessUnitDocument
	285, // 460: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitDocument:output_type -> mtechnavi.api.company.BusinessUnitDocument
	285, // 461: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitDocument:output_type -> mtechnavi.api.company.BusinessUnitDocument
	291, // 462: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitDocument:output_type -> google.protobuf.Empty
	175, // 463: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitActiveControls:output_type -> mtechnavi.api.company.ListBusinessUnitActiveControlsResponse
	286, // 464: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitActiveControl:output_type -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 465: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitActiveControl:output_type -> mtechnavi.api.company.BusinessUnitActiveControl
	286, // 466: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitActiveControl:output_type -> mtechnavi.api.company.BusinessUnitActiveControl
	291, // 467: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitActiveControl:output_type -> google.protobuf.Empty
	181, // 468: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitSnapshots:output_type -> mtechnavi.api.company.ListBusinessUnitSnapshotsResponse
	287, // 469: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitSnapshot:output_type -> mtechnavi.api.company.BusinessUnitSnapshot
	287, // 470: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitSnapshot:output_type -> mtechnavi.api.company.BusinessUnitSnapshot
	287, // 471: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitSnapshot:output_type -> mtechnavi.api.company.BusinessUnitSnapshot
	291, // 472: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitSnapshot:output_type -> google.protobuf.Empty
	187, // 473: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitChangeNotifications:output_type -> mtechnavi.api.company.ListBusinessUnitChangeNotificationsResponse
	288, // 474: mtechnavi.api.company.BusinessUnitManagementService.CreateBusinessUnitChangeNotification:output_type -> mtechnavi.api.company.BusinessUnitChangeNotification
	288, // 475: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitChangeNotification:output_type -> mtechnavi.api.company.BusinessUnitChangeNotification
	288, // 476: mtechnavi.api.company.BusinessUnitManagementService.UpdateBusinessUnitChangeNotification:output_type -> mtechnavi.api.company.BusinessUnitChangeNotification
	291, // 477: mtechnavi.api.company.BusinessUnitManagementService.DeleteBusinessUnitChangeNotification:output_type -> google.protobuf.Empty
	193, // 478: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitContactContents:output_type -> mtechnavi.api.company.ListBusinessUnitContactContentsResponse
	289, // 479: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitContactContent:output_type -> mtechnavi.api.company.BusinessUnitContactContent
	196, // 480: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitScoreContents:output_type -> mtechnavi.api.company.ListBusinessUnitScoreContentsResponse
	290, // 481: mtechnavi.api.company.BusinessUnitManagementService.GetBusinessUnitScoreContent:output_type -> mtechnavi.api.company.BusinessUnitScoreContent
	199, // 482: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitProfiles:output_type -> mtechnavi.api.company.SharedListBusinessUnitProfilesResponse
	270, // 483: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitProfile:output_type -> mtechnavi.api.company.BusinessUnitProfile
	202, // 484: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitFinancials:output_type -> mtechnavi.api.company.SharedListBusinessUnitFinancialsResponse
	272, // 485: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitFinancial:output_type -> mtechnavi.api.company.BusinessUnitFinancial
	205, // 486: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitBranchs:output_type -> mtechnavi.api.company.SharedListBusinessUnitBranchsResponse
	273, // 487: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitBranch:output_type -> mtechnavi.api.company.BusinessUnitBranch
	208, // 488: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitFacilitiess:output_type -> mtechnavi.api.company.SharedListBusinessUnitFacilitiessResponse
	274, // 489: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitFacilities:output_type -> mtechnavi.api.company.BusinessUnitFacilities
	211, // 490: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitCertificates:output_type -> mtechnavi.api.company.SharedListBusinessUnitCertificatesResponse
	275, // 491: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitCertificate:output_type -> mtechnavi.api.company.BusinessUnitCertificate
	214, // 492: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitStrengths:output_type -> mtechnavi.api.company.SharedListBusinessUnitStrengthsResponse
	276, // 493: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitStrength:output_type -> mtechnavi.api.company.BusinessUnitStrength
	217, // 494: mtechnavi.api.company.BusinessUnitManagementService.SharedListBusinessUnitSkills:output_type -> mtechnavi.api.company.SharedListBusinessUnitSkillsResponse
	277, // 495: mtechnavi.api.company.BusinessUnitManagementService.SharedGetBusinessUnitSkill:output_type -> mtechnavi.api.company.BusinessUnitSkill
	220, // 496: mtechnavi.api.company.BusinessUnitManagementService.SharetoBusinessUnitContactHeader:output_type -> mtechnavi.api.company.SharetoBusinessUnitContactHeaderResponse
	222, // 497: mtechnavi.api.company.BusinessUnitManagementService.SharetoBusinessUnitContact:output_type -> mtechnavi.api.company.SharetoBusinessUnitContactResponse
	224, // 498: mtechnavi.api.company.BusinessUnitManagementService.SharetoBusinessUnitActiveControl:output_type -> mtechnavi.api.company.SharetoBusinessUnitActiveControlResponse
	226, // 499: mtechnavi.api.company.BusinessUnitManagementService.ActivateBusinessUnit:output_type -> mtechnavi.api.company.ActivateBusinessUnitResponse
	228, // 500: mtechnavi.api.company.BusinessUnitManagementService.InactivateBusinessUnit:output_type -> mtechnavi.api.company.InactivateBusinessUnitResponse
	230, // 501: mtechnavi.api.company.BusinessUnitManagementService.StartBusiness:output_type -> mtechnavi.api.company.StartBusinessResponse
	232, // 502: mtechnavi.api.company.BusinessUnitManagementService.StopBusiness:output_type -> mtechnavi.api.company.StopBusinessResponse
	234, // 503: mtechnavi.api.company.BusinessUnitManagementService.ConfirmBusinessUnitChangeNotification:output_type -> mtechnavi.api.company.ConfirmBusinessUnitChangeNotificationResponse
	236, // 504: mtechnavi.api.company.BusinessUnitManagementService.ExportBusinessUnitManagements:output_type -> mtechnavi.api.company.ExportBusinessUnitManagementsResponse
	238, // 505: mtechnavi.api.company.BusinessUnitManagementService.ImportBusinessUnitManagements:output_type -> mtechnavi.api.company.ImportBusinessUnitManagementsResponse
	240, // 506: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagementFormats:output_type -> mtechnavi.api.company.ListBusinessUnitManagementFormatsResponse
	242, // 507: mtechnavi.api.company.BusinessUnitManagementService.ExportBusinessUnitScores:output_type -> mtechnavi.api.company.ExportBusinessUnitScoresResponse
	244, // 508: mtechnavi.api.company.BusinessUnitManagementService.ImportBusinessUnitScores:output_type -> mtechnavi.api.company.ImportBusinessUnitScoresResponse
	246, // 509: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitScoreFormats:output_type -> mtechnavi.api.company.ListBusinessUnitScoreFormatsResponse
	248, // 510: mtechnavi.api.company.BusinessUnitManagementService.ExportBusinessUnitManagementItemValues:output_type -> mtechnavi.api.company.ExportBusinessUnitManagementItemValuesResponse
	250, // 511: mtechnavi.api.company.BusinessUnitManagementService.ImportBusinessUnitManagementItemValues:output_type -> mtechnavi.api.company.ImportBusinessUnitManagementItemValuesResponse
	252, // 512: mtechnavi.api.company.BusinessUnitManagementService.ListBusinessUnitManagementItemValueFormats:output_type -> mtechnavi.api.company.ListBusinessUnitManagementItemValueFormatsResponse
	333, // [333:513] is the sub-list for method output_type
	153, // [153:333] is the sub-list for method input_type
	153, // [153:153] is the sub-list for extension type_name
	153, // [153:153] is the sub-list for extension extendee
	0,   // [0:153] is the sub-list for field type_name
}

func init() { file_company_proto_init() }
func file_company_proto_init() {
	if File_company_proto != nil {
		return
	}
	file_company_table_proto_init()
	file_company_content_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_company_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateComponentUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComponentUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComponentUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListComponentUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListComponentUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetComponentUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateComponentUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteComponentUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListCompanyAndBusinessUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListCompanyAndBusinessUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListCompanyAndComponentUnitAndBusinessUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListCompanyAndComponentUnitAndBusinessUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListPostUnitAndCompanyAndComponentUnitAndBusinessUnitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitRequestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitRequestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitRequestResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitRequestResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitRequestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitRequestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitRequestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitRequestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitRequestResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaffsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaffsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStaffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaffAndComponentUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaffAndComponentUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportStaffsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportStaffsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStaffsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportStaffsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportComponentUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportComponentUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportComponentUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportComponentUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComponentUnitFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListComponentUnitFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaffFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaffFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicGetCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListCompanysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicListCompanysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOldBusinessUnitManagementFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOldBusinessUnitManagementFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitManagementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOldBusinessUnitManagementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportOldBusinessUnitManagementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitManagementContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportOldBusinessUnitManagementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportOldBusinessUnitManagementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistorysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistorysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEmailTenantInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEmailTenantInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemNotificationUsersInBusinessUnitProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitFinancialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitFinancialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitFinancialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitFinancialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitFinancialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitFinancialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitBranchsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitBranchsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitFacilitiessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitFacilitiessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitFacilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitFacilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitFacilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitFacilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitStrengthsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitStrengthsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitStrengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitStrengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitStrengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitStrengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitSkillsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitSkillsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitSkillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitSkillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitSkillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitSkillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitContactHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitContactHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitContactHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitContactHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitContactAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitContactAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitContactAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitContactAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokyoShokoResearchsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokyoShokoResearchsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokyoShokoResearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokyoShokoResearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokyoShokoResearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTokyoShokoResearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokyoShokoResearchCompanyProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokyoShokoResearchCompanyProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokyoShokoResearchCompanyProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokyoShokoResearchCompanyProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokyoShokoResearchCompanyProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTokyoShokoResearchCompanyProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokyoShokoResearchRiskScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTokyoShokoResearchRiskScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokyoShokoResearchRiskScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokyoShokoResearchRiskScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokyoShokoResearchRiskScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTokyoShokoResearchRiskScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitScoreAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitScoreAssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitScoreAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitScoreAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitScoreAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitScoreAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitActiveControlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitActiveControlsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitActiveControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitActiveControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitActiveControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitActiveControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitChangeNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitChangeNotificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBusinessUnitChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBusinessUnitChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBusinessUnitChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitContactContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitContactContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitScoreContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitScoreContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitScoreContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitFinancialsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitFinancialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitFinancialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitBranchsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitBranchsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitFacilitiessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitFacilitiessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitFacilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitCertificatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitCertificatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitStrengthsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitStrengthsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitStrengthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitSkillsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedListBusinessUnitSkillsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedGetBusinessUnitSkillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitContactHeaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitContactHeaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitContactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitContactResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitActiveControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharetoBusinessUnitActiveControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateBusinessUnitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InactivateBusinessUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InactivateBusinessUnitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopBusinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopBusinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmBusinessUnitChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmBusinessUnitChangeNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitManagementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitManagementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitManagementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitManagementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitScoreFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitScoreFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitManagementItemValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportBusinessUnitManagementItemValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitManagementItemValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportBusinessUnitManagementItemValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementItemValueFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBusinessUnitManagementItemValueFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessUnitSkillTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   254,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_company_proto_goTypes,
		DependencyIndexes: file_company_proto_depIdxs,
		MessageInfos:      file_company_proto_msgTypes,
	}.Build()
	File_company_proto = out.File
	file_company_proto_rawDesc = nil
	file_company_proto_goTypes = nil
	file_company_proto_depIdxs = nil
}
