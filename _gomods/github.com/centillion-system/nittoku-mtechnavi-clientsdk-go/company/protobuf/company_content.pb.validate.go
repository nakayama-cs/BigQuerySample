// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: company_content.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BusinessUnitManagementContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitManagementContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitManagementContent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// BusinessUnitManagementContentMultiError, or nil if none found.
func (m *BusinessUnitManagementContent) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitManagementContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitManagement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementContentValidationError{
				field:  "BusinessUnitManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTenantStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "TenantStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "TenantStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenantStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementContentValidationError{
				field:  "TenantStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAggregatedNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitManagementContentValidationError{
						field:  fmt.Sprintf("AggregatedNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitManagementContentValidationError{
						field:  fmt.Sprintf("AggregatedNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitManagementContentValidationError{
					field:  fmt.Sprintf("AggregatedNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetActiveStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "ActiveStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "ActiveStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActiveStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementContentValidationError{
				field:  "ActiveStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementContentValidationError{
				field:  "BusinessUnitProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementContentValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementContentValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessUnitManagementContentMultiError(errors)
	}

	return nil
}

// BusinessUnitManagementContentMultiError is an error wrapping multiple
// validation errors returned by BusinessUnitManagementContent.ValidateAll()
// if the designated constraints aren't met.
type BusinessUnitManagementContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitManagementContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitManagementContentMultiError) AllErrors() []error { return m }

// BusinessUnitManagementContentValidationError is the validation error
// returned by BusinessUnitManagementContent.Validate if the designated
// constraints aren't met.
type BusinessUnitManagementContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitManagementContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitManagementContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitManagementContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitManagementContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitManagementContentValidationError) ErrorName() string {
	return "BusinessUnitManagementContentValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitManagementContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitManagementContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitManagementContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitManagementContentValidationError{}

// Validate checks the field values on BusinessUnitManagementFormatContent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BusinessUnitManagementFormatContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitManagementFormatContent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BusinessUnitManagementFormatContentMultiError, or nil if none found.
func (m *BusinessUnitManagementFormatContent) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitManagementFormatContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitManagement()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitManagement",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitManagement()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementFormatContentValidationError{
				field:  "BusinessUnitManagement",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTenantStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "TenantStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "TenantStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenantStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementFormatContentValidationError{
				field:  "TenantStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementFormatContentValidationError{
				field:  "BusinessUnitProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitMainContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitMainContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitMainContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitMainContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementFormatContentValidationError{
				field:  "BusinessUnitMainContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitContactAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitManagementFormatContentValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitManagementFormatContentValidationError{
				field:  "BusinessUnitContactAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessUnitManagementFormatContentMultiError(errors)
	}

	return nil
}

// BusinessUnitManagementFormatContentMultiError is an error wrapping multiple
// validation errors returned by
// BusinessUnitManagementFormatContent.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitManagementFormatContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitManagementFormatContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitManagementFormatContentMultiError) AllErrors() []error { return m }

// BusinessUnitManagementFormatContentValidationError is the validation error
// returned by BusinessUnitManagementFormatContent.Validate if the designated
// constraints aren't met.
type BusinessUnitManagementFormatContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitManagementFormatContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitManagementFormatContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitManagementFormatContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitManagementFormatContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitManagementFormatContentValidationError) ErrorName() string {
	return "BusinessUnitManagementFormatContentValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitManagementFormatContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitManagementFormatContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitManagementFormatContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitManagementFormatContentValidationError{}

// Validate checks the field values on BusinessUnitContactContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitContactContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitContactContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitContactContentMultiError, or nil if none found.
func (m *BusinessUnitContactContent) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitContactContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBusinessUnitContact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "BusinessUnitContact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactContentValidationError{
				field:  "BusinessUnitContact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitContactHeader()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "BusinessUnitContactHeader",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactHeader()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactContentValidationError{
				field:  "BusinessUnitContactHeader",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnitContactAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "BusinessUnitContactAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitContactAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactContentValidationError{
				field:  "BusinessUnitContactAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitContactContentValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitContactContentValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessUnitContactContentMultiError(errors)
	}

	return nil
}

// BusinessUnitContactContentMultiError is an error wrapping multiple
// validation errors returned by BusinessUnitContactContent.ValidateAll() if
// the designated constraints aren't met.
type BusinessUnitContactContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitContactContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitContactContentMultiError) AllErrors() []error { return m }

// BusinessUnitContactContentValidationError is the validation error returned
// by BusinessUnitContactContent.Validate if the designated constraints aren't met.
type BusinessUnitContactContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitContactContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitContactContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitContactContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitContactContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitContactContentValidationError) ErrorName() string {
	return "BusinessUnitContactContentValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitContactContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitContactContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitContactContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitContactContentValidationError{}

// Validate checks the field values on BusinessUnitScoreContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitScoreContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitScoreContent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitScoreContentMultiError, or nil if none found.
func (m *BusinessUnitScoreContent) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitScoreContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitScoreContentValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitScoreContentValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitScoreContentValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItemValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitScoreContentValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitScoreContentValidationError{
						field:  fmt.Sprintf("ItemValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitScoreContentValidationError{
					field:  fmt.Sprintf("ItemValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBusinessUnitScoreAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BusinessUnitScoreContentValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BusinessUnitScoreContentValidationError{
					field:  "BusinessUnitScoreAsset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnitScoreAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BusinessUnitScoreContentValidationError{
				field:  "BusinessUnitScoreAsset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BusinessUnitScoreContentMultiError(errors)
	}

	return nil
}

// BusinessUnitScoreContentMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitScoreContent.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitScoreContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitScoreContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitScoreContentMultiError) AllErrors() []error { return m }

// BusinessUnitScoreContentValidationError is the validation error returned by
// BusinessUnitScoreContent.Validate if the designated constraints aren't met.
type BusinessUnitScoreContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitScoreContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitScoreContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitScoreContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitScoreContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitScoreContentValidationError) ErrorName() string {
	return "BusinessUnitScoreContentValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitScoreContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitScoreContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitScoreContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitScoreContentValidationError{}

// Validate checks the field values on StaffAndComponentUnit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StaffAndComponentUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaffAndComponentUnit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StaffAndComponentUnitMultiError, or nil if none found.
func (m *StaffAndComponentUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *StaffAndComponentUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StaffAndComponentUnitValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StaffAndComponentUnitValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StaffAndComponentUnitValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComponentUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StaffAndComponentUnitValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StaffAndComponentUnitValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StaffAndComponentUnitValidationError{
				field:  "ComponentUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StaffAndComponentUnitMultiError(errors)
	}

	return nil
}

// StaffAndComponentUnitMultiError is an error wrapping multiple validation
// errors returned by StaffAndComponentUnit.ValidateAll() if the designated
// constraints aren't met.
type StaffAndComponentUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaffAndComponentUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaffAndComponentUnitMultiError) AllErrors() []error { return m }

// StaffAndComponentUnitValidationError is the validation error returned by
// StaffAndComponentUnit.Validate if the designated constraints aren't met.
type StaffAndComponentUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaffAndComponentUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaffAndComponentUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaffAndComponentUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaffAndComponentUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaffAndComponentUnitValidationError) ErrorName() string {
	return "StaffAndComponentUnitValidationError"
}

// Error satisfies the builtin error interface
func (e StaffAndComponentUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaffAndComponentUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaffAndComponentUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaffAndComponentUnitValidationError{}

// Validate checks the field values on
// PostUnitAndCompanyAndComponentUnitAndBusinessUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PostUnitAndCompanyAndComponentUnitAndBusinessUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// PostUnitAndCompanyAndComponentUnitAndBusinessUnitMultiError, or nil if none found.
func (m *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *PostUnitAndCompanyAndComponentUnitAndBusinessUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPostUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "PostUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "PostUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
				field:  "PostUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComponentUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "ComponentUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComponentUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
				field:  "ComponentUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{
				field:  "BusinessUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostUnitAndCompanyAndComponentUnitAndBusinessUnitMultiError(errors)
	}

	return nil
}

// PostUnitAndCompanyAndComponentUnitAndBusinessUnitMultiError is an error
// wrapping multiple validation errors returned by
// PostUnitAndCompanyAndComponentUnitAndBusinessUnit.ValidateAll() if the
// designated constraints aren't met.
type PostUnitAndCompanyAndComponentUnitAndBusinessUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostUnitAndCompanyAndComponentUnitAndBusinessUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostUnitAndCompanyAndComponentUnitAndBusinessUnitMultiError) AllErrors() []error { return m }

// PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError is the
// validation error returned by
// PostUnitAndCompanyAndComponentUnitAndBusinessUnit.Validate if the
// designated constraints aren't met.
type PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError) ErrorName() string {
	return "PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError"
}

// Error satisfies the builtin error interface
func (e PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostUnitAndCompanyAndComponentUnitAndBusinessUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostUnitAndCompanyAndComponentUnitAndBusinessUnitValidationError{}

// Validate checks the field values on CompanyAndComponentUnitAndBusinessUnit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CompanyAndComponentUnitAndBusinessUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CompanyAndComponentUnitAndBusinessUnit with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CompanyAndComponentUnitAndBusinessUnitMultiError, or nil if none found.
func (m *CompanyAndComponentUnitAndBusinessUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAndComponentUnitAndBusinessUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyAndComponentUnitAndBusinessUnitValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComponentUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompanyAndComponentUnitAndBusinessUnitValidationError{
						field:  fmt.Sprintf("ComponentUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompanyAndComponentUnitAndBusinessUnitValidationError{
						field:  fmt.Sprintf("ComponentUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  fmt.Sprintf("ComponentUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBusinessUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyAndComponentUnitAndBusinessUnitValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyAndComponentUnitAndBusinessUnitValidationError{
				field:  "BusinessUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyAndComponentUnitAndBusinessUnitMultiError(errors)
	}

	return nil
}

// CompanyAndComponentUnitAndBusinessUnitMultiError is an error wrapping
// multiple validation errors returned by
// CompanyAndComponentUnitAndBusinessUnit.ValidateAll() if the designated
// constraints aren't met.
type CompanyAndComponentUnitAndBusinessUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAndComponentUnitAndBusinessUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAndComponentUnitAndBusinessUnitMultiError) AllErrors() []error { return m }

// CompanyAndComponentUnitAndBusinessUnitValidationError is the validation
// error returned by CompanyAndComponentUnitAndBusinessUnit.Validate if the
// designated constraints aren't met.
type CompanyAndComponentUnitAndBusinessUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAndComponentUnitAndBusinessUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAndComponentUnitAndBusinessUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAndComponentUnitAndBusinessUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAndComponentUnitAndBusinessUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAndComponentUnitAndBusinessUnitValidationError) ErrorName() string {
	return "CompanyAndComponentUnitAndBusinessUnitValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyAndComponentUnitAndBusinessUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAndComponentUnitAndBusinessUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAndComponentUnitAndBusinessUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAndComponentUnitAndBusinessUnitValidationError{}

// Validate checks the field values on CompanyAndBusinessUnit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyAndBusinessUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyAndBusinessUnit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyAndBusinessUnitMultiError, or nil if none found.
func (m *CompanyAndBusinessUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAndBusinessUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyAndBusinessUnitValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyAndBusinessUnitValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyAndBusinessUnitValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBusinessUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompanyAndBusinessUnitValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompanyAndBusinessUnitValidationError{
					field:  "BusinessUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBusinessUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyAndBusinessUnitValidationError{
				field:  "BusinessUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompanyAndBusinessUnitMultiError(errors)
	}

	return nil
}

// CompanyAndBusinessUnitMultiError is an error wrapping multiple validation
// errors returned by CompanyAndBusinessUnit.ValidateAll() if the designated
// constraints aren't met.
type CompanyAndBusinessUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAndBusinessUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAndBusinessUnitMultiError) AllErrors() []error { return m }

// CompanyAndBusinessUnitValidationError is the validation error returned by
// CompanyAndBusinessUnit.Validate if the designated constraints aren't met.
type CompanyAndBusinessUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAndBusinessUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAndBusinessUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAndBusinessUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAndBusinessUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAndBusinessUnitValidationError) ErrorName() string {
	return "CompanyAndBusinessUnitValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyAndBusinessUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAndBusinessUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAndBusinessUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAndBusinessUnitValidationError{}

// Validate checks the field values on BusinessUnitSkillTree with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitSkillTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitSkillTree with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitSkillTreeMultiError, or nil if none found.
func (m *BusinessUnitSkillTree) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitSkillTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSkillItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitSkillTreeValidationError{
						field:  fmt.Sprintf("SkillItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitSkillTreeValidationError{
						field:  fmt.Sprintf("SkillItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitSkillTreeValidationError{
					field:  fmt.Sprintf("SkillItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessUnitSkillTreeMultiError(errors)
	}

	return nil
}

// BusinessUnitSkillTreeMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitSkillTree.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitSkillTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitSkillTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitSkillTreeMultiError) AllErrors() []error { return m }

// BusinessUnitSkillTreeValidationError is the validation error returned by
// BusinessUnitSkillTree.Validate if the designated constraints aren't met.
type BusinessUnitSkillTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitSkillTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitSkillTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitSkillTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitSkillTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitSkillTreeValidationError) ErrorName() string {
	return "BusinessUnitSkillTreeValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitSkillTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitSkillTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitSkillTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitSkillTreeValidationError{}

// Validate checks the field values on BusinessUnitSkillItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BusinessUnitSkillItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BusinessUnitSkillItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BusinessUnitSkillItemMultiError, or nil if none found.
func (m *BusinessUnitSkillItem) ValidateAll() error {
	return m.validate(true)
}

func (m *BusinessUnitSkillItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BusinessUnitSkillItemId

	// no validation rules for DisplayNameLang

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BusinessUnitSkillItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BusinessUnitSkillItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BusinessUnitSkillItemValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BusinessUnitSkillItemMultiError(errors)
	}

	return nil
}

// BusinessUnitSkillItemMultiError is an error wrapping multiple validation
// errors returned by BusinessUnitSkillItem.ValidateAll() if the designated
// constraints aren't met.
type BusinessUnitSkillItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessUnitSkillItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessUnitSkillItemMultiError) AllErrors() []error { return m }

// BusinessUnitSkillItemValidationError is the validation error returned by
// BusinessUnitSkillItem.Validate if the designated constraints aren't met.
type BusinessUnitSkillItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessUnitSkillItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessUnitSkillItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessUnitSkillItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessUnitSkillItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessUnitSkillItemValidationError) ErrorName() string {
	return "BusinessUnitSkillItemValidationError"
}

// Error satisfies the builtin error interface
func (e BusinessUnitSkillItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusinessUnitSkillItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessUnitSkillItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessUnitSkillItemValidationError{}
