// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimateselection.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EstimateSelection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateSelection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateSelection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateSelectionMultiError, or nil if none found.
func (m *EstimateSelection) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateSelection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateSelectionId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSelectionResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "SelectionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "SelectionResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelectionResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "SelectionResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Adoption

	if all {
		switch v := interface{}(m.GetSelectionFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "SelectionFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "SelectionFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelectionFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "SelectionFeedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReplyedAt

	if all {
		switch v := interface{}(m.GetIssuer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "Issuer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrderExported

	// no validation rules for OrderExportedAt

	// no validation rules for EstimateResultId

	if all {
		switch v := interface{}(m.GetApprovalRequestProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "ApprovalRequestProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "ApprovalRequestProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalRequestProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "ApprovalRequestProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "ApprovalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "ApprovalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "ApprovalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Completed

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Locked

	// no validation rules for ReceivedAt

	// no validation rules for SelectedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EstimateSelectionMultiError(errors)
	}

	return nil
}

// EstimateSelectionMultiError is an error wrapping multiple validation errors
// returned by EstimateSelection.ValidateAll() if the designated constraints
// aren't met.
type EstimateSelectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateSelectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateSelectionMultiError) AllErrors() []error { return m }

// EstimateSelectionValidationError is the validation error returned by
// EstimateSelection.Validate if the designated constraints aren't met.
type EstimateSelectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateSelectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateSelectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateSelectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateSelectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateSelectionValidationError) ErrorName() string {
	return "EstimateSelectionValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateSelectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateSelection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateSelectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateSelectionValidationError{}

// Validate checks the field values on EstimateSelectionExportLog with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateSelectionExportLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateSelectionExportLog with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateSelectionExportLogMultiError, or nil if none found.
func (m *EstimateSelectionExportLog) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateSelectionExportLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateSelectionExportLogId

	// no validation rules for EstimateSelectionId

	// no validation rules for ExportedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EstimateSelectionExportLogMultiError(errors)
	}

	return nil
}

// EstimateSelectionExportLogMultiError is an error wrapping multiple
// validation errors returned by EstimateSelectionExportLog.ValidateAll() if
// the designated constraints aren't met.
type EstimateSelectionExportLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateSelectionExportLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateSelectionExportLogMultiError) AllErrors() []error { return m }

// EstimateSelectionExportLogValidationError is the validation error returned
// by EstimateSelectionExportLog.Validate if the designated constraints aren't met.
type EstimateSelectionExportLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateSelectionExportLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateSelectionExportLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateSelectionExportLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateSelectionExportLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateSelectionExportLogValidationError) ErrorName() string {
	return "EstimateSelectionExportLogValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateSelectionExportLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateSelectionExportLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateSelectionExportLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateSelectionExportLogValidationError{}

// Validate checks the field values on EstimateSelection_SelectionFeedback with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateSelection_SelectionFeedback) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateSelection_SelectionFeedback
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EstimateSelection_SelectionFeedbackMultiError, or nil if none found.
func (m *EstimateSelection_SelectionFeedback) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateSelection_SelectionFeedback) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelection_SelectionFeedbackValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelection_SelectionFeedbackValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelection_SelectionFeedbackValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReason()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelection_SelectionFeedbackValidationError{
					field:  "Reason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelection_SelectionFeedbackValidationError{
					field:  "Reason",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReason()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelection_SelectionFeedbackValidationError{
				field:  "Reason",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return EstimateSelection_SelectionFeedbackMultiError(errors)
	}

	return nil
}

// EstimateSelection_SelectionFeedbackMultiError is an error wrapping multiple
// validation errors returned by
// EstimateSelection_SelectionFeedback.ValidateAll() if the designated
// constraints aren't met.
type EstimateSelection_SelectionFeedbackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateSelection_SelectionFeedbackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateSelection_SelectionFeedbackMultiError) AllErrors() []error { return m }

// EstimateSelection_SelectionFeedbackValidationError is the validation error
// returned by EstimateSelection_SelectionFeedback.Validate if the designated
// constraints aren't met.
type EstimateSelection_SelectionFeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateSelection_SelectionFeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateSelection_SelectionFeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateSelection_SelectionFeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateSelection_SelectionFeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateSelection_SelectionFeedbackValidationError) ErrorName() string {
	return "EstimateSelection_SelectionFeedbackValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateSelection_SelectionFeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateSelection_SelectionFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateSelection_SelectionFeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateSelection_SelectionFeedbackValidationError{}
