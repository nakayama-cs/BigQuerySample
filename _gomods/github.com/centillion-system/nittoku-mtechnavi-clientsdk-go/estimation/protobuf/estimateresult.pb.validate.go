// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimateresult.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EstimateResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EstimateResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EstimateResultMultiError,
// or nil if none found.
func (m *EstimateResult) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateResultId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReplyedAt

	if all {
		switch v := interface{}(m.GetIssuer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultValidationError{
				field:  "Issuer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EstimateRequestId

	// no validation rules for Decline

	// no validation rules for Completed

	if all {
		switch v := interface{}(m.GetIssuerCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "IssuerCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "IssuerCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuerCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultValidationError{
				field:  "IssuerCompany",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Locked

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	switch m.ResultContent.(type) {

	case *EstimateResult_EstimateProperties_:

		if all {
			switch v := interface{}(m.GetEstimateProperties()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResultValidationError{
						field:  "EstimateProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResultValidationError{
						field:  "EstimateProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEstimateProperties()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResultValidationError{
					field:  "EstimateProperties",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EstimateResult_DeclineProperties_:

		if all {
			switch v := interface{}(m.GetDeclineProperties()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResultValidationError{
						field:  "DeclineProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResultValidationError{
						field:  "DeclineProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeclineProperties()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResultValidationError{
					field:  "DeclineProperties",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EstimateResultMultiError(errors)
	}

	return nil
}

// EstimateResultMultiError is an error wrapping multiple validation errors
// returned by EstimateResult.ValidateAll() if the designated constraints
// aren't met.
type EstimateResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResultMultiError) AllErrors() []error { return m }

// EstimateResultValidationError is the validation error returned by
// EstimateResult.Validate if the designated constraints aren't met.
type EstimateResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResultValidationError) ErrorName() string { return "EstimateResultValidationError" }

// Error satisfies the builtin error interface
func (e EstimateResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResultValidationError{}

// Validate checks the field values on EstimateResultDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateResultDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResultDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateResultDetailMultiError, or nil if none found.
func (m *EstimateResultDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResultDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DetailName

	if all {
		switch v := interface{}(m.GetDetailType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetailValidationError{
					field:  "DetailType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetailValidationError{
					field:  "DetailType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetailType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetailValidationError{
				field:  "DetailType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	switch m.DetailContent.(type) {

	case *EstimateResultDetail_BreakdownProperties_:

		if all {
			switch v := interface{}(m.GetBreakdownProperties()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResultDetailValidationError{
						field:  "BreakdownProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResultDetailValidationError{
						field:  "BreakdownProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBreakdownProperties()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResultDetailValidationError{
					field:  "BreakdownProperties",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EstimateResultDetail_PartialDeliveryProperties_:

		if all {
			switch v := interface{}(m.GetPartialDeliveryProperties()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResultDetailValidationError{
						field:  "PartialDeliveryProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResultDetailValidationError{
						field:  "PartialDeliveryProperties",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPartialDeliveryProperties()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResultDetailValidationError{
					field:  "PartialDeliveryProperties",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EstimateResultDetailMultiError(errors)
	}

	return nil
}

// EstimateResultDetailMultiError is an error wrapping multiple validation
// errors returned by EstimateResultDetail.ValidateAll() if the designated
// constraints aren't met.
type EstimateResultDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResultDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResultDetailMultiError) AllErrors() []error { return m }

// EstimateResultDetailValidationError is the validation error returned by
// EstimateResultDetail.Validate if the designated constraints aren't met.
type EstimateResultDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResultDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResultDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResultDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResultDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResultDetailValidationError) ErrorName() string {
	return "EstimateResultDetailValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResultDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResultDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResultDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResultDetailValidationError{}

// Validate checks the field values on EstimateResultCostDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateResultCostDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResultCostDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateResultCostDetailMultiError, or nil if none found.
func (m *EstimateResultCostDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResultCostDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DetailName

	if all {
		switch v := interface{}(m.GetExpenseItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "ExpenseItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "ExpenseItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpenseItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultCostDetailValidationError{
				field:  "ExpenseItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultCostDetailValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUnitPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "UnitPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "UnitPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnitPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultCostDetailValidationError{
				field:  "UnitPrice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultCostDetailValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultCostDetailValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	if len(errors) > 0 {
		return EstimateResultCostDetailMultiError(errors)
	}

	return nil
}

// EstimateResultCostDetailMultiError is an error wrapping multiple validation
// errors returned by EstimateResultCostDetail.ValidateAll() if the designated
// constraints aren't met.
type EstimateResultCostDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResultCostDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResultCostDetailMultiError) AllErrors() []error { return m }

// EstimateResultCostDetailValidationError is the validation error returned by
// EstimateResultCostDetail.Validate if the designated constraints aren't met.
type EstimateResultCostDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResultCostDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResultCostDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResultCostDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResultCostDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResultCostDetailValidationError) ErrorName() string {
	return "EstimateResultCostDetailValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResultCostDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResultCostDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResultCostDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResultCostDetailValidationError{}

// Validate checks the field values on EstimateResult_EstimateProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateResult_EstimateProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResult_EstimateProperties
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EstimateResult_EstimatePropertiesMultiError, or nil if none found.
func (m *EstimateResult_EstimateProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResult_EstimateProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeliveryTimeDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "DeliveryTimeDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "DeliveryTimeDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryTimeDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResult_EstimatePropertiesValidationError{
				field:  "DeliveryTimeDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LeadTime

	// no validation rules for PartialDelivery

	if all {
		switch v := interface{}(m.GetEstimateExpireDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "EstimateExpireDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "EstimateExpireDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateExpireDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResult_EstimatePropertiesValidationError{
				field:  "EstimateExpireDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResult_EstimatePropertiesValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResult_EstimatePropertiesValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUnitPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "UnitPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
					field:  "UnitPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnitPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResult_EstimatePropertiesValidationError{
				field:  "UnitPrice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReplyedRemarks

	for idx, item := range m.GetEstimateResultDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
						field:  fmt.Sprintf("EstimateResultDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
						field:  fmt.Sprintf("EstimateResultDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResult_EstimatePropertiesValidationError{
					field:  fmt.Sprintf("EstimateResultDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResult_EstimatePropertiesValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PrivateCode

	// no validation rules for Remarks

	for idx, item := range m.GetEstimateResultCostDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
						field:  fmt.Sprintf("EstimateResultCostDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateResult_EstimatePropertiesValidationError{
						field:  fmt.Sprintf("EstimateResultCostDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateResult_EstimatePropertiesValidationError{
					field:  fmt.Sprintf("EstimateResultCostDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EstimateResult_EstimatePropertiesMultiError(errors)
	}

	return nil
}

// EstimateResult_EstimatePropertiesMultiError is an error wrapping multiple
// validation errors returned by
// EstimateResult_EstimateProperties.ValidateAll() if the designated
// constraints aren't met.
type EstimateResult_EstimatePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResult_EstimatePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResult_EstimatePropertiesMultiError) AllErrors() []error { return m }

// EstimateResult_EstimatePropertiesValidationError is the validation error
// returned by EstimateResult_EstimateProperties.Validate if the designated
// constraints aren't met.
type EstimateResult_EstimatePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResult_EstimatePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResult_EstimatePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResult_EstimatePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResult_EstimatePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResult_EstimatePropertiesValidationError) ErrorName() string {
	return "EstimateResult_EstimatePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResult_EstimatePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResult_EstimateProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResult_EstimatePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResult_EstimatePropertiesValidationError{}

// Validate checks the field values on EstimateResult_DeclineProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateResult_DeclineProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResult_DeclineProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EstimateResult_DeclinePropertiesMultiError, or nil if none found.
func (m *EstimateResult_DeclineProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResult_DeclineProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Comment

	// no validation rules for DeclinedAt

	if len(errors) > 0 {
		return EstimateResult_DeclinePropertiesMultiError(errors)
	}

	return nil
}

// EstimateResult_DeclinePropertiesMultiError is an error wrapping multiple
// validation errors returned by
// EstimateResult_DeclineProperties.ValidateAll() if the designated
// constraints aren't met.
type EstimateResult_DeclinePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResult_DeclinePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResult_DeclinePropertiesMultiError) AllErrors() []error { return m }

// EstimateResult_DeclinePropertiesValidationError is the validation error
// returned by EstimateResult_DeclineProperties.Validate if the designated
// constraints aren't met.
type EstimateResult_DeclinePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResult_DeclinePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResult_DeclinePropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResult_DeclinePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResult_DeclinePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResult_DeclinePropertiesValidationError) ErrorName() string {
	return "EstimateResult_DeclinePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResult_DeclinePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResult_DeclineProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResult_DeclinePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResult_DeclinePropertiesValidationError{}

// Validate checks the field values on EstimateResultDetail_BreakdownProperties
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *EstimateResultDetail_BreakdownProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateResultDetail_BreakdownProperties with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// EstimateResultDetail_BreakdownPropertiesMultiError, or nil if none found.
func (m *EstimateResultDetail_BreakdownProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResultDetail_BreakdownProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpenseItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "ExpenseItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "ExpenseItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpenseItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetail_BreakdownPropertiesValidationError{
				field:  "ExpenseItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetail_BreakdownPropertiesValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUnitPrice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "UnitPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "UnitPrice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnitPrice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetail_BreakdownPropertiesValidationError{
				field:  "UnitPrice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetail_BreakdownPropertiesValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetail_BreakdownPropertiesValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateResultDetail_BreakdownPropertiesMultiError(errors)
	}

	return nil
}

// EstimateResultDetail_BreakdownPropertiesMultiError is an error wrapping
// multiple validation errors returned by
// EstimateResultDetail_BreakdownProperties.ValidateAll() if the designated
// constraints aren't met.
type EstimateResultDetail_BreakdownPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResultDetail_BreakdownPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResultDetail_BreakdownPropertiesMultiError) AllErrors() []error { return m }

// EstimateResultDetail_BreakdownPropertiesValidationError is the validation
// error returned by EstimateResultDetail_BreakdownProperties.Validate if the
// designated constraints aren't met.
type EstimateResultDetail_BreakdownPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResultDetail_BreakdownPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResultDetail_BreakdownPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResultDetail_BreakdownPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResultDetail_BreakdownPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResultDetail_BreakdownPropertiesValidationError) ErrorName() string {
	return "EstimateResultDetail_BreakdownPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResultDetail_BreakdownPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResultDetail_BreakdownProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResultDetail_BreakdownPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResultDetail_BreakdownPropertiesValidationError{}

// Validate checks the field values on
// EstimateResultDetail_PartialDeliveryProperties with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EstimateResultDetail_PartialDeliveryProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateResultDetail_PartialDeliveryProperties with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// EstimateResultDetail_PartialDeliveryPropertiesMultiError, or nil if none found.
func (m *EstimateResultDetail_PartialDeliveryProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResultDetail_PartialDeliveryProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for EstimateRequestDetailName

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetail_PartialDeliveryPropertiesValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetail_PartialDeliveryPropertiesValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetail_PartialDeliveryPropertiesValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeliveryTimeDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultDetail_PartialDeliveryPropertiesValidationError{
					field:  "DeliveryTimeDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultDetail_PartialDeliveryPropertiesValidationError{
					field:  "DeliveryTimeDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryTimeDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultDetail_PartialDeliveryPropertiesValidationError{
				field:  "DeliveryTimeDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateResultDetail_PartialDeliveryPropertiesMultiError(errors)
	}

	return nil
}

// EstimateResultDetail_PartialDeliveryPropertiesMultiError is an error
// wrapping multiple validation errors returned by
// EstimateResultDetail_PartialDeliveryProperties.ValidateAll() if the
// designated constraints aren't met.
type EstimateResultDetail_PartialDeliveryPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResultDetail_PartialDeliveryPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResultDetail_PartialDeliveryPropertiesMultiError) AllErrors() []error { return m }

// EstimateResultDetail_PartialDeliveryPropertiesValidationError is the
// validation error returned by
// EstimateResultDetail_PartialDeliveryProperties.Validate if the designated
// constraints aren't met.
type EstimateResultDetail_PartialDeliveryPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResultDetail_PartialDeliveryPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResultDetail_PartialDeliveryPropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateResultDetail_PartialDeliveryPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResultDetail_PartialDeliveryPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResultDetail_PartialDeliveryPropertiesValidationError) ErrorName() string {
	return "EstimateResultDetail_PartialDeliveryPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResultDetail_PartialDeliveryPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResultDetail_PartialDeliveryProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResultDetail_PartialDeliveryPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResultDetail_PartialDeliveryPropertiesValidationError{}
