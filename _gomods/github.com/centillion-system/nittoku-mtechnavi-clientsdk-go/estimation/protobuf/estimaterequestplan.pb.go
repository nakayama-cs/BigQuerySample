// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: estimaterequestplan.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 見積依頼予定
type EstimateRequestPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimateRequestPlanId string `protobuf:"bytes,1,opt,name=estimate_request_plan_id,json=estimateRequestPlanId,proto3" json:"estimate_request_plan_id,omitempty"`
	// outputonly 見積依頼予定ステータス
	Status *EstimateRequestPlanStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 見積依頼予定件名
	// ja:日本語名
	// ja-kana:日本語名かな
	// 作業名 / 作業名(カナ)
	DisplayNameLang map[string]string `protobuf:"bytes,3,rep,name=display_name_lang,json=displayNameLang,proto3" json:"display_name_lang,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to LinkageContent:
	//
	//	*EstimateRequestPlan_SapWorkOrder
	LinkageContent isEstimateRequestPlan_LinkageContent `protobuf_oneof:"linkage_content"`
	// 見積依頼予定登録者情報
	Issuer *Issuer `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// readonly 紐付けあり
	// 紐づく見積依頼が作成済の場合 true を返す
	//
	// Implementation Note:
	//
	//	readonly項目 見積依頼予定固有の管理のため別途ステータス用のエンティティを用意しない
	Linked bool `protobuf:"varint,6,opt,name=linked,proto3" json:"linked,omitempty"`
	// outputonly 完了
	Completed bool `protobuf:"varint,7,opt,name=completed,proto3" json:"completed,omitempty"`
	// outputonly 破棄
	Discarded bool `protobuf:"varint,8,opt,name=discarded,proto3" json:"discarded,omitempty"`
	// readonly タグ（テナント単位で共有）
	Tags []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *EstimateRequestPlan) Reset() {
	*x = EstimateRequestPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimaterequestplan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRequestPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRequestPlan) ProtoMessage() {}

func (x *EstimateRequestPlan) ProtoReflect() protoreflect.Message {
	mi := &file_estimaterequestplan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRequestPlan.ProtoReflect.Descriptor instead.
func (*EstimateRequestPlan) Descriptor() ([]byte, []int) {
	return file_estimaterequestplan_proto_rawDescGZIP(), []int{0}
}

func (x *EstimateRequestPlan) GetEstimateRequestPlanId() string {
	if x != nil {
		return x.EstimateRequestPlanId
	}
	return ""
}

func (x *EstimateRequestPlan) GetStatus() *EstimateRequestPlanStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EstimateRequestPlan) GetDisplayNameLang() map[string]string {
	if x != nil {
		return x.DisplayNameLang
	}
	return nil
}

func (m *EstimateRequestPlan) GetLinkageContent() isEstimateRequestPlan_LinkageContent {
	if m != nil {
		return m.LinkageContent
	}
	return nil
}

func (x *EstimateRequestPlan) GetSapWorkOrder() *EstimateRequestPlan_SAPWorkOrder {
	if x, ok := x.GetLinkageContent().(*EstimateRequestPlan_SapWorkOrder); ok {
		return x.SapWorkOrder
	}
	return nil
}

func (x *EstimateRequestPlan) GetIssuer() *Issuer {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *EstimateRequestPlan) GetLinked() bool {
	if x != nil {
		return x.Linked
	}
	return false
}

func (x *EstimateRequestPlan) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *EstimateRequestPlan) GetDiscarded() bool {
	if x != nil {
		return x.Discarded
	}
	return false
}

func (x *EstimateRequestPlan) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EstimateRequestPlan) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *EstimateRequestPlan) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EstimateRequestPlan) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type isEstimateRequestPlan_LinkageContent interface {
	isEstimateRequestPlan_LinkageContent()
}

type EstimateRequestPlan_SapWorkOrder struct {
	SapWorkOrder *EstimateRequestPlan_SAPWorkOrder `protobuf:"bytes,4,opt,name=sap_work_order,json=sapWorkOrder,proto3,oneof"`
}

func (*EstimateRequestPlan_SapWorkOrder) isEstimateRequestPlan_LinkageContent() {}

// SAP作業依頼情報
// SAPから取込まれたデータがそのまま格納される
// SAP固有項目の場合、フィールド名の命名規則はSAP側に合わせている
type EstimateRequestPlan_SAPWorkOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 内部指図書番号
	TrackingCode string `protobuf:"bytes,1,opt,name=tracking_code,json=trackingCode,proto3" json:"tracking_code,omitempty"`
	// 指図タイプ
	OrderType string `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	// 原価センタ
	// 原価センタコード / 元原価センタ名
	CostCenter *CostCenter `protobuf:"bytes,3,opt,name=cost_center,json=costCenter,proto3" json:"cost_center,omitempty"`
	// 会社
	// 会社コード / 会社名
	Company *SAPCodeItem `protobuf:"bytes,4,opt,name=company,proto3" json:"company,omitempty"`
	// 受付年月日 / 受付部門コード / 受付社員名
	ReceiverProperties *SAPReceiverProperties `protobuf:"bytes,5,opt,name=receiver_properties,json=receiverProperties,proto3" json:"receiver_properties,omitempty"`
	// 申請者氏名 / 申請部門名
	RequesterProperties *RequesterProperties `protobuf:"bytes,6,opt,name=requester_properties,json=requesterProperties,proto3" json:"requester_properties,omitempty"`
	// 作業分類コード / 作業分類名
	WorkCategory *SAPCodeItem `protobuf:"bytes,7,opt,name=work_category,json=workCategory,proto3" json:"work_category,omitempty"`
	// 作業用途コード / 作業用途名
	WorkUsage *SAPCodeItem `protobuf:"bytes,8,opt,name=work_usage,json=workUsage,proto3" json:"work_usage,omitempty"`
	// 場所コード / 場所名
	Place *SAPCodeItem `protobuf:"bytes,9,opt,name=place,proto3" json:"place,omitempty"`
	// 見積金額
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	Amount string `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	// 予算金額
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	Budget string `protobuf:"bytes,11,opt,name=budget,proto3" json:"budget,omitempty"`
	// 決済先勘定
	SettlementAccount *SAPCodeItem `protobuf:"bytes,12,opt,name=settlement_account,json=settlementAccount,proto3" json:"settlement_account,omitempty"`
	// 完了予定年月
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	WorkCompletePlanDate string `protobuf:"bytes,13,opt,name=work_complete_plan_date,json=workCompletePlanDate,proto3" json:"work_complete_plan_date,omitempty"`
	// 完了年月日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	WorkCompletedDate string `protobuf:"bytes,14,opt,name=work_completed_date,json=workCompletedDate,proto3" json:"work_completed_date,omitempty"`
	// 中止年月日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	WorkStopedDate string `protobuf:"bytes,15,opt,name=work_stoped_date,json=workStopedDate,proto3" json:"work_stoped_date,omitempty"`
	// 削除年月日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	WorkDeletedDate string `protobuf:"bytes,16,opt,name=work_deleted_date,json=workDeletedDate,proto3" json:"work_deleted_date,omitempty"`
	// 単月情報
	MonthlyProperties *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties `protobuf:"bytes,17,opt,name=monthly_properties,json=monthlyProperties,proto3" json:"monthly_properties,omitempty"`
	// 累計情報
	AccumulatedProperties *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties `protobuf:"bytes,18,opt,name=accumulated_properties,json=accumulatedProperties,proto3" json:"accumulated_properties,omitempty"`
	// 実績単価
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	ActualUnitPrice string `protobuf:"bytes,19,opt,name=actual_unit_price,json=actualUnitPrice,proto3" json:"actual_unit_price,omitempty"`
	// 設計費比率
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	DesignCostRatio string `protobuf:"bytes,20,opt,name=design_cost_ratio,json=designCostRatio,proto3" json:"design_cost_ratio,omitempty"`
	// 発注予定数
	// 数量 / 基本数量単位
	Quantity *SAPUnitAmount `protobuf:"bytes,21,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// 見積単価
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	UnitPrice string `protobuf:"bytes,22,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// 売価
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	SellingPrice string `protobuf:"bytes,23,opt,name=selling_price,json=sellingPrice,proto3" json:"selling_price,omitempty"`
	// 売上税コード
	SalesTaxCode string `protobuf:"bytes,24,opt,name=sales_tax_code,json=salesTaxCode,proto3" json:"sales_tax_code,omitempty"`
	// 申請年月日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	RequestDate string `protobuf:"bytes,25,opt,name=request_date,json=requestDate,proto3" json:"request_date,omitempty"`
	// 承認日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	ApprovedDate string `protobuf:"bytes,26,opt,name=approved_date,json=approvedDate,proto3" json:"approved_date,omitempty"`
	// 希望納期
	// Accuracy.DAY
	DesiredReciveDt *protobuf.Datetime `protobuf:"bytes,28,opt,name=desired_recive_dt,json=desiredReciveDt,proto3" json:"desired_recive_dt,omitempty"`
	// 受付NO
	ReceivedCode string `protobuf:"bytes,29,opt,name=received_code,json=receivedCode,proto3" json:"received_code,omitempty"`
	// 要求NO
	RequestedCode string `protobuf:"bytes,30,opt,name=requested_code,json=requestedCode,proto3" json:"requested_code,omitempty"`
	// プロジェクトコード / プロジェクト名
	Project *SAPCodeItem `protobuf:"bytes,31,opt,name=project,proto3" json:"project,omitempty"`
	// 得意先コード / 得意先名
	Customer *SAPCodeItem `protobuf:"bytes,32,opt,name=customer,proto3" json:"customer,omitempty"`
	// 注文番号
	OrderCode string `protobuf:"bytes,33,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	// 品種(利益センタ) / 品目コード / 品目名称
	Material *SAPTypeCodeItem `protobuf:"bytes,34,opt,name=material,proto3" json:"material,omitempty"`
	// 支給会社情報
	SuppliesCompany *SAPCodeItem `protobuf:"bytes,35,opt,name=supplies_company,json=suppliesCompany,proto3" json:"supplies_company,omitempty"`
	// 関連会社
	AssociatedCompany *SAPAssociatedCompany `protobuf:"bytes,36,opt,name=associated_company,json=associatedCompany,proto3" json:"associated_company,omitempty"`
	// 添付資料有り
	Attachment bool `protobuf:"varint,37,opt,name=attachment,proto3" json:"attachment,omitempty"`
	// 生技図面
	BlueprintContent string `protobuf:"bytes,38,opt,name=blueprint_content,json=blueprintContent,proto3" json:"blueprint_content,omitempty"`
	// フリー
	FreeItem string `protobuf:"bytes,39,opt,name=free_item,json=freeItem,proto3" json:"free_item,omitempty"`
	// 受付時フリー
	ReceivedFreeItem string `protobuf:"bytes,40,opt,name=received_free_item,json=receivedFreeItem,proto3" json:"received_free_item,omitempty"`
	// 資産コード①
	AssetCode1 string `protobuf:"bytes,41,opt,name=asset_code1,json=assetCode1,proto3" json:"asset_code1,omitempty"`
	// 資産コード②
	AssetCode2 string `protobuf:"bytes,42,opt,name=asset_code2,json=assetCode2,proto3" json:"asset_code2,omitempty"`
	// 資産コード③
	AssetCode3 string `protobuf:"bytes,43,opt,name=asset_code3,json=assetCode3,proto3" json:"asset_code3,omitempty"`
	// 資産コード④
	AssetCode4 string `protobuf:"bytes,44,opt,name=asset_code4,json=assetCode4,proto3" json:"asset_code4,omitempty"`
	// 資産コード⑤
	AssetCode5 string `protobuf:"bytes,45,opt,name=asset_code5,json=assetCode5,proto3" json:"asset_code5,omitempty"`
	// 資産コード⑥
	AssetCode6 string `protobuf:"bytes,46,opt,name=asset_code6,json=assetCode6,proto3" json:"asset_code6,omitempty"`
	// 資産コード⑦
	AssetCode7 string `protobuf:"bytes,47,opt,name=asset_code7,json=assetCode7,proto3" json:"asset_code7,omitempty"`
	// 資産コード⑧
	AssetCode8 string `protobuf:"bytes,48,opt,name=asset_code8,json=assetCode8,proto3" json:"asset_code8,omitempty"`
	// 資産コード⑨
	AssetCode9 string `protobuf:"bytes,49,opt,name=asset_code9,json=assetCode9,proto3" json:"asset_code9,omitempty"`
	// 資産コード⑩
	AssetCode10 string `protobuf:"bytes,50,opt,name=asset_code10,json=assetCode10,proto3" json:"asset_code10,omitempty"`
	// 投資委員会決済NO
	SettlementCode string `protobuf:"bytes,51,opt,name=settlement_code,json=settlementCode,proto3" json:"settlement_code,omitempty"`
	// 発注依頼書年月日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	PurchaseOrderDate string `protobuf:"bytes,52,opt,name=purchase_order_date,json=purchaseOrderDate,proto3" json:"purchase_order_date,omitempty"`
	// 決裁年月日
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	ApprovalDate string `protobuf:"bytes,53,opt,name=approval_date,json=approvalDate,proto3" json:"approval_date,omitempty"`
	// 稟申台数
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	ApprovalQuantity string `protobuf:"bytes,54,opt,name=approval_quantity,json=approvalQuantity,proto3" json:"approval_quantity,omitempty"`
	// 稟申金額
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	ApprovalAmount string `protobuf:"bytes,55,opt,name=approval_amount,json=approvalAmount,proto3" json:"approval_amount,omitempty"`
	// 着工予定年月
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	StartDate string `protobuf:"bytes,56,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// コスト分類１
	CostCategory1 string `protobuf:"bytes,57,opt,name=cost_category1,json=costCategory1,proto3" json:"cost_category1,omitempty"`
	// 環境投資金額１
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	EnvironmentInvestmentAmount1 string `protobuf:"bytes,58,opt,name=environment_investment_amount1,json=environmentInvestmentAmount1,proto3" json:"environment_investment_amount1,omitempty"`
	// 環境効果金額１
	//
	// Implementation Note:
	//
	//	メモ項目のため、入力値をそのまま格納する
	EnvironmentReturnAmount1 string `protobuf:"bytes,59,opt,name=environment_return_amount1,json=environmentReturnAmount1,proto3" json:"environment_return_amount1,omitempty"`
}

func (x *EstimateRequestPlan_SAPWorkOrder) Reset() {
	*x = EstimateRequestPlan_SAPWorkOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimaterequestplan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRequestPlan_SAPWorkOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRequestPlan_SAPWorkOrder) ProtoMessage() {}

func (x *EstimateRequestPlan_SAPWorkOrder) ProtoReflect() protoreflect.Message {
	mi := &file_estimaterequestplan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRequestPlan_SAPWorkOrder.ProtoReflect.Descriptor instead.
func (*EstimateRequestPlan_SAPWorkOrder) Descriptor() ([]byte, []int) {
	return file_estimaterequestplan_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetTrackingCode() string {
	if x != nil {
		return x.TrackingCode
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetCostCenter() *CostCenter {
	if x != nil {
		return x.CostCenter
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetCompany() *SAPCodeItem {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetReceiverProperties() *SAPReceiverProperties {
	if x != nil {
		return x.ReceiverProperties
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetRequesterProperties() *RequesterProperties {
	if x != nil {
		return x.RequesterProperties
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetWorkCategory() *SAPCodeItem {
	if x != nil {
		return x.WorkCategory
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetWorkUsage() *SAPCodeItem {
	if x != nil {
		return x.WorkUsage
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetPlace() *SAPCodeItem {
	if x != nil {
		return x.Place
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetBudget() string {
	if x != nil {
		return x.Budget
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetSettlementAccount() *SAPCodeItem {
	if x != nil {
		return x.SettlementAccount
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetWorkCompletePlanDate() string {
	if x != nil {
		return x.WorkCompletePlanDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetWorkCompletedDate() string {
	if x != nil {
		return x.WorkCompletedDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetWorkStopedDate() string {
	if x != nil {
		return x.WorkStopedDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetWorkDeletedDate() string {
	if x != nil {
		return x.WorkDeletedDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetMonthlyProperties() *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties {
	if x != nil {
		return x.MonthlyProperties
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAccumulatedProperties() *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties {
	if x != nil {
		return x.AccumulatedProperties
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetActualUnitPrice() string {
	if x != nil {
		return x.ActualUnitPrice
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetDesignCostRatio() string {
	if x != nil {
		return x.DesignCostRatio
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetQuantity() *SAPUnitAmount {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetSellingPrice() string {
	if x != nil {
		return x.SellingPrice
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetSalesTaxCode() string {
	if x != nil {
		return x.SalesTaxCode
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetRequestDate() string {
	if x != nil {
		return x.RequestDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetApprovedDate() string {
	if x != nil {
		return x.ApprovedDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetDesiredReciveDt() *protobuf.Datetime {
	if x != nil {
		return x.DesiredReciveDt
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetReceivedCode() string {
	if x != nil {
		return x.ReceivedCode
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetRequestedCode() string {
	if x != nil {
		return x.RequestedCode
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetProject() *SAPCodeItem {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetCustomer() *SAPCodeItem {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetOrderCode() string {
	if x != nil {
		return x.OrderCode
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetMaterial() *SAPTypeCodeItem {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetSuppliesCompany() *SAPCodeItem {
	if x != nil {
		return x.SuppliesCompany
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssociatedCompany() *SAPAssociatedCompany {
	if x != nil {
		return x.AssociatedCompany
	}
	return nil
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAttachment() bool {
	if x != nil {
		return x.Attachment
	}
	return false
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetBlueprintContent() string {
	if x != nil {
		return x.BlueprintContent
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetFreeItem() string {
	if x != nil {
		return x.FreeItem
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetReceivedFreeItem() string {
	if x != nil {
		return x.ReceivedFreeItem
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode1() string {
	if x != nil {
		return x.AssetCode1
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode2() string {
	if x != nil {
		return x.AssetCode2
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode3() string {
	if x != nil {
		return x.AssetCode3
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode4() string {
	if x != nil {
		return x.AssetCode4
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode5() string {
	if x != nil {
		return x.AssetCode5
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode6() string {
	if x != nil {
		return x.AssetCode6
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode7() string {
	if x != nil {
		return x.AssetCode7
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode8() string {
	if x != nil {
		return x.AssetCode8
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode9() string {
	if x != nil {
		return x.AssetCode9
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetAssetCode10() string {
	if x != nil {
		return x.AssetCode10
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetSettlementCode() string {
	if x != nil {
		return x.SettlementCode
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetPurchaseOrderDate() string {
	if x != nil {
		return x.PurchaseOrderDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetApprovalDate() string {
	if x != nil {
		return x.ApprovalDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetApprovalQuantity() string {
	if x != nil {
		return x.ApprovalQuantity
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetApprovalAmount() string {
	if x != nil {
		return x.ApprovalAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetCostCategory1() string {
	if x != nil {
		return x.CostCategory1
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetEnvironmentInvestmentAmount1() string {
	if x != nil {
		return x.EnvironmentInvestmentAmount1
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder) GetEnvironmentReturnAmount1() string {
	if x != nil {
		return x.EnvironmentReturnAmount1
	}
	return ""
}

// Implementation Note:
//
//	メモ項目のため、入力値をそのまま格納する
type EstimateRequestPlan_SAPWorkOrder_MonthlyProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 単月：作業時間
	WorkTime string `protobuf:"bytes,1,opt,name=work_time,json=workTime,proto3" json:"work_time,omitempty"`
	// 単月：(内)設計時間
	DesignTime string `protobuf:"bytes,2,opt,name=design_time,json=designTime,proto3" json:"design_time,omitempty"`
	// 単月：受付賦課基準
	ReceivedAssessmentAmount string `protobuf:"bytes,3,opt,name=received_assessment_amount,json=receivedAssessmentAmount,proto3" json:"received_assessment_amount,omitempty"`
	// 単月：購買賦課基準
	PurchaseAssessmentAmount string `protobuf:"bytes,4,opt,name=purchase_assessment_amount,json=purchaseAssessmentAmount,proto3" json:"purchase_assessment_amount,omitempty"`
	// 単月：作業金額
	WorkCost string `protobuf:"bytes,5,opt,name=work_cost,json=workCost,proto3" json:"work_cost,omitempty"`
	// 単月：(内)設計金額
	DesignCost string `protobuf:"bytes,6,opt,name=design_cost,json=designCost,proto3" json:"design_cost,omitempty"`
	// 単月：受付金額
	ReceivedAmount string `protobuf:"bytes,7,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"`
	// 単月：発注金額
	OrderAmount string `protobuf:"bytes,8,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	// 単月：直出金額
	DirectDeliveryAmount string `protobuf:"bytes,9,opt,name=direct_delivery_amount,json=directDeliveryAmount,proto3" json:"direct_delivery_amount,omitempty"`
	// 単月：倉出金額
	DeliveryAmount string `protobuf:"bytes,10,opt,name=delivery_amount,json=deliveryAmount,proto3" json:"delivery_amount,omitempty"`
	// 単月：振替金額
	ReclassifyAmount string `protobuf:"bytes,11,opt,name=reclassify_amount,json=reclassifyAmount,proto3" json:"reclassify_amount,omitempty"`
	// 単月：合計金額
	TotalAmount string `protobuf:"bytes,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) Reset() {
	*x = EstimateRequestPlan_SAPWorkOrder_MonthlyProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimaterequestplan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) ProtoMessage() {}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) ProtoReflect() protoreflect.Message {
	mi := &file_estimaterequestplan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRequestPlan_SAPWorkOrder_MonthlyProperties.ProtoReflect.Descriptor instead.
func (*EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) Descriptor() ([]byte, []int) {
	return file_estimaterequestplan_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetWorkTime() string {
	if x != nil {
		return x.WorkTime
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetDesignTime() string {
	if x != nil {
		return x.DesignTime
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetReceivedAssessmentAmount() string {
	if x != nil {
		return x.ReceivedAssessmentAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetPurchaseAssessmentAmount() string {
	if x != nil {
		return x.PurchaseAssessmentAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetWorkCost() string {
	if x != nil {
		return x.WorkCost
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetDesignCost() string {
	if x != nil {
		return x.DesignCost
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetReceivedAmount() string {
	if x != nil {
		return x.ReceivedAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetOrderAmount() string {
	if x != nil {
		return x.OrderAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetDirectDeliveryAmount() string {
	if x != nil {
		return x.DirectDeliveryAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetDeliveryAmount() string {
	if x != nil {
		return x.DeliveryAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetReclassifyAmount() string {
	if x != nil {
		return x.ReclassifyAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

// Implementation Note:
//
//	メモ項目のため、入力値をそのまま格納する
type EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 累計：作業時間
	WorkTime string `protobuf:"bytes,1,opt,name=work_time,json=workTime,proto3" json:"work_time,omitempty"`
	// 累計：(内)設計時間
	DesignTime string `protobuf:"bytes,2,opt,name=design_time,json=designTime,proto3" json:"design_time,omitempty"`
	// 累計：受付枚数
	ReceivedDocumentAmount string `protobuf:"bytes,3,opt,name=received_document_amount,json=receivedDocumentAmount,proto3" json:"received_document_amount,omitempty"`
	// 累計：発注枚数
	OrderDocumentAmount string `protobuf:"bytes,4,opt,name=order_document_amount,json=orderDocumentAmount,proto3" json:"order_document_amount,omitempty"`
	// 累計：作業金額
	WorkCost string `protobuf:"bytes,5,opt,name=work_cost,json=workCost,proto3" json:"work_cost,omitempty"`
	// 累計：(内)設計金額
	DesignCost string `protobuf:"bytes,6,opt,name=design_cost,json=designCost,proto3" json:"design_cost,omitempty"`
	// 累計：受付金額
	ReceivedAmount string `protobuf:"bytes,7,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"`
	// 累計：発注金額
	OrderAmount string `protobuf:"bytes,8,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`
	// 累計：直出金額
	DirectDeliveryAmount string `protobuf:"bytes,9,opt,name=direct_delivery_amount,json=directDeliveryAmount,proto3" json:"direct_delivery_amount,omitempty"`
	// 累計：倉出金額
	DeliveryAmount string `protobuf:"bytes,10,opt,name=delivery_amount,json=deliveryAmount,proto3" json:"delivery_amount,omitempty"`
	// 累計：振替金額
	ReclassifyAmount string `protobuf:"bytes,11,opt,name=reclassify_amount,json=reclassifyAmount,proto3" json:"reclassify_amount,omitempty"`
	// 累計：合計金額
	TotalAmount string `protobuf:"bytes,12,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) Reset() {
	*x = EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimaterequestplan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) ProtoMessage() {}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) ProtoReflect() protoreflect.Message {
	mi := &file_estimaterequestplan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties.ProtoReflect.Descriptor instead.
func (*EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) Descriptor() ([]byte, []int) {
	return file_estimaterequestplan_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetWorkTime() string {
	if x != nil {
		return x.WorkTime
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetDesignTime() string {
	if x != nil {
		return x.DesignTime
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetReceivedDocumentAmount() string {
	if x != nil {
		return x.ReceivedDocumentAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetOrderDocumentAmount() string {
	if x != nil {
		return x.OrderDocumentAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetWorkCost() string {
	if x != nil {
		return x.WorkCost
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetDesignCost() string {
	if x != nil {
		return x.DesignCost
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetReceivedAmount() string {
	if x != nil {
		return x.ReceivedAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetOrderAmount() string {
	if x != nil {
		return x.OrderAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetDirectDeliveryAmount() string {
	if x != nil {
		return x.DirectDeliveryAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetDeliveryAmount() string {
	if x != nil {
		return x.DeliveryAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetReclassifyAmount() string {
	if x != nil {
		return x.ReclassifyAmount
	}
	return ""
}

func (x *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

var File_estimaterequestplan_proto protoreflect.FileDescriptor

var file_estimaterequestplan_proto_rawDesc = []byte{
	0x0a, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x25, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x37, 0x0a,
	0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x0e, 0x73, 0x61, 0x70, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x57, 0x6f,
	0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x70, 0x57, 0x6f,
	0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbd, 0x1f, 0x0a, 0x0c, 0x53,
	0x41, 0x50, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x73, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x60, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x41, 0x50, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x41,
	0x50, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x41, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x11, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a,
	0x12, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x57, 0x6f, 0x72, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x57, 0x6f,
	0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x15, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x43, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x76,
	0x65, 0x44, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x41,
	0x50, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x41, 0x50, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x10, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x41, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x5d, 0x0a, 0x12, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x41, 0x50, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x11, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6c,
	0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6c, 0x75, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x72, 0x65, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x35, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x36, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x36, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x37, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x37, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x38, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x38, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x39, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x39, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x31, 0x30, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x31, 0x30, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x12, 0x44, 0x0a, 0x1e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x3c,
	0x0a, 0x1a, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x1a, 0x86, 0x04, 0x0a,
	0x11, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x1a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xfc, 0x03, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x42, 0x11, 0x0a, 0x0f, 0x6c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x1f, 0x5a,
	0x1d, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_estimaterequestplan_proto_rawDescOnce sync.Once
	file_estimaterequestplan_proto_rawDescData = file_estimaterequestplan_proto_rawDesc
)

func file_estimaterequestplan_proto_rawDescGZIP() []byte {
	file_estimaterequestplan_proto_rawDescOnce.Do(func() {
		file_estimaterequestplan_proto_rawDescData = protoimpl.X.CompressGZIP(file_estimaterequestplan_proto_rawDescData)
	})
	return file_estimaterequestplan_proto_rawDescData
}

var file_estimaterequestplan_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_estimaterequestplan_proto_goTypes = []interface{}{
	(*EstimateRequestPlan)(nil),              // 0: mtechnavi.api.estimation.EstimateRequestPlan
	nil,                                      // 1: mtechnavi.api.estimation.EstimateRequestPlan.DisplayNameLangEntry
	(*EstimateRequestPlan_SAPWorkOrder)(nil), // 2: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder
	(*EstimateRequestPlan_SAPWorkOrder_MonthlyProperties)(nil),     // 3: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.MonthlyProperties
	(*EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties)(nil), // 4: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.AccumulatedProperties
	(*EstimateRequestPlanStatus)(nil),                              // 5: mtechnavi.api.estimation.EstimateRequestPlanStatus
	(*Issuer)(nil),                                                 // 6: mtechnavi.api.estimation.Issuer
	(*CostCenter)(nil),                                             // 7: mtechnavi.api.estimation.CostCenter
	(*SAPCodeItem)(nil),                                            // 8: mtechnavi.api.estimation.SAPCodeItem
	(*SAPReceiverProperties)(nil),                                  // 9: mtechnavi.api.estimation.SAPReceiverProperties
	(*RequesterProperties)(nil),                                    // 10: mtechnavi.api.estimation.RequesterProperties
	(*SAPUnitAmount)(nil),                                          // 11: mtechnavi.api.estimation.SAPUnitAmount
	(*protobuf.Datetime)(nil),                                      // 12: sharelib.Datetime
	(*SAPTypeCodeItem)(nil),                                        // 13: mtechnavi.api.estimation.SAPTypeCodeItem
	(*SAPAssociatedCompany)(nil),                                   // 14: mtechnavi.api.estimation.SAPAssociatedCompany
}
var file_estimaterequestplan_proto_depIdxs = []int32{
	5,  // 0: mtechnavi.api.estimation.EstimateRequestPlan.status:type_name -> mtechnavi.api.estimation.EstimateRequestPlanStatus
	1,  // 1: mtechnavi.api.estimation.EstimateRequestPlan.display_name_lang:type_name -> mtechnavi.api.estimation.EstimateRequestPlan.DisplayNameLangEntry
	2,  // 2: mtechnavi.api.estimation.EstimateRequestPlan.sap_work_order:type_name -> mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder
	6,  // 3: mtechnavi.api.estimation.EstimateRequestPlan.issuer:type_name -> mtechnavi.api.estimation.Issuer
	7,  // 4: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.cost_center:type_name -> mtechnavi.api.estimation.CostCenter
	8,  // 5: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.company:type_name -> mtechnavi.api.estimation.SAPCodeItem
	9,  // 6: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.receiver_properties:type_name -> mtechnavi.api.estimation.SAPReceiverProperties
	10, // 7: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.requester_properties:type_name -> mtechnavi.api.estimation.RequesterProperties
	8,  // 8: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.work_category:type_name -> mtechnavi.api.estimation.SAPCodeItem
	8,  // 9: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.work_usage:type_name -> mtechnavi.api.estimation.SAPCodeItem
	8,  // 10: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.place:type_name -> mtechnavi.api.estimation.SAPCodeItem
	8,  // 11: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.settlement_account:type_name -> mtechnavi.api.estimation.SAPCodeItem
	3,  // 12: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.monthly_properties:type_name -> mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.MonthlyProperties
	4,  // 13: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.accumulated_properties:type_name -> mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.AccumulatedProperties
	11, // 14: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.quantity:type_name -> mtechnavi.api.estimation.SAPUnitAmount
	12, // 15: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.desired_recive_dt:type_name -> sharelib.Datetime
	8,  // 16: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.project:type_name -> mtechnavi.api.estimation.SAPCodeItem
	8,  // 17: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.customer:type_name -> mtechnavi.api.estimation.SAPCodeItem
	13, // 18: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.material:type_name -> mtechnavi.api.estimation.SAPTypeCodeItem
	8,  // 19: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.supplies_company:type_name -> mtechnavi.api.estimation.SAPCodeItem
	14, // 20: mtechnavi.api.estimation.EstimateRequestPlan.SAPWorkOrder.associated_company:type_name -> mtechnavi.api.estimation.SAPAssociatedCompany
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_estimaterequestplan_proto_init() }
func file_estimaterequestplan_proto_init() {
	if File_estimaterequestplan_proto != nil {
		return
	}
	file_estimatebasictypes_proto_init()
	file_estimatestatus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_estimaterequestplan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRequestPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_estimaterequestplan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRequestPlan_SAPWorkOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_estimaterequestplan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRequestPlan_SAPWorkOrder_MonthlyProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_estimaterequestplan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_estimaterequestplan_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EstimateRequestPlan_SapWorkOrder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_estimaterequestplan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_estimaterequestplan_proto_goTypes,
		DependencyIndexes: file_estimaterequestplan_proto_depIdxs,
		MessageInfos:      file_estimaterequestplan_proto_msgTypes,
	}.Build()
	File_estimaterequestplan_proto = out.File
	file_estimaterequestplan_proto_rawDesc = nil
	file_estimaterequestplan_proto_goTypes = nil
	file_estimaterequestplan_proto_depIdxs = nil
}
