// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: estimateselection.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// オーナー：発注企業
// 見積選考（公開）
type EstimateSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimateSelectionId string `protobuf:"bytes,1,opt,name=estimate_selection_id,json=estimateSelectionId,proto3" json:"estimate_selection_id,omitempty"`
	// outputonly 見積ステータス （発注側）
	// 旧名：見積結果ステータス
	Status *EstimateSelectionStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 選考結果
	// 名称マスタにおける種別 A0000029 (選考結果) を参照
	SelectionResult *protobuf.NameOption `protobuf:"bytes,3,opt,name=selection_result,json=selectionResult,proto3" json:"selection_result,omitempty"`
	// readonly 採用
	//
	// Implementation Note::
	//
	//	selection_result.system_name = "1" (採用) の場合 true
	Adoption bool `protobuf:"varint,4,opt,name=adoption,proto3" json:"adoption,omitempty"`
	// 選考理由
	SelectionFeedback *EstimateSelection_SelectionFeedback `protobuf:"bytes,5,opt,name=selection_feedback,json=selectionFeedback,proto3" json:"selection_feedback,omitempty"`
	// reaadonly 回答日
	// 見積選考が公開された日付
	ReplyedAt int64 `protobuf:"varint,19,opt,name=replyed_at,json=replyedAt,proto3" json:"replyed_at,omitempty"`
	// readonly 登録者情報
	//
	// Implementation Note::
	//
	//	更新処理を実施したユーザーのアカウント情報をもとに更新する
	Issuer *Issuer `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// outputonly 発注出力
	// EstimateSelectionExportLogが１つでもある場合 true
	OrderExported bool `protobuf:"varint,7,opt,name=order_exported,json=orderExported,proto3" json:"order_exported,omitempty"`
	// outputonly 発注日時
	// EstimateSelectionExportLog.exported_atの最新のもの
	OrderExportedAt int64 `protobuf:"varint,8,opt,name=order_exported_at,json=orderExportedAt,proto3" json:"order_exported_at,omitempty"`
	// 見積結果
	EstimateResultId string `protobuf:"bytes,9,opt,name=estimate_result_id,json=estimateResultId,proto3" json:"estimate_result_id,omitempty"`
	// readonly 公開依頼
	ApprovalRequestProperties *ApprovalRequestProperties `protobuf:"bytes,10,opt,name=approval_request_properties,json=approvalRequestProperties,proto3" json:"approval_request_properties,omitempty"`
	// readonly 承認
	ApprovalProperties *ApprovalProperties `protobuf:"bytes,11,opt,name=approval_properties,json=approvalProperties,proto3" json:"approval_properties,omitempty"`
	// outputonly 完了
	Completed bool `protobuf:"varint,12,opt,name=completed,proto3" json:"completed,omitempty"`
	// readonly タグ（テナント単位で共有）
	Tags []string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,14,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	// outputonly 確定
	Locked bool `protobuf:"varint,15,opt,name=locked,proto3" json:"locked,omitempty"`
	// readonly 受付日時
	// create時のtimestamp
	ReceivedAt int64 `protobuf:"varint,20,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	// readonly 選考日時
	// update時のtimestamp
	SelectedAt int64 `protobuf:"varint,21,opt,name=selected_at,json=selectedAt,proto3" json:"selected_at,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,16,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,18,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *EstimateSelection) Reset() {
	*x = EstimateSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimateselection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSelection) ProtoMessage() {}

func (x *EstimateSelection) ProtoReflect() protoreflect.Message {
	mi := &file_estimateselection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSelection.ProtoReflect.Descriptor instead.
func (*EstimateSelection) Descriptor() ([]byte, []int) {
	return file_estimateselection_proto_rawDescGZIP(), []int{0}
}

func (x *EstimateSelection) GetEstimateSelectionId() string {
	if x != nil {
		return x.EstimateSelectionId
	}
	return ""
}

func (x *EstimateSelection) GetStatus() *EstimateSelectionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *EstimateSelection) GetSelectionResult() *protobuf.NameOption {
	if x != nil {
		return x.SelectionResult
	}
	return nil
}

func (x *EstimateSelection) GetAdoption() bool {
	if x != nil {
		return x.Adoption
	}
	return false
}

func (x *EstimateSelection) GetSelectionFeedback() *EstimateSelection_SelectionFeedback {
	if x != nil {
		return x.SelectionFeedback
	}
	return nil
}

func (x *EstimateSelection) GetReplyedAt() int64 {
	if x != nil {
		return x.ReplyedAt
	}
	return 0
}

func (x *EstimateSelection) GetIssuer() *Issuer {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *EstimateSelection) GetOrderExported() bool {
	if x != nil {
		return x.OrderExported
	}
	return false
}

func (x *EstimateSelection) GetOrderExportedAt() int64 {
	if x != nil {
		return x.OrderExportedAt
	}
	return 0
}

func (x *EstimateSelection) GetEstimateResultId() string {
	if x != nil {
		return x.EstimateResultId
	}
	return ""
}

func (x *EstimateSelection) GetApprovalRequestProperties() *ApprovalRequestProperties {
	if x != nil {
		return x.ApprovalRequestProperties
	}
	return nil
}

func (x *EstimateSelection) GetApprovalProperties() *ApprovalProperties {
	if x != nil {
		return x.ApprovalProperties
	}
	return nil
}

func (x *EstimateSelection) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *EstimateSelection) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *EstimateSelection) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *EstimateSelection) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *EstimateSelection) GetReceivedAt() int64 {
	if x != nil {
		return x.ReceivedAt
	}
	return 0
}

func (x *EstimateSelection) GetSelectedAt() int64 {
	if x != nil {
		return x.SelectedAt
	}
	return 0
}

func (x *EstimateSelection) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *EstimateSelection) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EstimateSelection) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 発注出力用
type EstimateSelectionExportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimateSelectionExportLogId string `protobuf:"bytes,1,opt,name=estimate_selection_export_log_id,json=estimateSelectionExportLogId,proto3" json:"estimate_selection_export_log_id,omitempty"`
	// 見積選考
	EstimateSelectionId string `protobuf:"bytes,2,opt,name=estimate_selection_id,json=estimateSelectionId,proto3" json:"estimate_selection_id,omitempty"`
	// 出力日時
	ExportedAt int64 `protobuf:"varint,3,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
	// 共有項目xxx_atのscopeはidと同様
	DeletedAt int64 `protobuf:"varint,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64 `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *EstimateSelectionExportLog) Reset() {
	*x = EstimateSelectionExportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimateselection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateSelectionExportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSelectionExportLog) ProtoMessage() {}

func (x *EstimateSelectionExportLog) ProtoReflect() protoreflect.Message {
	mi := &file_estimateselection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSelectionExportLog.ProtoReflect.Descriptor instead.
func (*EstimateSelectionExportLog) Descriptor() ([]byte, []int) {
	return file_estimateselection_proto_rawDescGZIP(), []int{1}
}

func (x *EstimateSelectionExportLog) GetEstimateSelectionExportLogId() string {
	if x != nil {
		return x.EstimateSelectionExportLogId
	}
	return ""
}

func (x *EstimateSelectionExportLog) GetEstimateSelectionId() string {
	if x != nil {
		return x.EstimateSelectionId
	}
	return ""
}

func (x *EstimateSelectionExportLog) GetExportedAt() int64 {
	if x != nil {
		return x.ExportedAt
	}
	return 0
}

func (x *EstimateSelectionExportLog) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *EstimateSelectionExportLog) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EstimateSelectionExportLog) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type EstimateSelection_SelectionFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 選考種別
	// 名称マスタにおける種別 A0000030 (選考種別) を参照
	Category *protobuf.NameOption `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// 選考理由
	// 名称マスタにおける種別 A0000031 (選考理由) を参照
	Reason *protobuf.NameOption `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// 選考理由テキスト
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EstimateSelection_SelectionFeedback) Reset() {
	*x = EstimateSelection_SelectionFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_estimateselection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateSelection_SelectionFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSelection_SelectionFeedback) ProtoMessage() {}

func (x *EstimateSelection_SelectionFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_estimateselection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSelection_SelectionFeedback.ProtoReflect.Descriptor instead.
func (*EstimateSelection_SelectionFeedback) Descriptor() ([]byte, []int) {
	return file_estimateselection_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EstimateSelection_SelectionFeedback) GetCategory() *protobuf.NameOption {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *EstimateSelection_SelectionFeedback) GetReason() *protobuf.NameOption {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *EstimateSelection_SelectionFeedback) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_estimateselection_proto protoreflect.FileDescriptor

var file_estimateselection_proto_rawDesc = []byte{
	0x0a, 0x17, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d, 0x74, 0x6e, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61, 0x6d, 0x65,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x62, 0x61, 0x73, 0x69, 0x63, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x0a, 0x0a,
	0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x61, 0x64,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x4e, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0xd2, 0xb8, 0x02, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x10,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x73, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x19, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0xa5,
	0x01, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x1a, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x46, 0x0a, 0x20, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xd2, 0xb8,
	0x02, 0x19, 0x0a, 0x17, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x52, 0x13, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x1f,
	0x5a, 0x1d, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_estimateselection_proto_rawDescOnce sync.Once
	file_estimateselection_proto_rawDescData = file_estimateselection_proto_rawDesc
)

func file_estimateselection_proto_rawDescGZIP() []byte {
	file_estimateselection_proto_rawDescOnce.Do(func() {
		file_estimateselection_proto_rawDescData = protoimpl.X.CompressGZIP(file_estimateselection_proto_rawDescData)
	})
	return file_estimateselection_proto_rawDescData
}

var file_estimateselection_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_estimateselection_proto_goTypes = []interface{}{
	(*EstimateSelection)(nil),                   // 0: mtechnavi.api.estimation.EstimateSelection
	(*EstimateSelectionExportLog)(nil),          // 1: mtechnavi.api.estimation.EstimateSelectionExportLog
	(*EstimateSelection_SelectionFeedback)(nil), // 2: mtechnavi.api.estimation.EstimateSelection.SelectionFeedback
	(*EstimateSelectionStatus)(nil),             // 3: mtechnavi.api.estimation.EstimateSelectionStatus
	(*protobuf.NameOption)(nil),                 // 4: sharelib.NameOption
	(*Issuer)(nil),                              // 5: mtechnavi.api.estimation.Issuer
	(*ApprovalRequestProperties)(nil),           // 6: mtechnavi.api.estimation.ApprovalRequestProperties
	(*ApprovalProperties)(nil),                  // 7: mtechnavi.api.estimation.ApprovalProperties
	(*protobuf.EmbeddedSharedProperties)(nil),   // 8: sharelib.EmbeddedSharedProperties
}
var file_estimateselection_proto_depIdxs = []int32{
	3, // 0: mtechnavi.api.estimation.EstimateSelection.status:type_name -> mtechnavi.api.estimation.EstimateSelectionStatus
	4, // 1: mtechnavi.api.estimation.EstimateSelection.selection_result:type_name -> sharelib.NameOption
	2, // 2: mtechnavi.api.estimation.EstimateSelection.selection_feedback:type_name -> mtechnavi.api.estimation.EstimateSelection.SelectionFeedback
	5, // 3: mtechnavi.api.estimation.EstimateSelection.issuer:type_name -> mtechnavi.api.estimation.Issuer
	6, // 4: mtechnavi.api.estimation.EstimateSelection.approval_request_properties:type_name -> mtechnavi.api.estimation.ApprovalRequestProperties
	7, // 5: mtechnavi.api.estimation.EstimateSelection.approval_properties:type_name -> mtechnavi.api.estimation.ApprovalProperties
	8, // 6: mtechnavi.api.estimation.EstimateSelection.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	4, // 7: mtechnavi.api.estimation.EstimateSelection.SelectionFeedback.category:type_name -> sharelib.NameOption
	4, // 8: mtechnavi.api.estimation.EstimateSelection.SelectionFeedback.reason:type_name -> sharelib.NameOption
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_estimateselection_proto_init() }
func file_estimateselection_proto_init() {
	if File_estimateselection_proto != nil {
		return
	}
	file_estimatebasictypes_proto_init()
	file_estimatestatus_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_estimateselection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_estimateselection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateSelectionExportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_estimateselection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateSelection_SelectionFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_estimateselection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_estimateselection_proto_goTypes,
		DependencyIndexes: file_estimateselection_proto_depIdxs,
		MessageInfos:      file_estimateselection_proto_msgTypes,
	}.Build()
	File_estimateselection_proto = out.File
	file_estimateselection_proto_rawDesc = nil
	file_estimateselection_proto_goTypes = nil
	file_estimateselection_proto_depIdxs = nil
}
