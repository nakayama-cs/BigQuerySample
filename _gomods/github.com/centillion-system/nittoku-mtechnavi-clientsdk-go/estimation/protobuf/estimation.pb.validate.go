// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimation.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on
// EstimateRequestAndEstimateResultAndEstimateSelection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestAndEstimateResultAndEstimateSelection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequestAndEstimateResultAndEstimateSelection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// EstimateRequestAndEstimateResultAndEstimateSelectionMultiError, or nil if
// none found.
func (m *EstimateRequestAndEstimateResultAndEstimateSelection) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestAndEstimateResultAndEstimateSelection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimateResultStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateResultStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
					field:  "EstimateResultStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResultStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{
				field:  "EstimateResultStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateRequestAndEstimateResultAndEstimateSelectionMultiError(errors)
	}

	return nil
}

// EstimateRequestAndEstimateResultAndEstimateSelectionMultiError is an error
// wrapping multiple validation errors returned by
// EstimateRequestAndEstimateResultAndEstimateSelection.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequestAndEstimateResultAndEstimateSelectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestAndEstimateResultAndEstimateSelectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestAndEstimateResultAndEstimateSelectionMultiError) AllErrors() []error { return m }

// EstimateRequestAndEstimateResultAndEstimateSelectionValidationError is the
// validation error returned by
// EstimateRequestAndEstimateResultAndEstimateSelection.Validate if the
// designated constraints aren't met.
type EstimateRequestAndEstimateResultAndEstimateSelectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestAndEstimateResultAndEstimateSelectionValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e EstimateRequestAndEstimateResultAndEstimateSelectionValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateRequestAndEstimateResultAndEstimateSelectionValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e EstimateRequestAndEstimateResultAndEstimateSelectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestAndEstimateResultAndEstimateSelectionValidationError) ErrorName() string {
	return "EstimateRequestAndEstimateResultAndEstimateSelectionValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestAndEstimateResultAndEstimateSelectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestAndEstimateResultAndEstimateSelection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestAndEstimateResultAndEstimateSelectionValidationError{}

// Validate checks the field values on CreateEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *CreateEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// CreateEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// CreateEstimateRequestPlanRequestValidationError is the validation error
// returned by CreateEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type CreateEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "CreateEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on ListEstimateRequestPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateRequestPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateRequestPlansRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEstimateRequestPlansRequestMultiError, or nil if none found.
func (m *ListEstimateRequestPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatusFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEstimateRequestPlansRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEstimateRequestPlansRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEstimateRequestPlansRequestValidationError{
				field:  "StatusFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEstimateRequestPlansRequestMultiError(errors)
	}

	return nil
}

// ListEstimateRequestPlansRequestMultiError is an error wrapping multiple
// validation errors returned by ListEstimateRequestPlansRequest.ValidateAll()
// if the designated constraints aren't met.
type ListEstimateRequestPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestPlansRequestMultiError) AllErrors() []error { return m }

// ListEstimateRequestPlansRequestValidationError is the validation error
// returned by ListEstimateRequestPlansRequest.Validate if the designated
// constraints aren't met.
type ListEstimateRequestPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateRequestPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateRequestPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateRequestPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateRequestPlansRequestValidationError) ErrorName() string {
	return "ListEstimateRequestPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestPlansRequestValidationError{}

// Validate checks the field values on ListEstimateRequestPlansResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEstimateRequestPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateRequestPlansResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEstimateRequestPlansResponseMultiError, or nil if none found.
func (m *ListEstimateRequestPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateRequestPlansResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateRequestPlansResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateRequestPlansResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateRequestPlansResponseMultiError(errors)
	}

	return nil
}

// ListEstimateRequestPlansResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListEstimateRequestPlansResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEstimateRequestPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestPlansResponseMultiError) AllErrors() []error { return m }

// ListEstimateRequestPlansResponseValidationError is the validation error
// returned by ListEstimateRequestPlansResponse.Validate if the designated
// constraints aren't met.
type ListEstimateRequestPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateRequestPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateRequestPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateRequestPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateRequestPlansResponseValidationError) ErrorName() string {
	return "ListEstimateRequestPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestPlansResponseValidationError{}

// Validate checks the field values on GetEstimateRequestPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *GetEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateRequestPlanId

	if len(errors) > 0 {
		return GetEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// GetEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by GetEstimateRequestPlanRequest.ValidateAll()
// if the designated constraints aren't met.
type GetEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// GetEstimateRequestPlanRequestValidationError is the validation error
// returned by GetEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type GetEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "GetEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on UpdateEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *UpdateEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// UpdateEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// UpdateEstimateRequestPlanRequestValidationError is the validation error
// returned by UpdateEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type UpdateEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "UpdateEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on DeleteEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *DeleteEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// DeleteEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// DeleteEstimateRequestPlanRequestValidationError is the validation error
// returned by DeleteEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type DeleteEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "DeleteEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on ImportEstimateRequestPlansRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportEstimateRequestPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportEstimateRequestPlansRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportEstimateRequestPlansRequestMultiError, or nil if none found.
func (m *ImportEstimateRequestPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportEstimateRequestPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportEstimateRequestPlansRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportEstimateRequestPlansRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportEstimateRequestPlansRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportEstimateRequestPlansRequestMultiError(errors)
	}

	return nil
}

// ImportEstimateRequestPlansRequestMultiError is an error wrapping multiple
// validation errors returned by
// ImportEstimateRequestPlansRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportEstimateRequestPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportEstimateRequestPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportEstimateRequestPlansRequestMultiError) AllErrors() []error { return m }

// ImportEstimateRequestPlansRequestValidationError is the validation error
// returned by ImportEstimateRequestPlansRequest.Validate if the designated
// constraints aren't met.
type ImportEstimateRequestPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportEstimateRequestPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportEstimateRequestPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportEstimateRequestPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportEstimateRequestPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportEstimateRequestPlansRequestValidationError) ErrorName() string {
	return "ImportEstimateRequestPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportEstimateRequestPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportEstimateRequestPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportEstimateRequestPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportEstimateRequestPlansRequestValidationError{}

// Validate checks the field values on ImportEstimateRequestPlansResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportEstimateRequestPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportEstimateRequestPlansResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportEstimateRequestPlansResponseMultiError, or nil if none found.
func (m *ImportEstimateRequestPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportEstimateRequestPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportEstimateRequestPlansResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportEstimateRequestPlansResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportEstimateRequestPlansResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportEstimateRequestPlansResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportEstimateRequestPlansResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportEstimateRequestPlansResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportEstimateRequestPlansResponseMultiError(errors)
	}

	return nil
}

// ImportEstimateRequestPlansResponseMultiError is an error wrapping multiple
// validation errors returned by
// ImportEstimateRequestPlansResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportEstimateRequestPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportEstimateRequestPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportEstimateRequestPlansResponseMultiError) AllErrors() []error { return m }

// ImportEstimateRequestPlansResponseValidationError is the validation error
// returned by ImportEstimateRequestPlansResponse.Validate if the designated
// constraints aren't met.
type ImportEstimateRequestPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportEstimateRequestPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportEstimateRequestPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportEstimateRequestPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportEstimateRequestPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportEstimateRequestPlansResponseValidationError) ErrorName() string {
	return "ImportEstimateRequestPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportEstimateRequestPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportEstimateRequestPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportEstimateRequestPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportEstimateRequestPlansResponseValidationError{}

// Validate checks the field values on ListEstimateRequestPlanFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListEstimateRequestPlanFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateRequestPlanFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListEstimateRequestPlanFormatsRequestMultiError, or nil if none found.
func (m *ListEstimateRequestPlanFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestPlanFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListEstimateRequestPlanFormatsRequestMultiError(errors)
	}

	return nil
}

// ListEstimateRequestPlanFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListEstimateRequestPlanFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEstimateRequestPlanFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestPlanFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestPlanFormatsRequestMultiError) AllErrors() []error { return m }

// ListEstimateRequestPlanFormatsRequestValidationError is the validation error
// returned by ListEstimateRequestPlanFormatsRequest.Validate if the
// designated constraints aren't met.
type ListEstimateRequestPlanFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestPlanFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateRequestPlanFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateRequestPlanFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateRequestPlanFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateRequestPlanFormatsRequestValidationError) ErrorName() string {
	return "ListEstimateRequestPlanFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestPlanFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestPlanFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestPlanFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestPlanFormatsRequestValidationError{}

// Validate checks the field values on ListEstimateRequestPlanFormatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListEstimateRequestPlanFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListEstimateRequestPlanFormatsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListEstimateRequestPlanFormatsResponseMultiError, or nil if none found.
func (m *ListEstimateRequestPlanFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestPlanFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateRequestPlanFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateRequestPlanFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateRequestPlanFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateRequestPlanFormatsResponseMultiError(errors)
	}

	return nil
}

// ListEstimateRequestPlanFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListEstimateRequestPlanFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEstimateRequestPlanFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestPlanFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestPlanFormatsResponseMultiError) AllErrors() []error { return m }

// ListEstimateRequestPlanFormatsResponseValidationError is the validation
// error returned by ListEstimateRequestPlanFormatsResponse.Validate if the
// designated constraints aren't met.
type ListEstimateRequestPlanFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestPlanFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateRequestPlanFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateRequestPlanFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateRequestPlanFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateRequestPlanFormatsResponseValidationError) ErrorName() string {
	return "ListEstimateRequestPlanFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestPlanFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestPlanFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestPlanFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestPlanFormatsResponseValidationError{}

// Validate checks the field values on CompleteEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CompleteEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateRequestPlanRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompleteEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *CompleteEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompleteEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// CompleteEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// CompleteEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// CompleteEstimateRequestPlanRequestValidationError is the validation error
// returned by CompleteEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type CompleteEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "CompleteEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on CompleteEstimateRequestPlanResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CompleteEstimateRequestPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateRequestPlanResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompleteEstimateRequestPlanResponseMultiError, or nil if none found.
func (m *CompleteEstimateRequestPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateRequestPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteEstimateRequestPlanResponseMultiError(errors)
	}

	return nil
}

// CompleteEstimateRequestPlanResponseMultiError is an error wrapping multiple
// validation errors returned by
// CompleteEstimateRequestPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type CompleteEstimateRequestPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateRequestPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateRequestPlanResponseMultiError) AllErrors() []error { return m }

// CompleteEstimateRequestPlanResponseValidationError is the validation error
// returned by CompleteEstimateRequestPlanResponse.Validate if the designated
// constraints aren't met.
type CompleteEstimateRequestPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateRequestPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateRequestPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateRequestPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateRequestPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateRequestPlanResponseValidationError) ErrorName() string {
	return "CompleteEstimateRequestPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateRequestPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateRequestPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateRequestPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateRequestPlanResponseValidationError{}

// Validate checks the field values on UncompleteEstimateRequestPlanRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UncompleteEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteEstimateRequestPlanRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompleteEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *UncompleteEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UncompleteEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UncompleteEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UncompleteEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UncompleteEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// UncompleteEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// UncompleteEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type UncompleteEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// UncompleteEstimateRequestPlanRequestValidationError is the validation error
// returned by UncompleteEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type UncompleteEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "UncompleteEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on UncompleteEstimateRequestPlanResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UncompleteEstimateRequestPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteEstimateRequestPlanResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompleteEstimateRequestPlanResponseMultiError, or nil if none found.
func (m *UncompleteEstimateRequestPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteEstimateRequestPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UncompleteEstimateRequestPlanResponseMultiError(errors)
	}

	return nil
}

// UncompleteEstimateRequestPlanResponseMultiError is an error wrapping
// multiple validation errors returned by
// UncompleteEstimateRequestPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompleteEstimateRequestPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteEstimateRequestPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteEstimateRequestPlanResponseMultiError) AllErrors() []error { return m }

// UncompleteEstimateRequestPlanResponseValidationError is the validation error
// returned by UncompleteEstimateRequestPlanResponse.Validate if the
// designated constraints aren't met.
type UncompleteEstimateRequestPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteEstimateRequestPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteEstimateRequestPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteEstimateRequestPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteEstimateRequestPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteEstimateRequestPlanResponseValidationError) ErrorName() string {
	return "UncompleteEstimateRequestPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteEstimateRequestPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteEstimateRequestPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteEstimateRequestPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteEstimateRequestPlanResponseValidationError{}

// Validate checks the field values on DiscardEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DiscardEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardEstimateRequestPlanRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DiscardEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *DiscardEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscardEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscardEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscardEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscardEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// DiscardEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// DiscardEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type DiscardEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// DiscardEstimateRequestPlanRequestValidationError is the validation error
// returned by DiscardEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type DiscardEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "DiscardEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on DiscardEstimateRequestPlanResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DiscardEstimateRequestPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardEstimateRequestPlanResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DiscardEstimateRequestPlanResponseMultiError, or nil if none found.
func (m *DiscardEstimateRequestPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardEstimateRequestPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DiscardEstimateRequestPlanResponseMultiError(errors)
	}

	return nil
}

// DiscardEstimateRequestPlanResponseMultiError is an error wrapping multiple
// validation errors returned by
// DiscardEstimateRequestPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type DiscardEstimateRequestPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardEstimateRequestPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardEstimateRequestPlanResponseMultiError) AllErrors() []error { return m }

// DiscardEstimateRequestPlanResponseValidationError is the validation error
// returned by DiscardEstimateRequestPlanResponse.Validate if the designated
// constraints aren't met.
type DiscardEstimateRequestPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardEstimateRequestPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardEstimateRequestPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardEstimateRequestPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardEstimateRequestPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardEstimateRequestPlanResponseValidationError) ErrorName() string {
	return "DiscardEstimateRequestPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardEstimateRequestPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardEstimateRequestPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardEstimateRequestPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardEstimateRequestPlanResponseValidationError{}

// Validate checks the field values on UndiscardEstimateRequestPlanRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UndiscardEstimateRequestPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndiscardEstimateRequestPlanRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UndiscardEstimateRequestPlanRequestMultiError, or nil if none found.
func (m *UndiscardEstimateRequestPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndiscardEstimateRequestPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequestPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UndiscardEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UndiscardEstimateRequestPlanRequestValidationError{
					field:  "EstimateRequestPlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequestPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UndiscardEstimateRequestPlanRequestValidationError{
				field:  "EstimateRequestPlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UndiscardEstimateRequestPlanRequestMultiError(errors)
	}

	return nil
}

// UndiscardEstimateRequestPlanRequestMultiError is an error wrapping multiple
// validation errors returned by
// UndiscardEstimateRequestPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type UndiscardEstimateRequestPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndiscardEstimateRequestPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndiscardEstimateRequestPlanRequestMultiError) AllErrors() []error { return m }

// UndiscardEstimateRequestPlanRequestValidationError is the validation error
// returned by UndiscardEstimateRequestPlanRequest.Validate if the designated
// constraints aren't met.
type UndiscardEstimateRequestPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndiscardEstimateRequestPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndiscardEstimateRequestPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndiscardEstimateRequestPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndiscardEstimateRequestPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndiscardEstimateRequestPlanRequestValidationError) ErrorName() string {
	return "UndiscardEstimateRequestPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndiscardEstimateRequestPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndiscardEstimateRequestPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndiscardEstimateRequestPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndiscardEstimateRequestPlanRequestValidationError{}

// Validate checks the field values on UndiscardEstimateRequestPlanResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UndiscardEstimateRequestPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndiscardEstimateRequestPlanResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UndiscardEstimateRequestPlanResponseMultiError, or nil if none found.
func (m *UndiscardEstimateRequestPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UndiscardEstimateRequestPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UndiscardEstimateRequestPlanResponseMultiError(errors)
	}

	return nil
}

// UndiscardEstimateRequestPlanResponseMultiError is an error wrapping multiple
// validation errors returned by
// UndiscardEstimateRequestPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type UndiscardEstimateRequestPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndiscardEstimateRequestPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndiscardEstimateRequestPlanResponseMultiError) AllErrors() []error { return m }

// UndiscardEstimateRequestPlanResponseValidationError is the validation error
// returned by UndiscardEstimateRequestPlanResponse.Validate if the designated
// constraints aren't met.
type UndiscardEstimateRequestPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndiscardEstimateRequestPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndiscardEstimateRequestPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndiscardEstimateRequestPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndiscardEstimateRequestPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndiscardEstimateRequestPlanResponseValidationError) ErrorName() string {
	return "UndiscardEstimateRequestPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UndiscardEstimateRequestPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndiscardEstimateRequestPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndiscardEstimateRequestPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndiscardEstimateRequestPlanResponseValidationError{}

// Validate checks the field values on CreateEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEstimateRequestRequestMultiError, or nil if none found.
func (m *CreateEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEstimateUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEstimateRequestRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEstimateRequestRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEstimateRequestRequestValidationError{
					field:  fmt.Sprintf("EstimateUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// CreateEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEstimateRequestRequestMultiError) AllErrors() []error { return m }

// CreateEstimateRequestRequestValidationError is the validation error returned
// by CreateEstimateRequestRequest.Validate if the designated constraints
// aren't met.
type CreateEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstimateRequestRequestValidationError) ErrorName() string {
	return "CreateEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstimateRequestRequestValidationError{}

// Validate checks the field values on ListEstimateRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEstimateRequestsRequestMultiError, or nil if none found.
func (m *ListEstimateRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatusFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEstimateRequestsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEstimateRequestsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEstimateRequestsRequestValidationError{
				field:  "StatusFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEstimateRequestsRequestMultiError(errors)
	}

	return nil
}

// ListEstimateRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by ListEstimateRequestsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListEstimateRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestsRequestMultiError) AllErrors() []error { return m }

// ListEstimateRequestsRequestValidationError is the validation error returned
// by ListEstimateRequestsRequest.Validate if the designated constraints
// aren't met.
type ListEstimateRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateRequestsRequestValidationError) ErrorName() string {
	return "ListEstimateRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestsRequestValidationError{}

// Validate checks the field values on ListEstimateRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEstimateRequestsResponseMultiError, or nil if none found.
func (m *ListEstimateRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateRequestsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateRequestsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateRequestsResponseMultiError(errors)
	}

	return nil
}

// ListEstimateRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by ListEstimateRequestsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListEstimateRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestsResponseMultiError) AllErrors() []error { return m }

// ListEstimateRequestsResponseValidationError is the validation error returned
// by ListEstimateRequestsResponse.Validate if the designated constraints
// aren't met.
type ListEstimateRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateRequestsResponseValidationError) ErrorName() string {
	return "ListEstimateRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestsResponseValidationError{}

// Validate checks the field values on GetEstimateRequestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEstimateRequestRequestMultiError, or nil if none found.
func (m *GetEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateRequestId

	if len(errors) > 0 {
		return GetEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// GetEstimateRequestRequestMultiError is an error wrapping multiple validation
// errors returned by GetEstimateRequestRequest.ValidateAll() if the
// designated constraints aren't met.
type GetEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEstimateRequestRequestMultiError) AllErrors() []error { return m }

// GetEstimateRequestRequestValidationError is the validation error returned by
// GetEstimateRequestRequest.Validate if the designated constraints aren't met.
type GetEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstimateRequestRequestValidationError) ErrorName() string {
	return "GetEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstimateRequestRequestValidationError{}

// Validate checks the field values on UpdateEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEstimateRequestRequestMultiError, or nil if none found.
func (m *UpdateEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEstimateUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateEstimateRequestRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateEstimateRequestRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEstimateRequestRequestValidationError{
					field:  fmt.Sprintf("EstimateUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// UpdateEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEstimateRequestRequestMultiError) AllErrors() []error { return m }

// UpdateEstimateRequestRequestValidationError is the validation error returned
// by UpdateEstimateRequestRequest.Validate if the designated constraints
// aren't met.
type UpdateEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstimateRequestRequestValidationError) ErrorName() string {
	return "UpdateEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstimateRequestRequestValidationError{}

// Validate checks the field values on DeleteEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEstimateRequestRequestMultiError, or nil if none found.
func (m *DeleteEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// DeleteEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEstimateRequestRequestMultiError) AllErrors() []error { return m }

// DeleteEstimateRequestRequestValidationError is the validation error returned
// by DeleteEstimateRequestRequest.Validate if the designated constraints
// aren't met.
type DeleteEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstimateRequestRequestValidationError) ErrorName() string {
	return "DeleteEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstimateRequestRequestValidationError{}

// Validate checks the field values on ApprovalRequestEstimateRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApprovalRequestEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalRequestEstimateRequestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ApprovalRequestEstimateRequestRequestMultiError, or nil if none found.
func (m *ApprovalRequestEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApprovalRequestEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// ApprovalRequestEstimateRequestRequestMultiError is an error wrapping
// multiple validation errors returned by
// ApprovalRequestEstimateRequestRequest.ValidateAll() if the designated
// constraints aren't met.
type ApprovalRequestEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestEstimateRequestRequestMultiError) AllErrors() []error { return m }

// ApprovalRequestEstimateRequestRequestValidationError is the validation error
// returned by ApprovalRequestEstimateRequestRequest.Validate if the
// designated constraints aren't met.
type ApprovalRequestEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestEstimateRequestRequestValidationError) ErrorName() string {
	return "ApprovalRequestEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestEstimateRequestRequestValidationError{}

// Validate checks the field values on ApprovalRequestEstimateRequestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApprovalRequestEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApprovalRequestEstimateRequestResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ApprovalRequestEstimateRequestResponseMultiError, or nil if none found.
func (m *ApprovalRequestEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApprovalRequestEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// ApprovalRequestEstimateRequestResponseMultiError is an error wrapping
// multiple validation errors returned by
// ApprovalRequestEstimateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type ApprovalRequestEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestEstimateRequestResponseMultiError) AllErrors() []error { return m }

// ApprovalRequestEstimateRequestResponseValidationError is the validation
// error returned by ApprovalRequestEstimateRequestResponse.Validate if the
// designated constraints aren't met.
type ApprovalRequestEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestEstimateRequestResponseValidationError) ErrorName() string {
	return "ApprovalRequestEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestEstimateRequestResponseValidationError{}

// Validate checks the field values on LockEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockEstimateRequestRequestMultiError, or nil if none found.
func (m *LockEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LockEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LockEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LockEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LockEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// LockEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by LockEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type LockEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockEstimateRequestRequestMultiError) AllErrors() []error { return m }

// LockEstimateRequestRequestValidationError is the validation error returned
// by LockEstimateRequestRequest.Validate if the designated constraints aren't met.
type LockEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockEstimateRequestRequestValidationError) ErrorName() string {
	return "LockEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LockEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockEstimateRequestRequestValidationError{}

// Validate checks the field values on LockEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockEstimateRequestResponseMultiError, or nil if none found.
func (m *LockEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LockEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// LockEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by LockEstimateRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type LockEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockEstimateRequestResponseMultiError) AllErrors() []error { return m }

// LockEstimateRequestResponseValidationError is the validation error returned
// by LockEstimateRequestResponse.Validate if the designated constraints
// aren't met.
type LockEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockEstimateRequestResponseValidationError) ErrorName() string {
	return "LockEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LockEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockEstimateRequestResponseValidationError{}

// Validate checks the field values on UnlockEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlockEstimateRequestRequestMultiError, or nil if none found.
func (m *UnlockEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnlockEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// UnlockEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UnlockEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type UnlockEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockEstimateRequestRequestMultiError) AllErrors() []error { return m }

// UnlockEstimateRequestRequestValidationError is the validation error returned
// by UnlockEstimateRequestRequest.Validate if the designated constraints
// aren't met.
type UnlockEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockEstimateRequestRequestValidationError) ErrorName() string {
	return "UnlockEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockEstimateRequestRequestValidationError{}

// Validate checks the field values on UnlockEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnlockEstimateRequestResponseMultiError, or nil if none found.
func (m *UnlockEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnlockEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// UnlockEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by UnlockEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type UnlockEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockEstimateRequestResponseMultiError) AllErrors() []error { return m }

// UnlockEstimateRequestResponseValidationError is the validation error
// returned by UnlockEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type UnlockEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockEstimateRequestResponseValidationError) ErrorName() string {
	return "UnlockEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockEstimateRequestResponseValidationError{}

// Validate checks the field values on CloseEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseEstimateRequestRequestMultiError, or nil if none found.
func (m *CloseEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloseEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloseEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloseEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloseEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// CloseEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CloseEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type CloseEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseEstimateRequestRequestMultiError) AllErrors() []error { return m }

// CloseEstimateRequestRequestValidationError is the validation error returned
// by CloseEstimateRequestRequest.Validate if the designated constraints
// aren't met.
type CloseEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseEstimateRequestRequestValidationError) ErrorName() string {
	return "CloseEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseEstimateRequestRequestValidationError{}

// Validate checks the field values on CloseEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseEstimateRequestResponseMultiError, or nil if none found.
func (m *CloseEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloseEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// CloseEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by CloseEstimateRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type CloseEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseEstimateRequestResponseMultiError) AllErrors() []error { return m }

// CloseEstimateRequestResponseValidationError is the validation error returned
// by CloseEstimateRequestResponse.Validate if the designated constraints
// aren't met.
type CloseEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseEstimateRequestResponseValidationError) ErrorName() string {
	return "CloseEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseEstimateRequestResponseValidationError{}

// Validate checks the field values on UncloseEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncloseEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncloseEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncloseEstimateRequestRequestMultiError, or nil if none found.
func (m *UncloseEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncloseEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UncloseEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UncloseEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UncloseEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UncloseEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// UncloseEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UncloseEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type UncloseEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncloseEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncloseEstimateRequestRequestMultiError) AllErrors() []error { return m }

// UncloseEstimateRequestRequestValidationError is the validation error
// returned by UncloseEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type UncloseEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncloseEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncloseEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncloseEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncloseEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncloseEstimateRequestRequestValidationError) ErrorName() string {
	return "UncloseEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncloseEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncloseEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncloseEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncloseEstimateRequestRequestValidationError{}

// Validate checks the field values on UncloseEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncloseEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncloseEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncloseEstimateRequestResponseMultiError, or nil if none found.
func (m *UncloseEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncloseEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UncloseEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// UncloseEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by UncloseEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type UncloseEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncloseEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncloseEstimateRequestResponseMultiError) AllErrors() []error { return m }

// UncloseEstimateRequestResponseValidationError is the validation error
// returned by UncloseEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type UncloseEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncloseEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncloseEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncloseEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncloseEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncloseEstimateRequestResponseValidationError) ErrorName() string {
	return "UncloseEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncloseEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncloseEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncloseEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncloseEstimateRequestResponseValidationError{}

// Validate checks the field values on CompleteEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteEstimateRequestRequestMultiError, or nil if none found.
func (m *CompleteEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompleteEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// CompleteEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by CompleteEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type CompleteEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateRequestRequestMultiError) AllErrors() []error { return m }

// CompleteEstimateRequestRequestValidationError is the validation error
// returned by CompleteEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type CompleteEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateRequestRequestValidationError) ErrorName() string {
	return "CompleteEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateRequestRequestValidationError{}

// Validate checks the field values on CompleteEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteEstimateRequestResponseMultiError, or nil if none found.
func (m *CompleteEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// CompleteEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by CompleteEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type CompleteEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateRequestResponseMultiError) AllErrors() []error { return m }

// CompleteEstimateRequestResponseValidationError is the validation error
// returned by CompleteEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type CompleteEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateRequestResponseValidationError) ErrorName() string {
	return "CompleteEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateRequestResponseValidationError{}

// Validate checks the field values on DiscardEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscardEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DiscardEstimateRequestRequestMultiError, or nil if none found.
func (m *DiscardEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscardEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscardEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscardEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscardEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// DiscardEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by DiscardEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type DiscardEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardEstimateRequestRequestMultiError) AllErrors() []error { return m }

// DiscardEstimateRequestRequestValidationError is the validation error
// returned by DiscardEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type DiscardEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardEstimateRequestRequestValidationError) ErrorName() string {
	return "DiscardEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardEstimateRequestRequestValidationError{}

// Validate checks the field values on DiscardEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscardEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DiscardEstimateRequestResponseMultiError, or nil if none found.
func (m *DiscardEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DiscardEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// DiscardEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by DiscardEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type DiscardEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardEstimateRequestResponseMultiError) AllErrors() []error { return m }

// DiscardEstimateRequestResponseValidationError is the validation error
// returned by DiscardEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type DiscardEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardEstimateRequestResponseValidationError) ErrorName() string {
	return "DiscardEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardEstimateRequestResponseValidationError{}

// Validate checks the field values on UndiscardEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndiscardEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndiscardEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UndiscardEstimateRequestRequestMultiError, or nil if none found.
func (m *UndiscardEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndiscardEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UndiscardEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UndiscardEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UndiscardEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UndiscardEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// UndiscardEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by UndiscardEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type UndiscardEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndiscardEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndiscardEstimateRequestRequestMultiError) AllErrors() []error { return m }

// UndiscardEstimateRequestRequestValidationError is the validation error
// returned by UndiscardEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type UndiscardEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndiscardEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndiscardEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndiscardEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndiscardEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndiscardEstimateRequestRequestValidationError) ErrorName() string {
	return "UndiscardEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndiscardEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndiscardEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndiscardEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndiscardEstimateRequestRequestValidationError{}

// Validate checks the field values on UndiscardEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UndiscardEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndiscardEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UndiscardEstimateRequestResponseMultiError, or nil if none found.
func (m *UndiscardEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UndiscardEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UndiscardEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// UndiscardEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by
// UndiscardEstimateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type UndiscardEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndiscardEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndiscardEstimateRequestResponseMultiError) AllErrors() []error { return m }

// UndiscardEstimateRequestResponseValidationError is the validation error
// returned by UndiscardEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type UndiscardEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndiscardEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndiscardEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndiscardEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndiscardEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndiscardEstimateRequestResponseValidationError) ErrorName() string {
	return "UndiscardEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UndiscardEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndiscardEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndiscardEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndiscardEstimateRequestResponseValidationError{}

// Validate checks the field values on SharetoEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoEstimateRequestRequestMultiError, or nil if none found.
func (m *SharetoEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEstimateUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharetoEstimateRequestRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharetoEstimateRequestRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharetoEstimateRequestRequestValidationError{
					field:  fmt.Sprintf("EstimateUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SharetoEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// SharetoEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type SharetoEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateRequestRequestMultiError) AllErrors() []error { return m }

// SharetoEstimateRequestRequestValidationError is the validation error
// returned by SharetoEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type SharetoEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateRequestRequestValidationError) ErrorName() string {
	return "SharetoEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateRequestRequestValidationError{}

// Validate checks the field values on SharetoEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoEstimateRequestResponseMultiError, or nil if none found.
func (m *SharetoEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// SharetoEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by SharetoEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type SharetoEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateRequestResponseMultiError) AllErrors() []error { return m }

// SharetoEstimateRequestResponseValidationError is the validation error
// returned by SharetoEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type SharetoEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateRequestResponseValidationError) ErrorName() string {
	return "SharetoEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateRequestResponseValidationError{}

// Validate checks the field values on SharedGetEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharedGetEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharedGetEstimateRequestRequestMultiError, or nil if none found.
func (m *SharedGetEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateRequestId

	if len(errors) > 0 {
		return SharedGetEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// SharedGetEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by SharedGetEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type SharedGetEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetEstimateRequestRequestMultiError) AllErrors() []error { return m }

// SharedGetEstimateRequestRequestValidationError is the validation error
// returned by SharedGetEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type SharedGetEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetEstimateRequestRequestValidationError) ErrorName() string {
	return "SharedGetEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetEstimateRequestRequestValidationError{}

// Validate checks the field values on SharedGetEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedGetEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedGetEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharedGetEstimateRequestResponseMultiError, or nil if none found.
func (m *SharedGetEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedGetEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharedGetEstimateRequestResponseValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharedGetEstimateRequestResponseValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharedGetEstimateRequestResponseValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharedGetEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// SharedGetEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by
// SharedGetEstimateRequestResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedGetEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedGetEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedGetEstimateRequestResponseMultiError) AllErrors() []error { return m }

// SharedGetEstimateRequestResponseValidationError is the validation error
// returned by SharedGetEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type SharedGetEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedGetEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedGetEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedGetEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedGetEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedGetEstimateRequestResponseValidationError) ErrorName() string {
	return "SharedGetEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedGetEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedGetEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedGetEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedGetEstimateRequestResponseValidationError{}

// Validate checks the field values on CompleteEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CompleteEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteEstimateSelectionRequestMultiError, or nil if none found.
func (m *CompleteEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompleteEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// CompleteEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CompleteEstimateSelectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// CompleteEstimateSelectionRequestValidationError is the validation error
// returned by CompleteEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type CompleteEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateSelectionRequestValidationError) ErrorName() string {
	return "CompleteEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateSelectionRequestValidationError{}

// Validate checks the field values on CompleteEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CompleteEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateSelectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompleteEstimateSelectionResponseMultiError, or nil if none found.
func (m *CompleteEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// CompleteEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CompleteEstimateSelectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CompleteEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// CompleteEstimateSelectionResponseValidationError is the validation error
// returned by CompleteEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type CompleteEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateSelectionResponseValidationError) ErrorName() string {
	return "CompleteEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateSelectionResponseValidationError{}

// Validate checks the field values on UncompleteEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UncompleteEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteEstimateSelectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompleteEstimateSelectionRequestMultiError, or nil if none found.
func (m *UncompleteEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UncompleteEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UncompleteEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UncompleteEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UncompleteEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// UncompleteEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// UncompleteEstimateSelectionRequest.ValidateAll() if the designated
// constraints aren't met.
type UncompleteEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// UncompleteEstimateSelectionRequestValidationError is the validation error
// returned by UncompleteEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type UncompleteEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteEstimateSelectionRequestValidationError) ErrorName() string {
	return "UncompleteEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteEstimateSelectionRequestValidationError{}

// Validate checks the field values on UncompleteEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UncompleteEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteEstimateSelectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompleteEstimateSelectionResponseMultiError, or nil if none found.
func (m *UncompleteEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UncompleteEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// UncompleteEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UncompleteEstimateSelectionResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompleteEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// UncompleteEstimateSelectionResponseValidationError is the validation error
// returned by UncompleteEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type UncompleteEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteEstimateSelectionResponseValidationError) ErrorName() string {
	return "UncompleteEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteEstimateSelectionResponseValidationError{}

// Validate checks the field values on SharetoEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoEstimateSelectionRequestMultiError, or nil if none found.
func (m *SharetoEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// SharetoEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type SharetoEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// SharetoEstimateSelectionRequestValidationError is the validation error
// returned by SharetoEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type SharetoEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateSelectionRequestValidationError) ErrorName() string {
	return "SharetoEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateSelectionRequestValidationError{}

// Validate checks the field values on SharetoEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharetoEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoEstimateSelectionResponseMultiError, or nil if none found.
func (m *SharetoEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// SharetoEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// SharetoEstimateSelectionResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// SharetoEstimateSelectionResponseValidationError is the validation error
// returned by SharetoEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type SharetoEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateSelectionResponseValidationError) ErrorName() string {
	return "SharetoEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateSelectionResponseValidationError{}

// Validate checks the field values on CreateEstimateResultFeedbackRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEstimateResultFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEstimateResultFeedbackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateEstimateResultFeedbackRequestMultiError, or nil if none found.
func (m *CreateEstimateResultFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEstimateResultFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResultFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResultFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEstimateResultFeedbackRequestValidationError{
				field:  "EstimateResultFeedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEstimateResultFeedbackRequestMultiError(errors)
	}

	return nil
}

// CreateEstimateResultFeedbackRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEstimateResultFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEstimateResultFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEstimateResultFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEstimateResultFeedbackRequestMultiError) AllErrors() []error { return m }

// CreateEstimateResultFeedbackRequestValidationError is the validation error
// returned by CreateEstimateResultFeedbackRequest.Validate if the designated
// constraints aren't met.
type CreateEstimateResultFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstimateResultFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstimateResultFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstimateResultFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstimateResultFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstimateResultFeedbackRequestValidationError) ErrorName() string {
	return "CreateEstimateResultFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstimateResultFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstimateResultFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstimateResultFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstimateResultFeedbackRequestValidationError{}

// Validate checks the field values on GetEstimateResultFeedbackRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetEstimateResultFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEstimateResultFeedbackRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEstimateResultFeedbackRequestMultiError, or nil if none found.
func (m *GetEstimateResultFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEstimateResultFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateResultFeedbackId

	if len(errors) > 0 {
		return GetEstimateResultFeedbackRequestMultiError(errors)
	}

	return nil
}

// GetEstimateResultFeedbackRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetEstimateResultFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEstimateResultFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEstimateResultFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEstimateResultFeedbackRequestMultiError) AllErrors() []error { return m }

// GetEstimateResultFeedbackRequestValidationError is the validation error
// returned by GetEstimateResultFeedbackRequest.Validate if the designated
// constraints aren't met.
type GetEstimateResultFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstimateResultFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstimateResultFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstimateResultFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstimateResultFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstimateResultFeedbackRequestValidationError) ErrorName() string {
	return "GetEstimateResultFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstimateResultFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstimateResultFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstimateResultFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstimateResultFeedbackRequestValidationError{}

// Validate checks the field values on UpdateEstimateResultFeedbackRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEstimateResultFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEstimateResultFeedbackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEstimateResultFeedbackRequestMultiError, or nil if none found.
func (m *UpdateEstimateResultFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEstimateResultFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResultFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResultFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEstimateResultFeedbackRequestValidationError{
				field:  "EstimateResultFeedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEstimateResultFeedbackRequestMultiError(errors)
	}

	return nil
}

// UpdateEstimateResultFeedbackRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEstimateResultFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEstimateResultFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEstimateResultFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEstimateResultFeedbackRequestMultiError) AllErrors() []error { return m }

// UpdateEstimateResultFeedbackRequestValidationError is the validation error
// returned by UpdateEstimateResultFeedbackRequest.Validate if the designated
// constraints aren't met.
type UpdateEstimateResultFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstimateResultFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstimateResultFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstimateResultFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstimateResultFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstimateResultFeedbackRequestValidationError) ErrorName() string {
	return "UpdateEstimateResultFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstimateResultFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstimateResultFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstimateResultFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstimateResultFeedbackRequestValidationError{}

// Validate checks the field values on DeleteEstimateResultFeedbackRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEstimateResultFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEstimateResultFeedbackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEstimateResultFeedbackRequestMultiError, or nil if none found.
func (m *DeleteEstimateResultFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEstimateResultFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResultFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResultFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEstimateResultFeedbackRequestValidationError{
				field:  "EstimateResultFeedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEstimateResultFeedbackRequestMultiError(errors)
	}

	return nil
}

// DeleteEstimateResultFeedbackRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEstimateResultFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEstimateResultFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEstimateResultFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEstimateResultFeedbackRequestMultiError) AllErrors() []error { return m }

// DeleteEstimateResultFeedbackRequestValidationError is the validation error
// returned by DeleteEstimateResultFeedbackRequest.Validate if the designated
// constraints aren't met.
type DeleteEstimateResultFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstimateResultFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstimateResultFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstimateResultFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstimateResultFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstimateResultFeedbackRequestValidationError) ErrorName() string {
	return "DeleteEstimateResultFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstimateResultFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstimateResultFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstimateResultFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstimateResultFeedbackRequestValidationError{}

// Validate checks the field values on ListEstimateResultFeedbacksRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEstimateResultFeedbacksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateResultFeedbacksRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListEstimateResultFeedbacksRequestMultiError, or nil if none found.
func (m *ListEstimateResultFeedbacksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateResultFeedbacksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListEstimateResultFeedbacksRequestMultiError(errors)
	}

	return nil
}

// ListEstimateResultFeedbacksRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListEstimateResultFeedbacksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEstimateResultFeedbacksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateResultFeedbacksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateResultFeedbacksRequestMultiError) AllErrors() []error { return m }

// ListEstimateResultFeedbacksRequestValidationError is the validation error
// returned by ListEstimateResultFeedbacksRequest.Validate if the designated
// constraints aren't met.
type ListEstimateResultFeedbacksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateResultFeedbacksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateResultFeedbacksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateResultFeedbacksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateResultFeedbacksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateResultFeedbacksRequestValidationError) ErrorName() string {
	return "ListEstimateResultFeedbacksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateResultFeedbacksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateResultFeedbacksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateResultFeedbacksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateResultFeedbacksRequestValidationError{}

// Validate checks the field values on ListEstimateResultFeedbacksResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListEstimateResultFeedbacksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateResultFeedbacksResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListEstimateResultFeedbacksResponseMultiError, or nil if none found.
func (m *ListEstimateResultFeedbacksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateResultFeedbacksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateResultFeedbacksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateResultFeedbacksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateResultFeedbacksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateResultFeedbacksResponseMultiError(errors)
	}

	return nil
}

// ListEstimateResultFeedbacksResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListEstimateResultFeedbacksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEstimateResultFeedbacksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateResultFeedbacksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateResultFeedbacksResponseMultiError) AllErrors() []error { return m }

// ListEstimateResultFeedbacksResponseValidationError is the validation error
// returned by ListEstimateResultFeedbacksResponse.Validate if the designated
// constraints aren't met.
type ListEstimateResultFeedbacksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateResultFeedbacksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateResultFeedbacksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateResultFeedbacksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateResultFeedbacksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateResultFeedbacksResponseValidationError) ErrorName() string {
	return "ListEstimateResultFeedbacksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateResultFeedbacksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateResultFeedbacksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateResultFeedbacksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateResultFeedbacksResponseValidationError{}

// Validate checks the field values on SharetoEstimateResultFeedbackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoEstimateResultFeedbackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateResultFeedbackRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharetoEstimateResultFeedbackRequestMultiError, or nil if none found.
func (m *SharetoEstimateResultFeedbackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateResultFeedbackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResultFeedback()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoEstimateResultFeedbackRequestValidationError{
					field:  "EstimateResultFeedback",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResultFeedback()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoEstimateResultFeedbackRequestValidationError{
				field:  "EstimateResultFeedback",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoEstimateResultFeedbackRequestMultiError(errors)
	}

	return nil
}

// SharetoEstimateResultFeedbackRequestMultiError is an error wrapping multiple
// validation errors returned by
// SharetoEstimateResultFeedbackRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoEstimateResultFeedbackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateResultFeedbackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateResultFeedbackRequestMultiError) AllErrors() []error { return m }

// SharetoEstimateResultFeedbackRequestValidationError is the validation error
// returned by SharetoEstimateResultFeedbackRequest.Validate if the designated
// constraints aren't met.
type SharetoEstimateResultFeedbackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateResultFeedbackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateResultFeedbackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateResultFeedbackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateResultFeedbackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateResultFeedbackRequestValidationError) ErrorName() string {
	return "SharetoEstimateResultFeedbackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateResultFeedbackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateResultFeedbackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateResultFeedbackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateResultFeedbackRequestValidationError{}

// Validate checks the field values on SharetoEstimateResultFeedbackResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoEstimateResultFeedbackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateResultFeedbackResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharetoEstimateResultFeedbackResponseMultiError, or nil if none found.
func (m *SharetoEstimateResultFeedbackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateResultFeedbackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoEstimateResultFeedbackResponseMultiError(errors)
	}

	return nil
}

// SharetoEstimateResultFeedbackResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharetoEstimateResultFeedbackResponse.ValidateAll() if the designated
// constraints aren't met.
type SharetoEstimateResultFeedbackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateResultFeedbackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateResultFeedbackResponseMultiError) AllErrors() []error { return m }

// SharetoEstimateResultFeedbackResponseValidationError is the validation error
// returned by SharetoEstimateResultFeedbackResponse.Validate if the
// designated constraints aren't met.
type SharetoEstimateResultFeedbackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateResultFeedbackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateResultFeedbackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateResultFeedbackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateResultFeedbackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateResultFeedbackResponseValidationError) ErrorName() string {
	return "SharetoEstimateResultFeedbackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateResultFeedbackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateResultFeedbackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateResultFeedbackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateResultFeedbackResponseValidationError{}

// Validate checks the field values on ApproveEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveEstimateRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveEstimateRequestRequestMultiError, or nil if none found.
func (m *ApproveEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// ApproveEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by ApproveEstimateRequestRequest.ValidateAll()
// if the designated constraints aren't met.
type ApproveEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveEstimateRequestRequestMultiError) AllErrors() []error { return m }

// ApproveEstimateRequestRequestValidationError is the validation error
// returned by ApproveEstimateRequestRequest.Validate if the designated
// constraints aren't met.
type ApproveEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveEstimateRequestRequestValidationError) ErrorName() string {
	return "ApproveEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveEstimateRequestRequestValidationError{}

// Validate checks the field values on ApproveEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveEstimateRequestResponseMultiError, or nil if none found.
func (m *ApproveEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// ApproveEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by ApproveEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type ApproveEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveEstimateRequestResponseMultiError) AllErrors() []error { return m }

// ApproveEstimateRequestResponseValidationError is the validation error
// returned by ApproveEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type ApproveEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveEstimateRequestResponseValidationError) ErrorName() string {
	return "ApproveEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveEstimateRequestResponseValidationError{}

// Validate checks the field values on RejectEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectEstimateRequestRequestMultiError, or nil if none found.
func (m *RejectEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RejectEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RejectEstimateRequestRequestValidationError{
					field:  "EstimateRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RejectEstimateRequestRequestValidationError{
				field:  "EstimateRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RejectEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// RejectEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by RejectEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type RejectEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectEstimateRequestRequestMultiError) AllErrors() []error { return m }

// RejectEstimateRequestRequestValidationError is the validation error returned
// by RejectEstimateRequestRequest.Validate if the designated constraints
// aren't met.
type RejectEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectEstimateRequestRequestValidationError) ErrorName() string {
	return "RejectEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectEstimateRequestRequestValidationError{}

// Validate checks the field values on RejectEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectEstimateRequestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectEstimateRequestResponseMultiError, or nil if none found.
func (m *RejectEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RejectEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// RejectEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by RejectEstimateRequestResponse.ValidateAll()
// if the designated constraints aren't met.
type RejectEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectEstimateRequestResponseMultiError) AllErrors() []error { return m }

// RejectEstimateRequestResponseValidationError is the validation error
// returned by RejectEstimateRequestResponse.Validate if the designated
// constraints aren't met.
type RejectEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectEstimateRequestResponseValidationError) ErrorName() string {
	return "RejectEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectEstimateRequestResponseValidationError{}

// Validate checks the field values on ApproveEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveEstimateSelectionRequestMultiError, or nil if none found.
func (m *ApproveEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApproveEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApproveEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApproveEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApproveEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// ApproveEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by ApproveEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type ApproveEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// ApproveEstimateSelectionRequestValidationError is the validation error
// returned by ApproveEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type ApproveEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveEstimateSelectionRequestValidationError) ErrorName() string {
	return "ApproveEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveEstimateSelectionRequestValidationError{}

// Validate checks the field values on ApproveEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ApproveEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApproveEstimateSelectionResponseMultiError, or nil if none found.
func (m *ApproveEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// ApproveEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// ApproveEstimateSelectionResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// ApproveEstimateSelectionResponseValidationError is the validation error
// returned by ApproveEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type ApproveEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveEstimateSelectionResponseValidationError) ErrorName() string {
	return "ApproveEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveEstimateSelectionResponseValidationError{}

// Validate checks the field values on RejectEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectEstimateSelectionRequestMultiError, or nil if none found.
func (m *RejectEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RejectEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RejectEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RejectEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RejectEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// RejectEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by RejectEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type RejectEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// RejectEstimateSelectionRequestValidationError is the validation error
// returned by RejectEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type RejectEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectEstimateSelectionRequestValidationError) ErrorName() string {
	return "RejectEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectEstimateSelectionRequestValidationError{}

// Validate checks the field values on RejectEstimateSelectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RejectEstimateSelectionResponseMultiError, or nil if none found.
func (m *RejectEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RejectEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// RejectEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by RejectEstimateSelectionResponse.ValidateAll()
// if the designated constraints aren't met.
type RejectEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// RejectEstimateSelectionResponseValidationError is the validation error
// returned by RejectEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type RejectEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectEstimateSelectionResponseValidationError) ErrorName() string {
	return "RejectEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectEstimateSelectionResponseValidationError{}

// Validate checks the field values on ListEstimateSelectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateSelectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateSelectionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEstimateSelectionsRequestMultiError, or nil if none found.
func (m *ListEstimateSelectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateSelectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatusFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEstimateSelectionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEstimateSelectionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEstimateSelectionsRequestValidationError{
				field:  "StatusFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEstimateSelectionsRequestMultiError(errors)
	}

	return nil
}

// ListEstimateSelectionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListEstimateSelectionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListEstimateSelectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateSelectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateSelectionsRequestMultiError) AllErrors() []error { return m }

// ListEstimateSelectionsRequestValidationError is the validation error
// returned by ListEstimateSelectionsRequest.Validate if the designated
// constraints aren't met.
type ListEstimateSelectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateSelectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateSelectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateSelectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateSelectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateSelectionsRequestValidationError) ErrorName() string {
	return "ListEstimateSelectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateSelectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateSelectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateSelectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateSelectionsRequestValidationError{}

// Validate checks the field values on ListEstimateSelectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateSelectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateSelectionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEstimateSelectionsResponseMultiError, or nil if none found.
func (m *ListEstimateSelectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateSelectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateSelectionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateSelectionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateSelectionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateSelectionsResponseMultiError(errors)
	}

	return nil
}

// ListEstimateSelectionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListEstimateSelectionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListEstimateSelectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateSelectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateSelectionsResponseMultiError) AllErrors() []error { return m }

// ListEstimateSelectionsResponseValidationError is the validation error
// returned by ListEstimateSelectionsResponse.Validate if the designated
// constraints aren't met.
type ListEstimateSelectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateSelectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateSelectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateSelectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateSelectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateSelectionsResponseValidationError) ErrorName() string {
	return "ListEstimateSelectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateSelectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateSelectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateSelectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateSelectionsResponseValidationError{}

// Validate checks the field values on GetEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEstimateSelectionRequestMultiError, or nil if none found.
func (m *GetEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateSelectionId

	if len(errors) > 0 {
		return GetEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// GetEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by GetEstimateSelectionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// GetEstimateSelectionRequestValidationError is the validation error returned
// by GetEstimateSelectionRequest.Validate if the designated constraints
// aren't met.
type GetEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstimateSelectionRequestValidationError) ErrorName() string {
	return "GetEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstimateSelectionRequestValidationError{}

// Validate checks the field values on UpdateEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateEstimateSelectionRequestMultiError, or nil if none found.
func (m *UpdateEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// UpdateEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// UpdateEstimateSelectionRequestValidationError is the validation error
// returned by UpdateEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type UpdateEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstimateSelectionRequestValidationError) ErrorName() string {
	return "UpdateEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstimateSelectionRequestValidationError{}

// Validate checks the field values on ApprovalRequestEstimateSelectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApprovalRequestEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApprovalRequestEstimateSelectionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ApprovalRequestEstimateSelectionRequestMultiError, or nil if none found.
func (m *ApprovalRequestEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApprovalRequestEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// ApprovalRequestEstimateSelectionRequestMultiError is an error wrapping
// multiple validation errors returned by
// ApprovalRequestEstimateSelectionRequest.ValidateAll() if the designated
// constraints aren't met.
type ApprovalRequestEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// ApprovalRequestEstimateSelectionRequestValidationError is the validation
// error returned by ApprovalRequestEstimateSelectionRequest.Validate if the
// designated constraints aren't met.
type ApprovalRequestEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestEstimateSelectionRequestValidationError) ErrorName() string {
	return "ApprovalRequestEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestEstimateSelectionRequestValidationError{}

// Validate checks the field values on ApprovalRequestEstimateSelectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ApprovalRequestEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ApprovalRequestEstimateSelectionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ApprovalRequestEstimateSelectionResponseMultiError, or nil if none found.
func (m *ApprovalRequestEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApprovalRequestEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// ApprovalRequestEstimateSelectionResponseMultiError is an error wrapping
// multiple validation errors returned by
// ApprovalRequestEstimateSelectionResponse.ValidateAll() if the designated
// constraints aren't met.
type ApprovalRequestEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// ApprovalRequestEstimateSelectionResponseValidationError is the validation
// error returned by ApprovalRequestEstimateSelectionResponse.Validate if the
// designated constraints aren't met.
type ApprovalRequestEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestEstimateSelectionResponseValidationError) ErrorName() string {
	return "ApprovalRequestEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestEstimateSelectionResponseValidationError{}

// Validate checks the field values on LockEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockEstimateSelectionRequestMultiError, or nil if none found.
func (m *LockEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LockEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LockEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LockEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LockEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// LockEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by LockEstimateSelectionRequest.ValidateAll() if
// the designated constraints aren't met.
type LockEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// LockEstimateSelectionRequestValidationError is the validation error returned
// by LockEstimateSelectionRequest.Validate if the designated constraints
// aren't met.
type LockEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockEstimateSelectionRequestValidationError) ErrorName() string {
	return "LockEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LockEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockEstimateSelectionRequestValidationError{}

// Validate checks the field values on LockEstimateSelectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LockEstimateSelectionResponseMultiError, or nil if none found.
func (m *LockEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LockEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// LockEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by LockEstimateSelectionResponse.ValidateAll()
// if the designated constraints aren't met.
type LockEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// LockEstimateSelectionResponseValidationError is the validation error
// returned by LockEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type LockEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockEstimateSelectionResponseValidationError) ErrorName() string {
	return "LockEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LockEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockEstimateSelectionResponseValidationError{}

// Validate checks the field values on UnlockEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnlockEstimateSelectionRequestMultiError, or nil if none found.
func (m *UnlockEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnlockEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// UnlockEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by UnlockEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type UnlockEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// UnlockEstimateSelectionRequestValidationError is the validation error
// returned by UnlockEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type UnlockEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockEstimateSelectionRequestValidationError) ErrorName() string {
	return "UnlockEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockEstimateSelectionRequestValidationError{}

// Validate checks the field values on UnlockEstimateSelectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockEstimateSelectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockEstimateSelectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnlockEstimateSelectionResponseMultiError, or nil if none found.
func (m *UnlockEstimateSelectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockEstimateSelectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnlockEstimateSelectionResponseMultiError(errors)
	}

	return nil
}

// UnlockEstimateSelectionResponseMultiError is an error wrapping multiple
// validation errors returned by UnlockEstimateSelectionResponse.ValidateAll()
// if the designated constraints aren't met.
type UnlockEstimateSelectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockEstimateSelectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockEstimateSelectionResponseMultiError) AllErrors() []error { return m }

// UnlockEstimateSelectionResponseValidationError is the validation error
// returned by UnlockEstimateSelectionResponse.Validate if the designated
// constraints aren't met.
type UnlockEstimateSelectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockEstimateSelectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockEstimateSelectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockEstimateSelectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockEstimateSelectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockEstimateSelectionResponseValidationError) ErrorName() string {
	return "UnlockEstimateSelectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockEstimateSelectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockEstimateSelectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockEstimateSelectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockEstimateSelectionResponseValidationError{}

// Validate checks the field values on ExportOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportOrdersRequestMultiError, or nil if none found.
func (m *ExportOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportOrdersRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportOrdersRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportOrdersRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportOrdersRequestMultiError(errors)
	}

	return nil
}

// ExportOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by ExportOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportOrdersRequestMultiError) AllErrors() []error { return m }

// ExportOrdersRequestValidationError is the validation error returned by
// ExportOrdersRequest.Validate if the designated constraints aren't met.
type ExportOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportOrdersRequestValidationError) ErrorName() string {
	return "ExportOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportOrdersRequestValidationError{}

// Validate checks the field values on ExportOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportOrdersResponseMultiError, or nil if none found.
func (m *ExportOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportOrdersResponseMultiError(errors)
	}

	return nil
}

// ExportOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by ExportOrdersResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportOrdersResponseMultiError) AllErrors() []error { return m }

// ExportOrdersResponseValidationError is the validation error returned by
// ExportOrdersResponse.Validate if the designated constraints aren't met.
type ExportOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportOrdersResponseValidationError) ErrorName() string {
	return "ExportOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportOrdersResponseValidationError{}

// Validate checks the field values on ListOrderFormatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrderFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderFormatsRequestMultiError, or nil if none found.
func (m *ListOrderFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrderFormatsRequestMultiError(errors)
	}

	return nil
}

// ListOrderFormatsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrderFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrderFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderFormatsRequestMultiError) AllErrors() []error { return m }

// ListOrderFormatsRequestValidationError is the validation error returned by
// ListOrderFormatsRequest.Validate if the designated constraints aren't met.
type ListOrderFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderFormatsRequestValidationError) ErrorName() string {
	return "ListOrderFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderFormatsRequestValidationError{}

// Validate checks the field values on ListOrderFormatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrderFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderFormatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderFormatsResponseMultiError, or nil if none found.
func (m *ListOrderFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrderFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrderFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrderFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrderFormatsResponseMultiError(errors)
	}

	return nil
}

// ListOrderFormatsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrderFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrderFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderFormatsResponseMultiError) AllErrors() []error { return m }

// ListOrderFormatsResponseValidationError is the validation error returned by
// ListOrderFormatsResponse.Validate if the designated constraints aren't met.
type ListOrderFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderFormatsResponseValidationError) ErrorName() string {
	return "ListOrderFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrderFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderFormatsResponseValidationError{}

// Validate checks the field values on
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError,
// or nil if none found.
func (m *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatusFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{
				field:  "StatusFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError(errors)
	}

	return nil
}

// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError
// is an error wrapping multiple validation errors returned by
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError) AllErrors() []error {
	return m
}

// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError
// is the validation error returned by
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest.Validate
// if the designated constraints aren't met.
type ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) ErrorName() string {
	return "ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{}

// Validate checks the field values on
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError,
// or nil if none found.
func (m *ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError(errors)
	}

	return nil
}

// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError
// is an error wrapping multiple validation errors returned by
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError) AllErrors() []error {
	return m
}

// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError
// is the validation error returned by
// ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse.Validate
// if the designated constraints aren't met.
type ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) ErrorName() string {
	return "ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{}

// Validate checks the field values on
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError,
// or nil if none found.
func (m *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatusFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{
				field:  "StatusFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError(errors)
	}

	return nil
}

// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError
// is an error wrapping multiple validation errors returned by
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest.ValidateAll()
// if the designated constraints aren't met.
type SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestMultiError) AllErrors() []error {
	return m
}

// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError
// is the validation error returned by
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest.Validate
// if the designated constraints aren't met.
type SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) ErrorName() string {
	return "SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequestValidationError{}

// Validate checks the field values on
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError,
// or nil if none found.
func (m *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError(errors)
	}

	return nil
}

// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError
// is an error wrapping multiple validation errors returned by
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse.ValidateAll()
// if the designated constraints aren't met.
type SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseMultiError) AllErrors() []error {
	return m
}

// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError
// is the validation error returned by
// SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse.Validate
// if the designated constraints aren't met.
type SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) ErrorName() string {
	return "SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponseValidationError{}

// Validate checks the field values on CreateEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEstimateResultRequestMultiError, or nil if none found.
func (m *CreateEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEstimateResultRequestMultiError(errors)
	}

	return nil
}

// CreateEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEstimateResultRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEstimateResultRequestMultiError) AllErrors() []error { return m }

// CreateEstimateResultRequestValidationError is the validation error returned
// by CreateEstimateResultRequest.Validate if the designated constraints
// aren't met.
type CreateEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstimateResultRequestValidationError) ErrorName() string {
	return "CreateEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstimateResultRequestValidationError{}

// Validate checks the field values on ListEstimateResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEstimateResultsRequestMultiError, or nil if none found.
func (m *ListEstimateResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatusFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEstimateResultsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEstimateResultsRequestValidationError{
					field:  "StatusFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEstimateResultsRequestValidationError{
				field:  "StatusFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEstimateResultsRequestMultiError(errors)
	}

	return nil
}

// ListEstimateResultsRequestMultiError is an error wrapping multiple
// validation errors returned by ListEstimateResultsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListEstimateResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateResultsRequestMultiError) AllErrors() []error { return m }

// ListEstimateResultsRequestValidationError is the validation error returned
// by ListEstimateResultsRequest.Validate if the designated constraints aren't met.
type ListEstimateResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateResultsRequestValidationError) ErrorName() string {
	return "ListEstimateResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateResultsRequestValidationError{}

// Validate checks the field values on ListEstimateResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEstimateResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEstimateResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEstimateResultsResponseMultiError, or nil if none found.
func (m *ListEstimateResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEstimateResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEstimateResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEstimateResultsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEstimateResultsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEstimateResultsResponseMultiError(errors)
	}

	return nil
}

// ListEstimateResultsResponseMultiError is an error wrapping multiple
// validation errors returned by ListEstimateResultsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListEstimateResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEstimateResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEstimateResultsResponseMultiError) AllErrors() []error { return m }

// ListEstimateResultsResponseValidationError is the validation error returned
// by ListEstimateResultsResponse.Validate if the designated constraints
// aren't met.
type ListEstimateResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEstimateResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEstimateResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEstimateResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEstimateResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEstimateResultsResponseValidationError) ErrorName() string {
	return "ListEstimateResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEstimateResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEstimateResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEstimateResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEstimateResultsResponseValidationError{}

// Validate checks the field values on GetEstimateResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEstimateResultRequestMultiError, or nil if none found.
func (m *GetEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateResultId

	if len(errors) > 0 {
		return GetEstimateResultRequestMultiError(errors)
	}

	return nil
}

// GetEstimateResultRequestMultiError is an error wrapping multiple validation
// errors returned by GetEstimateResultRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEstimateResultRequestMultiError) AllErrors() []error { return m }

// GetEstimateResultRequestValidationError is the validation error returned by
// GetEstimateResultRequest.Validate if the designated constraints aren't met.
type GetEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstimateResultRequestValidationError) ErrorName() string {
	return "GetEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstimateResultRequestValidationError{}

// Validate checks the field values on UpdateEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEstimateResultRequestMultiError, or nil if none found.
func (m *UpdateEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEstimateResultRequestMultiError(errors)
	}

	return nil
}

// UpdateEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateEstimateResultRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEstimateResultRequestMultiError) AllErrors() []error { return m }

// UpdateEstimateResultRequestValidationError is the validation error returned
// by UpdateEstimateResultRequest.Validate if the designated constraints
// aren't met.
type UpdateEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstimateResultRequestValidationError) ErrorName() string {
	return "UpdateEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstimateResultRequestValidationError{}

// Validate checks the field values on DeleteEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEstimateResultRequestMultiError, or nil if none found.
func (m *DeleteEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEstimateResultRequestMultiError(errors)
	}

	return nil
}

// DeleteEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteEstimateResultRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEstimateResultRequestMultiError) AllErrors() []error { return m }

// DeleteEstimateResultRequestValidationError is the validation error returned
// by DeleteEstimateResultRequest.Validate if the designated constraints
// aren't met.
type DeleteEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstimateResultRequestValidationError) ErrorName() string {
	return "DeleteEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstimateResultRequestValidationError{}

// Validate checks the field values on LockEstimateResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockEstimateResultRequestMultiError, or nil if none found.
func (m *LockEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LockEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LockEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LockEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LockEstimateResultRequestMultiError(errors)
	}

	return nil
}

// LockEstimateResultRequestMultiError is an error wrapping multiple validation
// errors returned by LockEstimateResultRequest.ValidateAll() if the
// designated constraints aren't met.
type LockEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockEstimateResultRequestMultiError) AllErrors() []error { return m }

// LockEstimateResultRequestValidationError is the validation error returned by
// LockEstimateResultRequest.Validate if the designated constraints aren't met.
type LockEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockEstimateResultRequestValidationError) ErrorName() string {
	return "LockEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LockEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockEstimateResultRequestValidationError{}

// Validate checks the field values on LockEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockEstimateResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockEstimateResultResponseMultiError, or nil if none found.
func (m *LockEstimateResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LockEstimateResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LockEstimateResultResponseMultiError(errors)
	}

	return nil
}

// LockEstimateResultResponseMultiError is an error wrapping multiple
// validation errors returned by LockEstimateResultResponse.ValidateAll() if
// the designated constraints aren't met.
type LockEstimateResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockEstimateResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockEstimateResultResponseMultiError) AllErrors() []error { return m }

// LockEstimateResultResponseValidationError is the validation error returned
// by LockEstimateResultResponse.Validate if the designated constraints aren't met.
type LockEstimateResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockEstimateResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockEstimateResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockEstimateResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockEstimateResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockEstimateResultResponseValidationError) ErrorName() string {
	return "LockEstimateResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LockEstimateResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockEstimateResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockEstimateResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockEstimateResultResponseValidationError{}

// Validate checks the field values on UnlockEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlockEstimateResultRequestMultiError, or nil if none found.
func (m *UnlockEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnlockEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnlockEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnlockEstimateResultRequestMultiError(errors)
	}

	return nil
}

// UnlockEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by UnlockEstimateResultRequest.ValidateAll() if
// the designated constraints aren't met.
type UnlockEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockEstimateResultRequestMultiError) AllErrors() []error { return m }

// UnlockEstimateResultRequestValidationError is the validation error returned
// by UnlockEstimateResultRequest.Validate if the designated constraints
// aren't met.
type UnlockEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockEstimateResultRequestValidationError) ErrorName() string {
	return "UnlockEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockEstimateResultRequestValidationError{}

// Validate checks the field values on UnlockEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnlockEstimateResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnlockEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnlockEstimateResultResponseMultiError, or nil if none found.
func (m *UnlockEstimateResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnlockEstimateResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnlockEstimateResultResponseMultiError(errors)
	}

	return nil
}

// UnlockEstimateResultResponseMultiError is an error wrapping multiple
// validation errors returned by UnlockEstimateResultResponse.ValidateAll() if
// the designated constraints aren't met.
type UnlockEstimateResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnlockEstimateResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnlockEstimateResultResponseMultiError) AllErrors() []error { return m }

// UnlockEstimateResultResponseValidationError is the validation error returned
// by UnlockEstimateResultResponse.Validate if the designated constraints
// aren't met.
type UnlockEstimateResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockEstimateResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockEstimateResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockEstimateResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockEstimateResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockEstimateResultResponseValidationError) ErrorName() string {
	return "UnlockEstimateResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockEstimateResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockEstimateResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockEstimateResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockEstimateResultResponseValidationError{}

// Validate checks the field values on CompleteEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateResultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteEstimateResultRequestMultiError, or nil if none found.
func (m *CompleteEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompleteEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompleteEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompleteEstimateResultRequestMultiError(errors)
	}

	return nil
}

// CompleteEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by CompleteEstimateResultRequest.ValidateAll()
// if the designated constraints aren't met.
type CompleteEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateResultRequestMultiError) AllErrors() []error { return m }

// CompleteEstimateResultRequestValidationError is the validation error
// returned by CompleteEstimateResultRequest.Validate if the designated
// constraints aren't met.
type CompleteEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateResultRequestValidationError) ErrorName() string {
	return "CompleteEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateResultRequestValidationError{}

// Validate checks the field values on CompleteEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteEstimateResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteEstimateResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteEstimateResultResponseMultiError, or nil if none found.
func (m *CompleteEstimateResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteEstimateResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteEstimateResultResponseMultiError(errors)
	}

	return nil
}

// CompleteEstimateResultResponseMultiError is an error wrapping multiple
// validation errors returned by CompleteEstimateResultResponse.ValidateAll()
// if the designated constraints aren't met.
type CompleteEstimateResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteEstimateResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteEstimateResultResponseMultiError) AllErrors() []error { return m }

// CompleteEstimateResultResponseValidationError is the validation error
// returned by CompleteEstimateResultResponse.Validate if the designated
// constraints aren't met.
type CompleteEstimateResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteEstimateResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteEstimateResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteEstimateResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteEstimateResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteEstimateResultResponseValidationError) ErrorName() string {
	return "CompleteEstimateResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteEstimateResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteEstimateResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteEstimateResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteEstimateResultResponseValidationError{}

// Validate checks the field values on UncompleteEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncompleteEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteEstimateResultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncompleteEstimateResultRequestMultiError, or nil if none found.
func (m *UncompleteEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UncompleteEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UncompleteEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UncompleteEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UncompleteEstimateResultRequestMultiError(errors)
	}

	return nil
}

// UncompleteEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by UncompleteEstimateResultRequest.ValidateAll()
// if the designated constraints aren't met.
type UncompleteEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteEstimateResultRequestMultiError) AllErrors() []error { return m }

// UncompleteEstimateResultRequestValidationError is the validation error
// returned by UncompleteEstimateResultRequest.Validate if the designated
// constraints aren't met.
type UncompleteEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteEstimateResultRequestValidationError) ErrorName() string {
	return "UncompleteEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteEstimateResultRequestValidationError{}

// Validate checks the field values on UncompleteEstimateResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UncompleteEstimateResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteEstimateResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncompleteEstimateResultResponseMultiError, or nil if none found.
func (m *UncompleteEstimateResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteEstimateResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UncompleteEstimateResultResponseMultiError(errors)
	}

	return nil
}

// UncompleteEstimateResultResponseMultiError is an error wrapping multiple
// validation errors returned by
// UncompleteEstimateResultResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompleteEstimateResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteEstimateResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteEstimateResultResponseMultiError) AllErrors() []error { return m }

// UncompleteEstimateResultResponseValidationError is the validation error
// returned by UncompleteEstimateResultResponse.Validate if the designated
// constraints aren't met.
type UncompleteEstimateResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteEstimateResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteEstimateResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteEstimateResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteEstimateResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteEstimateResultResponseValidationError) ErrorName() string {
	return "UncompleteEstimateResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteEstimateResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteEstimateResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteEstimateResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteEstimateResultResponseValidationError{}

// Validate checks the field values on DeclineEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeclineEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeclineEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeclineEstimateResultRequestMultiError, or nil if none found.
func (m *DeclineEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeclineEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeclineEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeclineEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeclineEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeclineEstimateResultRequestMultiError(errors)
	}

	return nil
}

// DeclineEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by DeclineEstimateResultRequest.ValidateAll() if
// the designated constraints aren't met.
type DeclineEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclineEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclineEstimateResultRequestMultiError) AllErrors() []error { return m }

// DeclineEstimateResultRequestValidationError is the validation error returned
// by DeclineEstimateResultRequest.Validate if the designated constraints
// aren't met.
type DeclineEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclineEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclineEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclineEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclineEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclineEstimateResultRequestValidationError) ErrorName() string {
	return "DeclineEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeclineEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclineEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclineEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclineEstimateResultRequestValidationError{}

// Validate checks the field values on DeclineEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeclineEstimateResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeclineEstimateResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeclineEstimateResultResponseMultiError, or nil if none found.
func (m *DeclineEstimateResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeclineEstimateResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeclineEstimateResultResponseValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeclineEstimateResultResponseValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeclineEstimateResultResponseValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeclineEstimateResultResponseMultiError(errors)
	}

	return nil
}

// DeclineEstimateResultResponseMultiError is an error wrapping multiple
// validation errors returned by DeclineEstimateResultResponse.ValidateAll()
// if the designated constraints aren't met.
type DeclineEstimateResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclineEstimateResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclineEstimateResultResponseMultiError) AllErrors() []error { return m }

// DeclineEstimateResultResponseValidationError is the validation error
// returned by DeclineEstimateResultResponse.Validate if the designated
// constraints aren't met.
type DeclineEstimateResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclineEstimateResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclineEstimateResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclineEstimateResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclineEstimateResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclineEstimateResultResponseValidationError) ErrorName() string {
	return "DeclineEstimateResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeclineEstimateResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclineEstimateResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclineEstimateResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclineEstimateResultResponseValidationError{}

// Validate checks the field values on SharetoEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoEstimateResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharetoEstimateResultRequestMultiError, or nil if none found.
func (m *SharetoEstimateResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharetoEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharetoEstimateResultRequestValidationError{
					field:  "EstimateResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharetoEstimateResultRequestValidationError{
				field:  "EstimateResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharetoEstimateResultRequestMultiError(errors)
	}

	return nil
}

// SharetoEstimateResultRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoEstimateResultRequest.ValidateAll() if
// the designated constraints aren't met.
type SharetoEstimateResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateResultRequestMultiError) AllErrors() []error { return m }

// SharetoEstimateResultRequestValidationError is the validation error returned
// by SharetoEstimateResultRequest.Validate if the designated constraints
// aren't met.
type SharetoEstimateResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateResultRequestValidationError) ErrorName() string {
	return "SharetoEstimateResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateResultRequestValidationError{}

// Validate checks the field values on SharetoEstimateResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoEstimateResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoEstimateResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoEstimateResultResponseMultiError, or nil if none found.
func (m *SharetoEstimateResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoEstimateResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharetoEstimateResultResponseMultiError(errors)
	}

	return nil
}

// SharetoEstimateResultResponseMultiError is an error wrapping multiple
// validation errors returned by SharetoEstimateResultResponse.ValidateAll()
// if the designated constraints aren't met.
type SharetoEstimateResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoEstimateResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoEstimateResultResponseMultiError) AllErrors() []error { return m }

// SharetoEstimateResultResponseValidationError is the validation error
// returned by SharetoEstimateResultResponse.Validate if the designated
// constraints aren't met.
type SharetoEstimateResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoEstimateResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoEstimateResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoEstimateResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoEstimateResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoEstimateResultResponseValidationError) ErrorName() string {
	return "SharetoEstimateResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoEstimateResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoEstimateResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoEstimateResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoEstimateResultResponseValidationError{}

// Validate checks the field values on DiffEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiffEstimateRequestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffEstimateRequestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiffEstimateRequestRequestMultiError, or nil if none found.
func (m *DiffEstimateRequestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffEstimateRequestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOld()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffEstimateRequestRequestValidationError{
					field:  "Old",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffEstimateRequestRequestValidationError{
					field:  "Old",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOld()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffEstimateRequestRequestValidationError{
				field:  "Old",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNew()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiffEstimateRequestRequestValidationError{
					field:  "New",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiffEstimateRequestRequestValidationError{
					field:  "New",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNew()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiffEstimateRequestRequestValidationError{
				field:  "New",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiffEstimateRequestRequestMultiError(errors)
	}

	return nil
}

// DiffEstimateRequestRequestMultiError is an error wrapping multiple
// validation errors returned by DiffEstimateRequestRequest.ValidateAll() if
// the designated constraints aren't met.
type DiffEstimateRequestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffEstimateRequestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffEstimateRequestRequestMultiError) AllErrors() []error { return m }

// DiffEstimateRequestRequestValidationError is the validation error returned
// by DiffEstimateRequestRequest.Validate if the designated constraints aren't met.
type DiffEstimateRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffEstimateRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffEstimateRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffEstimateRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffEstimateRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffEstimateRequestRequestValidationError) ErrorName() string {
	return "DiffEstimateRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiffEstimateRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffEstimateRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffEstimateRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffEstimateRequestRequestValidationError{}

// Validate checks the field values on DiffEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiffEstimateRequestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffEstimateRequestResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiffEstimateRequestResponseMultiError, or nil if none found.
func (m *DiffEstimateRequestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffEstimateRequestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDiffItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiffEstimateRequestResponseValidationError{
						field:  fmt.Sprintf("DiffItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiffEstimateRequestResponseValidationError{
						field:  fmt.Sprintf("DiffItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiffEstimateRequestResponseValidationError{
					field:  fmt.Sprintf("DiffItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiffEstimateRequestResponseMultiError(errors)
	}

	return nil
}

// DiffEstimateRequestResponseMultiError is an error wrapping multiple
// validation errors returned by DiffEstimateRequestResponse.ValidateAll() if
// the designated constraints aren't met.
type DiffEstimateRequestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffEstimateRequestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffEstimateRequestResponseMultiError) AllErrors() []error { return m }

// DiffEstimateRequestResponseValidationError is the validation error returned
// by DiffEstimateRequestResponse.Validate if the designated constraints
// aren't met.
type DiffEstimateRequestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffEstimateRequestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffEstimateRequestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffEstimateRequestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffEstimateRequestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffEstimateRequestResponseValidationError) ErrorName() string {
	return "DiffEstimateRequestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiffEstimateRequestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffEstimateRequestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffEstimateRequestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffEstimateRequestResponseValidationError{}

// Validate checks the field values on DiffItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiffItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiffItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiffItemMultiError, or nil
// if none found.
func (m *DiffItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DiffItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FieldPath

	// no validation rules for OldValue

	// no validation rules for NewValue

	// no validation rules for TypeName

	// no validation rules for KeyValue

	// no validation rules for CategoryName

	if len(errors) > 0 {
		return DiffItemMultiError(errors)
	}

	return nil
}

// DiffItemMultiError is an error wrapping multiple validation errors returned
// by DiffItem.ValidateAll() if the designated constraints aren't met.
type DiffItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiffItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiffItemMultiError) AllErrors() []error { return m }

// DiffItemValidationError is the validation error returned by
// DiffItem.Validate if the designated constraints aren't met.
type DiffItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiffItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiffItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiffItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiffItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiffItemValidationError) ErrorName() string { return "DiffItemValidationError" }

// Error satisfies the builtin error interface
func (e DiffItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiffItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiffItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiffItemValidationError{}

// Validate checks the field values on SharedListEstimateResultFeedbacksRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharedListEstimateResultFeedbacksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListEstimateResultFeedbacksRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListEstimateResultFeedbacksRequestMultiError, or nil if none found.
func (m *SharedListEstimateResultFeedbacksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListEstimateResultFeedbacksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SharedListEstimateResultFeedbacksRequestMultiError(errors)
	}

	return nil
}

// SharedListEstimateResultFeedbacksRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharedListEstimateResultFeedbacksRequest.ValidateAll() if the designated
// constraints aren't met.
type SharedListEstimateResultFeedbacksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListEstimateResultFeedbacksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListEstimateResultFeedbacksRequestMultiError) AllErrors() []error { return m }

// SharedListEstimateResultFeedbacksRequestValidationError is the validation
// error returned by SharedListEstimateResultFeedbacksRequest.Validate if the
// designated constraints aren't met.
type SharedListEstimateResultFeedbacksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListEstimateResultFeedbacksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListEstimateResultFeedbacksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListEstimateResultFeedbacksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListEstimateResultFeedbacksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListEstimateResultFeedbacksRequestValidationError) ErrorName() string {
	return "SharedListEstimateResultFeedbacksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListEstimateResultFeedbacksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListEstimateResultFeedbacksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListEstimateResultFeedbacksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListEstimateResultFeedbacksRequestValidationError{}

// Validate checks the field values on
// SharedListEstimateResultFeedbacksResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharedListEstimateResultFeedbacksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharedListEstimateResultFeedbacksResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharedListEstimateResultFeedbacksResponseMultiError, or nil if none found.
func (m *SharedListEstimateResultFeedbacksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedListEstimateResultFeedbacksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharedListEstimateResultFeedbacksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharedListEstimateResultFeedbacksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharedListEstimateResultFeedbacksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SharedListEstimateResultFeedbacksResponseMultiError(errors)
	}

	return nil
}

// SharedListEstimateResultFeedbacksResponseMultiError is an error wrapping
// multiple validation errors returned by
// SharedListEstimateResultFeedbacksResponse.ValidateAll() if the designated
// constraints aren't met.
type SharedListEstimateResultFeedbacksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedListEstimateResultFeedbacksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedListEstimateResultFeedbacksResponseMultiError) AllErrors() []error { return m }

// SharedListEstimateResultFeedbacksResponseValidationError is the validation
// error returned by SharedListEstimateResultFeedbacksResponse.Validate if the
// designated constraints aren't met.
type SharedListEstimateResultFeedbacksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedListEstimateResultFeedbacksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedListEstimateResultFeedbacksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedListEstimateResultFeedbacksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedListEstimateResultFeedbacksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedListEstimateResultFeedbacksResponseValidationError) ErrorName() string {
	return "SharedListEstimateResultFeedbacksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SharedListEstimateResultFeedbacksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedListEstimateResultFeedbacksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedListEstimateResultFeedbacksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedListEstimateResultFeedbacksResponseValidationError{}

// Validate checks the field values on CreateEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEstimateSelectionRequestMultiError, or nil if none found.
func (m *CreateEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// CreateEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// CreateEstimateSelectionRequestValidationError is the validation error
// returned by CreateEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type CreateEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstimateSelectionRequestValidationError) ErrorName() string {
	return "CreateEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstimateSelectionRequestValidationError{}

// Validate checks the field values on DeleteEstimateSelectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEstimateSelectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEstimateSelectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteEstimateSelectionRequestMultiError, or nil if none found.
func (m *DeleteEstimateSelectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEstimateSelectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEstimateSelection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEstimateSelectionRequestValidationError{
					field:  "EstimateSelection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateSelection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEstimateSelectionRequestValidationError{
				field:  "EstimateSelection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEstimateSelectionRequestMultiError(errors)
	}

	return nil
}

// DeleteEstimateSelectionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteEstimateSelectionRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteEstimateSelectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEstimateSelectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEstimateSelectionRequestMultiError) AllErrors() []error { return m }

// DeleteEstimateSelectionRequestValidationError is the validation error
// returned by DeleteEstimateSelectionRequest.Validate if the designated
// constraints aren't met.
type DeleteEstimateSelectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstimateSelectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstimateSelectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstimateSelectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstimateSelectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstimateSelectionRequestValidationError) ErrorName() string {
	return "DeleteEstimateSelectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstimateSelectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstimateSelectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstimateSelectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstimateSelectionRequestValidationError{}

// Validate checks the field values on OnRecordSharedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnRecordSharedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnRecordSharedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnRecordSharedRequestMultiError, or nil if none found.
func (m *OnRecordSharedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnRecordSharedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeName

	// no validation rules for RecordId

	if len(errors) > 0 {
		return OnRecordSharedRequestMultiError(errors)
	}

	return nil
}

// OnRecordSharedRequestMultiError is an error wrapping multiple validation
// errors returned by OnRecordSharedRequest.ValidateAll() if the designated
// constraints aren't met.
type OnRecordSharedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnRecordSharedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnRecordSharedRequestMultiError) AllErrors() []error { return m }

// OnRecordSharedRequestValidationError is the validation error returned by
// OnRecordSharedRequest.Validate if the designated constraints aren't met.
type OnRecordSharedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnRecordSharedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnRecordSharedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnRecordSharedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnRecordSharedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnRecordSharedRequestValidationError) ErrorName() string {
	return "OnRecordSharedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnRecordSharedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnRecordSharedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnRecordSharedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnRecordSharedRequestValidationError{}

// Validate checks the field values on OnRecordSharedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnRecordSharedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnRecordSharedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnRecordSharedResponseMultiError, or nil if none found.
func (m *OnRecordSharedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnRecordSharedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OnRecordSharedResponseMultiError(errors)
	}

	return nil
}

// OnRecordSharedResponseMultiError is an error wrapping multiple validation
// errors returned by OnRecordSharedResponse.ValidateAll() if the designated
// constraints aren't met.
type OnRecordSharedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnRecordSharedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnRecordSharedResponseMultiError) AllErrors() []error { return m }

// OnRecordSharedResponseValidationError is the validation error returned by
// OnRecordSharedResponse.Validate if the designated constraints aren't met.
type OnRecordSharedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnRecordSharedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnRecordSharedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnRecordSharedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnRecordSharedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnRecordSharedResponseValidationError) ErrorName() string {
	return "OnRecordSharedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnRecordSharedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnRecordSharedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnRecordSharedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnRecordSharedResponseValidationError{}

// Validate checks the field values on OnRecordSharetoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnRecordSharetoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnRecordSharetoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnRecordSharetoRequestMultiError, or nil if none found.
func (m *OnRecordSharetoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnRecordSharetoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeName

	// no validation rules for RecordId

	if len(errors) > 0 {
		return OnRecordSharetoRequestMultiError(errors)
	}

	return nil
}

// OnRecordSharetoRequestMultiError is an error wrapping multiple validation
// errors returned by OnRecordSharetoRequest.ValidateAll() if the designated
// constraints aren't met.
type OnRecordSharetoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnRecordSharetoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnRecordSharetoRequestMultiError) AllErrors() []error { return m }

// OnRecordSharetoRequestValidationError is the validation error returned by
// OnRecordSharetoRequest.Validate if the designated constraints aren't met.
type OnRecordSharetoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnRecordSharetoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnRecordSharetoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnRecordSharetoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnRecordSharetoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnRecordSharetoRequestValidationError) ErrorName() string {
	return "OnRecordSharetoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnRecordSharetoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnRecordSharetoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnRecordSharetoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnRecordSharetoRequestValidationError{}

// Validate checks the field values on OnRecordSharetoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnRecordSharetoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnRecordSharetoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnRecordSharetoResponseMultiError, or nil if none found.
func (m *OnRecordSharetoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnRecordSharetoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OnRecordSharetoResponseMultiError(errors)
	}

	return nil
}

// OnRecordSharetoResponseMultiError is an error wrapping multiple validation
// errors returned by OnRecordSharetoResponse.ValidateAll() if the designated
// constraints aren't met.
type OnRecordSharetoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnRecordSharetoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnRecordSharetoResponseMultiError) AllErrors() []error { return m }

// OnRecordSharetoResponseValidationError is the validation error returned by
// OnRecordSharetoResponse.Validate if the designated constraints aren't met.
type OnRecordSharetoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnRecordSharetoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnRecordSharetoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnRecordSharetoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnRecordSharetoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnRecordSharetoResponseValidationError) ErrorName() string {
	return "OnRecordSharetoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnRecordSharetoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnRecordSharetoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnRecordSharetoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnRecordSharetoResponseValidationError{}
