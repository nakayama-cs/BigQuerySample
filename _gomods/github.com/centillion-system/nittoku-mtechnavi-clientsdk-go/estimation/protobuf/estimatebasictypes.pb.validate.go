// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimatebasictypes.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Issuer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Issuer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Issuer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IssuerMultiError, or nil if none found.
func (m *Issuer) ValidateAll() error {
	return m.validate(true)
}

func (m *Issuer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuerValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuerValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuerValidationError{
				field:  "OrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssuerValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssuerValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssuerValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IssuedAt

	if len(errors) > 0 {
		return IssuerMultiError(errors)
	}

	return nil
}

// IssuerMultiError is an error wrapping multiple validation errors returned by
// Issuer.ValidateAll() if the designated constraints aren't met.
type IssuerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssuerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssuerMultiError) AllErrors() []error { return m }

// IssuerValidationError is the validation error returned by Issuer.Validate if
// the designated constraints aren't met.
type IssuerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssuerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssuerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssuerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssuerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssuerValidationError) ErrorName() string { return "IssuerValidationError" }

// Error satisfies the builtin error interface
func (e IssuerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssuer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssuerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssuerValidationError{}

// Validate checks the field values on RequesterProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequesterProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequesterProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequesterPropertiesMultiError, or nil if none found.
func (m *RequesterProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *RequesterProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequesterPropertiesValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequesterPropertiesValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequesterPropertiesValidationError{
				field:  "OrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RequesterPropertiesValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RequesterPropertiesValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequesterPropertiesValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return RequesterPropertiesMultiError(errors)
	}

	return nil
}

// RequesterPropertiesMultiError is an error wrapping multiple validation
// errors returned by RequesterProperties.ValidateAll() if the designated
// constraints aren't met.
type RequesterPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequesterPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequesterPropertiesMultiError) AllErrors() []error { return m }

// RequesterPropertiesValidationError is the validation error returned by
// RequesterProperties.Validate if the designated constraints aren't met.
type RequesterPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequesterPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequesterPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequesterPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequesterPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequesterPropertiesValidationError) ErrorName() string {
	return "RequesterPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e RequesterPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequesterProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequesterPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequesterPropertiesValidationError{}

// Validate checks the field values on CostCenter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CostCenter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CostCenter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CostCenterMultiError, or
// nil if none found.
func (m *CostCenter) ValidateAll() error {
	return m.validate(true)
}

func (m *CostCenter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CostCenterCode

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return CostCenterMultiError(errors)
	}

	return nil
}

// CostCenterMultiError is an error wrapping multiple validation errors
// returned by CostCenter.ValidateAll() if the designated constraints aren't met.
type CostCenterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CostCenterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CostCenterMultiError) AllErrors() []error { return m }

// CostCenterValidationError is the validation error returned by
// CostCenter.Validate if the designated constraints aren't met.
type CostCenterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CostCenterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CostCenterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CostCenterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CostCenterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CostCenterValidationError) ErrorName() string { return "CostCenterValidationError" }

// Error satisfies the builtin error interface
func (e CostCenterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCostCenter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CostCenterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CostCenterValidationError{}

// Validate checks the field values on StatusFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatusFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatusFilterMultiError, or
// nil if none found.
func (m *StatusFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Completed

	if len(errors) > 0 {
		return StatusFilterMultiError(errors)
	}

	return nil
}

// StatusFilterMultiError is an error wrapping multiple validation errors
// returned by StatusFilter.ValidateAll() if the designated constraints aren't met.
type StatusFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusFilterMultiError) AllErrors() []error { return m }

// StatusFilterValidationError is the validation error returned by
// StatusFilter.Validate if the designated constraints aren't met.
type StatusFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusFilterValidationError) ErrorName() string { return "StatusFilterValidationError" }

// Error satisfies the builtin error interface
func (e StatusFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusFilterValidationError{}

// Validate checks the field values on ImageFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageFileMultiError, or nil
// if none found.
func (m *ImageFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImageFileMultiError(errors)
	}

	return nil
}

// ImageFileMultiError is an error wrapping multiple validation errors returned
// by ImageFile.ValidateAll() if the designated constraints aren't met.
type ImageFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageFileMultiError) AllErrors() []error { return m }

// ImageFileValidationError is the validation error returned by
// ImageFile.Validate if the designated constraints aren't met.
type ImageFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageFileValidationError) ErrorName() string { return "ImageFileValidationError" }

// Error satisfies the builtin error interface
func (e ImageFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageFileValidationError{}

// Validate checks the field values on Attachment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attachment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attachment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentMultiError, or
// nil if none found.
func (m *Attachment) ValidateAll() error {
	return m.validate(true)
}

func (m *Attachment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachmentValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachmentValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachmentValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Filename

	// no validation rules for Remarks

	// no validation rules for MimeType

	if all {
		switch v := interface{}(m.GetLinkType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachmentValidationError{
					field:  "LinkType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachmentValidationError{
					field:  "LinkType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinkType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachmentValidationError{
				field:  "LinkType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DetailName

	if len(errors) > 0 {
		return AttachmentMultiError(errors)
	}

	return nil
}

// AttachmentMultiError is an error wrapping multiple validation errors
// returned by Attachment.ValidateAll() if the designated constraints aren't met.
type AttachmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentMultiError) AllErrors() []error { return m }

// AttachmentValidationError is the validation error returned by
// Attachment.Validate if the designated constraints aren't met.
type AttachmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentValidationError) ErrorName() string { return "AttachmentValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentValidationError{}

// Validate checks the field values on ApprovalRequestProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovalRequestProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalRequestProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovalRequestPropertiesMultiError, or nil if none found.
func (m *ApprovalRequestProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Comment

	if all {
		switch v := interface{}(m.GetApprovalOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestPropertiesValidationError{
					field:  "ApprovalOrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestPropertiesValidationError{
					field:  "ApprovalOrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestPropertiesValidationError{
				field:  "ApprovalOrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestPropertiesValidationError{
					field:  "ApprovalStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestPropertiesValidationError{
					field:  "ApprovalStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestPropertiesValidationError{
				field:  "ApprovalStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestedAt

	if len(errors) > 0 {
		return ApprovalRequestPropertiesMultiError(errors)
	}

	return nil
}

// ApprovalRequestPropertiesMultiError is an error wrapping multiple validation
// errors returned by ApprovalRequestProperties.ValidateAll() if the
// designated constraints aren't met.
type ApprovalRequestPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestPropertiesMultiError) AllErrors() []error { return m }

// ApprovalRequestPropertiesValidationError is the validation error returned by
// ApprovalRequestProperties.Validate if the designated constraints aren't met.
type ApprovalRequestPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestPropertiesValidationError) ErrorName() string {
	return "ApprovalRequestPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestPropertiesValidationError{}

// Validate checks the field values on ApprovalProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovalProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovalPropertiesMultiError, or nil if none found.
func (m *ApprovalProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Comment

	if all {
		switch v := interface{}(m.GetApprovalOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalPropertiesValidationError{
					field:  "ApprovalOrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalPropertiesValidationError{
					field:  "ApprovalOrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalPropertiesValidationError{
				field:  "ApprovalOrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalPropertiesValidationError{
					field:  "ApprovalStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalPropertiesValidationError{
					field:  "ApprovalStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalPropertiesValidationError{
				field:  "ApprovalStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ApprovedAt

	// no validation rules for RejectedAt

	if len(errors) > 0 {
		return ApprovalPropertiesMultiError(errors)
	}

	return nil
}

// ApprovalPropertiesMultiError is an error wrapping multiple validation errors
// returned by ApprovalProperties.ValidateAll() if the designated constraints
// aren't met.
type ApprovalPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalPropertiesMultiError) AllErrors() []error { return m }

// ApprovalPropertiesValidationError is the validation error returned by
// ApprovalProperties.Validate if the designated constraints aren't met.
type ApprovalPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalPropertiesValidationError) ErrorName() string {
	return "ApprovalPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalPropertiesValidationError{}

// Validate checks the field values on SAPCodeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SAPCodeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SAPCodeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SAPCodeItemMultiError, or
// nil if none found.
func (m *SAPCodeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SAPCodeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemCode

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return SAPCodeItemMultiError(errors)
	}

	return nil
}

// SAPCodeItemMultiError is an error wrapping multiple validation errors
// returned by SAPCodeItem.ValidateAll() if the designated constraints aren't met.
type SAPCodeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SAPCodeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SAPCodeItemMultiError) AllErrors() []error { return m }

// SAPCodeItemValidationError is the validation error returned by
// SAPCodeItem.Validate if the designated constraints aren't met.
type SAPCodeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SAPCodeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SAPCodeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SAPCodeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SAPCodeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SAPCodeItemValidationError) ErrorName() string { return "SAPCodeItemValidationError" }

// Error satisfies the builtin error interface
func (e SAPCodeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSAPCodeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SAPCodeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SAPCodeItemValidationError{}

// Validate checks the field values on SAPUnitAmount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SAPUnitAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SAPUnitAmount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SAPUnitAmountMultiError, or
// nil if none found.
func (m *SAPUnitAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *SAPUnitAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unit

	// no validation rules for Amount

	if len(errors) > 0 {
		return SAPUnitAmountMultiError(errors)
	}

	return nil
}

// SAPUnitAmountMultiError is an error wrapping multiple validation errors
// returned by SAPUnitAmount.ValidateAll() if the designated constraints
// aren't met.
type SAPUnitAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SAPUnitAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SAPUnitAmountMultiError) AllErrors() []error { return m }

// SAPUnitAmountValidationError is the validation error returned by
// SAPUnitAmount.Validate if the designated constraints aren't met.
type SAPUnitAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SAPUnitAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SAPUnitAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SAPUnitAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SAPUnitAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SAPUnitAmountValidationError) ErrorName() string { return "SAPUnitAmountValidationError" }

// Error satisfies the builtin error interface
func (e SAPUnitAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSAPUnitAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SAPUnitAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SAPUnitAmountValidationError{}

// Validate checks the field values on SAPTypeCodeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SAPTypeCodeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SAPTypeCodeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SAPTypeCodeItemMultiError, or nil if none found.
func (m *SAPTypeCodeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SAPTypeCodeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemType

	// no validation rules for ItemCode

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return SAPTypeCodeItemMultiError(errors)
	}

	return nil
}

// SAPTypeCodeItemMultiError is an error wrapping multiple validation errors
// returned by SAPTypeCodeItem.ValidateAll() if the designated constraints
// aren't met.
type SAPTypeCodeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SAPTypeCodeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SAPTypeCodeItemMultiError) AllErrors() []error { return m }

// SAPTypeCodeItemValidationError is the validation error returned by
// SAPTypeCodeItem.Validate if the designated constraints aren't met.
type SAPTypeCodeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SAPTypeCodeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SAPTypeCodeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SAPTypeCodeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SAPTypeCodeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SAPTypeCodeItemValidationError) ErrorName() string { return "SAPTypeCodeItemValidationError" }

// Error satisfies the builtin error interface
func (e SAPTypeCodeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSAPTypeCodeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SAPTypeCodeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SAPTypeCodeItemValidationError{}

// Validate checks the field values on SAPAssociatedCompany with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SAPAssociatedCompany) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SAPAssociatedCompany with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SAPAssociatedCompanyMultiError, or nil if none found.
func (m *SAPAssociatedCompany) ValidateAll() error {
	return m.validate(true)
}

func (m *SAPAssociatedCompany) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for CostCenter

	// no validation rules for ProfitCenter

	if len(errors) > 0 {
		return SAPAssociatedCompanyMultiError(errors)
	}

	return nil
}

// SAPAssociatedCompanyMultiError is an error wrapping multiple validation
// errors returned by SAPAssociatedCompany.ValidateAll() if the designated
// constraints aren't met.
type SAPAssociatedCompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SAPAssociatedCompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SAPAssociatedCompanyMultiError) AllErrors() []error { return m }

// SAPAssociatedCompanyValidationError is the validation error returned by
// SAPAssociatedCompany.Validate if the designated constraints aren't met.
type SAPAssociatedCompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SAPAssociatedCompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SAPAssociatedCompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SAPAssociatedCompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SAPAssociatedCompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SAPAssociatedCompanyValidationError) ErrorName() string {
	return "SAPAssociatedCompanyValidationError"
}

// Error satisfies the builtin error interface
func (e SAPAssociatedCompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSAPAssociatedCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SAPAssociatedCompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SAPAssociatedCompanyValidationError{}

// Validate checks the field values on SAPReceiverProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SAPReceiverProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SAPReceiverProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SAPReceiverPropertiesMultiError, or nil if none found.
func (m *SAPReceiverProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *SAPReceiverProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SAPReceiverPropertiesValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SAPReceiverPropertiesValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SAPReceiverPropertiesValidationError{
				field:  "OrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SAPReceiverPropertiesValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SAPReceiverPropertiesValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SAPReceiverPropertiesValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceivedDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SAPReceiverPropertiesValidationError{
					field:  "ReceivedDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SAPReceiverPropertiesValidationError{
					field:  "ReceivedDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SAPReceiverPropertiesValidationError{
				field:  "ReceivedDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SAPReceiverPropertiesMultiError(errors)
	}

	return nil
}

// SAPReceiverPropertiesMultiError is an error wrapping multiple validation
// errors returned by SAPReceiverProperties.ValidateAll() if the designated
// constraints aren't met.
type SAPReceiverPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SAPReceiverPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SAPReceiverPropertiesMultiError) AllErrors() []error { return m }

// SAPReceiverPropertiesValidationError is the validation error returned by
// SAPReceiverProperties.Validate if the designated constraints aren't met.
type SAPReceiverPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SAPReceiverPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SAPReceiverPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SAPReceiverPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SAPReceiverPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SAPReceiverPropertiesValidationError) ErrorName() string {
	return "SAPReceiverPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e SAPReceiverPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSAPReceiverProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SAPReceiverPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SAPReceiverPropertiesValidationError{}
