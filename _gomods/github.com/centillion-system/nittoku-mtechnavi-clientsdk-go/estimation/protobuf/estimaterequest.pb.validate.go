// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimaterequest.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EstimateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestMultiError, or nil if none found.
func (m *EstimateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateRequestId

	// no validation rules for EstimateRequestCode

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimateResultSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "EstimateResultSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "EstimateResultSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateResultSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "EstimateResultSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayName

	// no validation rules for TrackingCode

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDesiredReciveDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "DesiredReciveDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "DesiredReciveDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredReciveDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "DesiredReciveDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTopPriorityContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "TopPriorityContent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "TopPriorityContent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTopPriorityContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "TopPriorityContent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPurpose()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Purpose",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Purpose",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurpose()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "Purpose",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEstimateDeadlineDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "EstimateDeadlineDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "EstimateDeadlineDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEstimateDeadlineDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "EstimateDeadlineDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderPlanDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "OrderPlanDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "OrderPlanDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderPlanDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "OrderPlanDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrderSite

	// no validation rules for Notice

	if all {
		switch v := interface{}(m.GetDeliveryProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "DeliveryProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "DeliveryProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "DeliveryProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContactProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "ContactProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "ContactProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContactProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "ContactProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequesterProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "RequesterProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "RequesterProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequesterProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "RequesterProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEstimateUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("EstimateUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestValidationError{
					field:  fmt.Sprintf("EstimateUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEstimateRequestDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("EstimateRequestDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("EstimateRequestDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestValidationError{
					field:  fmt.Sprintf("EstimateRequestDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSapProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "SapProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "SapProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSapProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "SapProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	if all {
		switch v := interface{}(m.GetIssuer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "Issuer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSourceEstimateRequestPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("SourceEstimateRequestPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("SourceEstimateRequestPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestValidationError{
					field:  fmt.Sprintf("SourceEstimateRequestPlans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Closed

	if all {
		switch v := interface{}(m.GetApprovalRequestProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "ApprovalRequestProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "ApprovalRequestProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalRequestProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "ApprovalRequestProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "ApprovalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "ApprovalProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "ApprovalProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RevisedAt

	// no validation rules for Completed

	// no validation rules for Discarded

	for idx, item := range m.GetAggregatedTransactionUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("AggregatedTransactionUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("AggregatedTransactionUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestValidationError{
					field:  fmt.Sprintf("AggregatedTransactionUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAggregatedProcesss() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("AggregatedProcesss[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestValidationError{
						field:  fmt.Sprintf("AggregatedProcesss[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestValidationError{
					field:  fmt.Sprintf("AggregatedProcesss[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetIssuerCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "IssuerCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "IssuerCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuerCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "IssuerCompany",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Locked

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EstimateRequestMultiError(errors)
	}

	return nil
}

// EstimateRequestMultiError is an error wrapping multiple validation errors
// returned by EstimateRequest.ValidateAll() if the designated constraints
// aren't met.
type EstimateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestMultiError) AllErrors() []error { return m }

// EstimateRequestValidationError is the validation error returned by
// EstimateRequest.Validate if the designated constraints aren't met.
type EstimateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestValidationError) ErrorName() string { return "EstimateRequestValidationError" }

// Error satisfies the builtin error interface
func (e EstimateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestValidationError{}

// Validate checks the field values on EstimateRequestDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequestDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestDetailMultiError, or nil if none found.
func (m *EstimateRequestDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DetailName

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetTransactionUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "TransactionUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "TransactionUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestDetailValidationError{
				field:  "TransactionUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTransactionUnitShareProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "TransactionUnitShareProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "TransactionUnitShareProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransactionUnitShareProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestDetailValidationError{
				field:  "TransactionUnitShareProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BlueprintId

	if all {
		switch v := interface{}(m.GetBlueprintShareProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "BlueprintShareProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "BlueprintShareProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlueprintShareProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestDetailValidationError{
				field:  "BlueprintShareProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestDetailValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProcesss() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestDetailValidationError{
						field:  fmt.Sprintf("Processs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestDetailValidationError{
						field:  fmt.Sprintf("Processs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestDetailValidationError{
					field:  fmt.Sprintf("Processs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCatalogReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "CatalogReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "CatalogReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatalogReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestDetailValidationError{
				field:  "CatalogReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TransactionUnitNumber

	// no validation rules for ContactMatter

	// no validation rules for SuppliedParts

	if all {
		switch v := interface{}(m.GetSuppliesDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "SuppliesDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestDetailValidationError{
					field:  "SuppliesDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuppliesDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestDetailValidationError{
				field:  "SuppliesDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SuppliesRemarks

	// no validation rules for Inspection

	if len(errors) > 0 {
		return EstimateRequestDetailMultiError(errors)
	}

	return nil
}

// EstimateRequestDetailMultiError is an error wrapping multiple validation
// errors returned by EstimateRequestDetail.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequestDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestDetailMultiError) AllErrors() []error { return m }

// EstimateRequestDetailValidationError is the validation error returned by
// EstimateRequestDetail.Validate if the designated constraints aren't met.
type EstimateRequestDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestDetailValidationError) ErrorName() string {
	return "EstimateRequestDetailValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestDetailValidationError{}

// Validate checks the field values on EstimateUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EstimateUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateUnit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EstimateUnitMultiError, or
// nil if none found.
func (m *EstimateUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateUnitId

	// no validation rules for EstimateRequestId

	// no validation rules for CompanyId

	// no validation rules for PostUnitId

	// no validation rules for RequestedAt

	// no validation rules for RevisedAt

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateUnitValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateUnitValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateUnitValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EstimateUnitMultiError(errors)
	}

	return nil
}

// EstimateUnitMultiError is an error wrapping multiple validation errors
// returned by EstimateUnit.ValidateAll() if the designated constraints aren't met.
type EstimateUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateUnitMultiError) AllErrors() []error { return m }

// EstimateUnitValidationError is the validation error returned by
// EstimateUnit.Validate if the designated constraints aren't met.
type EstimateUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateUnitValidationError) ErrorName() string { return "EstimateUnitValidationError" }

// Error satisfies the builtin error interface
func (e EstimateUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateUnitValidationError{}

// Validate checks the field values on EstimateRequestSAPProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestSAPProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequestSAPProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestSAPPropertiesMultiError, or nil if none found.
func (m *EstimateRequestSAPProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestSAPProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReceiverProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "ReceiverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "ReceiverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiverProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestSAPPropertiesValidationError{
				field:  "ReceiverProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestSAPPropertiesValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCostCenter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "CostCenter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "CostCenter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCostCenter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestSAPPropertiesValidationError{
				field:  "CostCenter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "WorkCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "WorkCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestSAPPropertiesValidationError{
				field:  "WorkCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "WorkUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestSAPPropertiesValidationError{
					field:  "WorkUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestSAPPropertiesValidationError{
				field:  "WorkUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateRequestSAPPropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequestSAPPropertiesMultiError is an error wrapping multiple
// validation errors returned by EstimateRequestSAPProperties.ValidateAll() if
// the designated constraints aren't met.
type EstimateRequestSAPPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestSAPPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestSAPPropertiesMultiError) AllErrors() []error { return m }

// EstimateRequestSAPPropertiesValidationError is the validation error returned
// by EstimateRequestSAPProperties.Validate if the designated constraints
// aren't met.
type EstimateRequestSAPPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestSAPPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestSAPPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestSAPPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestSAPPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestSAPPropertiesValidationError) ErrorName() string {
	return "EstimateRequestSAPPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestSAPPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestSAPProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestSAPPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestSAPPropertiesValidationError{}

// Validate checks the field values on EstimateRequest_EstimateResultSummary
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *EstimateRequest_EstimateResultSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequest_EstimateResultSummary
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EstimateRequest_EstimateResultSummaryMultiError, or nil if none found.
func (m *EstimateRequest_EstimateResultSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest_EstimateResultSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Done

	// no validation rules for Ratio

	// no validation rules for Completed

	if len(errors) > 0 {
		return EstimateRequest_EstimateResultSummaryMultiError(errors)
	}

	return nil
}

// EstimateRequest_EstimateResultSummaryMultiError is an error wrapping
// multiple validation errors returned by
// EstimateRequest_EstimateResultSummary.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequest_EstimateResultSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequest_EstimateResultSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequest_EstimateResultSummaryMultiError) AllErrors() []error { return m }

// EstimateRequest_EstimateResultSummaryValidationError is the validation error
// returned by EstimateRequest_EstimateResultSummary.Validate if the
// designated constraints aren't met.
type EstimateRequest_EstimateResultSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequest_EstimateResultSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequest_EstimateResultSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequest_EstimateResultSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequest_EstimateResultSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequest_EstimateResultSummaryValidationError) ErrorName() string {
	return "EstimateRequest_EstimateResultSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequest_EstimateResultSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest_EstimateResultSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequest_EstimateResultSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequest_EstimateResultSummaryValidationError{}

// Validate checks the field values on
// EstimateRequest_SourceEstimateRequestPlan with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EstimateRequest_SourceEstimateRequestPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequest_SourceEstimateRequestPlan with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// EstimateRequest_SourceEstimateRequestPlanMultiError, or nil if none found.
func (m *EstimateRequest_SourceEstimateRequestPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest_SourceEstimateRequestPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateRequestPlanId

	// no validation rules for Used

	if len(errors) > 0 {
		return EstimateRequest_SourceEstimateRequestPlanMultiError(errors)
	}

	return nil
}

// EstimateRequest_SourceEstimateRequestPlanMultiError is an error wrapping
// multiple validation errors returned by
// EstimateRequest_SourceEstimateRequestPlan.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequest_SourceEstimateRequestPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequest_SourceEstimateRequestPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequest_SourceEstimateRequestPlanMultiError) AllErrors() []error { return m }

// EstimateRequest_SourceEstimateRequestPlanValidationError is the validation
// error returned by EstimateRequest_SourceEstimateRequestPlan.Validate if the
// designated constraints aren't met.
type EstimateRequest_SourceEstimateRequestPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequest_SourceEstimateRequestPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequest_SourceEstimateRequestPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequest_SourceEstimateRequestPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequest_SourceEstimateRequestPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequest_SourceEstimateRequestPlanValidationError) ErrorName() string {
	return "EstimateRequest_SourceEstimateRequestPlanValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequest_SourceEstimateRequestPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest_SourceEstimateRequestPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequest_SourceEstimateRequestPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequest_SourceEstimateRequestPlanValidationError{}

// Validate checks the field values on EstimateRequest_DeliveryProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateRequest_DeliveryProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequest_DeliveryProperties
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EstimateRequest_DeliveryPropertiesMultiError, or nil if none found.
func (m *EstimateRequest_DeliveryProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest_DeliveryProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeliveryPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryPropertiesValidationError{
					field:  "DeliveryPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryPropertiesValidationError{
					field:  "DeliveryPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequest_DeliveryPropertiesValidationError{
				field:  "DeliveryPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryPropertiesValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryPropertiesValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequest_DeliveryPropertiesValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlaceProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryPropertiesValidationError{
					field:  "PlaceProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryPropertiesValidationError{
					field:  "PlaceProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaceProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequest_DeliveryPropertiesValidationError{
				field:  "PlaceProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateRequest_DeliveryPropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequest_DeliveryPropertiesMultiError is an error wrapping multiple
// validation errors returned by
// EstimateRequest_DeliveryProperties.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequest_DeliveryPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequest_DeliveryPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequest_DeliveryPropertiesMultiError) AllErrors() []error { return m }

// EstimateRequest_DeliveryPropertiesValidationError is the validation error
// returned by EstimateRequest_DeliveryProperties.Validate if the designated
// constraints aren't met.
type EstimateRequest_DeliveryPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequest_DeliveryPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequest_DeliveryPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequest_DeliveryPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequest_DeliveryPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequest_DeliveryPropertiesValidationError) ErrorName() string {
	return "EstimateRequest_DeliveryPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequest_DeliveryPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest_DeliveryProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequest_DeliveryPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequest_DeliveryPropertiesValidationError{}

// Validate checks the field values on EstimateRequest_ContactProperties with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateRequest_ContactProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequest_ContactProperties
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EstimateRequest_ContactPropertiesMultiError, or nil if none found.
func (m *EstimateRequest_ContactProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest_ContactProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequest_ContactPropertiesValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequest_ContactPropertiesValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequest_ContactPropertiesValidationError{
				field:  "OrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequest_ContactPropertiesValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequest_ContactPropertiesValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequest_ContactPropertiesValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PhoneNumber1

	// no validation rules for PhoneNumber2

	if len(errors) > 0 {
		return EstimateRequest_ContactPropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequest_ContactPropertiesMultiError is an error wrapping multiple
// validation errors returned by
// EstimateRequest_ContactProperties.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequest_ContactPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequest_ContactPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequest_ContactPropertiesMultiError) AllErrors() []error { return m }

// EstimateRequest_ContactPropertiesValidationError is the validation error
// returned by EstimateRequest_ContactProperties.Validate if the designated
// constraints aren't met.
type EstimateRequest_ContactPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequest_ContactPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequest_ContactPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequest_ContactPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequest_ContactPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequest_ContactPropertiesValidationError) ErrorName() string {
	return "EstimateRequest_ContactPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequest_ContactPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest_ContactProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequest_ContactPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequest_ContactPropertiesValidationError{}

// Validate checks the field values on
// EstimateRequest_DeliveryProperties_PlaceProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequest_DeliveryProperties_PlaceProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequest_DeliveryProperties_PlaceProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// EstimateRequest_DeliveryProperties_PlacePropertiesMultiError, or nil if
// none found.
func (m *EstimateRequest_DeliveryProperties_PlaceProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequest_DeliveryProperties_PlaceProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayNameLang

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryProperties_PlacePropertiesValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequest_DeliveryProperties_PlacePropertiesValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequest_DeliveryProperties_PlacePropertiesValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateRequest_DeliveryProperties_PlacePropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequest_DeliveryProperties_PlacePropertiesMultiError is an error
// wrapping multiple validation errors returned by
// EstimateRequest_DeliveryProperties_PlaceProperties.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequest_DeliveryProperties_PlacePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequest_DeliveryProperties_PlacePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequest_DeliveryProperties_PlacePropertiesMultiError) AllErrors() []error { return m }

// EstimateRequest_DeliveryProperties_PlacePropertiesValidationError is the
// validation error returned by
// EstimateRequest_DeliveryProperties_PlaceProperties.Validate if the
// designated constraints aren't met.
type EstimateRequest_DeliveryProperties_PlacePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequest_DeliveryProperties_PlacePropertiesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e EstimateRequest_DeliveryProperties_PlacePropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateRequest_DeliveryProperties_PlacePropertiesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e EstimateRequest_DeliveryProperties_PlacePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequest_DeliveryProperties_PlacePropertiesValidationError) ErrorName() string {
	return "EstimateRequest_DeliveryProperties_PlacePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequest_DeliveryProperties_PlacePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequest_DeliveryProperties_PlaceProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequest_DeliveryProperties_PlacePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequest_DeliveryProperties_PlacePropertiesValidationError{}

// Validate checks the field values on
// EstimateRequestDetail_TransactionUnitShareProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestDetail_TransactionUnitShareProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequestDetail_TransactionUnitShareProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// EstimateRequestDetail_TransactionUnitSharePropertiesMultiError, or nil if
// none found.
func (m *EstimateRequestDetail_TransactionUnitShareProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestDetail_TransactionUnitShareProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionUnitId

	// no validation rules for DisplayNameLang

	if len(errors) > 0 {
		return EstimateRequestDetail_TransactionUnitSharePropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequestDetail_TransactionUnitSharePropertiesMultiError is an error
// wrapping multiple validation errors returned by
// EstimateRequestDetail_TransactionUnitShareProperties.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequestDetail_TransactionUnitSharePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestDetail_TransactionUnitSharePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestDetail_TransactionUnitSharePropertiesMultiError) AllErrors() []error { return m }

// EstimateRequestDetail_TransactionUnitSharePropertiesValidationError is the
// validation error returned by
// EstimateRequestDetail_TransactionUnitShareProperties.Validate if the
// designated constraints aren't met.
type EstimateRequestDetail_TransactionUnitSharePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestDetail_TransactionUnitSharePropertiesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e EstimateRequestDetail_TransactionUnitSharePropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateRequestDetail_TransactionUnitSharePropertiesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e EstimateRequestDetail_TransactionUnitSharePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestDetail_TransactionUnitSharePropertiesValidationError) ErrorName() string {
	return "EstimateRequestDetail_TransactionUnitSharePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestDetail_TransactionUnitSharePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestDetail_TransactionUnitShareProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestDetail_TransactionUnitSharePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestDetail_TransactionUnitSharePropertiesValidationError{}

// Validate checks the field values on
// EstimateRequestDetail_BlueprintShareProperties with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestDetail_BlueprintShareProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequestDetail_BlueprintShareProperties with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// EstimateRequestDetail_BlueprintSharePropertiesMultiError, or nil if none found.
func (m *EstimateRequestDetail_BlueprintShareProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestDetail_BlueprintShareProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BlueprintId

	// no validation rules for BlueprintNumber

	// no validation rules for BranchNumber

	// no validation rules for Revision

	// no validation rules for AssetId

	if len(errors) > 0 {
		return EstimateRequestDetail_BlueprintSharePropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequestDetail_BlueprintSharePropertiesMultiError is an error
// wrapping multiple validation errors returned by
// EstimateRequestDetail_BlueprintShareProperties.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequestDetail_BlueprintSharePropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestDetail_BlueprintSharePropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestDetail_BlueprintSharePropertiesMultiError) AllErrors() []error { return m }

// EstimateRequestDetail_BlueprintSharePropertiesValidationError is the
// validation error returned by
// EstimateRequestDetail_BlueprintShareProperties.Validate if the designated
// constraints aren't met.
type EstimateRequestDetail_BlueprintSharePropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestDetail_BlueprintSharePropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestDetail_BlueprintSharePropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateRequestDetail_BlueprintSharePropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestDetail_BlueprintSharePropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestDetail_BlueprintSharePropertiesValidationError) ErrorName() string {
	return "EstimateRequestDetail_BlueprintSharePropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestDetail_BlueprintSharePropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestDetail_BlueprintShareProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestDetail_BlueprintSharePropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestDetail_BlueprintSharePropertiesValidationError{}

// Validate checks the field values on EstimateRequestDetail_CatalogReference
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *EstimateRequestDetail_CatalogReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequestDetail_CatalogReference with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// EstimateRequestDetail_CatalogReferenceMultiError, or nil if none found.
func (m *EstimateRequestDetail_CatalogReference) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestDetail_CatalogReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelNumber

	// no validation rules for Manufacture

	if len(errors) > 0 {
		return EstimateRequestDetail_CatalogReferenceMultiError(errors)
	}

	return nil
}

// EstimateRequestDetail_CatalogReferenceMultiError is an error wrapping
// multiple validation errors returned by
// EstimateRequestDetail_CatalogReference.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequestDetail_CatalogReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestDetail_CatalogReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestDetail_CatalogReferenceMultiError) AllErrors() []error { return m }

// EstimateRequestDetail_CatalogReferenceValidationError is the validation
// error returned by EstimateRequestDetail_CatalogReference.Validate if the
// designated constraints aren't met.
type EstimateRequestDetail_CatalogReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestDetail_CatalogReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestDetail_CatalogReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestDetail_CatalogReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestDetail_CatalogReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestDetail_CatalogReferenceValidationError) ErrorName() string {
	return "EstimateRequestDetail_CatalogReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestDetail_CatalogReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestDetail_CatalogReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestDetail_CatalogReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestDetail_CatalogReferenceValidationError{}
