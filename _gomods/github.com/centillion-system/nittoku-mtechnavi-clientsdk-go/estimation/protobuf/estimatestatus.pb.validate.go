// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimatestatus.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Lock with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Lock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lock with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LockMultiError, or nil if none found.
func (m *Lock) ValidateAll() error {
	return m.validate(true)
}

func (m *Lock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LockId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return LockMultiError(errors)
	}

	return nil
}

// LockMultiError is an error wrapping multiple validation errors returned by
// Lock.ValidateAll() if the designated constraints aren't met.
type LockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockMultiError) AllErrors() []error { return m }

// LockValidationError is the validation error returned by Lock.Validate if the
// designated constraints aren't met.
type LockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockValidationError) ErrorName() string { return "LockValidationError" }

// Error satisfies the builtin error interface
func (e LockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockValidationError{}

// Validate checks the field values on Close with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Close) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Close with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CloseMultiError, or nil if none found.
func (m *Close) ValidateAll() error {
	return m.validate(true)
}

func (m *Close) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloseId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for ClosedAt

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CloseMultiError(errors)
	}

	return nil
}

// CloseMultiError is an error wrapping multiple validation errors returned by
// Close.ValidateAll() if the designated constraints aren't met.
type CloseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseMultiError) AllErrors() []error { return m }

// CloseValidationError is the validation error returned by Close.Validate if
// the designated constraints aren't met.
type CloseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseValidationError) ErrorName() string { return "CloseValidationError" }

// Error satisfies the builtin error interface
func (e CloseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClose.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseValidationError{}

// Validate checks the field values on Complete with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Complete) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Complete with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompleteMultiError, or nil
// if none found.
func (m *Complete) ValidateAll() error {
	return m.validate(true)
}

func (m *Complete) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompleteId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CompleteMultiError(errors)
	}

	return nil
}

// CompleteMultiError is an error wrapping multiple validation errors returned
// by Complete.ValidateAll() if the designated constraints aren't met.
type CompleteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteMultiError) AllErrors() []error { return m }

// CompleteValidationError is the validation error returned by
// Complete.Validate if the designated constraints aren't met.
type CompleteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteValidationError) ErrorName() string { return "CompleteValidationError" }

// Error satisfies the builtin error interface
func (e CompleteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComplete.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteValidationError{}

// Validate checks the field values on Discard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discard with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DiscardMultiError, or nil if none found.
func (m *Discard) ValidateAll() error {
	return m.validate(true)
}

func (m *Discard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscardId

	// no validation rules for Urn

	// no validation rules for TypeName

	// no validation rules for RecordId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return DiscardMultiError(errors)
	}

	return nil
}

// DiscardMultiError is an error wrapping multiple validation errors returned
// by Discard.ValidateAll() if the designated constraints aren't met.
type DiscardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardMultiError) AllErrors() []error { return m }

// DiscardValidationError is the validation error returned by Discard.Validate
// if the designated constraints aren't met.
type DiscardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardValidationError) ErrorName() string { return "DiscardValidationError" }

// Error satisfies the builtin error interface
func (e DiscardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardValidationError{}

// Validate checks the field values on EstimateRequestPlanStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestPlanStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequestPlanStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestPlanStatusMultiError, or nil if none found.
func (m *EstimateRequestPlanStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestPlanStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlanStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlanStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlanStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateRequestPlanStatusMultiError(errors)
	}

	return nil
}

// EstimateRequestPlanStatusMultiError is an error wrapping multiple validation
// errors returned by EstimateRequestPlanStatus.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequestPlanStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestPlanStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestPlanStatusMultiError) AllErrors() []error { return m }

// EstimateRequestPlanStatusValidationError is the validation error returned by
// EstimateRequestPlanStatus.Validate if the designated constraints aren't met.
type EstimateRequestPlanStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestPlanStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestPlanStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestPlanStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestPlanStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestPlanStatusValidationError) ErrorName() string {
	return "EstimateRequestPlanStatusValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestPlanStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestPlanStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestPlanStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestPlanStatusValidationError{}

// Validate checks the field values on EstimateRequestStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequestStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestStatusMultiError, or nil if none found.
func (m *EstimateRequestStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestStatusValidationError{
					field:  "DataStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestStatusValidationError{
					field:  "DataStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestStatusValidationError{
				field:  "DataStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestStatusValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestStatusValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestStatusValidationError{
				field:  "ApprovalStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateRequestStatusMultiError(errors)
	}

	return nil
}

// EstimateRequestStatusMultiError is an error wrapping multiple validation
// errors returned by EstimateRequestStatus.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequestStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestStatusMultiError) AllErrors() []error { return m }

// EstimateRequestStatusValidationError is the validation error returned by
// EstimateRequestStatus.Validate if the designated constraints aren't met.
type EstimateRequestStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestStatusValidationError) ErrorName() string {
	return "EstimateRequestStatusValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestStatusValidationError{}

// Validate checks the field values on EstimateSelectionStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateSelectionStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateSelectionStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateSelectionStatusMultiError, or nil if none found.
func (m *EstimateSelectionStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateSelectionStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionStatusValidationError{
					field:  "DataStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionStatusValidationError{
					field:  "DataStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionStatusValidationError{
				field:  "DataStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateSelectionStatusValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateSelectionStatusValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateSelectionStatusValidationError{
				field:  "ApprovalStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateSelectionStatusMultiError(errors)
	}

	return nil
}

// EstimateSelectionStatusMultiError is an error wrapping multiple validation
// errors returned by EstimateSelectionStatus.ValidateAll() if the designated
// constraints aren't met.
type EstimateSelectionStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateSelectionStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateSelectionStatusMultiError) AllErrors() []error { return m }

// EstimateSelectionStatusValidationError is the validation error returned by
// EstimateSelectionStatus.Validate if the designated constraints aren't met.
type EstimateSelectionStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateSelectionStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateSelectionStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateSelectionStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateSelectionStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateSelectionStatusValidationError) ErrorName() string {
	return "EstimateSelectionStatusValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateSelectionStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateSelectionStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateSelectionStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateSelectionStatusValidationError{}

// Validate checks the field values on EstimateResultStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateResultStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateResultStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateResultStatusMultiError, or nil if none found.
func (m *EstimateResultStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateResultStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultStatusValidationError{
					field:  "DataStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultStatusValidationError{
					field:  "DataStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultStatusValidationError{
				field:  "DataStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateResultStatusValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateResultStatusValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateResultStatusValidationError{
				field:  "ApprovalStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EstimateResultStatusMultiError(errors)
	}

	return nil
}

// EstimateResultStatusMultiError is an error wrapping multiple validation
// errors returned by EstimateResultStatus.ValidateAll() if the designated
// constraints aren't met.
type EstimateResultStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateResultStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateResultStatusMultiError) AllErrors() []error { return m }

// EstimateResultStatusValidationError is the validation error returned by
// EstimateResultStatus.Validate if the designated constraints aren't met.
type EstimateResultStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateResultStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateResultStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateResultStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateResultStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateResultStatusValidationError) ErrorName() string {
	return "EstimateResultStatusValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateResultStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateResultStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateResultStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateResultStatusValidationError{}
