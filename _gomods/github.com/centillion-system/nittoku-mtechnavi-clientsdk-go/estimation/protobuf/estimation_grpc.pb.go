// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstimateOrdererServiceClient is the client API for EstimateOrdererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimateOrdererServiceClient interface {
	// 見積依頼予定
	CreateEstimateRequestPlan(ctx context.Context, in *CreateEstimateRequestPlanRequest, opts ...grpc.CallOption) (*EstimateRequestPlan, error)
	ListEstimateRequestPlans(ctx context.Context, in *ListEstimateRequestPlansRequest, opts ...grpc.CallOption) (*ListEstimateRequestPlansResponse, error)
	GetEstimateRequestPlan(ctx context.Context, in *GetEstimateRequestPlanRequest, opts ...grpc.CallOption) (*EstimateRequestPlan, error)
	UpdateEstimateRequestPlan(ctx context.Context, in *UpdateEstimateRequestPlanRequest, opts ...grpc.CallOption) (*EstimateRequestPlan, error)
	DeleteEstimateRequestPlan(ctx context.Context, in *DeleteEstimateRequestPlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 見積依頼予定取込
	ImportEstimateRequestPlans(ctx context.Context, in *ImportEstimateRequestPlansRequest, opts ...grpc.CallOption) (*ImportEstimateRequestPlansResponse, error)
	// 取込フォーマット取得
	ListEstimateRequestPlanFormats(ctx context.Context, in *ListEstimateRequestPlanFormatsRequest, opts ...grpc.CallOption) (*ListEstimateRequestPlanFormatsResponse, error)
	// 見積依頼予定を 完了 にする
	CompleteEstimateRequestPlan(ctx context.Context, in *CompleteEstimateRequestPlanRequest, opts ...grpc.CallOption) (*CompleteEstimateRequestPlanResponse, error)
	// 見積依頼予定を 破棄 にする
	DiscardEstimateRequestPlan(ctx context.Context, in *DiscardEstimateRequestPlanRequest, opts ...grpc.CallOption) (*DiscardEstimateRequestPlanResponse, error)
	// 見積依頼
	//
	// Implementation Note::
	//
	//	見積依頼先(EstimateUnit)を同一トランザクションで更新する
	CreateEstimateRequest(ctx context.Context, in *CreateEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error)
	ListEstimateRequests(ctx context.Context, in *ListEstimateRequestsRequest, opts ...grpc.CallOption) (*ListEstimateRequestsResponse, error)
	GetEstimateRequest(ctx context.Context, in *GetEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error)
	// 見積依頼
	//
	// Implementation Note::
	//
	//	見積依頼先(EstimateUnit)を同一トランザクションで更新する
	UpdateEstimateRequest(ctx context.Context, in *UpdateEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error)
	DeleteEstimateRequest(ctx context.Context, in *DeleteEstimateRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 見積依頼(公開依頼)
	//
	// Implementation Note::
	//  1. 見積依頼情報の公開依頼情報を更新する
	//     EstimateRequest.approval_request_properties
	//     comment / approval_organization_unit / approval_staff / requested_at
	ApprovalRequestEstimateRequest(ctx context.Context, in *ApprovalRequestEstimateRequestRequest, opts ...grpc.CallOption) (*ApprovalRequestEstimateRequestResponse, error)
	// 確定にする
	LockEstimateRequest(ctx context.Context, in *LockEstimateRequestRequest, opts ...grpc.CallOption) (*LockEstimateRequestResponse, error)
	// 確定を戻す
	UnlockEstimateRequest(ctx context.Context, in *UnlockEstimateRequestRequest, opts ...grpc.CallOption) (*UnlockEstimateRequestResponse, error)
	// 見積依頼を 締切 にする
	CloseEstimateRequest(ctx context.Context, in *CloseEstimateRequestRequest, opts ...grpc.CallOption) (*CloseEstimateRequestResponse, error)
	// 見積依頼を 締切解除 にする
	UncloseEstimateRequest(ctx context.Context, in *UncloseEstimateRequestRequest, opts ...grpc.CallOption) (*UncloseEstimateRequestResponse, error)
	// 見積依頼を 破棄 にする
	DiscardEstimateRequest(ctx context.Context, in *DiscardEstimateRequestRequest, opts ...grpc.CallOption) (*DiscardEstimateRequestResponse, error)
	// 見積依頼を公開
	//
	// Implementation Note::
	//  1. EstimateRequest.revised_at 更新する
	//  2. 公開対象の EstimateUnit.revised_at を更新する
	//  3. 公開対象の EstimateUnit.requested_at を初回のみ更新する
	//  4. EstimateUnit.company_idに対してshareto処理を行う
	//     EstimateRequestとestimate_request_idで紐づくEstimateUnitが対象
	SharetoEstimateRequest(ctx context.Context, in *SharetoEstimateRequestRequest, opts ...grpc.CallOption) (*SharetoEstimateRequestResponse, error)
	// 公開中の見積依頼を取得
	//
	// Implementation Note::
	//
	//	最後に公開された見積依頼の情報を取得する
	SharedGetEstimateRequest(ctx context.Context, in *SharedGetEstimateRequestRequest, opts ...grpc.CallOption) (*SharedGetEstimateRequestResponse, error)
	// 見積依頼の差分を取得する
	//
	// Implementation Note::
	//
	//	渡されたEstimateRequest(old)とEstimateRequest(new)を比較して差分を返す
	//	対象のフィールドはShareの対象フィールド（GRANTED）に限定する
	DiffEstimateRequest(ctx context.Context, in *DiffEstimateRequestRequest, opts ...grpc.CallOption) (*DiffEstimateRequestResponse, error)
	// 見積結果/見積選考
	ListEstimateSelections(ctx context.Context, in *ListEstimateSelectionsRequest, opts ...grpc.CallOption) (*ListEstimateSelectionsResponse, error)
	GetEstimateSelection(ctx context.Context, in *GetEstimateSelectionRequest, opts ...grpc.CallOption) (*EstimateSelection, error)
	UpdateEstimateSelection(ctx context.Context, in *UpdateEstimateSelectionRequest, opts ...grpc.CallOption) (*EstimateSelection, error)
	// 見積選考(公開依頼)
	//
	// Implementation Note::
	//  1. 見積選考情報の公開依頼情報を更新する
	//     EstimateSelection.approval_request_properties
	//     comment / approval_organization_unit / approval_staff / requested_at
	ApprovalRequestEstimateSelection(ctx context.Context, in *ApprovalRequestEstimateSelectionRequest, opts ...grpc.CallOption) (*ApprovalRequestEstimateSelectionResponse, error)
	// 見積選考を 確定 にする
	LockEstimateSelection(ctx context.Context, in *LockEstimateSelectionRequest, opts ...grpc.CallOption) (*LockEstimateSelectionResponse, error)
	// 見積選考を 確定解除 にする
	UnlockEstimateSelection(ctx context.Context, in *UnlockEstimateSelectionRequest, opts ...grpc.CallOption) (*UnlockEstimateSelectionResponse, error)
	// 見積選考を公開する
	//
	// Implementation Note::
	//  1. EstimateSelection.replyed_at を更新する
	//  2. EstimateResult.shared_byに対してshareto処理を行う
	//     EstimateSelection と estimate_result_id で紐づく EstimateResult が対象
	SharetoEstimateSelection(ctx context.Context, in *SharetoEstimateSelectionRequest, opts ...grpc.CallOption) (*SharetoEstimateSelectionResponse, error)
	// 見積選考を 完了 にする
	//
	// Implementation Note::
	//  1. estimate_selection_id をもとに Complete を更新する
	//  2. 見積依頼（親レコード EstimateRequest）に紐づく 見積選考 が全て完了の場合
	//     見積依頼（親レコード EstimateRequest）も完了にする
	//     estimate_request_id をもとに Complete を更新する
	CompleteEstimateSelection(ctx context.Context, in *CompleteEstimateSelectionRequest, opts ...grpc.CallOption) (*CompleteEstimateSelectionResponse, error)
	// 発注出力
	//
	// Implementation Note::
	//  1. CSVの出力処理を行う
	//  2. EstimateSelectionExportLog を作成する
	ExportOrders(ctx context.Context, in *ExportOrdersRequest, opts ...grpc.CallOption) (*ExportOrdersResponse, error)
	// 発注出力フォーマット取得
	ListOrderFormats(ctx context.Context, in *ListOrderFormatsRequest, opts ...grpc.CallOption) (*ListOrderFormatsResponse, error)
	// 見積依頼/見積結果/見積選考
	ListEstimateRequestAndEstimateResultAndEstimateSelections(ctx context.Context, in *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest, opts ...grpc.CallOption) (*ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error)
	// フィードバック（差し戻し）
	CreateEstimateResultFeedback(ctx context.Context, in *CreateEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*EstimateResultFeedback, error)
	GetEstimateResultFeedback(ctx context.Context, in *GetEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*EstimateResultFeedback, error)
	UpdateEstimateResultFeedback(ctx context.Context, in *UpdateEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*EstimateResultFeedback, error)
	DeleteEstimateResultFeedback(ctx context.Context, in *DeleteEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListEstimateResultFeedbacks(ctx context.Context, in *ListEstimateResultFeedbacksRequest, opts ...grpc.CallOption) (*ListEstimateResultFeedbacksResponse, error)
	// フィードバックを公開する
	//
	// Implementation Note::
	//  1. EstimateResultFeedback.sended_atを更新する
	//  2. EstimateResultFeedback.estimate_result_id に紐づく
	//     EstimateResult.shared_properties.shared_byに対してshareto処理を行う
	SharetoEstimateResultFeedback(ctx context.Context, in *SharetoEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*SharetoEstimateResultFeedbackResponse, error)
}

type estimateOrdererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimateOrdererServiceClient(cc grpc.ClientConnInterface) EstimateOrdererServiceClient {
	return &estimateOrdererServiceClient{cc}
}

func (c *estimateOrdererServiceClient) CreateEstimateRequestPlan(ctx context.Context, in *CreateEstimateRequestPlanRequest, opts ...grpc.CallOption) (*EstimateRequestPlan, error) {
	out := new(EstimateRequestPlan)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/CreateEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListEstimateRequestPlans(ctx context.Context, in *ListEstimateRequestPlansRequest, opts ...grpc.CallOption) (*ListEstimateRequestPlansResponse, error) {
	out := new(ListEstimateRequestPlansResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequestPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) GetEstimateRequestPlan(ctx context.Context, in *GetEstimateRequestPlanRequest, opts ...grpc.CallOption) (*EstimateRequestPlan, error) {
	out := new(EstimateRequestPlan)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UpdateEstimateRequestPlan(ctx context.Context, in *UpdateEstimateRequestPlanRequest, opts ...grpc.CallOption) (*EstimateRequestPlan, error) {
	out := new(EstimateRequestPlan)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) DeleteEstimateRequestPlan(ctx context.Context, in *DeleteEstimateRequestPlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/DeleteEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ImportEstimateRequestPlans(ctx context.Context, in *ImportEstimateRequestPlansRequest, opts ...grpc.CallOption) (*ImportEstimateRequestPlansResponse, error) {
	out := new(ImportEstimateRequestPlansResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ImportEstimateRequestPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListEstimateRequestPlanFormats(ctx context.Context, in *ListEstimateRequestPlanFormatsRequest, opts ...grpc.CallOption) (*ListEstimateRequestPlanFormatsResponse, error) {
	out := new(ListEstimateRequestPlanFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequestPlanFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) CompleteEstimateRequestPlan(ctx context.Context, in *CompleteEstimateRequestPlanRequest, opts ...grpc.CallOption) (*CompleteEstimateRequestPlanResponse, error) {
	out := new(CompleteEstimateRequestPlanResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/CompleteEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) DiscardEstimateRequestPlan(ctx context.Context, in *DiscardEstimateRequestPlanRequest, opts ...grpc.CallOption) (*DiscardEstimateRequestPlanResponse, error) {
	out := new(DiscardEstimateRequestPlanResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/DiscardEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) CreateEstimateRequest(ctx context.Context, in *CreateEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error) {
	out := new(EstimateRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/CreateEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListEstimateRequests(ctx context.Context, in *ListEstimateRequestsRequest, opts ...grpc.CallOption) (*ListEstimateRequestsResponse, error) {
	out := new(ListEstimateRequestsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) GetEstimateRequest(ctx context.Context, in *GetEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error) {
	out := new(EstimateRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UpdateEstimateRequest(ctx context.Context, in *UpdateEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error) {
	out := new(EstimateRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) DeleteEstimateRequest(ctx context.Context, in *DeleteEstimateRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/DeleteEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ApprovalRequestEstimateRequest(ctx context.Context, in *ApprovalRequestEstimateRequestRequest, opts ...grpc.CallOption) (*ApprovalRequestEstimateRequestResponse, error) {
	out := new(ApprovalRequestEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ApprovalRequestEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) LockEstimateRequest(ctx context.Context, in *LockEstimateRequestRequest, opts ...grpc.CallOption) (*LockEstimateRequestResponse, error) {
	out := new(LockEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/LockEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UnlockEstimateRequest(ctx context.Context, in *UnlockEstimateRequestRequest, opts ...grpc.CallOption) (*UnlockEstimateRequestResponse, error) {
	out := new(UnlockEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UnlockEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) CloseEstimateRequest(ctx context.Context, in *CloseEstimateRequestRequest, opts ...grpc.CallOption) (*CloseEstimateRequestResponse, error) {
	out := new(CloseEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/CloseEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UncloseEstimateRequest(ctx context.Context, in *UncloseEstimateRequestRequest, opts ...grpc.CallOption) (*UncloseEstimateRequestResponse, error) {
	out := new(UncloseEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UncloseEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) DiscardEstimateRequest(ctx context.Context, in *DiscardEstimateRequestRequest, opts ...grpc.CallOption) (*DiscardEstimateRequestResponse, error) {
	out := new(DiscardEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/DiscardEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) SharetoEstimateRequest(ctx context.Context, in *SharetoEstimateRequestRequest, opts ...grpc.CallOption) (*SharetoEstimateRequestResponse, error) {
	out := new(SharetoEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/SharetoEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) SharedGetEstimateRequest(ctx context.Context, in *SharedGetEstimateRequestRequest, opts ...grpc.CallOption) (*SharedGetEstimateRequestResponse, error) {
	out := new(SharedGetEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/SharedGetEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) DiffEstimateRequest(ctx context.Context, in *DiffEstimateRequestRequest, opts ...grpc.CallOption) (*DiffEstimateRequestResponse, error) {
	out := new(DiffEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/DiffEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListEstimateSelections(ctx context.Context, in *ListEstimateSelectionsRequest, opts ...grpc.CallOption) (*ListEstimateSelectionsResponse, error) {
	out := new(ListEstimateSelectionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateSelections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) GetEstimateSelection(ctx context.Context, in *GetEstimateSelectionRequest, opts ...grpc.CallOption) (*EstimateSelection, error) {
	out := new(EstimateSelection)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UpdateEstimateSelection(ctx context.Context, in *UpdateEstimateSelectionRequest, opts ...grpc.CallOption) (*EstimateSelection, error) {
	out := new(EstimateSelection)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ApprovalRequestEstimateSelection(ctx context.Context, in *ApprovalRequestEstimateSelectionRequest, opts ...grpc.CallOption) (*ApprovalRequestEstimateSelectionResponse, error) {
	out := new(ApprovalRequestEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ApprovalRequestEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) LockEstimateSelection(ctx context.Context, in *LockEstimateSelectionRequest, opts ...grpc.CallOption) (*LockEstimateSelectionResponse, error) {
	out := new(LockEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/LockEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UnlockEstimateSelection(ctx context.Context, in *UnlockEstimateSelectionRequest, opts ...grpc.CallOption) (*UnlockEstimateSelectionResponse, error) {
	out := new(UnlockEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UnlockEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) SharetoEstimateSelection(ctx context.Context, in *SharetoEstimateSelectionRequest, opts ...grpc.CallOption) (*SharetoEstimateSelectionResponse, error) {
	out := new(SharetoEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/SharetoEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) CompleteEstimateSelection(ctx context.Context, in *CompleteEstimateSelectionRequest, opts ...grpc.CallOption) (*CompleteEstimateSelectionResponse, error) {
	out := new(CompleteEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/CompleteEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ExportOrders(ctx context.Context, in *ExportOrdersRequest, opts ...grpc.CallOption) (*ExportOrdersResponse, error) {
	out := new(ExportOrdersResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ExportOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListOrderFormats(ctx context.Context, in *ListOrderFormatsRequest, opts ...grpc.CallOption) (*ListOrderFormatsResponse, error) {
	out := new(ListOrderFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListOrderFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListEstimateRequestAndEstimateResultAndEstimateSelections(ctx context.Context, in *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest, opts ...grpc.CallOption) (*ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error) {
	out := new(ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequestAndEstimateResultAndEstimateSelections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) CreateEstimateResultFeedback(ctx context.Context, in *CreateEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*EstimateResultFeedback, error) {
	out := new(EstimateResultFeedback)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/CreateEstimateResultFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) GetEstimateResultFeedback(ctx context.Context, in *GetEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*EstimateResultFeedback, error) {
	out := new(EstimateResultFeedback)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateResultFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) UpdateEstimateResultFeedback(ctx context.Context, in *UpdateEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*EstimateResultFeedback, error) {
	out := new(EstimateResultFeedback)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateResultFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) DeleteEstimateResultFeedback(ctx context.Context, in *DeleteEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/DeleteEstimateResultFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) ListEstimateResultFeedbacks(ctx context.Context, in *ListEstimateResultFeedbacksRequest, opts ...grpc.CallOption) (*ListEstimateResultFeedbacksResponse, error) {
	out := new(ListEstimateResultFeedbacksResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateResultFeedbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrdererServiceClient) SharetoEstimateResultFeedback(ctx context.Context, in *SharetoEstimateResultFeedbackRequest, opts ...grpc.CallOption) (*SharetoEstimateResultFeedbackResponse, error) {
	out := new(SharetoEstimateResultFeedbackResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrdererService/SharetoEstimateResultFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimateOrdererServiceServer is the server API for EstimateOrdererService service.
// All implementations must embed UnimplementedEstimateOrdererServiceServer
// for forward compatibility
type EstimateOrdererServiceServer interface {
	// 見積依頼予定
	CreateEstimateRequestPlan(context.Context, *CreateEstimateRequestPlanRequest) (*EstimateRequestPlan, error)
	ListEstimateRequestPlans(context.Context, *ListEstimateRequestPlansRequest) (*ListEstimateRequestPlansResponse, error)
	GetEstimateRequestPlan(context.Context, *GetEstimateRequestPlanRequest) (*EstimateRequestPlan, error)
	UpdateEstimateRequestPlan(context.Context, *UpdateEstimateRequestPlanRequest) (*EstimateRequestPlan, error)
	DeleteEstimateRequestPlan(context.Context, *DeleteEstimateRequestPlanRequest) (*emptypb.Empty, error)
	// 見積依頼予定取込
	ImportEstimateRequestPlans(context.Context, *ImportEstimateRequestPlansRequest) (*ImportEstimateRequestPlansResponse, error)
	// 取込フォーマット取得
	ListEstimateRequestPlanFormats(context.Context, *ListEstimateRequestPlanFormatsRequest) (*ListEstimateRequestPlanFormatsResponse, error)
	// 見積依頼予定を 完了 にする
	CompleteEstimateRequestPlan(context.Context, *CompleteEstimateRequestPlanRequest) (*CompleteEstimateRequestPlanResponse, error)
	// 見積依頼予定を 破棄 にする
	DiscardEstimateRequestPlan(context.Context, *DiscardEstimateRequestPlanRequest) (*DiscardEstimateRequestPlanResponse, error)
	// 見積依頼
	//
	// Implementation Note::
	//
	//	見積依頼先(EstimateUnit)を同一トランザクションで更新する
	CreateEstimateRequest(context.Context, *CreateEstimateRequestRequest) (*EstimateRequest, error)
	ListEstimateRequests(context.Context, *ListEstimateRequestsRequest) (*ListEstimateRequestsResponse, error)
	GetEstimateRequest(context.Context, *GetEstimateRequestRequest) (*EstimateRequest, error)
	// 見積依頼
	//
	// Implementation Note::
	//
	//	見積依頼先(EstimateUnit)を同一トランザクションで更新する
	UpdateEstimateRequest(context.Context, *UpdateEstimateRequestRequest) (*EstimateRequest, error)
	DeleteEstimateRequest(context.Context, *DeleteEstimateRequestRequest) (*emptypb.Empty, error)
	// 見積依頼(公開依頼)
	//
	// Implementation Note::
	//  1. 見積依頼情報の公開依頼情報を更新する
	//     EstimateRequest.approval_request_properties
	//     comment / approval_organization_unit / approval_staff / requested_at
	ApprovalRequestEstimateRequest(context.Context, *ApprovalRequestEstimateRequestRequest) (*ApprovalRequestEstimateRequestResponse, error)
	// 確定にする
	LockEstimateRequest(context.Context, *LockEstimateRequestRequest) (*LockEstimateRequestResponse, error)
	// 確定を戻す
	UnlockEstimateRequest(context.Context, *UnlockEstimateRequestRequest) (*UnlockEstimateRequestResponse, error)
	// 見積依頼を 締切 にする
	CloseEstimateRequest(context.Context, *CloseEstimateRequestRequest) (*CloseEstimateRequestResponse, error)
	// 見積依頼を 締切解除 にする
	UncloseEstimateRequest(context.Context, *UncloseEstimateRequestRequest) (*UncloseEstimateRequestResponse, error)
	// 見積依頼を 破棄 にする
	DiscardEstimateRequest(context.Context, *DiscardEstimateRequestRequest) (*DiscardEstimateRequestResponse, error)
	// 見積依頼を公開
	//
	// Implementation Note::
	//  1. EstimateRequest.revised_at 更新する
	//  2. 公開対象の EstimateUnit.revised_at を更新する
	//  3. 公開対象の EstimateUnit.requested_at を初回のみ更新する
	//  4. EstimateUnit.company_idに対してshareto処理を行う
	//     EstimateRequestとestimate_request_idで紐づくEstimateUnitが対象
	SharetoEstimateRequest(context.Context, *SharetoEstimateRequestRequest) (*SharetoEstimateRequestResponse, error)
	// 公開中の見積依頼を取得
	//
	// Implementation Note::
	//
	//	最後に公開された見積依頼の情報を取得する
	SharedGetEstimateRequest(context.Context, *SharedGetEstimateRequestRequest) (*SharedGetEstimateRequestResponse, error)
	// 見積依頼の差分を取得する
	//
	// Implementation Note::
	//
	//	渡されたEstimateRequest(old)とEstimateRequest(new)を比較して差分を返す
	//	対象のフィールドはShareの対象フィールド（GRANTED）に限定する
	DiffEstimateRequest(context.Context, *DiffEstimateRequestRequest) (*DiffEstimateRequestResponse, error)
	// 見積結果/見積選考
	ListEstimateSelections(context.Context, *ListEstimateSelectionsRequest) (*ListEstimateSelectionsResponse, error)
	GetEstimateSelection(context.Context, *GetEstimateSelectionRequest) (*EstimateSelection, error)
	UpdateEstimateSelection(context.Context, *UpdateEstimateSelectionRequest) (*EstimateSelection, error)
	// 見積選考(公開依頼)
	//
	// Implementation Note::
	//  1. 見積選考情報の公開依頼情報を更新する
	//     EstimateSelection.approval_request_properties
	//     comment / approval_organization_unit / approval_staff / requested_at
	ApprovalRequestEstimateSelection(context.Context, *ApprovalRequestEstimateSelectionRequest) (*ApprovalRequestEstimateSelectionResponse, error)
	// 見積選考を 確定 にする
	LockEstimateSelection(context.Context, *LockEstimateSelectionRequest) (*LockEstimateSelectionResponse, error)
	// 見積選考を 確定解除 にする
	UnlockEstimateSelection(context.Context, *UnlockEstimateSelectionRequest) (*UnlockEstimateSelectionResponse, error)
	// 見積選考を公開する
	//
	// Implementation Note::
	//  1. EstimateSelection.replyed_at を更新する
	//  2. EstimateResult.shared_byに対してshareto処理を行う
	//     EstimateSelection と estimate_result_id で紐づく EstimateResult が対象
	SharetoEstimateSelection(context.Context, *SharetoEstimateSelectionRequest) (*SharetoEstimateSelectionResponse, error)
	// 見積選考を 完了 にする
	//
	// Implementation Note::
	//  1. estimate_selection_id をもとに Complete を更新する
	//  2. 見積依頼（親レコード EstimateRequest）に紐づく 見積選考 が全て完了の場合
	//     見積依頼（親レコード EstimateRequest）も完了にする
	//     estimate_request_id をもとに Complete を更新する
	CompleteEstimateSelection(context.Context, *CompleteEstimateSelectionRequest) (*CompleteEstimateSelectionResponse, error)
	// 発注出力
	//
	// Implementation Note::
	//  1. CSVの出力処理を行う
	//  2. EstimateSelectionExportLog を作成する
	ExportOrders(context.Context, *ExportOrdersRequest) (*ExportOrdersResponse, error)
	// 発注出力フォーマット取得
	ListOrderFormats(context.Context, *ListOrderFormatsRequest) (*ListOrderFormatsResponse, error)
	// 見積依頼/見積結果/見積選考
	ListEstimateRequestAndEstimateResultAndEstimateSelections(context.Context, *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) (*ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error)
	// フィードバック（差し戻し）
	CreateEstimateResultFeedback(context.Context, *CreateEstimateResultFeedbackRequest) (*EstimateResultFeedback, error)
	GetEstimateResultFeedback(context.Context, *GetEstimateResultFeedbackRequest) (*EstimateResultFeedback, error)
	UpdateEstimateResultFeedback(context.Context, *UpdateEstimateResultFeedbackRequest) (*EstimateResultFeedback, error)
	DeleteEstimateResultFeedback(context.Context, *DeleteEstimateResultFeedbackRequest) (*emptypb.Empty, error)
	ListEstimateResultFeedbacks(context.Context, *ListEstimateResultFeedbacksRequest) (*ListEstimateResultFeedbacksResponse, error)
	// フィードバックを公開する
	//
	// Implementation Note::
	//  1. EstimateResultFeedback.sended_atを更新する
	//  2. EstimateResultFeedback.estimate_result_id に紐づく
	//     EstimateResult.shared_properties.shared_byに対してshareto処理を行う
	SharetoEstimateResultFeedback(context.Context, *SharetoEstimateResultFeedbackRequest) (*SharetoEstimateResultFeedbackResponse, error)
	mustEmbedUnimplementedEstimateOrdererServiceServer()
}

// UnimplementedEstimateOrdererServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstimateOrdererServiceServer struct {
}

func (UnimplementedEstimateOrdererServiceServer) CreateEstimateRequestPlan(context.Context, *CreateEstimateRequestPlanRequest) (*EstimateRequestPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEstimateRequestPlan not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListEstimateRequestPlans(context.Context, *ListEstimateRequestPlansRequest) (*ListEstimateRequestPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateRequestPlans not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) GetEstimateRequestPlan(context.Context, *GetEstimateRequestPlanRequest) (*EstimateRequestPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimateRequestPlan not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UpdateEstimateRequestPlan(context.Context, *UpdateEstimateRequestPlanRequest) (*EstimateRequestPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEstimateRequestPlan not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) DeleteEstimateRequestPlan(context.Context, *DeleteEstimateRequestPlanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstimateRequestPlan not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ImportEstimateRequestPlans(context.Context, *ImportEstimateRequestPlansRequest) (*ImportEstimateRequestPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportEstimateRequestPlans not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListEstimateRequestPlanFormats(context.Context, *ListEstimateRequestPlanFormatsRequest) (*ListEstimateRequestPlanFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateRequestPlanFormats not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) CompleteEstimateRequestPlan(context.Context, *CompleteEstimateRequestPlanRequest) (*CompleteEstimateRequestPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteEstimateRequestPlan not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) DiscardEstimateRequestPlan(context.Context, *DiscardEstimateRequestPlanRequest) (*DiscardEstimateRequestPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardEstimateRequestPlan not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) CreateEstimateRequest(context.Context, *CreateEstimateRequestRequest) (*EstimateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListEstimateRequests(context.Context, *ListEstimateRequestsRequest) (*ListEstimateRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateRequests not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) GetEstimateRequest(context.Context, *GetEstimateRequestRequest) (*EstimateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UpdateEstimateRequest(context.Context, *UpdateEstimateRequestRequest) (*EstimateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) DeleteEstimateRequest(context.Context, *DeleteEstimateRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ApprovalRequestEstimateRequest(context.Context, *ApprovalRequestEstimateRequestRequest) (*ApprovalRequestEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalRequestEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) LockEstimateRequest(context.Context, *LockEstimateRequestRequest) (*LockEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UnlockEstimateRequest(context.Context, *UnlockEstimateRequestRequest) (*UnlockEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) CloseEstimateRequest(context.Context, *CloseEstimateRequestRequest) (*CloseEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UncloseEstimateRequest(context.Context, *UncloseEstimateRequestRequest) (*UncloseEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncloseEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) DiscardEstimateRequest(context.Context, *DiscardEstimateRequestRequest) (*DiscardEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) SharetoEstimateRequest(context.Context, *SharetoEstimateRequestRequest) (*SharetoEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) SharedGetEstimateRequest(context.Context, *SharedGetEstimateRequestRequest) (*SharedGetEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedGetEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) DiffEstimateRequest(context.Context, *DiffEstimateRequestRequest) (*DiffEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffEstimateRequest not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListEstimateSelections(context.Context, *ListEstimateSelectionsRequest) (*ListEstimateSelectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateSelections not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) GetEstimateSelection(context.Context, *GetEstimateSelectionRequest) (*EstimateSelection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UpdateEstimateSelection(context.Context, *UpdateEstimateSelectionRequest) (*EstimateSelection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ApprovalRequestEstimateSelection(context.Context, *ApprovalRequestEstimateSelectionRequest) (*ApprovalRequestEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalRequestEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) LockEstimateSelection(context.Context, *LockEstimateSelectionRequest) (*LockEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UnlockEstimateSelection(context.Context, *UnlockEstimateSelectionRequest) (*UnlockEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) SharetoEstimateSelection(context.Context, *SharetoEstimateSelectionRequest) (*SharetoEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) CompleteEstimateSelection(context.Context, *CompleteEstimateSelectionRequest) (*CompleteEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteEstimateSelection not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ExportOrders(context.Context, *ExportOrdersRequest) (*ExportOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportOrders not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListOrderFormats(context.Context, *ListOrderFormatsRequest) (*ListOrderFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrderFormats not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListEstimateRequestAndEstimateResultAndEstimateSelections(context.Context, *ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) (*ListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateRequestAndEstimateResultAndEstimateSelections not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) CreateEstimateResultFeedback(context.Context, *CreateEstimateResultFeedbackRequest) (*EstimateResultFeedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEstimateResultFeedback not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) GetEstimateResultFeedback(context.Context, *GetEstimateResultFeedbackRequest) (*EstimateResultFeedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimateResultFeedback not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) UpdateEstimateResultFeedback(context.Context, *UpdateEstimateResultFeedbackRequest) (*EstimateResultFeedback, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEstimateResultFeedback not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) DeleteEstimateResultFeedback(context.Context, *DeleteEstimateResultFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstimateResultFeedback not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) ListEstimateResultFeedbacks(context.Context, *ListEstimateResultFeedbacksRequest) (*ListEstimateResultFeedbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateResultFeedbacks not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) SharetoEstimateResultFeedback(context.Context, *SharetoEstimateResultFeedbackRequest) (*SharetoEstimateResultFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoEstimateResultFeedback not implemented")
}
func (UnimplementedEstimateOrdererServiceServer) mustEmbedUnimplementedEstimateOrdererServiceServer() {
}

// UnsafeEstimateOrdererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimateOrdererServiceServer will
// result in compilation errors.
type UnsafeEstimateOrdererServiceServer interface {
	mustEmbedUnimplementedEstimateOrdererServiceServer()
}

func RegisterEstimateOrdererServiceServer(s grpc.ServiceRegistrar, srv EstimateOrdererServiceServer) {
	s.RegisterService(&EstimateOrdererService_ServiceDesc, srv)
}

func _EstimateOrdererService_CreateEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).CreateEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/CreateEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).CreateEstimateRequestPlan(ctx, req.(*CreateEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListEstimateRequestPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateRequestPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequestPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequestPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequestPlans(ctx, req.(*ListEstimateRequestPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_GetEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).GetEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).GetEstimateRequestPlan(ctx, req.(*GetEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UpdateEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateRequestPlan(ctx, req.(*UpdateEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_DeleteEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).DeleteEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/DeleteEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).DeleteEstimateRequestPlan(ctx, req.(*DeleteEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ImportEstimateRequestPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportEstimateRequestPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ImportEstimateRequestPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ImportEstimateRequestPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ImportEstimateRequestPlans(ctx, req.(*ImportEstimateRequestPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListEstimateRequestPlanFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateRequestPlanFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequestPlanFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequestPlanFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequestPlanFormats(ctx, req.(*ListEstimateRequestPlanFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_CompleteEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).CompleteEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/CompleteEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).CompleteEstimateRequestPlan(ctx, req.(*CompleteEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_DiscardEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).DiscardEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/DiscardEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).DiscardEstimateRequestPlan(ctx, req.(*DiscardEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_CreateEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).CreateEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/CreateEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).CreateEstimateRequest(ctx, req.(*CreateEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListEstimateRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequests(ctx, req.(*ListEstimateRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_GetEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).GetEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).GetEstimateRequest(ctx, req.(*GetEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UpdateEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateRequest(ctx, req.(*UpdateEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_DeleteEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).DeleteEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/DeleteEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).DeleteEstimateRequest(ctx, req.(*DeleteEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ApprovalRequestEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequestEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ApprovalRequestEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ApprovalRequestEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ApprovalRequestEstimateRequest(ctx, req.(*ApprovalRequestEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_LockEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).LockEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/LockEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).LockEstimateRequest(ctx, req.(*LockEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UnlockEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UnlockEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UnlockEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UnlockEstimateRequest(ctx, req.(*UnlockEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_CloseEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).CloseEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/CloseEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).CloseEstimateRequest(ctx, req.(*CloseEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UncloseEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncloseEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UncloseEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UncloseEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UncloseEstimateRequest(ctx, req.(*UncloseEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_DiscardEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).DiscardEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/DiscardEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).DiscardEstimateRequest(ctx, req.(*DiscardEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_SharetoEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).SharetoEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/SharetoEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).SharetoEstimateRequest(ctx, req.(*SharetoEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_SharedGetEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedGetEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).SharedGetEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/SharedGetEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).SharedGetEstimateRequest(ctx, req.(*SharedGetEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_DiffEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).DiffEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/DiffEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).DiffEstimateRequest(ctx, req.(*DiffEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListEstimateSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateSelectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListEstimateSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateSelections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListEstimateSelections(ctx, req.(*ListEstimateSelectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_GetEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).GetEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).GetEstimateSelection(ctx, req.(*GetEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UpdateEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateSelection(ctx, req.(*UpdateEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ApprovalRequestEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequestEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ApprovalRequestEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ApprovalRequestEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ApprovalRequestEstimateSelection(ctx, req.(*ApprovalRequestEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_LockEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).LockEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/LockEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).LockEstimateSelection(ctx, req.(*LockEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UnlockEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UnlockEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UnlockEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UnlockEstimateSelection(ctx, req.(*UnlockEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_SharetoEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).SharetoEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/SharetoEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).SharetoEstimateSelection(ctx, req.(*SharetoEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_CompleteEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).CompleteEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/CompleteEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).CompleteEstimateSelection(ctx, req.(*CompleteEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ExportOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ExportOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ExportOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ExportOrders(ctx, req.(*ExportOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListOrderFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListOrderFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListOrderFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListOrderFormats(ctx, req.(*ListOrderFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListEstimateRequestAndEstimateResultAndEstimateSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequestAndEstimateResultAndEstimateSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateRequestAndEstimateResultAndEstimateSelections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListEstimateRequestAndEstimateResultAndEstimateSelections(ctx, req.(*ListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_CreateEstimateResultFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEstimateResultFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).CreateEstimateResultFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/CreateEstimateResultFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).CreateEstimateResultFeedback(ctx, req.(*CreateEstimateResultFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_GetEstimateResultFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateResultFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).GetEstimateResultFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/GetEstimateResultFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).GetEstimateResultFeedback(ctx, req.(*GetEstimateResultFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_UpdateEstimateResultFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEstimateResultFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateResultFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/UpdateEstimateResultFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).UpdateEstimateResultFeedback(ctx, req.(*UpdateEstimateResultFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_DeleteEstimateResultFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEstimateResultFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).DeleteEstimateResultFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/DeleteEstimateResultFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).DeleteEstimateResultFeedback(ctx, req.(*DeleteEstimateResultFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_ListEstimateResultFeedbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateResultFeedbacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).ListEstimateResultFeedbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/ListEstimateResultFeedbacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).ListEstimateResultFeedbacks(ctx, req.(*ListEstimateResultFeedbacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrdererService_SharetoEstimateResultFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoEstimateResultFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrdererServiceServer).SharetoEstimateResultFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrdererService/SharetoEstimateResultFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrdererServiceServer).SharetoEstimateResultFeedback(ctx, req.(*SharetoEstimateResultFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EstimateOrdererService_ServiceDesc is the grpc.ServiceDesc for EstimateOrdererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstimateOrdererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.estimation.EstimateOrdererService",
	HandlerType: (*EstimateOrdererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEstimateRequestPlan",
			Handler:    _EstimateOrdererService_CreateEstimateRequestPlan_Handler,
		},
		{
			MethodName: "ListEstimateRequestPlans",
			Handler:    _EstimateOrdererService_ListEstimateRequestPlans_Handler,
		},
		{
			MethodName: "GetEstimateRequestPlan",
			Handler:    _EstimateOrdererService_GetEstimateRequestPlan_Handler,
		},
		{
			MethodName: "UpdateEstimateRequestPlan",
			Handler:    _EstimateOrdererService_UpdateEstimateRequestPlan_Handler,
		},
		{
			MethodName: "DeleteEstimateRequestPlan",
			Handler:    _EstimateOrdererService_DeleteEstimateRequestPlan_Handler,
		},
		{
			MethodName: "ImportEstimateRequestPlans",
			Handler:    _EstimateOrdererService_ImportEstimateRequestPlans_Handler,
		},
		{
			MethodName: "ListEstimateRequestPlanFormats",
			Handler:    _EstimateOrdererService_ListEstimateRequestPlanFormats_Handler,
		},
		{
			MethodName: "CompleteEstimateRequestPlan",
			Handler:    _EstimateOrdererService_CompleteEstimateRequestPlan_Handler,
		},
		{
			MethodName: "DiscardEstimateRequestPlan",
			Handler:    _EstimateOrdererService_DiscardEstimateRequestPlan_Handler,
		},
		{
			MethodName: "CreateEstimateRequest",
			Handler:    _EstimateOrdererService_CreateEstimateRequest_Handler,
		},
		{
			MethodName: "ListEstimateRequests",
			Handler:    _EstimateOrdererService_ListEstimateRequests_Handler,
		},
		{
			MethodName: "GetEstimateRequest",
			Handler:    _EstimateOrdererService_GetEstimateRequest_Handler,
		},
		{
			MethodName: "UpdateEstimateRequest",
			Handler:    _EstimateOrdererService_UpdateEstimateRequest_Handler,
		},
		{
			MethodName: "DeleteEstimateRequest",
			Handler:    _EstimateOrdererService_DeleteEstimateRequest_Handler,
		},
		{
			MethodName: "ApprovalRequestEstimateRequest",
			Handler:    _EstimateOrdererService_ApprovalRequestEstimateRequest_Handler,
		},
		{
			MethodName: "LockEstimateRequest",
			Handler:    _EstimateOrdererService_LockEstimateRequest_Handler,
		},
		{
			MethodName: "UnlockEstimateRequest",
			Handler:    _EstimateOrdererService_UnlockEstimateRequest_Handler,
		},
		{
			MethodName: "CloseEstimateRequest",
			Handler:    _EstimateOrdererService_CloseEstimateRequest_Handler,
		},
		{
			MethodName: "UncloseEstimateRequest",
			Handler:    _EstimateOrdererService_UncloseEstimateRequest_Handler,
		},
		{
			MethodName: "DiscardEstimateRequest",
			Handler:    _EstimateOrdererService_DiscardEstimateRequest_Handler,
		},
		{
			MethodName: "SharetoEstimateRequest",
			Handler:    _EstimateOrdererService_SharetoEstimateRequest_Handler,
		},
		{
			MethodName: "SharedGetEstimateRequest",
			Handler:    _EstimateOrdererService_SharedGetEstimateRequest_Handler,
		},
		{
			MethodName: "DiffEstimateRequest",
			Handler:    _EstimateOrdererService_DiffEstimateRequest_Handler,
		},
		{
			MethodName: "ListEstimateSelections",
			Handler:    _EstimateOrdererService_ListEstimateSelections_Handler,
		},
		{
			MethodName: "GetEstimateSelection",
			Handler:    _EstimateOrdererService_GetEstimateSelection_Handler,
		},
		{
			MethodName: "UpdateEstimateSelection",
			Handler:    _EstimateOrdererService_UpdateEstimateSelection_Handler,
		},
		{
			MethodName: "ApprovalRequestEstimateSelection",
			Handler:    _EstimateOrdererService_ApprovalRequestEstimateSelection_Handler,
		},
		{
			MethodName: "LockEstimateSelection",
			Handler:    _EstimateOrdererService_LockEstimateSelection_Handler,
		},
		{
			MethodName: "UnlockEstimateSelection",
			Handler:    _EstimateOrdererService_UnlockEstimateSelection_Handler,
		},
		{
			MethodName: "SharetoEstimateSelection",
			Handler:    _EstimateOrdererService_SharetoEstimateSelection_Handler,
		},
		{
			MethodName: "CompleteEstimateSelection",
			Handler:    _EstimateOrdererService_CompleteEstimateSelection_Handler,
		},
		{
			MethodName: "ExportOrders",
			Handler:    _EstimateOrdererService_ExportOrders_Handler,
		},
		{
			MethodName: "ListOrderFormats",
			Handler:    _EstimateOrdererService_ListOrderFormats_Handler,
		},
		{
			MethodName: "ListEstimateRequestAndEstimateResultAndEstimateSelections",
			Handler:    _EstimateOrdererService_ListEstimateRequestAndEstimateResultAndEstimateSelections_Handler,
		},
		{
			MethodName: "CreateEstimateResultFeedback",
			Handler:    _EstimateOrdererService_CreateEstimateResultFeedback_Handler,
		},
		{
			MethodName: "GetEstimateResultFeedback",
			Handler:    _EstimateOrdererService_GetEstimateResultFeedback_Handler,
		},
		{
			MethodName: "UpdateEstimateResultFeedback",
			Handler:    _EstimateOrdererService_UpdateEstimateResultFeedback_Handler,
		},
		{
			MethodName: "DeleteEstimateResultFeedback",
			Handler:    _EstimateOrdererService_DeleteEstimateResultFeedback_Handler,
		},
		{
			MethodName: "ListEstimateResultFeedbacks",
			Handler:    _EstimateOrdererService_ListEstimateResultFeedbacks_Handler,
		},
		{
			MethodName: "SharetoEstimateResultFeedback",
			Handler:    _EstimateOrdererService_SharetoEstimateResultFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimation.proto",
}

// EstimateOrderApproverServiceClient is the client API for EstimateOrderApproverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimateOrderApproverServiceClient interface {
	// 見積依頼(承認)
	//
	// Implementation Note::
	//
	//  1. 見積依頼情報の承認情報を更新する
	//     EstimateRequest.approval_properties
	//     approval_organization_unit / approval_staff / approved_at
	//
	//  2. 見積依頼予定の 紐付けあり のステータスを更新する
	//     処理を行うEstimateRequest.estimate_request_plan_idsに値が存在する場合
	//     estimate_request_plan_idsから取得したEstimateRequestPlan.linked を true に更新する
	//     更新は同一トランザクションで行う
	//
	//  3. 選考情報を削除する
	//     見積依頼（伝票ステータス）が公開中で かつ 見積選考情報がある場合
	//     対象のEstimateRequestに紐づくEstimateResult.estimate_result_idを取得し
	//     EstimateResultに紐づくEstimateSelectionを削除する
	ApproveEstimateRequest(ctx context.Context, in *ApproveEstimateRequestRequest, opts ...grpc.CallOption) (*ApproveEstimateRequestResponse, error)
	// 見積依頼(却下)
	//
	// Implementation Note::
	//  1. 見積依頼情報の承認情報を更新する
	//     EstimateRequest.approval_properties
	//     comment / approval_organization_unit / approval_staff / rejected_at
	RejectEstimateRequest(ctx context.Context, in *RejectEstimateRequestRequest, opts ...grpc.CallOption) (*RejectEstimateRequestResponse, error)
	// 見積選考(承認)
	ApproveEstimateSelection(ctx context.Context, in *ApproveEstimateSelectionRequest, opts ...grpc.CallOption) (*ApproveEstimateSelectionResponse, error)
	// 見積選考(却下)
	RejectEstimateSelection(ctx context.Context, in *RejectEstimateSelectionRequest, opts ...grpc.CallOption) (*RejectEstimateSelectionResponse, error)
}

type estimateOrderApproverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimateOrderApproverServiceClient(cc grpc.ClientConnInterface) EstimateOrderApproverServiceClient {
	return &estimateOrderApproverServiceClient{cc}
}

func (c *estimateOrderApproverServiceClient) ApproveEstimateRequest(ctx context.Context, in *ApproveEstimateRequestRequest, opts ...grpc.CallOption) (*ApproveEstimateRequestResponse, error) {
	out := new(ApproveEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrderApproverService/ApproveEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrderApproverServiceClient) RejectEstimateRequest(ctx context.Context, in *RejectEstimateRequestRequest, opts ...grpc.CallOption) (*RejectEstimateRequestResponse, error) {
	out := new(RejectEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrderApproverService/RejectEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrderApproverServiceClient) ApproveEstimateSelection(ctx context.Context, in *ApproveEstimateSelectionRequest, opts ...grpc.CallOption) (*ApproveEstimateSelectionResponse, error) {
	out := new(ApproveEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrderApproverService/ApproveEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateOrderApproverServiceClient) RejectEstimateSelection(ctx context.Context, in *RejectEstimateSelectionRequest, opts ...grpc.CallOption) (*RejectEstimateSelectionResponse, error) {
	out := new(RejectEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateOrderApproverService/RejectEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimateOrderApproverServiceServer is the server API for EstimateOrderApproverService service.
// All implementations must embed UnimplementedEstimateOrderApproverServiceServer
// for forward compatibility
type EstimateOrderApproverServiceServer interface {
	// 見積依頼(承認)
	//
	// Implementation Note::
	//
	//  1. 見積依頼情報の承認情報を更新する
	//     EstimateRequest.approval_properties
	//     approval_organization_unit / approval_staff / approved_at
	//
	//  2. 見積依頼予定の 紐付けあり のステータスを更新する
	//     処理を行うEstimateRequest.estimate_request_plan_idsに値が存在する場合
	//     estimate_request_plan_idsから取得したEstimateRequestPlan.linked を true に更新する
	//     更新は同一トランザクションで行う
	//
	//  3. 選考情報を削除する
	//     見積依頼（伝票ステータス）が公開中で かつ 見積選考情報がある場合
	//     対象のEstimateRequestに紐づくEstimateResult.estimate_result_idを取得し
	//     EstimateResultに紐づくEstimateSelectionを削除する
	ApproveEstimateRequest(context.Context, *ApproveEstimateRequestRequest) (*ApproveEstimateRequestResponse, error)
	// 見積依頼(却下)
	//
	// Implementation Note::
	//  1. 見積依頼情報の承認情報を更新する
	//     EstimateRequest.approval_properties
	//     comment / approval_organization_unit / approval_staff / rejected_at
	RejectEstimateRequest(context.Context, *RejectEstimateRequestRequest) (*RejectEstimateRequestResponse, error)
	// 見積選考(承認)
	ApproveEstimateSelection(context.Context, *ApproveEstimateSelectionRequest) (*ApproveEstimateSelectionResponse, error)
	// 見積選考(却下)
	RejectEstimateSelection(context.Context, *RejectEstimateSelectionRequest) (*RejectEstimateSelectionResponse, error)
	mustEmbedUnimplementedEstimateOrderApproverServiceServer()
}

// UnimplementedEstimateOrderApproverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstimateOrderApproverServiceServer struct {
}

func (UnimplementedEstimateOrderApproverServiceServer) ApproveEstimateRequest(context.Context, *ApproveEstimateRequestRequest) (*ApproveEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveEstimateRequest not implemented")
}
func (UnimplementedEstimateOrderApproverServiceServer) RejectEstimateRequest(context.Context, *RejectEstimateRequestRequest) (*RejectEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectEstimateRequest not implemented")
}
func (UnimplementedEstimateOrderApproverServiceServer) ApproveEstimateSelection(context.Context, *ApproveEstimateSelectionRequest) (*ApproveEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveEstimateSelection not implemented")
}
func (UnimplementedEstimateOrderApproverServiceServer) RejectEstimateSelection(context.Context, *RejectEstimateSelectionRequest) (*RejectEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectEstimateSelection not implemented")
}
func (UnimplementedEstimateOrderApproverServiceServer) mustEmbedUnimplementedEstimateOrderApproverServiceServer() {
}

// UnsafeEstimateOrderApproverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimateOrderApproverServiceServer will
// result in compilation errors.
type UnsafeEstimateOrderApproverServiceServer interface {
	mustEmbedUnimplementedEstimateOrderApproverServiceServer()
}

func RegisterEstimateOrderApproverServiceServer(s grpc.ServiceRegistrar, srv EstimateOrderApproverServiceServer) {
	s.RegisterService(&EstimateOrderApproverService_ServiceDesc, srv)
}

func _EstimateOrderApproverService_ApproveEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrderApproverServiceServer).ApproveEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrderApproverService/ApproveEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrderApproverServiceServer).ApproveEstimateRequest(ctx, req.(*ApproveEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrderApproverService_RejectEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrderApproverServiceServer).RejectEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrderApproverService/RejectEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrderApproverServiceServer).RejectEstimateRequest(ctx, req.(*RejectEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrderApproverService_ApproveEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrderApproverServiceServer).ApproveEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrderApproverService/ApproveEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrderApproverServiceServer).ApproveEstimateSelection(ctx, req.(*ApproveEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateOrderApproverService_RejectEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateOrderApproverServiceServer).RejectEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateOrderApproverService/RejectEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateOrderApproverServiceServer).RejectEstimateSelection(ctx, req.(*RejectEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EstimateOrderApproverService_ServiceDesc is the grpc.ServiceDesc for EstimateOrderApproverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstimateOrderApproverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.estimation.EstimateOrderApproverService",
	HandlerType: (*EstimateOrderApproverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveEstimateRequest",
			Handler:    _EstimateOrderApproverService_ApproveEstimateRequest_Handler,
		},
		{
			MethodName: "RejectEstimateRequest",
			Handler:    _EstimateOrderApproverService_RejectEstimateRequest_Handler,
		},
		{
			MethodName: "ApproveEstimateSelection",
			Handler:    _EstimateOrderApproverService_ApproveEstimateSelection_Handler,
		},
		{
			MethodName: "RejectEstimateSelection",
			Handler:    _EstimateOrderApproverService_RejectEstimateSelection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimation.proto",
}

// EstimateSupplierServiceClient is the client API for EstimateSupplierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimateSupplierServiceClient interface {
	// 見積依頼/見積結果/見積選考
	SharedListEstimateRequestAndEstimateResultAndEstimateSelections(ctx context.Context, in *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest, opts ...grpc.CallOption) (*SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error)
	// 見積結果
	CreateEstimateResult(ctx context.Context, in *CreateEstimateResultRequest, opts ...grpc.CallOption) (*EstimateResult, error)
	ListEstimateResults(ctx context.Context, in *ListEstimateResultsRequest, opts ...grpc.CallOption) (*ListEstimateResultsResponse, error)
	GetEstimateResult(ctx context.Context, in *GetEstimateResultRequest, opts ...grpc.CallOption) (*EstimateResult, error)
	UpdateEstimateResult(ctx context.Context, in *UpdateEstimateResultRequest, opts ...grpc.CallOption) (*EstimateResult, error)
	DeleteEstimateResult(ctx context.Context, in *DeleteEstimateResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 確定にする
	LockEstimateResult(ctx context.Context, in *LockEstimateResultRequest, opts ...grpc.CallOption) (*LockEstimateResultResponse, error)
	// 確定を戻す
	UnlockEstimateResult(ctx context.Context, in *UnlockEstimateResultRequest, opts ...grpc.CallOption) (*UnlockEstimateResultResponse, error)
	// 見積結果を 完了 にする
	CompleteEstimateResult(ctx context.Context, in *CompleteEstimateResultRequest, opts ...grpc.CallOption) (*CompleteEstimateResultResponse, error)
	// 見積依頼を辞退する
	//
	// Implementation Note::
	//
	//	辞退のEstimateResultを作成する
	DeclineEstimateResult(ctx context.Context, in *DeclineEstimateResultRequest, opts ...grpc.CallOption) (*DeclineEstimateResultResponse, error)
	// 見積結果を公開
	//
	// Implementation Note::
	//  1. EstimatResult.replyed_atを更新する
	//  2. 辞退の場合、EstimatResult.decline_properties.declined_atも同様に更新する
	//  3. EstimatResult.estimate_reqest.shared_properties.shared_byに対してshareto処理を行う
	SharetoEstimateResult(ctx context.Context, in *SharetoEstimateResultRequest, opts ...grpc.CallOption) (*SharetoEstimateResultResponse, error)
	// 見積依頼
	GetEstimateRequest(ctx context.Context, in *GetEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error)
	// 見積依頼の差分を取得する
	//
	// Implementation Note::
	//
	//	渡されたEstimateRequest(old)とEstimateRequest(new)を比較して差分を返す
	//	対象のフィールドはShareの対象フィールド（GRANTED）に限定する
	DiffEstimateRequest(ctx context.Context, in *DiffEstimateRequestRequest, opts ...grpc.CallOption) (*DiffEstimateRequestResponse, error)
	// フィードバック（差し戻し）
	SharedListEstimateResultFeedbacks(ctx context.Context, in *SharedListEstimateResultFeedbacksRequest, opts ...grpc.CallOption) (*SharedListEstimateResultFeedbacksResponse, error)
}

type estimateSupplierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimateSupplierServiceClient(cc grpc.ClientConnInterface) EstimateSupplierServiceClient {
	return &estimateSupplierServiceClient{cc}
}

func (c *estimateSupplierServiceClient) SharedListEstimateRequestAndEstimateResultAndEstimateSelections(ctx context.Context, in *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest, opts ...grpc.CallOption) (*SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error) {
	out := new(SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/SharedListEstimateRequestAndEstimateResultAndEstimateSelections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) CreateEstimateResult(ctx context.Context, in *CreateEstimateResultRequest, opts ...grpc.CallOption) (*EstimateResult, error) {
	out := new(EstimateResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/CreateEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) ListEstimateResults(ctx context.Context, in *ListEstimateResultsRequest, opts ...grpc.CallOption) (*ListEstimateResultsResponse, error) {
	out := new(ListEstimateResultsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/ListEstimateResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) GetEstimateResult(ctx context.Context, in *GetEstimateResultRequest, opts ...grpc.CallOption) (*EstimateResult, error) {
	out := new(EstimateResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/GetEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) UpdateEstimateResult(ctx context.Context, in *UpdateEstimateResultRequest, opts ...grpc.CallOption) (*EstimateResult, error) {
	out := new(EstimateResult)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/UpdateEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) DeleteEstimateResult(ctx context.Context, in *DeleteEstimateResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/DeleteEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) LockEstimateResult(ctx context.Context, in *LockEstimateResultRequest, opts ...grpc.CallOption) (*LockEstimateResultResponse, error) {
	out := new(LockEstimateResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/LockEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) UnlockEstimateResult(ctx context.Context, in *UnlockEstimateResultRequest, opts ...grpc.CallOption) (*UnlockEstimateResultResponse, error) {
	out := new(UnlockEstimateResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/UnlockEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) CompleteEstimateResult(ctx context.Context, in *CompleteEstimateResultRequest, opts ...grpc.CallOption) (*CompleteEstimateResultResponse, error) {
	out := new(CompleteEstimateResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/CompleteEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) DeclineEstimateResult(ctx context.Context, in *DeclineEstimateResultRequest, opts ...grpc.CallOption) (*DeclineEstimateResultResponse, error) {
	out := new(DeclineEstimateResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/DeclineEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) SharetoEstimateResult(ctx context.Context, in *SharetoEstimateResultRequest, opts ...grpc.CallOption) (*SharetoEstimateResultResponse, error) {
	out := new(SharetoEstimateResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/SharetoEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) GetEstimateRequest(ctx context.Context, in *GetEstimateRequestRequest, opts ...grpc.CallOption) (*EstimateRequest, error) {
	out := new(EstimateRequest)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/GetEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) DiffEstimateRequest(ctx context.Context, in *DiffEstimateRequestRequest, opts ...grpc.CallOption) (*DiffEstimateRequestResponse, error) {
	out := new(DiffEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/DiffEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateSupplierServiceClient) SharedListEstimateResultFeedbacks(ctx context.Context, in *SharedListEstimateResultFeedbacksRequest, opts ...grpc.CallOption) (*SharedListEstimateResultFeedbacksResponse, error) {
	out := new(SharedListEstimateResultFeedbacksResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.EstimateSupplierService/SharedListEstimateResultFeedbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimateSupplierServiceServer is the server API for EstimateSupplierService service.
// All implementations must embed UnimplementedEstimateSupplierServiceServer
// for forward compatibility
type EstimateSupplierServiceServer interface {
	// 見積依頼/見積結果/見積選考
	SharedListEstimateRequestAndEstimateResultAndEstimateSelections(context.Context, *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) (*SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error)
	// 見積結果
	CreateEstimateResult(context.Context, *CreateEstimateResultRequest) (*EstimateResult, error)
	ListEstimateResults(context.Context, *ListEstimateResultsRequest) (*ListEstimateResultsResponse, error)
	GetEstimateResult(context.Context, *GetEstimateResultRequest) (*EstimateResult, error)
	UpdateEstimateResult(context.Context, *UpdateEstimateResultRequest) (*EstimateResult, error)
	DeleteEstimateResult(context.Context, *DeleteEstimateResultRequest) (*emptypb.Empty, error)
	// 確定にする
	LockEstimateResult(context.Context, *LockEstimateResultRequest) (*LockEstimateResultResponse, error)
	// 確定を戻す
	UnlockEstimateResult(context.Context, *UnlockEstimateResultRequest) (*UnlockEstimateResultResponse, error)
	// 見積結果を 完了 にする
	CompleteEstimateResult(context.Context, *CompleteEstimateResultRequest) (*CompleteEstimateResultResponse, error)
	// 見積依頼を辞退する
	//
	// Implementation Note::
	//
	//	辞退のEstimateResultを作成する
	DeclineEstimateResult(context.Context, *DeclineEstimateResultRequest) (*DeclineEstimateResultResponse, error)
	// 見積結果を公開
	//
	// Implementation Note::
	//  1. EstimatResult.replyed_atを更新する
	//  2. 辞退の場合、EstimatResult.decline_properties.declined_atも同様に更新する
	//  3. EstimatResult.estimate_reqest.shared_properties.shared_byに対してshareto処理を行う
	SharetoEstimateResult(context.Context, *SharetoEstimateResultRequest) (*SharetoEstimateResultResponse, error)
	// 見積依頼
	GetEstimateRequest(context.Context, *GetEstimateRequestRequest) (*EstimateRequest, error)
	// 見積依頼の差分を取得する
	//
	// Implementation Note::
	//
	//	渡されたEstimateRequest(old)とEstimateRequest(new)を比較して差分を返す
	//	対象のフィールドはShareの対象フィールド（GRANTED）に限定する
	DiffEstimateRequest(context.Context, *DiffEstimateRequestRequest) (*DiffEstimateRequestResponse, error)
	// フィードバック（差し戻し）
	SharedListEstimateResultFeedbacks(context.Context, *SharedListEstimateResultFeedbacksRequest) (*SharedListEstimateResultFeedbacksResponse, error)
	mustEmbedUnimplementedEstimateSupplierServiceServer()
}

// UnimplementedEstimateSupplierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstimateSupplierServiceServer struct {
}

func (UnimplementedEstimateSupplierServiceServer) SharedListEstimateRequestAndEstimateResultAndEstimateSelections(context.Context, *SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest) (*SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListEstimateRequestAndEstimateResultAndEstimateSelections not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) CreateEstimateResult(context.Context, *CreateEstimateResultRequest) (*EstimateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) ListEstimateResults(context.Context, *ListEstimateResultsRequest) (*ListEstimateResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEstimateResults not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) GetEstimateResult(context.Context, *GetEstimateResultRequest) (*EstimateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) UpdateEstimateResult(context.Context, *UpdateEstimateResultRequest) (*EstimateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) DeleteEstimateResult(context.Context, *DeleteEstimateResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) LockEstimateResult(context.Context, *LockEstimateResultRequest) (*LockEstimateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) UnlockEstimateResult(context.Context, *UnlockEstimateResultRequest) (*UnlockEstimateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) CompleteEstimateResult(context.Context, *CompleteEstimateResultRequest) (*CompleteEstimateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) DeclineEstimateResult(context.Context, *DeclineEstimateResultRequest) (*DeclineEstimateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) SharetoEstimateResult(context.Context, *SharetoEstimateResultRequest) (*SharetoEstimateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharetoEstimateResult not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) GetEstimateRequest(context.Context, *GetEstimateRequestRequest) (*EstimateRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimateRequest not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) DiffEstimateRequest(context.Context, *DiffEstimateRequestRequest) (*DiffEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiffEstimateRequest not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) SharedListEstimateResultFeedbacks(context.Context, *SharedListEstimateResultFeedbacksRequest) (*SharedListEstimateResultFeedbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharedListEstimateResultFeedbacks not implemented")
}
func (UnimplementedEstimateSupplierServiceServer) mustEmbedUnimplementedEstimateSupplierServiceServer() {
}

// UnsafeEstimateSupplierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimateSupplierServiceServer will
// result in compilation errors.
type UnsafeEstimateSupplierServiceServer interface {
	mustEmbedUnimplementedEstimateSupplierServiceServer()
}

func RegisterEstimateSupplierServiceServer(s grpc.ServiceRegistrar, srv EstimateSupplierServiceServer) {
	s.RegisterService(&EstimateSupplierService_ServiceDesc, srv)
}

func _EstimateSupplierService_SharedListEstimateRequestAndEstimateResultAndEstimateSelections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).SharedListEstimateRequestAndEstimateResultAndEstimateSelections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/SharedListEstimateRequestAndEstimateResultAndEstimateSelections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).SharedListEstimateRequestAndEstimateResultAndEstimateSelections(ctx, req.(*SharedListEstimateRequestAndEstimateResultAndEstimateSelectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_CreateEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).CreateEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/CreateEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).CreateEstimateResult(ctx, req.(*CreateEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_ListEstimateResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEstimateResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).ListEstimateResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/ListEstimateResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).ListEstimateResults(ctx, req.(*ListEstimateResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_GetEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).GetEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/GetEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).GetEstimateResult(ctx, req.(*GetEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_UpdateEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).UpdateEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/UpdateEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).UpdateEstimateResult(ctx, req.(*UpdateEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_DeleteEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).DeleteEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/DeleteEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).DeleteEstimateResult(ctx, req.(*DeleteEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_LockEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).LockEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/LockEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).LockEstimateResult(ctx, req.(*LockEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_UnlockEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).UnlockEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/UnlockEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).UnlockEstimateResult(ctx, req.(*UnlockEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_CompleteEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).CompleteEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/CompleteEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).CompleteEstimateResult(ctx, req.(*CompleteEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_DeclineEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclineEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).DeclineEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/DeclineEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).DeclineEstimateResult(ctx, req.(*DeclineEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_SharetoEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharetoEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).SharetoEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/SharetoEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).SharetoEstimateResult(ctx, req.(*SharetoEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_GetEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).GetEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/GetEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).GetEstimateRequest(ctx, req.(*GetEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_DiffEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).DiffEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/DiffEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).DiffEstimateRequest(ctx, req.(*DiffEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstimateSupplierService_SharedListEstimateResultFeedbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedListEstimateResultFeedbacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateSupplierServiceServer).SharedListEstimateResultFeedbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.EstimateSupplierService/SharedListEstimateResultFeedbacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateSupplierServiceServer).SharedListEstimateResultFeedbacks(ctx, req.(*SharedListEstimateResultFeedbacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EstimateSupplierService_ServiceDesc is the grpc.ServiceDesc for EstimateSupplierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstimateSupplierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.estimation.EstimateSupplierService",
	HandlerType: (*EstimateSupplierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SharedListEstimateRequestAndEstimateResultAndEstimateSelections",
			Handler:    _EstimateSupplierService_SharedListEstimateRequestAndEstimateResultAndEstimateSelections_Handler,
		},
		{
			MethodName: "CreateEstimateResult",
			Handler:    _EstimateSupplierService_CreateEstimateResult_Handler,
		},
		{
			MethodName: "ListEstimateResults",
			Handler:    _EstimateSupplierService_ListEstimateResults_Handler,
		},
		{
			MethodName: "GetEstimateResult",
			Handler:    _EstimateSupplierService_GetEstimateResult_Handler,
		},
		{
			MethodName: "UpdateEstimateResult",
			Handler:    _EstimateSupplierService_UpdateEstimateResult_Handler,
		},
		{
			MethodName: "DeleteEstimateResult",
			Handler:    _EstimateSupplierService_DeleteEstimateResult_Handler,
		},
		{
			MethodName: "LockEstimateResult",
			Handler:    _EstimateSupplierService_LockEstimateResult_Handler,
		},
		{
			MethodName: "UnlockEstimateResult",
			Handler:    _EstimateSupplierService_UnlockEstimateResult_Handler,
		},
		{
			MethodName: "CompleteEstimateResult",
			Handler:    _EstimateSupplierService_CompleteEstimateResult_Handler,
		},
		{
			MethodName: "DeclineEstimateResult",
			Handler:    _EstimateSupplierService_DeclineEstimateResult_Handler,
		},
		{
			MethodName: "SharetoEstimateResult",
			Handler:    _EstimateSupplierService_SharetoEstimateResult_Handler,
		},
		{
			MethodName: "GetEstimateRequest",
			Handler:    _EstimateSupplierService_GetEstimateRequest_Handler,
		},
		{
			MethodName: "DiffEstimateRequest",
			Handler:    _EstimateSupplierService_DiffEstimateRequest_Handler,
		},
		{
			MethodName: "SharedListEstimateResultFeedbacks",
			Handler:    _EstimateSupplierService_SharedListEstimateResultFeedbacks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimation.proto",
}

// TestingServiceClient is the client API for TestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestingServiceClient interface {
	// 見積依頼予定を 完了解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UncompleteEstimateRequestPlan(ctx context.Context, in *UncompleteEstimateRequestPlanRequest, opts ...grpc.CallOption) (*UncompleteEstimateRequestPlanResponse, error)
	// 見積依頼予定を 破棄解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UndiscardEstimateRequestPlan(ctx context.Context, in *UndiscardEstimateRequestPlanRequest, opts ...grpc.CallOption) (*UndiscardEstimateRequestPlanResponse, error)
	// 見積依頼を 破棄解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UndiscardEstimateRequest(ctx context.Context, in *UndiscardEstimateRequestRequest, opts ...grpc.CallOption) (*UndiscardEstimateRequestResponse, error)
	// 見積選考を 完了解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UncompleteEstimateSelection(ctx context.Context, in *UncompleteEstimateSelectionRequest, opts ...grpc.CallOption) (*UncompleteEstimateSelectionResponse, error)
	// 見積結果を 完了解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UncompleteEstimateResult(ctx context.Context, in *UncompleteEstimateResultRequest, opts ...grpc.CallOption) (*UncompleteEstimateResultResponse, error)
}

type testingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestingServiceClient(cc grpc.ClientConnInterface) TestingServiceClient {
	return &testingServiceClient{cc}
}

func (c *testingServiceClient) UncompleteEstimateRequestPlan(ctx context.Context, in *UncompleteEstimateRequestPlanRequest, opts ...grpc.CallOption) (*UncompleteEstimateRequestPlanResponse, error) {
	out := new(UncompleteEstimateRequestPlanResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.TestingService/UncompleteEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UndiscardEstimateRequestPlan(ctx context.Context, in *UndiscardEstimateRequestPlanRequest, opts ...grpc.CallOption) (*UndiscardEstimateRequestPlanResponse, error) {
	out := new(UndiscardEstimateRequestPlanResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.TestingService/UndiscardEstimateRequestPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UndiscardEstimateRequest(ctx context.Context, in *UndiscardEstimateRequestRequest, opts ...grpc.CallOption) (*UndiscardEstimateRequestResponse, error) {
	out := new(UndiscardEstimateRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.TestingService/UndiscardEstimateRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UncompleteEstimateSelection(ctx context.Context, in *UncompleteEstimateSelectionRequest, opts ...grpc.CallOption) (*UncompleteEstimateSelectionResponse, error) {
	out := new(UncompleteEstimateSelectionResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.TestingService/UncompleteEstimateSelection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) UncompleteEstimateResult(ctx context.Context, in *UncompleteEstimateResultRequest, opts ...grpc.CallOption) (*UncompleteEstimateResultResponse, error) {
	out := new(UncompleteEstimateResultResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.estimation.TestingService/UncompleteEstimateResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestingServiceServer is the server API for TestingService service.
// All implementations must embed UnimplementedTestingServiceServer
// for forward compatibility
type TestingServiceServer interface {
	// 見積依頼予定を 完了解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UncompleteEstimateRequestPlan(context.Context, *UncompleteEstimateRequestPlanRequest) (*UncompleteEstimateRequestPlanResponse, error)
	// 見積依頼予定を 破棄解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UndiscardEstimateRequestPlan(context.Context, *UndiscardEstimateRequestPlanRequest) (*UndiscardEstimateRequestPlanResponse, error)
	// 見積依頼を 破棄解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UndiscardEstimateRequest(context.Context, *UndiscardEstimateRequestRequest) (*UndiscardEstimateRequestResponse, error)
	// 見積選考を 完了解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UncompleteEstimateSelection(context.Context, *UncompleteEstimateSelectionRequest) (*UncompleteEstimateSelectionResponse, error)
	// 見積結果を 完了解除 にする
	//
	// Implementation Note::
	//
	//	テストで使用するメソッド
	UncompleteEstimateResult(context.Context, *UncompleteEstimateResultRequest) (*UncompleteEstimateResultResponse, error)
	mustEmbedUnimplementedTestingServiceServer()
}

// UnimplementedTestingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestingServiceServer struct {
}

func (UnimplementedTestingServiceServer) UncompleteEstimateRequestPlan(context.Context, *UncompleteEstimateRequestPlanRequest) (*UncompleteEstimateRequestPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompleteEstimateRequestPlan not implemented")
}
func (UnimplementedTestingServiceServer) UndiscardEstimateRequestPlan(context.Context, *UndiscardEstimateRequestPlanRequest) (*UndiscardEstimateRequestPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndiscardEstimateRequestPlan not implemented")
}
func (UnimplementedTestingServiceServer) UndiscardEstimateRequest(context.Context, *UndiscardEstimateRequestRequest) (*UndiscardEstimateRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndiscardEstimateRequest not implemented")
}
func (UnimplementedTestingServiceServer) UncompleteEstimateSelection(context.Context, *UncompleteEstimateSelectionRequest) (*UncompleteEstimateSelectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompleteEstimateSelection not implemented")
}
func (UnimplementedTestingServiceServer) UncompleteEstimateResult(context.Context, *UncompleteEstimateResultRequest) (*UncompleteEstimateResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompleteEstimateResult not implemented")
}
func (UnimplementedTestingServiceServer) mustEmbedUnimplementedTestingServiceServer() {}

// UnsafeTestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestingServiceServer will
// result in compilation errors.
type UnsafeTestingServiceServer interface {
	mustEmbedUnimplementedTestingServiceServer()
}

func RegisterTestingServiceServer(s grpc.ServiceRegistrar, srv TestingServiceServer) {
	s.RegisterService(&TestingService_ServiceDesc, srv)
}

func _TestingService_UncompleteEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompleteEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UncompleteEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.TestingService/UncompleteEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UncompleteEstimateRequestPlan(ctx, req.(*UncompleteEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UndiscardEstimateRequestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndiscardEstimateRequestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UndiscardEstimateRequestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.TestingService/UndiscardEstimateRequestPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UndiscardEstimateRequestPlan(ctx, req.(*UndiscardEstimateRequestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UndiscardEstimateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndiscardEstimateRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UndiscardEstimateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.TestingService/UndiscardEstimateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UndiscardEstimateRequest(ctx, req.(*UndiscardEstimateRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UncompleteEstimateSelection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompleteEstimateSelectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UncompleteEstimateSelection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.TestingService/UncompleteEstimateSelection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UncompleteEstimateSelection(ctx, req.(*UncompleteEstimateSelectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_UncompleteEstimateResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompleteEstimateResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).UncompleteEstimateResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.estimation.TestingService/UncompleteEstimateResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).UncompleteEstimateResult(ctx, req.(*UncompleteEstimateResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestingService_ServiceDesc is the grpc.ServiceDesc for TestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.estimation.TestingService",
	HandlerType: (*TestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UncompleteEstimateRequestPlan",
			Handler:    _TestingService_UncompleteEstimateRequestPlan_Handler,
		},
		{
			MethodName: "UndiscardEstimateRequestPlan",
			Handler:    _TestingService_UndiscardEstimateRequestPlan_Handler,
		},
		{
			MethodName: "UndiscardEstimateRequest",
			Handler:    _TestingService_UndiscardEstimateRequest_Handler,
		},
		{
			MethodName: "UncompleteEstimateSelection",
			Handler:    _TestingService_UncompleteEstimateSelection_Handler,
		},
		{
			MethodName: "UncompleteEstimateResult",
			Handler:    _TestingService_UncompleteEstimateResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimation.proto",
}
