// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estimaterequestplan.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EstimateRequestPlan with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequestPlan with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestPlanMultiError, or nil if none found.
func (m *EstimateRequestPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EstimateRequestPlanId

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlanValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlanValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlanValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DisplayNameLang

	if all {
		switch v := interface{}(m.GetIssuer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlanValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlanValidationError{
					field:  "Issuer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIssuer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlanValidationError{
				field:  "Issuer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Linked

	// no validation rules for Completed

	// no validation rules for Discarded

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	switch m.LinkageContent.(type) {

	case *EstimateRequestPlan_SapWorkOrder:

		if all {
			switch v := interface{}(m.GetSapWorkOrder()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EstimateRequestPlanValidationError{
						field:  "SapWorkOrder",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EstimateRequestPlanValidationError{
						field:  "SapWorkOrder",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSapWorkOrder()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EstimateRequestPlanValidationError{
					field:  "SapWorkOrder",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EstimateRequestPlanMultiError(errors)
	}

	return nil
}

// EstimateRequestPlanMultiError is an error wrapping multiple validation
// errors returned by EstimateRequestPlan.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequestPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestPlanMultiError) AllErrors() []error { return m }

// EstimateRequestPlanValidationError is the validation error returned by
// EstimateRequestPlan.Validate if the designated constraints aren't met.
type EstimateRequestPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestPlanValidationError) ErrorName() string {
	return "EstimateRequestPlanValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestPlanValidationError{}

// Validate checks the field values on EstimateRequestPlan_SAPWorkOrder with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateRequestPlan_SAPWorkOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRequestPlan_SAPWorkOrder with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EstimateRequestPlan_SAPWorkOrderMultiError, or nil if none found.
func (m *EstimateRequestPlan_SAPWorkOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestPlan_SAPWorkOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrackingCode

	// no validation rules for OrderType

	if all {
		switch v := interface{}(m.GetCostCenter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "CostCenter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "CostCenter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCostCenter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "CostCenter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Company",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "Company",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReceiverProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "ReceiverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "ReceiverProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceiverProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "ReceiverProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequesterProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "RequesterProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "RequesterProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequesterProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "RequesterProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "WorkCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "WorkCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "WorkCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "WorkUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "WorkUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "WorkUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlace()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Place",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Place",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "Place",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Amount

	// no validation rules for Budget

	if all {
		switch v := interface{}(m.GetSettlementAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "SettlementAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "SettlementAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettlementAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "SettlementAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkCompletePlanDate

	// no validation rules for WorkCompletedDate

	// no validation rules for WorkStopedDate

	// no validation rules for WorkDeletedDate

	if all {
		switch v := interface{}(m.GetMonthlyProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "MonthlyProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "MonthlyProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonthlyProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "MonthlyProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccumulatedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "AccumulatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "AccumulatedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccumulatedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "AccumulatedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActualUnitPrice

	// no validation rules for DesignCostRatio

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UnitPrice

	// no validation rules for SellingPrice

	// no validation rules for SalesTaxCode

	// no validation rules for RequestDate

	// no validation rules for ApprovedDate

	if all {
		switch v := interface{}(m.GetDesiredReciveDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "DesiredReciveDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "DesiredReciveDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredReciveDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "DesiredReciveDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReceivedCode

	// no validation rules for RequestedCode

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrderCode

	if all {
		switch v := interface{}(m.GetMaterial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Material",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "Material",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaterial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "Material",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSuppliesCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "SuppliesCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "SuppliesCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSuppliesCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "SuppliesCompany",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAssociatedCompany()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "AssociatedCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRequestPlan_SAPWorkOrderValidationError{
					field:  "AssociatedCompany",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssociatedCompany()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRequestPlan_SAPWorkOrderValidationError{
				field:  "AssociatedCompany",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Attachment

	// no validation rules for BlueprintContent

	// no validation rules for FreeItem

	// no validation rules for ReceivedFreeItem

	// no validation rules for AssetCode1

	// no validation rules for AssetCode2

	// no validation rules for AssetCode3

	// no validation rules for AssetCode4

	// no validation rules for AssetCode5

	// no validation rules for AssetCode6

	// no validation rules for AssetCode7

	// no validation rules for AssetCode8

	// no validation rules for AssetCode9

	// no validation rules for AssetCode10

	// no validation rules for SettlementCode

	// no validation rules for PurchaseOrderDate

	// no validation rules for ApprovalDate

	// no validation rules for ApprovalQuantity

	// no validation rules for ApprovalAmount

	// no validation rules for StartDate

	// no validation rules for CostCategory1

	// no validation rules for EnvironmentInvestmentAmount1

	// no validation rules for EnvironmentReturnAmount1

	if len(errors) > 0 {
		return EstimateRequestPlan_SAPWorkOrderMultiError(errors)
	}

	return nil
}

// EstimateRequestPlan_SAPWorkOrderMultiError is an error wrapping multiple
// validation errors returned by
// EstimateRequestPlan_SAPWorkOrder.ValidateAll() if the designated
// constraints aren't met.
type EstimateRequestPlan_SAPWorkOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestPlan_SAPWorkOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestPlan_SAPWorkOrderMultiError) AllErrors() []error { return m }

// EstimateRequestPlan_SAPWorkOrderValidationError is the validation error
// returned by EstimateRequestPlan_SAPWorkOrder.Validate if the designated
// constraints aren't met.
type EstimateRequestPlan_SAPWorkOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestPlan_SAPWorkOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRequestPlan_SAPWorkOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRequestPlan_SAPWorkOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRequestPlan_SAPWorkOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestPlan_SAPWorkOrderValidationError) ErrorName() string {
	return "EstimateRequestPlan_SAPWorkOrderValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestPlan_SAPWorkOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestPlan_SAPWorkOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestPlan_SAPWorkOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestPlan_SAPWorkOrderValidationError{}

// Validate checks the field values on
// EstimateRequestPlan_SAPWorkOrder_MonthlyProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequestPlan_SAPWorkOrder_MonthlyProperties with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesMultiError, or nil if
// none found.
func (m *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestPlan_SAPWorkOrder_MonthlyProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTime

	// no validation rules for DesignTime

	// no validation rules for ReceivedAssessmentAmount

	// no validation rules for PurchaseAssessmentAmount

	// no validation rules for WorkCost

	// no validation rules for DesignCost

	// no validation rules for ReceivedAmount

	// no validation rules for OrderAmount

	// no validation rules for DirectDeliveryAmount

	// no validation rules for DeliveryAmount

	// no validation rules for ReclassifyAmount

	// no validation rules for TotalAmount

	if len(errors) > 0 {
		return EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesMultiError is an error
// wrapping multiple validation errors returned by
// EstimateRequestPlan_SAPWorkOrder_MonthlyProperties.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesMultiError) AllErrors() []error { return m }

// EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError is the
// validation error returned by
// EstimateRequestPlan_SAPWorkOrder_MonthlyProperties.Validate if the
// designated constraints aren't met.
type EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError) ErrorName() string {
	return "EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestPlan_SAPWorkOrder_MonthlyProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestPlan_SAPWorkOrder_MonthlyPropertiesValidationError{}

// Validate checks the field values on
// EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesMultiError, or nil if
// none found.
func (m *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTime

	// no validation rules for DesignTime

	// no validation rules for ReceivedDocumentAmount

	// no validation rules for OrderDocumentAmount

	// no validation rules for WorkCost

	// no validation rules for DesignCost

	// no validation rules for ReceivedAmount

	// no validation rules for OrderAmount

	// no validation rules for DirectDeliveryAmount

	// no validation rules for DeliveryAmount

	// no validation rules for ReclassifyAmount

	// no validation rules for TotalAmount

	if len(errors) > 0 {
		return EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesMultiError(errors)
	}

	return nil
}

// EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesMultiError is an error
// wrapping multiple validation errors returned by
// EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties.ValidateAll() if the
// designated constraints aren't met.
type EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesMultiError) AllErrors() []error {
	return m
}

// EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError is the
// validation error returned by
// EstimateRequestPlan_SAPWorkOrder_AccumulatedProperties.Validate if the
// designated constraints aren't met.
type EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError) ErrorName() string {
	return "EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRequestPlan_SAPWorkOrder_AccumulatedProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRequestPlan_SAPWorkOrder_AccumulatedPropertiesValidationError{}
