// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: forum.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BaseThread with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseThread) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseThread with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseThreadMultiError, or
// nil if none found.
func (m *BaseThread) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseThread) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BaseThreadId

	// no validation rules for Owner

	if all {
		switch v := interface{}(m.GetResourceReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseThreadValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseThreadValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseThreadValidationError{
				field:  "ResourceReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Internal

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BaseThreadValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BaseThreadValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BaseThreadValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BaseThreadMultiError(errors)
	}

	return nil
}

// BaseThreadMultiError is an error wrapping multiple validation errors
// returned by BaseThread.ValidateAll() if the designated constraints aren't met.
type BaseThreadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseThreadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseThreadMultiError) AllErrors() []error { return m }

// BaseThreadValidationError is the validation error returned by
// BaseThread.Validate if the designated constraints aren't met.
type BaseThreadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseThreadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseThreadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseThreadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseThreadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseThreadValidationError) ErrorName() string { return "BaseThreadValidationError" }

// Error satisfies the builtin error interface
func (e BaseThreadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseThread.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseThreadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseThreadValidationError{}

// Validate checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Thread) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThreadMultiError, or nil if none found.
func (m *Thread) ValidateAll() error {
	return m.validate(true)
}

func (m *Thread) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	// no validation rules for BaseThreadId

	// no validation rules for DisplayName

	if all {
		switch v := interface{}(m.GetLatestComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "LatestComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "LatestComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadValidationError{
				field:  "LatestComment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShareScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "ShareScope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "ShareScope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShareScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadValidationError{
				field:  "ShareScope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAggregatedMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  fmt.Sprintf("AggregatedMarkers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadValidationError{
						field:  fmt.Sprintf("AggregatedMarkers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadValidationError{
					field:  fmt.Sprintf("AggregatedMarkers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachedPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "AttachedPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadValidationError{
					field:  "AttachedPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachedPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadValidationError{
				field:  "AttachedPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ThreadMultiError(errors)
	}

	return nil
}

// ThreadMultiError is an error wrapping multiple validation errors returned by
// Thread.ValidateAll() if the designated constraints aren't met.
type ThreadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadMultiError) AllErrors() []error { return m }

// ThreadValidationError is the validation error returned by Thread.Validate if
// the designated constraints aren't met.
type ThreadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadValidationError) ErrorName() string { return "ThreadValidationError" }

// Error satisfies the builtin error interface
func (e ThreadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThread.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadValidationError{}

// Validate checks the field values on ResourceReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceReference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceReferenceMultiError, or nil if none found.
func (m *ResourceReference) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeName

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return ResourceReferenceMultiError(errors)
	}

	return nil
}

// ResourceReferenceMultiError is an error wrapping multiple validation errors
// returned by ResourceReference.ValidateAll() if the designated constraints
// aren't met.
type ResourceReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceReferenceMultiError) AllErrors() []error { return m }

// ResourceReferenceValidationError is the validation error returned by
// ResourceReference.Validate if the designated constraints aren't met.
type ResourceReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceReferenceValidationError) ErrorName() string {
	return "ResourceReferenceValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceReferenceValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	// no validation rules for ThreadId

	// no validation rules for Text

	// no validation rules for ContributedAt

	// no validation rules for ReplyCommentId

	for idx, item := range m.GetMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommentValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentValidationError{
					field:  fmt.Sprintf("Markers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetContributor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Contributor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Contributor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContributor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "Contributor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on Contributor with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Contributor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Contributor with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContributorMultiError, or
// nil if none found.
func (m *Contributor) ValidateAll() error {
	return m.validate(true)
}

func (m *Contributor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	if all {
		switch v := interface{}(m.GetOrganizationUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContributorValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContributorValidationError{
					field:  "OrganizationUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganizationUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContributorValidationError{
				field:  "OrganizationUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContributorValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContributorValidationError{
					field:  "Staff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContributorValidationError{
				field:  "Staff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContributorMultiError(errors)
	}

	return nil
}

// ContributorMultiError is an error wrapping multiple validation errors
// returned by Contributor.ValidateAll() if the designated constraints aren't met.
type ContributorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContributorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContributorMultiError) AllErrors() []error { return m }

// ContributorValidationError is the validation error returned by
// Contributor.Validate if the designated constraints aren't met.
type ContributorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContributorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContributorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContributorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContributorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContributorValidationError) ErrorName() string { return "ContributorValidationError" }

// Error satisfies the builtin error interface
func (e ContributorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContributor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContributorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContributorValidationError{}

// Validate checks the field values on ThreadSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThreadSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThreadSummaryMultiError, or
// nil if none found.
func (m *ThreadSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadSummaryId

	if all {
		switch v := interface{}(m.GetLatestComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThreadSummaryValidationError{
					field:  "LatestComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThreadSummaryValidationError{
					field:  "LatestComment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThreadSummaryValidationError{
				field:  "LatestComment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ThreadSummaryMultiError(errors)
	}

	return nil
}

// ThreadSummaryMultiError is an error wrapping multiple validation errors
// returned by ThreadSummary.ValidateAll() if the designated constraints
// aren't met.
type ThreadSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadSummaryMultiError) AllErrors() []error { return m }

// ThreadSummaryValidationError is the validation error returned by
// ThreadSummary.Validate if the designated constraints aren't met.
type ThreadSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadSummaryValidationError) ErrorName() string { return "ThreadSummaryValidationError" }

// Error satisfies the builtin error interface
func (e ThreadSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadSummaryValidationError{}

// Validate checks the field values on ThreadUserSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ThreadUserSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadUserSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadUserSummaryMultiError, or nil if none found.
func (m *ThreadUserSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadUserSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadUserSummaryId

	// no validation rules for ThreadId

	// no validation rules for UserId

	for idx, item := range m.GetMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThreadUserSummaryValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThreadUserSummaryValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThreadUserSummaryValidationError{
					field:  fmt.Sprintf("Markers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ThreadUserSummaryMultiError(errors)
	}

	return nil
}

// ThreadUserSummaryMultiError is an error wrapping multiple validation errors
// returned by ThreadUserSummary.ValidateAll() if the designated constraints
// aren't met.
type ThreadUserSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadUserSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadUserSummaryMultiError) AllErrors() []error { return m }

// ThreadUserSummaryValidationError is the validation error returned by
// ThreadUserSummary.Validate if the designated constraints aren't met.
type ThreadUserSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadUserSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadUserSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadUserSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadUserSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadUserSummaryValidationError) ErrorName() string {
	return "ThreadUserSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ThreadUserSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadUserSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadUserSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadUserSummaryValidationError{}

// Validate checks the field values on Marker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Marker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Marker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MarkerMultiError, or nil if none found.
func (m *Marker) ValidateAll() error {
	return m.validate(true)
}

func (m *Marker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MarkerId

	for idx, item := range m.GetMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerValidationError{
					field:  fmt.Sprintf("Markers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Urn

	// no validation rules for BaseThreadId

	// no validation rules for ThreadId

	// no validation rules for UserId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return MarkerMultiError(errors)
	}

	return nil
}

// MarkerMultiError is an error wrapping multiple validation errors returned by
// Marker.ValidateAll() if the designated constraints aren't met.
type MarkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkerMultiError) AllErrors() []error { return m }

// MarkerValidationError is the validation error returned by Marker.Validate if
// the designated constraints aren't met.
type MarkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkerValidationError) ErrorName() string { return "MarkerValidationError" }

// Error satisfies the builtin error interface
func (e MarkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkerValidationError{}

// Validate checks the field values on AttachmentFile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttachmentFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachmentFile with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttachmentFileMultiError,
// or nil if none found.
func (m *AttachmentFile) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachmentFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttachmentFileId

	// no validation rules for ThreadId

	// no validation rules for AssetId

	// no validation rules for CreatedBy

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AttachmentFileMultiError(errors)
	}

	return nil
}

// AttachmentFileMultiError is an error wrapping multiple validation errors
// returned by AttachmentFile.ValidateAll() if the designated constraints
// aren't met.
type AttachmentFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentFileMultiError) AllErrors() []error { return m }

// AttachmentFileValidationError is the validation error returned by
// AttachmentFile.Validate if the designated constraints aren't met.
type AttachmentFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentFileValidationError) ErrorName() string { return "AttachmentFileValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachmentFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentFileValidationError{}

// Validate checks the field values on CreateBaseThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBaseThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBaseThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBaseThreadRequestMultiError, or nil if none found.
func (m *CreateBaseThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBaseThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBaseThread() == nil {
		err := CreateBaseThreadRequestValidationError{
			field:  "BaseThread",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBaseThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBaseThreadRequestValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBaseThreadRequestValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBaseThreadRequestValidationError{
				field:  "BaseThread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBaseThreadRequestMultiError(errors)
	}

	return nil
}

// CreateBaseThreadRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBaseThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBaseThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBaseThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBaseThreadRequestMultiError) AllErrors() []error { return m }

// CreateBaseThreadRequestValidationError is the validation error returned by
// CreateBaseThreadRequest.Validate if the designated constraints aren't met.
type CreateBaseThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBaseThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBaseThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBaseThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBaseThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBaseThreadRequestValidationError) ErrorName() string {
	return "CreateBaseThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBaseThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBaseThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBaseThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBaseThreadRequestValidationError{}

// Validate checks the field values on ListBaseThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBaseThreadsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBaseThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBaseThreadsRequestMultiError, or nil if none found.
func (m *ListBaseThreadsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBaseThreadsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBaseThreadsRequestValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBaseThreadsRequestValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBaseThreadsRequestValidationError{
				field:  "ResourceReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeName

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return ListBaseThreadsRequestMultiError(errors)
	}

	return nil
}

// ListBaseThreadsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBaseThreadsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBaseThreadsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBaseThreadsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBaseThreadsRequestMultiError) AllErrors() []error { return m }

// ListBaseThreadsRequestValidationError is the validation error returned by
// ListBaseThreadsRequest.Validate if the designated constraints aren't met.
type ListBaseThreadsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBaseThreadsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBaseThreadsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBaseThreadsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBaseThreadsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBaseThreadsRequestValidationError) ErrorName() string {
	return "ListBaseThreadsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBaseThreadsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBaseThreadsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBaseThreadsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBaseThreadsRequestValidationError{}

// Validate checks the field values on ListBaseThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBaseThreadsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBaseThreadsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBaseThreadsResponseMultiError, or nil if none found.
func (m *ListBaseThreadsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBaseThreadsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBaseThreadsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBaseThreadsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBaseThreadsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBaseThreadsResponseMultiError(errors)
	}

	return nil
}

// ListBaseThreadsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBaseThreadsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBaseThreadsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBaseThreadsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBaseThreadsResponseMultiError) AllErrors() []error { return m }

// ListBaseThreadsResponseValidationError is the validation error returned by
// ListBaseThreadsResponse.Validate if the designated constraints aren't met.
type ListBaseThreadsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBaseThreadsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBaseThreadsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBaseThreadsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBaseThreadsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBaseThreadsResponseValidationError) ErrorName() string {
	return "ListBaseThreadsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBaseThreadsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBaseThreadsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBaseThreadsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBaseThreadsResponseValidationError{}

// Validate checks the field values on GetBaseThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBaseThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBaseThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBaseThreadRequestMultiError, or nil if none found.
func (m *GetBaseThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBaseThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BaseThreadId

	if len(errors) > 0 {
		return GetBaseThreadRequestMultiError(errors)
	}

	return nil
}

// GetBaseThreadRequestMultiError is an error wrapping multiple validation
// errors returned by GetBaseThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBaseThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBaseThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBaseThreadRequestMultiError) AllErrors() []error { return m }

// GetBaseThreadRequestValidationError is the validation error returned by
// GetBaseThreadRequest.Validate if the designated constraints aren't met.
type GetBaseThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBaseThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBaseThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBaseThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBaseThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBaseThreadRequestValidationError) ErrorName() string {
	return "GetBaseThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBaseThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBaseThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBaseThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBaseThreadRequestValidationError{}

// Validate checks the field values on UpdateBaseThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBaseThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBaseThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBaseThreadRequestMultiError, or nil if none found.
func (m *UpdateBaseThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBaseThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBaseThreadRequestValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBaseThreadRequestValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBaseThreadRequestValidationError{
				field:  "BaseThread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBaseThreadRequestMultiError(errors)
	}

	return nil
}

// UpdateBaseThreadRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBaseThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBaseThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBaseThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBaseThreadRequestMultiError) AllErrors() []error { return m }

// UpdateBaseThreadRequestValidationError is the validation error returned by
// UpdateBaseThreadRequest.Validate if the designated constraints aren't met.
type UpdateBaseThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBaseThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBaseThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBaseThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBaseThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBaseThreadRequestValidationError) ErrorName() string {
	return "UpdateBaseThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBaseThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBaseThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBaseThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBaseThreadRequestValidationError{}

// Validate checks the field values on DeleteBaseThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBaseThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBaseThreadRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBaseThreadRequestMultiError, or nil if none found.
func (m *DeleteBaseThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBaseThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBaseThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteBaseThreadRequestValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteBaseThreadRequestValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteBaseThreadRequestValidationError{
				field:  "BaseThread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteBaseThreadRequestMultiError(errors)
	}

	return nil
}

// DeleteBaseThreadRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBaseThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBaseThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBaseThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBaseThreadRequestMultiError) AllErrors() []error { return m }

// DeleteBaseThreadRequestValidationError is the validation error returned by
// DeleteBaseThreadRequest.Validate if the designated constraints aren't met.
type DeleteBaseThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBaseThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBaseThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBaseThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBaseThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBaseThreadRequestValidationError) ErrorName() string {
	return "DeleteBaseThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBaseThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBaseThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBaseThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBaseThreadRequestValidationError{}

// Validate checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadRequestMultiError, or nil if none found.
func (m *CreateThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetThread() == nil {
		err := CreateThreadRequestValidationError{
			field:  "Thread",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadRequestValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetResourceReference() == nil {
		err := CreateThreadRequestValidationError{
			field:  "ResourceReference",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResourceReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadRequestValidationError{
				field:  "ResourceReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateThreadRequestMultiError(errors)
	}

	return nil
}

// CreateThreadRequestMultiError is an error wrapping multiple validation
// errors returned by CreateThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadRequestMultiError) AllErrors() []error { return m }

// CreateThreadRequestValidationError is the validation error returned by
// CreateThreadRequest.Validate if the designated constraints aren't met.
type CreateThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadRequestValidationError) ErrorName() string {
	return "CreateThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadRequestValidationError{}

// Validate checks the field values on ListThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadsRequestMultiError, or nil if none found.
func (m *ListThreadsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResourceReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListThreadsRequestValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListThreadsRequestValidationError{
					field:  "ResourceReference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListThreadsRequestValidationError{
				field:  "ResourceReference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TypeName

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return ListThreadsRequestMultiError(errors)
	}

	return nil
}

// ListThreadsRequestMultiError is an error wrapping multiple validation errors
// returned by ListThreadsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListThreadsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadsRequestMultiError) AllErrors() []error { return m }

// ListThreadsRequestValidationError is the validation error returned by
// ListThreadsRequest.Validate if the designated constraints aren't met.
type ListThreadsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadsRequestValidationError) ErrorName() string {
	return "ListThreadsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadsRequestValidationError{}

// Validate checks the field values on ListThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListThreadsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListThreadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListThreadsResponseMultiError, or nil if none found.
func (m *ListThreadsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListThreadsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListThreadsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListThreadsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListThreadsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListThreadsResponseMultiError(errors)
	}

	return nil
}

// ListThreadsResponseMultiError is an error wrapping multiple validation
// errors returned by ListThreadsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListThreadsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListThreadsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListThreadsResponseMultiError) AllErrors() []error { return m }

// ListThreadsResponseValidationError is the validation error returned by
// ListThreadsResponse.Validate if the designated constraints aren't met.
type ListThreadsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListThreadsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListThreadsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListThreadsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListThreadsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListThreadsResponseValidationError) ErrorName() string {
	return "ListThreadsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListThreadsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListThreadsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListThreadsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListThreadsResponseValidationError{}

// Validate checks the field values on GetThreadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadRequestMultiError, or nil if none found.
func (m *GetThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return GetThreadRequestMultiError(errors)
	}

	return nil
}

// GetThreadRequestMultiError is an error wrapping multiple validation errors
// returned by GetThreadRequest.ValidateAll() if the designated constraints
// aren't met.
type GetThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadRequestMultiError) AllErrors() []error { return m }

// GetThreadRequestValidationError is the validation error returned by
// GetThreadRequest.Validate if the designated constraints aren't met.
type GetThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadRequestValidationError) ErrorName() string { return "GetThreadRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadRequestValidationError{}

// Validate checks the field values on UpdateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateThreadRequestMultiError, or nil if none found.
func (m *UpdateThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateThreadRequestValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateThreadRequestMultiError(errors)
	}

	return nil
}

// UpdateThreadRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateThreadRequestMultiError) AllErrors() []error { return m }

// UpdateThreadRequestValidationError is the validation error returned by
// UpdateThreadRequest.Validate if the designated constraints aren't met.
type UpdateThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateThreadRequestValidationError) ErrorName() string {
	return "UpdateThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateThreadRequestValidationError{}

// Validate checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteThreadRequestMultiError, or nil if none found.
func (m *DeleteThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteThreadRequestValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteThreadRequestMultiError(errors)
	}

	return nil
}

// DeleteThreadRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteThreadRequestMultiError) AllErrors() []error { return m }

// DeleteThreadRequestValidationError is the validation error returned by
// DeleteThreadRequest.Validate if the designated constraints aren't met.
type DeleteThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteThreadRequestValidationError) ErrorName() string {
	return "DeleteThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteThreadRequestValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := CreateCommentRequestValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on ListCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentsRequestMultiError, or nil if none found.
func (m *ListCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return ListCommentsRequestMultiError(errors)
	}

	return nil
}

// ListCommentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentsRequestMultiError) AllErrors() []error { return m }

// ListCommentsRequestValidationError is the validation error returned by
// ListCommentsRequest.Validate if the designated constraints aren't met.
type ListCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentsRequestValidationError) ErrorName() string {
	return "ListCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentsRequestValidationError{}

// Validate checks the field values on ListCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentsResponseMultiError, or nil if none found.
func (m *ListCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommentsResponseMultiError(errors)
	}

	return nil
}

// ListCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentsResponseMultiError) AllErrors() []error { return m }

// ListCommentsResponseValidationError is the validation error returned by
// ListCommentsResponse.Validate if the designated constraints aren't met.
type ListCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentsResponseValidationError) ErrorName() string {
	return "ListCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentsResponseValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRequestMultiError, or nil if none found.
func (m *UpdateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommentRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRequestMultiError) AllErrors() []error { return m }

// UpdateCommentRequestValidationError is the validation error returned by
// UpdateCommentRequest.Validate if the designated constraints aren't met.
type UpdateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRequestValidationError) ErrorName() string {
	return "UpdateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on SetMarkerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetMarkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMarkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMarkerRequestMultiError, or nil if none found.
func (m *SetMarkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMarkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if utf8.RuneCountInString(m.GetTypeName()) < 1 {
		err := SetMarkerRequestValidationError{
			field:  "TypeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRecordId()) < 1 {
		err := SetMarkerRequestValidationError{
			field:  "RecordId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetMarkerRequestValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetMarkerRequestValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetMarkerRequestValidationError{
					field:  fmt.Sprintf("Markers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return SetMarkerRequestMultiError(errors)
	}

	return nil
}

// SetMarkerRequestMultiError is an error wrapping multiple validation errors
// returned by SetMarkerRequest.ValidateAll() if the designated constraints
// aren't met.
type SetMarkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMarkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMarkerRequestMultiError) AllErrors() []error { return m }

// SetMarkerRequestValidationError is the validation error returned by
// SetMarkerRequest.Validate if the designated constraints aren't met.
type SetMarkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMarkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMarkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMarkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMarkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMarkerRequestValidationError) ErrorName() string { return "SetMarkerRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetMarkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMarkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMarkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMarkerRequestValidationError{}

// Validate checks the field values on SetMarkerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetMarkerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMarkerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMarkerResponseMultiError, or nil if none found.
func (m *SetMarkerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMarkerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetMarkerResponseMultiError(errors)
	}

	return nil
}

// SetMarkerResponseMultiError is an error wrapping multiple validation errors
// returned by SetMarkerResponse.ValidateAll() if the designated constraints
// aren't met.
type SetMarkerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMarkerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMarkerResponseMultiError) AllErrors() []error { return m }

// SetMarkerResponseValidationError is the validation error returned by
// SetMarkerResponse.Validate if the designated constraints aren't met.
type SetMarkerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMarkerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMarkerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMarkerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMarkerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMarkerResponseValidationError) ErrorName() string {
	return "SetMarkerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMarkerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMarkerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMarkerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMarkerResponseValidationError{}

// Validate checks the field values on UnsetMarkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsetMarkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsetMarkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsetMarkerRequestMultiError, or nil if none found.
func (m *UnsetMarkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsetMarkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mode

	if utf8.RuneCountInString(m.GetTypeName()) < 1 {
		err := UnsetMarkerRequestValidationError{
			field:  "TypeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRecordId()) < 1 {
		err := UnsetMarkerRequestValidationError{
			field:  "RecordId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnsetMarkerRequestValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnsetMarkerRequestValidationError{
						field:  fmt.Sprintf("Markers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnsetMarkerRequestValidationError{
					field:  fmt.Sprintf("Markers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnsetMarkerRequestMultiError(errors)
	}

	return nil
}

// UnsetMarkerRequestMultiError is an error wrapping multiple validation errors
// returned by UnsetMarkerRequest.ValidateAll() if the designated constraints
// aren't met.
type UnsetMarkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsetMarkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsetMarkerRequestMultiError) AllErrors() []error { return m }

// UnsetMarkerRequestValidationError is the validation error returned by
// UnsetMarkerRequest.Validate if the designated constraints aren't met.
type UnsetMarkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsetMarkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsetMarkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsetMarkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsetMarkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsetMarkerRequestValidationError) ErrorName() string {
	return "UnsetMarkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsetMarkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsetMarkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsetMarkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsetMarkerRequestValidationError{}

// Validate checks the field values on UnsetMarkerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsetMarkerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsetMarkerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsetMarkerResponseMultiError, or nil if none found.
func (m *UnsetMarkerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsetMarkerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnsetMarkerResponseMultiError(errors)
	}

	return nil
}

// UnsetMarkerResponseMultiError is an error wrapping multiple validation
// errors returned by UnsetMarkerResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsetMarkerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsetMarkerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsetMarkerResponseMultiError) AllErrors() []error { return m }

// UnsetMarkerResponseValidationError is the validation error returned by
// UnsetMarkerResponse.Validate if the designated constraints aren't met.
type UnsetMarkerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsetMarkerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsetMarkerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsetMarkerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsetMarkerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsetMarkerResponseValidationError) ErrorName() string {
	return "UnsetMarkerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsetMarkerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsetMarkerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsetMarkerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsetMarkerResponseValidationError{}

// Validate checks the field values on UnreadListResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnreadListResourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnreadListResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnreadListResourcesRequestMultiError, or nil if none found.
func (m *UnreadListResourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnreadListResourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceMode

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UnreadListResourcesRequestMultiError(errors)
	}

	return nil
}

// UnreadListResourcesRequestMultiError is an error wrapping multiple
// validation errors returned by UnreadListResourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type UnreadListResourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnreadListResourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnreadListResourcesRequestMultiError) AllErrors() []error { return m }

// UnreadListResourcesRequestValidationError is the validation error returned
// by UnreadListResourcesRequest.Validate if the designated constraints aren't met.
type UnreadListResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnreadListResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnreadListResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnreadListResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnreadListResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnreadListResourcesRequestValidationError) ErrorName() string {
	return "UnreadListResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnreadListResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnreadListResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnreadListResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnreadListResourcesRequestValidationError{}

// Validate checks the field values on UnreadListResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnreadListResourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnreadListResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnreadListResourcesResponseMultiError, or nil if none found.
func (m *UnreadListResourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnreadListResourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnreadListResourcesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnreadListResourcesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnreadListResourcesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UnreadListResourcesResponseMultiError(errors)
	}

	return nil
}

// UnreadListResourcesResponseMultiError is an error wrapping multiple
// validation errors returned by UnreadListResourcesResponse.ValidateAll() if
// the designated constraints aren't met.
type UnreadListResourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnreadListResourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnreadListResourcesResponseMultiError) AllErrors() []error { return m }

// UnreadListResourcesResponseValidationError is the validation error returned
// by UnreadListResourcesResponse.Validate if the designated constraints
// aren't met.
type UnreadListResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnreadListResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnreadListResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnreadListResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnreadListResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnreadListResourcesResponseValidationError) ErrorName() string {
	return "UnreadListResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnreadListResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnreadListResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnreadListResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnreadListResourcesResponseValidationError{}

// Validate checks the field values on Thread_AttachedPoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Thread_AttachedPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Thread_AttachedPoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Thread_AttachedPointMultiError, or nil if none found.
func (m *Thread_AttachedPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Thread_AttachedPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for Y1

	// no validation rules for X2

	// no validation rules for Y2

	// no validation rules for Attributes

	if len(errors) > 0 {
		return Thread_AttachedPointMultiError(errors)
	}

	return nil
}

// Thread_AttachedPointMultiError is an error wrapping multiple validation
// errors returned by Thread_AttachedPoint.ValidateAll() if the designated
// constraints aren't met.
type Thread_AttachedPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Thread_AttachedPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Thread_AttachedPointMultiError) AllErrors() []error { return m }

// Thread_AttachedPointValidationError is the validation error returned by
// Thread_AttachedPoint.Validate if the designated constraints aren't met.
type Thread_AttachedPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Thread_AttachedPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Thread_AttachedPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Thread_AttachedPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Thread_AttachedPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Thread_AttachedPointValidationError) ErrorName() string {
	return "Thread_AttachedPointValidationError"
}

// Error satisfies the builtin error interface
func (e Thread_AttachedPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThread_AttachedPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Thread_AttachedPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Thread_AttachedPointValidationError{}

// Validate checks the field values on UnreadListResourcesResponse_Resource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UnreadListResourcesResponse_Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnreadListResourcesResponse_Resource
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnreadListResourcesResponse_ResourceMultiError, or nil if none found.
func (m *UnreadListResourcesResponse_Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *UnreadListResourcesResponse_Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeName

	// no validation rules for RecordId

	if all {
		switch v := interface{}(m.GetBaseThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnreadListResourcesResponse_ResourceValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnreadListResourcesResponse_ResourceValidationError{
					field:  "BaseThread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnreadListResourcesResponse_ResourceValidationError{
				field:  "BaseThread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnreadListResourcesResponse_ResourceMultiError(errors)
	}

	return nil
}

// UnreadListResourcesResponse_ResourceMultiError is an error wrapping multiple
// validation errors returned by
// UnreadListResourcesResponse_Resource.ValidateAll() if the designated
// constraints aren't met.
type UnreadListResourcesResponse_ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnreadListResourcesResponse_ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnreadListResourcesResponse_ResourceMultiError) AllErrors() []error { return m }

// UnreadListResourcesResponse_ResourceValidationError is the validation error
// returned by UnreadListResourcesResponse_Resource.Validate if the designated
// constraints aren't met.
type UnreadListResourcesResponse_ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnreadListResourcesResponse_ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnreadListResourcesResponse_ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnreadListResourcesResponse_ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnreadListResourcesResponse_ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnreadListResourcesResponse_ResourceValidationError) ErrorName() string {
	return "UnreadListResourcesResponse_ResourceValidationError"
}

// Error satisfies the builtin error interface
func (e UnreadListResourcesResponse_ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnreadListResourcesResponse_Resource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnreadListResourcesResponse_ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnreadListResourcesResponse_ResourceValidationError{}
