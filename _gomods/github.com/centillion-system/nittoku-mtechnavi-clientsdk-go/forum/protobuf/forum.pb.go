// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: forum.proto

package protobuf

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MarkerRequestMode int32

const (
	MarkerRequestMode_COMPLETE    MarkerRequestMode = 0
	MarkerRequestMode_INCREMENTAL MarkerRequestMode = 1
)

// Enum value maps for MarkerRequestMode.
var (
	MarkerRequestMode_name = map[int32]string{
		0: "COMPLETE",
		1: "INCREMENTAL",
	}
	MarkerRequestMode_value = map[string]int32{
		"COMPLETE":    0,
		"INCREMENTAL": 1,
	}
)

func (x MarkerRequestMode) Enum() *MarkerRequestMode {
	p := new(MarkerRequestMode)
	*p = x
	return p
}

func (x MarkerRequestMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarkerRequestMode) Descriptor() protoreflect.EnumDescriptor {
	return file_forum_proto_enumTypes[0].Descriptor()
}

func (MarkerRequestMode) Type() protoreflect.EnumType {
	return &file_forum_proto_enumTypes[0]
}

func (x MarkerRequestMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarkerRequestMode.Descriptor instead.
func (MarkerRequestMode) EnumDescriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{0}
}

type BaseThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BaseThread ID
	//
	// Implementation Note::
	//
	//	公開 の場合は、BaseThread.owner + resource_id
	//	非公開 の場合は、resource_id + BaseThread.owner
	BaseThreadId string `protobuf:"bytes,1,opt,name=base_thread_id,json=baseThreadId,proto3" json:"base_thread_id,omitempty"`
	// 所有テナントID
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// 紐付き情報
	ResourceReference *ResourceReference `protobuf:"bytes,3,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
	// 企業ID
	//
	// Implementation Note::
	//
	//	以下ケースによって対象企業IDを格納する
	//	公開 の場合は、対象企業ID（所有テナントも含む）
	//	非公開 の場合は、所有テナントのみ
	CompanyIds []string `protobuf:"bytes,5,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
	// 非公開かどうか
	//
	// trueの場合、システム内部で作成された非公開BaseThreadとして扱う
	Internal bool `protobuf:"varint,10,opt,name=internal,proto3" json:"internal,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,9,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *BaseThread) Reset() {
	*x = BaseThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseThread) ProtoMessage() {}

func (x *BaseThread) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseThread.ProtoReflect.Descriptor instead.
func (*BaseThread) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{0}
}

func (x *BaseThread) GetBaseThreadId() string {
	if x != nil {
		return x.BaseThreadId
	}
	return ""
}

func (x *BaseThread) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *BaseThread) GetResourceReference() *ResourceReference {
	if x != nil {
		return x.ResourceReference
	}
	return nil
}

func (x *BaseThread) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *BaseThread) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *BaseThread) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *BaseThread) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *BaseThread) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BaseThread) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId     string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	BaseThreadId string `protobuf:"bytes,2,opt,name=base_thread_id,json=baseThreadId,proto3" json:"base_thread_id,omitempty"`
	// タイトル
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// outputonly 最終投稿
	//
	// Implementation Note::
	//
	//	ThreadSummaryのlatest_commentを格納する
	LatestComment *Comment `protobuf:"bytes,4,opt,name=latest_comment,json=latestComment,proto3" json:"latest_comment,omitempty"`
	// readonly 企業ID
	//
	// Implementation Note::
	//
	//	前提の仕様として空配列を指定した場合は、BaseThread.company_ids が優先される
	//
	//	以下ケースによって対象企業IDを格納する
	//	公開設定が 公開 の場合は、空配列
	//	公開設定が 非公開 の場合は、空配列
	//	公開設定が 企業名指定 の場合は、対象企業ID（not omit）
	CompanyIds []string `protobuf:"bytes,10,rep,name=company_ids,json=companyIds,proto3" json:"company_ids,omitempty"`
	// 公開設定
	ShareScope *protobuf.NameOption `protobuf:"bytes,11,opt,name=share_scope,json=shareScope,proto3" json:"share_scope,omitempty"`
	// outputonly マーカー
	// 名称マスタにおける種別 A0000039 (コミュニケーションマーカー) を参照
	//
	// Implementation Note::
	//
	//	ThreadUserSummaryのmarkersを格納する
	AggregatedMarkers []*protobuf.NameOption `protobuf:"bytes,5,rep,name=aggregated_markers,json=aggregatedMarkers,proto3" json:"aggregated_markers,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,9,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	AttachedPoint    *Thread_AttachedPoint              `protobuf:"bytes,12,opt,name=attached_point,json=attachedPoint,proto3" json:"attached_point,omitempty"`
	// 関連情報
	Associations []string `protobuf:"bytes,13,rep,name=associations,proto3" json:"associations,omitempty"`
	DeletedAt    int64    `protobuf:"varint,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt    int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{1}
}

func (x *Thread) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Thread) GetBaseThreadId() string {
	if x != nil {
		return x.BaseThreadId
	}
	return ""
}

func (x *Thread) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Thread) GetLatestComment() *Comment {
	if x != nil {
		return x.LatestComment
	}
	return nil
}

func (x *Thread) GetCompanyIds() []string {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *Thread) GetShareScope() *protobuf.NameOption {
	if x != nil {
		return x.ShareScope
	}
	return nil
}

func (x *Thread) GetAggregatedMarkers() []*protobuf.NameOption {
	if x != nil {
		return x.AggregatedMarkers
	}
	return nil
}

func (x *Thread) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *Thread) GetAttachedPoint() *Thread_AttachedPoint {
	if x != nil {
		return x.AttachedPoint
	}
	return nil
}

func (x *Thread) GetAssociations() []string {
	if x != nil {
		return x.Associations
	}
	return nil
}

func (x *Thread) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *Thread) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Thread) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ResourceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName   string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *ResourceReference) Reset() {
	*x = ResourceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceReference) ProtoMessage() {}

func (x *ResourceReference) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceReference.ProtoReflect.Descriptor instead.
func (*ResourceReference) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{2}
}

func (x *ResourceReference) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ResourceReference) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	ThreadId  string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// readonly 投稿日時
	//
	// Implementation Note::
	//
	//	CreateCommentをしたときのタイムスタンプ（マイクロ秒）を格納する
	ContributedAt int64 `protobuf:"varint,4,opt,name=contributed_at,json=contributedAt,proto3" json:"contributed_at,omitempty"`
	// 引用返信元コメント
	ReplyCommentId string `protobuf:"bytes,5,opt,name=reply_comment_id,json=replyCommentId,proto3" json:"reply_comment_id,omitempty"`
	// outputonly マーカー
	// 名称マスタにおける種別 A0000039 (コミュニケーションマーカー) を参照
	Markers []*protobuf.NameOption `protobuf:"bytes,6,rep,name=markers,proto3" json:"markers,omitempty"`
	// 投稿者情報
	// 以下のいずれかの条件に合致する場合のみ出力される
	// 1. 自テナントのユーザが投稿したコメントのとき
	// 2. （BaseThreadのオーナー）オーナー以外のテナントが投稿したコメントのとき
	// 3. （BaseThreadのオーナー以外）オーナー側テナントが投稿したコメントのとき
	Contributor *Contributor `protobuf:"bytes,7,opt,name=contributor,proto3" json:"contributor,omitempty"`
	// readonly 共有情報
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,8,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{3}
}

func (x *Comment) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *Comment) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Comment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Comment) GetContributedAt() int64 {
	if x != nil {
		return x.ContributedAt
	}
	return 0
}

func (x *Comment) GetReplyCommentId() string {
	if x != nil {
		return x.ReplyCommentId
	}
	return ""
}

func (x *Comment) GetMarkers() []*protobuf.NameOption {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *Comment) GetContributor() *Contributor {
	if x != nil {
		return x.Contributor
	}
	return nil
}

func (x *Comment) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *Comment) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *Comment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Comment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// コメント投稿者情報
type Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// readonly 登録企業ID
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// readonly 登録部門
	OrganizationUnit *protobuf.ComponentUnitReference `protobuf:"bytes,2,opt,name=organization_unit,json=organizationUnit,proto3" json:"organization_unit,omitempty"`
	// readonly 登録担当者
	Staff *protobuf.StaffReference `protobuf:"bytes,3,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (x *Contributor) Reset() {
	*x = Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor) ProtoMessage() {}

func (x *Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor.ProtoReflect.Descriptor instead.
func (*Contributor) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{4}
}

func (x *Contributor) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Contributor) GetOrganizationUnit() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.OrganizationUnit
	}
	return nil
}

func (x *Contributor) GetStaff() *protobuf.StaffReference {
	if x != nil {
		return x.Staff
	}
	return nil
}

// Implementation Note::
//
//	このmessageはsharetoしない、自テナント管理
//	Comment 書き込み をトリガーにして更新する
//	thread　/ comment の sharedトリガーで更新する
type ThreadSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// thread_id + tenant_id と同一
	ThreadSummaryId string `protobuf:"bytes,1,opt,name=thread_summary_id,json=threadSummaryId,proto3" json:"thread_summary_id,omitempty"`
	// readonly 最終投稿
	// Implementation Note::
	//
	//	contributed_at が最新のレコードを更新する
	LatestComment *Comment `protobuf:"bytes,2,opt,name=latest_comment,json=latestComment,proto3" json:"latest_comment,omitempty"`
	DeletedAt     int64    `protobuf:"varint,3,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt     int64    `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64    `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ThreadSummary) Reset() {
	*x = ThreadSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadSummary) ProtoMessage() {}

func (x *ThreadSummary) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadSummary.ProtoReflect.Descriptor instead.
func (*ThreadSummary) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{5}
}

func (x *ThreadSummary) GetThreadSummaryId() string {
	if x != nil {
		return x.ThreadSummaryId
	}
	return ""
}

func (x *ThreadSummary) GetLatestComment() *Comment {
	if x != nil {
		return x.LatestComment
	}
	return nil
}

func (x *ThreadSummary) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *ThreadSummary) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ThreadSummary) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Implementation Note::
//
//	このmessageはsharetoしない、自テナント管理
//	マーカーの 書き込み をトリガーにして更新する
//	thread / comment の sharedトリガーで更新する
type ThreadUserSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// thread_id + user_id と同一
	ThreadUserSummaryId string `protobuf:"bytes,1,opt,name=thread_user_summary_id,json=threadUserSummaryId,proto3" json:"thread_user_summary_id,omitempty"`
	ThreadId            string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId              string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// readonly マーカー
	// 名称マスタにおける種別 A0000039 (コミュニケーションマーカー) を参照
	//
	// Implementation Note::
	//
	//	Commentの各要素が持つmarkersを、重複を排除し、総和したもの
	Markers   []*protobuf.NameOption `protobuf:"bytes,4,rep,name=markers,proto3" json:"markers,omitempty"`
	DeletedAt int64                  `protobuf:"varint,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64                  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ThreadUserSummary) Reset() {
	*x = ThreadUserSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadUserSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadUserSummary) ProtoMessage() {}

func (x *ThreadUserSummary) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadUserSummary.ProtoReflect.Descriptor instead.
func (*ThreadUserSummary) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{6}
}

func (x *ThreadUserSummary) GetThreadUserSummaryId() string {
	if x != nil {
		return x.ThreadUserSummaryId
	}
	return ""
}

func (x *ThreadUserSummary) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ThreadUserSummary) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ThreadUserSummary) GetMarkers() []*protobuf.NameOption {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *ThreadUserSummary) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *ThreadUserSummary) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ThreadUserSummary) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Marker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// comment_id + user_id
	MarkerId string                 `protobuf:"bytes,1,opt,name=marker_id,json=markerId,proto3" json:"marker_id,omitempty"`
	Markers  []*protobuf.NameOption `protobuf:"bytes,2,rep,name=markers,proto3" json:"markers,omitempty"`
	// "urn:mtechnavi.api.forum.Comment:{{comment_id}}"
	Urn          string `protobuf:"bytes,3,opt,name=urn,proto3" json:"urn,omitempty"`
	BaseThreadId string `protobuf:"bytes,4,opt,name=base_thread_id,json=baseThreadId,proto3" json:"base_thread_id,omitempty"`
	ThreadId     string `protobuf:"bytes,5,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId       string `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeletedAt    int64  `protobuf:"varint,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt    int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Marker) Reset() {
	*x = Marker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marker) ProtoMessage() {}

func (x *Marker) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marker.ProtoReflect.Descriptor instead.
func (*Marker) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{7}
}

func (x *Marker) GetMarkerId() string {
	if x != nil {
		return x.MarkerId
	}
	return ""
}

func (x *Marker) GetMarkers() []*protobuf.NameOption {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *Marker) GetUrn() string {
	if x != nil {
		return x.Urn
	}
	return ""
}

func (x *Marker) GetBaseThreadId() string {
	if x != nil {
		return x.BaseThreadId
	}
	return ""
}

func (x *Marker) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Marker) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Marker) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *Marker) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Marker) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AttachmentFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentFileId string `protobuf:"bytes,1,opt,name=attachment_file_id,json=attachmentFileId,proto3" json:"attachment_file_id,omitempty"`
	ThreadId         string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	AssetId          string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	CreatedBy        string `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	DeletedAt        int64  `protobuf:"varint,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt        int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *AttachmentFile) Reset() {
	*x = AttachmentFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachmentFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentFile) ProtoMessage() {}

func (x *AttachmentFile) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentFile.ProtoReflect.Descriptor instead.
func (*AttachmentFile) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{8}
}

func (x *AttachmentFile) GetAttachmentFileId() string {
	if x != nil {
		return x.AttachmentFileId
	}
	return ""
}

func (x *AttachmentFile) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *AttachmentFile) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AttachmentFile) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AttachmentFile) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *AttachmentFile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AttachmentFile) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateBaseThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseThread *BaseThread `protobuf:"bytes,1,opt,name=base_thread,json=baseThread,proto3" json:"base_thread,omitempty"`
}

func (x *CreateBaseThreadRequest) Reset() {
	*x = CreateBaseThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBaseThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBaseThreadRequest) ProtoMessage() {}

func (x *CreateBaseThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBaseThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateBaseThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBaseThreadRequest) GetBaseThread() *BaseThread {
	if x != nil {
		return x.BaseThread
	}
	return nil
}

type ListBaseThreadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ResourceReference *ResourceReference `protobuf:"bytes,1,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
	TypeName          string             `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	ResourceId        string             `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *ListBaseThreadsRequest) Reset() {
	*x = ListBaseThreadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBaseThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBaseThreadsRequest) ProtoMessage() {}

func (x *ListBaseThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBaseThreadsRequest.ProtoReflect.Descriptor instead.
func (*ListBaseThreadsRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Do not use.
func (x *ListBaseThreadsRequest) GetResourceReference() *ResourceReference {
	if x != nil {
		return x.ResourceReference
	}
	return nil
}

func (x *ListBaseThreadsRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListBaseThreadsRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type ListBaseThreadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*BaseThread `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListBaseThreadsResponse) Reset() {
	*x = ListBaseThreadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBaseThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBaseThreadsResponse) ProtoMessage() {}

func (x *ListBaseThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBaseThreadsResponse.ProtoReflect.Descriptor instead.
func (*ListBaseThreadsResponse) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{11}
}

func (x *ListBaseThreadsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBaseThreadsResponse) GetItems() []*BaseThread {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetBaseThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseThreadId string `protobuf:"bytes,1,opt,name=base_thread_id,json=baseThreadId,proto3" json:"base_thread_id,omitempty"`
}

func (x *GetBaseThreadRequest) Reset() {
	*x = GetBaseThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBaseThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBaseThreadRequest) ProtoMessage() {}

func (x *GetBaseThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBaseThreadRequest.ProtoReflect.Descriptor instead.
func (*GetBaseThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{12}
}

func (x *GetBaseThreadRequest) GetBaseThreadId() string {
	if x != nil {
		return x.BaseThreadId
	}
	return ""
}

type UpdateBaseThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseThread *BaseThread `protobuf:"bytes,1,opt,name=base_thread,json=baseThread,proto3" json:"base_thread,omitempty"`
}

func (x *UpdateBaseThreadRequest) Reset() {
	*x = UpdateBaseThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBaseThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBaseThreadRequest) ProtoMessage() {}

func (x *UpdateBaseThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBaseThreadRequest.ProtoReflect.Descriptor instead.
func (*UpdateBaseThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateBaseThreadRequest) GetBaseThread() *BaseThread {
	if x != nil {
		return x.BaseThread
	}
	return nil
}

type DeleteBaseThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseThread *BaseThread `protobuf:"bytes,1,opt,name=base_thread,json=baseThread,proto3" json:"base_thread,omitempty"`
}

func (x *DeleteBaseThreadRequest) Reset() {
	*x = DeleteBaseThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBaseThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBaseThreadRequest) ProtoMessage() {}

func (x *DeleteBaseThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBaseThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteBaseThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteBaseThreadRequest) GetBaseThread() *BaseThread {
	if x != nil {
		return x.BaseThread
	}
	return nil
}

type CreateThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thread            *Thread            `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
	ResourceReference *ResourceReference `protobuf:"bytes,2,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
}

func (x *CreateThreadRequest) Reset() {
	*x = CreateThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadRequest) ProtoMessage() {}

func (x *CreateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadRequest.ProtoReflect.Descriptor instead.
func (*CreateThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{15}
}

func (x *CreateThreadRequest) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *CreateThreadRequest) GetResourceReference() *ResourceReference {
	if x != nil {
		return x.ResourceReference
	}
	return nil
}

type ListThreadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	ResourceReference *ResourceReference `protobuf:"bytes,1,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
	TypeName          string             `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	ResourceId        string             `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Associations      []string           `protobuf:"bytes,4,rep,name=associations,proto3" json:"associations,omitempty"`
}

func (x *ListThreadsRequest) Reset() {
	*x = ListThreadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThreadsRequest) ProtoMessage() {}

func (x *ListThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThreadsRequest.ProtoReflect.Descriptor instead.
func (*ListThreadsRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Do not use.
func (x *ListThreadsRequest) GetResourceReference() *ResourceReference {
	if x != nil {
		return x.ResourceReference
	}
	return nil
}

func (x *ListThreadsRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListThreadsRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ListThreadsRequest) GetAssociations() []string {
	if x != nil {
		return x.Associations
	}
	return nil
}

type ListThreadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Thread `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListThreadsResponse) Reset() {
	*x = ListThreadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThreadsResponse) ProtoMessage() {}

func (x *ListThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThreadsResponse.ProtoReflect.Descriptor instead.
func (*ListThreadsResponse) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{17}
}

func (x *ListThreadsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListThreadsResponse) GetItems() []*Thread {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *GetThreadRequest) Reset() {
	*x = GetThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadRequest) ProtoMessage() {}

func (x *GetThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadRequest.ProtoReflect.Descriptor instead.
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{18}
}

func (x *GetThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type UpdateThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thread *Thread `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *UpdateThreadRequest) Reset() {
	*x = UpdateThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThreadRequest) ProtoMessage() {}

func (x *UpdateThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThreadRequest.ProtoReflect.Descriptor instead.
func (*UpdateThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateThreadRequest) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

type DeleteThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thread *Thread `protobuf:"bytes,1,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *DeleteThreadRequest) Reset() {
	*x = DeleteThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadRequest) ProtoMessage() {}

func (x *DeleteThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadRequest.ProtoReflect.Descriptor instead.
func (*DeleteThreadRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteThreadRequest) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

type CreateCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CreateCommentRequest) Reset() {
	*x = CreateCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentRequest) ProtoMessage() {}

func (x *CreateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{21}
}

func (x *CreateCommentRequest) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type ListCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *ListCommentsRequest) Reset() {
	*x = ListCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsRequest) ProtoMessage() {}

func (x *ListCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsRequest.ProtoReflect.Descriptor instead.
func (*ListCommentsRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{22}
}

func (x *ListCommentsRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type ListCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*Comment `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCommentsResponse) Reset() {
	*x = ListCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommentsResponse) ProtoMessage() {}

func (x *ListCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommentsResponse.ProtoReflect.Descriptor instead.
func (*ListCommentsResponse) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{23}
}

func (x *ListCommentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCommentsResponse) GetItems() []*Comment {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId string `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *GetCommentRequest) Reset() {
	*x = GetCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentRequest) ProtoMessage() {}

func (x *GetCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentRequest.ProtoReflect.Descriptor instead.
func (*GetCommentRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{24}
}

func (x *GetCommentRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

type UpdateCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *UpdateCommentRequest) Reset() {
	*x = UpdateCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentRequest) ProtoMessage() {}

func (x *UpdateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateCommentRequest) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type DeleteCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteCommentRequest) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type SetMarkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode MarkerRequestMode `protobuf:"varint,1,opt,name=mode,proto3,enum=mtechnavi.api.forum.MarkerRequestMode" json:"mode,omitempty"`
	// mtechnavi.api.forum.Comment
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// comment_id
	RecordId string                 `protobuf:"bytes,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Markers  []*protobuf.NameOption `protobuf:"bytes,4,rep,name=markers,proto3" json:"markers,omitempty"`
	// user_id
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SetMarkerRequest) Reset() {
	*x = SetMarkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMarkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMarkerRequest) ProtoMessage() {}

func (x *SetMarkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMarkerRequest.ProtoReflect.Descriptor instead.
func (*SetMarkerRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{27}
}

func (x *SetMarkerRequest) GetMode() MarkerRequestMode {
	if x != nil {
		return x.Mode
	}
	return MarkerRequestMode_COMPLETE
}

func (x *SetMarkerRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *SetMarkerRequest) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *SetMarkerRequest) GetMarkers() []*protobuf.NameOption {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *SetMarkerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SetMarkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMarkerResponse) Reset() {
	*x = SetMarkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMarkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMarkerResponse) ProtoMessage() {}

func (x *SetMarkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMarkerResponse.ProtoReflect.Descriptor instead.
func (*SetMarkerResponse) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{28}
}

type UnsetMarkerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode MarkerRequestMode `protobuf:"varint,1,opt,name=mode,proto3,enum=mtechnavi.api.forum.MarkerRequestMode" json:"mode,omitempty"`
	// mtechnavi.api.forum.Comment
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// comment_id
	RecordId string                 `protobuf:"bytes,3,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Markers  []*protobuf.NameOption `protobuf:"bytes,4,rep,name=markers,proto3" json:"markers,omitempty"`
}

func (x *UnsetMarkerRequest) Reset() {
	*x = UnsetMarkerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsetMarkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsetMarkerRequest) ProtoMessage() {}

func (x *UnsetMarkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsetMarkerRequest.ProtoReflect.Descriptor instead.
func (*UnsetMarkerRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{29}
}

func (x *UnsetMarkerRequest) GetMode() MarkerRequestMode {
	if x != nil {
		return x.Mode
	}
	return MarkerRequestMode_COMPLETE
}

func (x *UnsetMarkerRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UnsetMarkerRequest) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UnsetMarkerRequest) GetMarkers() []*protobuf.NameOption {
	if x != nil {
		return x.Markers
	}
	return nil
}

type UnsetMarkerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsetMarkerResponse) Reset() {
	*x = UnsetMarkerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsetMarkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsetMarkerResponse) ProtoMessage() {}

func (x *UnsetMarkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsetMarkerResponse.ProtoReflect.Descriptor instead.
func (*UnsetMarkerResponse) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{30}
}

type UnreadListResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 伝票種類
	TypeName []string `protobuf:"bytes,1,rep,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// 参照モード
	//
	//	"all":全て[規定値]
	//	"owner":BaseThread の owner のみ
	//	"unowner":BaseThread の 非owner のみ
	ReferenceMode string `protobuf:"bytes,3,opt,name=reference_mode,json=referenceMode,proto3" json:"reference_mode,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UnreadListResourcesRequest) Reset() {
	*x = UnreadListResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadListResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadListResourcesRequest) ProtoMessage() {}

func (x *UnreadListResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadListResourcesRequest.ProtoReflect.Descriptor instead.
func (*UnreadListResourcesRequest) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{31}
}

func (x *UnreadListResourcesRequest) GetTypeName() []string {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *UnreadListResourcesRequest) GetReferenceMode() string {
	if x != nil {
		return x.ReferenceMode
	}
	return ""
}

func (x *UnreadListResourcesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UnreadListResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 伝票情報
	Items []*UnreadListResourcesResponse_Resource `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UnreadListResourcesResponse) Reset() {
	*x = UnreadListResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadListResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadListResourcesResponse) ProtoMessage() {}

func (x *UnreadListResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadListResourcesResponse.ProtoReflect.Descriptor instead.
func (*UnreadListResourcesResponse) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{32}
}

func (x *UnreadListResourcesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UnreadListResourcesResponse) GetItems() []*UnreadListResourcesResponse_Resource {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UnreadListResourcesResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type Thread_AttachedPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 int32 `protobuf:"varint,1,opt,name=x1,proto3" json:"x1,omitempty"`
	Y1 int32 `protobuf:"varint,2,opt,name=y1,proto3" json:"y1,omitempty"`
	X2 int32 `protobuf:"varint,3,opt,name=x2,proto3" json:"x2,omitempty"`
	Y2 int32 `protobuf:"varint,4,opt,name=y2,proto3" json:"y2,omitempty"`
	// 付加情報
	Attributes map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Thread_AttachedPoint) Reset() {
	*x = Thread_AttachedPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread_AttachedPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread_AttachedPoint) ProtoMessage() {}

func (x *Thread_AttachedPoint) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread_AttachedPoint.ProtoReflect.Descriptor instead.
func (*Thread_AttachedPoint) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Thread_AttachedPoint) GetX1() int32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *Thread_AttachedPoint) GetY1() int32 {
	if x != nil {
		return x.Y1
	}
	return 0
}

func (x *Thread_AttachedPoint) GetX2() int32 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *Thread_AttachedPoint) GetY2() int32 {
	if x != nil {
		return x.Y2
	}
	return 0
}

func (x *Thread_AttachedPoint) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type UnreadListResourcesResponse_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 伝票種類
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// 伝票ID
	RecordId string `protobuf:"bytes,2,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// ベーススレッド
	BaseThread *BaseThread `protobuf:"bytes,3,opt,name=base_thread,json=baseThread,proto3" json:"base_thread,omitempty"`
}

func (x *UnreadListResourcesResponse_Resource) Reset() {
	*x = UnreadListResourcesResponse_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadListResourcesResponse_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadListResourcesResponse_Resource) ProtoMessage() {}

func (x *UnreadListResourcesResponse_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_forum_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadListResourcesResponse_Resource.ProtoReflect.Descriptor instead.
func (*UnreadListResourcesResponse_Resource) Descriptor() ([]byte, []int) {
	return file_forum_proto_rawDescGZIP(), []int{32, 0}
}

func (x *UnreadListResourcesResponse_Resource) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *UnreadListResourcesResponse_Resource) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *UnreadListResourcesResponse_Resource) GetBaseThread() *BaseThread {
	if x != nil {
		return x.BaseThread
	}
	return nil
}

var File_forum_proto protoreflect.FileDescriptor

var file_forum_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x6d, 0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa8, 0x03, 0x0a, 0x0a, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xce, 0x07,
	0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xd2,
	0xb8, 0x02, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x91, 0x02, 0x0a, 0x0d, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x02,
	0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03,
	0x52, 0x02, 0x78, 0x31, 0x12, 0x16, 0x0a, 0x02, 0x79, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x02, 0x79, 0x31, 0x12, 0x16, 0x0a, 0x02,
	0x78, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03,
	0x52, 0x02, 0x78, 0x32, 0x12, 0x16, 0x0a, 0x02, 0x79, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x02, 0x79, 0x32, 0x12, 0x61, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x03, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61,
	0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x85, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x17, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x11, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x55, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x66, 0x66, 0x22,
	0xdd, 0x01, 0x0a, 0x0d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x9c, 0x02, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xb8, 0x02, 0x0b, 0x0a, 0x09,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9,
	0x02, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x03, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xd2, 0xb8, 0x02, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x6e,
	0x52, 0x03, 0x75, 0x72, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xd2,
	0xb8, 0x02, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xd2, 0xb8, 0x02, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x0e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x65, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x5b, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x5f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22,
	0x58, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x60, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc,
	0x01, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x15, 0x0a,
	0x13, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x1a, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x02, 0x0a, 0x1b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x86, 0x01, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x2a, 0x32, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x32, 0xab, 0x0c, 0x0a, 0x0c, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x6c, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12,
	0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2c,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x55,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x28,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x63, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x90, 0x01, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x78, 0x0a, 0x13, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1a, 0x5a, 0x18, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_forum_proto_rawDescOnce sync.Once
	file_forum_proto_rawDescData = file_forum_proto_rawDesc
)

func file_forum_proto_rawDescGZIP() []byte {
	file_forum_proto_rawDescOnce.Do(func() {
		file_forum_proto_rawDescData = protoimpl.X.CompressGZIP(file_forum_proto_rawDescData)
	})
	return file_forum_proto_rawDescData
}

var file_forum_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_forum_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_forum_proto_goTypes = []interface{}{
	(MarkerRequestMode)(0),                       // 0: mtechnavi.api.forum.MarkerRequestMode
	(*BaseThread)(nil),                           // 1: mtechnavi.api.forum.BaseThread
	(*Thread)(nil),                               // 2: mtechnavi.api.forum.Thread
	(*ResourceReference)(nil),                    // 3: mtechnavi.api.forum.ResourceReference
	(*Comment)(nil),                              // 4: mtechnavi.api.forum.Comment
	(*Contributor)(nil),                          // 5: mtechnavi.api.forum.Contributor
	(*ThreadSummary)(nil),                        // 6: mtechnavi.api.forum.ThreadSummary
	(*ThreadUserSummary)(nil),                    // 7: mtechnavi.api.forum.ThreadUserSummary
	(*Marker)(nil),                               // 8: mtechnavi.api.forum.Marker
	(*AttachmentFile)(nil),                       // 9: mtechnavi.api.forum.AttachmentFile
	(*CreateBaseThreadRequest)(nil),              // 10: mtechnavi.api.forum.CreateBaseThreadRequest
	(*ListBaseThreadsRequest)(nil),               // 11: mtechnavi.api.forum.ListBaseThreadsRequest
	(*ListBaseThreadsResponse)(nil),              // 12: mtechnavi.api.forum.ListBaseThreadsResponse
	(*GetBaseThreadRequest)(nil),                 // 13: mtechnavi.api.forum.GetBaseThreadRequest
	(*UpdateBaseThreadRequest)(nil),              // 14: mtechnavi.api.forum.UpdateBaseThreadRequest
	(*DeleteBaseThreadRequest)(nil),              // 15: mtechnavi.api.forum.DeleteBaseThreadRequest
	(*CreateThreadRequest)(nil),                  // 16: mtechnavi.api.forum.CreateThreadRequest
	(*ListThreadsRequest)(nil),                   // 17: mtechnavi.api.forum.ListThreadsRequest
	(*ListThreadsResponse)(nil),                  // 18: mtechnavi.api.forum.ListThreadsResponse
	(*GetThreadRequest)(nil),                     // 19: mtechnavi.api.forum.GetThreadRequest
	(*UpdateThreadRequest)(nil),                  // 20: mtechnavi.api.forum.UpdateThreadRequest
	(*DeleteThreadRequest)(nil),                  // 21: mtechnavi.api.forum.DeleteThreadRequest
	(*CreateCommentRequest)(nil),                 // 22: mtechnavi.api.forum.CreateCommentRequest
	(*ListCommentsRequest)(nil),                  // 23: mtechnavi.api.forum.ListCommentsRequest
	(*ListCommentsResponse)(nil),                 // 24: mtechnavi.api.forum.ListCommentsResponse
	(*GetCommentRequest)(nil),                    // 25: mtechnavi.api.forum.GetCommentRequest
	(*UpdateCommentRequest)(nil),                 // 26: mtechnavi.api.forum.UpdateCommentRequest
	(*DeleteCommentRequest)(nil),                 // 27: mtechnavi.api.forum.DeleteCommentRequest
	(*SetMarkerRequest)(nil),                     // 28: mtechnavi.api.forum.SetMarkerRequest
	(*SetMarkerResponse)(nil),                    // 29: mtechnavi.api.forum.SetMarkerResponse
	(*UnsetMarkerRequest)(nil),                   // 30: mtechnavi.api.forum.UnsetMarkerRequest
	(*UnsetMarkerResponse)(nil),                  // 31: mtechnavi.api.forum.UnsetMarkerResponse
	(*UnreadListResourcesRequest)(nil),           // 32: mtechnavi.api.forum.UnreadListResourcesRequest
	(*UnreadListResourcesResponse)(nil),          // 33: mtechnavi.api.forum.UnreadListResourcesResponse
	(*Thread_AttachedPoint)(nil),                 // 34: mtechnavi.api.forum.Thread.AttachedPoint
	nil,                                          // 35: mtechnavi.api.forum.Thread.AttachedPoint.AttributesEntry
	(*UnreadListResourcesResponse_Resource)(nil), // 36: mtechnavi.api.forum.UnreadListResourcesResponse.Resource
	(*protobuf.EmbeddedSharedProperties)(nil),    // 37: sharelib.EmbeddedSharedProperties
	(*protobuf.NameOption)(nil),                  // 38: sharelib.NameOption
	(*protobuf.ComponentUnitReference)(nil),      // 39: sharelib.ComponentUnitReference
	(*protobuf.StaffReference)(nil),              // 40: sharelib.StaffReference
	(*emptypb.Empty)(nil),                        // 41: google.protobuf.Empty
}
var file_forum_proto_depIdxs = []int32{
	3,  // 0: mtechnavi.api.forum.BaseThread.resource_reference:type_name -> mtechnavi.api.forum.ResourceReference
	37, // 1: mtechnavi.api.forum.BaseThread.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	4,  // 2: mtechnavi.api.forum.Thread.latest_comment:type_name -> mtechnavi.api.forum.Comment
	38, // 3: mtechnavi.api.forum.Thread.share_scope:type_name -> sharelib.NameOption
	38, // 4: mtechnavi.api.forum.Thread.aggregated_markers:type_name -> sharelib.NameOption
	37, // 5: mtechnavi.api.forum.Thread.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	34, // 6: mtechnavi.api.forum.Thread.attached_point:type_name -> mtechnavi.api.forum.Thread.AttachedPoint
	38, // 7: mtechnavi.api.forum.Comment.markers:type_name -> sharelib.NameOption
	5,  // 8: mtechnavi.api.forum.Comment.contributor:type_name -> mtechnavi.api.forum.Contributor
	37, // 9: mtechnavi.api.forum.Comment.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	39, // 10: mtechnavi.api.forum.Contributor.organization_unit:type_name -> sharelib.ComponentUnitReference
	40, // 11: mtechnavi.api.forum.Contributor.staff:type_name -> sharelib.StaffReference
	4,  // 12: mtechnavi.api.forum.ThreadSummary.latest_comment:type_name -> mtechnavi.api.forum.Comment
	38, // 13: mtechnavi.api.forum.ThreadUserSummary.markers:type_name -> sharelib.NameOption
	38, // 14: mtechnavi.api.forum.Marker.markers:type_name -> sharelib.NameOption
	1,  // 15: mtechnavi.api.forum.CreateBaseThreadRequest.base_thread:type_name -> mtechnavi.api.forum.BaseThread
	3,  // 16: mtechnavi.api.forum.ListBaseThreadsRequest.resource_reference:type_name -> mtechnavi.api.forum.ResourceReference
	1,  // 17: mtechnavi.api.forum.ListBaseThreadsResponse.items:type_name -> mtechnavi.api.forum.BaseThread
	1,  // 18: mtechnavi.api.forum.UpdateBaseThreadRequest.base_thread:type_name -> mtechnavi.api.forum.BaseThread
	1,  // 19: mtechnavi.api.forum.DeleteBaseThreadRequest.base_thread:type_name -> mtechnavi.api.forum.BaseThread
	2,  // 20: mtechnavi.api.forum.CreateThreadRequest.thread:type_name -> mtechnavi.api.forum.Thread
	3,  // 21: mtechnavi.api.forum.CreateThreadRequest.resource_reference:type_name -> mtechnavi.api.forum.ResourceReference
	3,  // 22: mtechnavi.api.forum.ListThreadsRequest.resource_reference:type_name -> mtechnavi.api.forum.ResourceReference
	2,  // 23: mtechnavi.api.forum.ListThreadsResponse.items:type_name -> mtechnavi.api.forum.Thread
	2,  // 24: mtechnavi.api.forum.UpdateThreadRequest.thread:type_name -> mtechnavi.api.forum.Thread
	2,  // 25: mtechnavi.api.forum.DeleteThreadRequest.thread:type_name -> mtechnavi.api.forum.Thread
	4,  // 26: mtechnavi.api.forum.CreateCommentRequest.comment:type_name -> mtechnavi.api.forum.Comment
	4,  // 27: mtechnavi.api.forum.ListCommentsResponse.items:type_name -> mtechnavi.api.forum.Comment
	4,  // 28: mtechnavi.api.forum.UpdateCommentRequest.comment:type_name -> mtechnavi.api.forum.Comment
	4,  // 29: mtechnavi.api.forum.DeleteCommentRequest.comment:type_name -> mtechnavi.api.forum.Comment
	0,  // 30: mtechnavi.api.forum.SetMarkerRequest.mode:type_name -> mtechnavi.api.forum.MarkerRequestMode
	38, // 31: mtechnavi.api.forum.SetMarkerRequest.markers:type_name -> sharelib.NameOption
	0,  // 32: mtechnavi.api.forum.UnsetMarkerRequest.mode:type_name -> mtechnavi.api.forum.MarkerRequestMode
	38, // 33: mtechnavi.api.forum.UnsetMarkerRequest.markers:type_name -> sharelib.NameOption
	36, // 34: mtechnavi.api.forum.UnreadListResourcesResponse.items:type_name -> mtechnavi.api.forum.UnreadListResourcesResponse.Resource
	35, // 35: mtechnavi.api.forum.Thread.AttachedPoint.attributes:type_name -> mtechnavi.api.forum.Thread.AttachedPoint.AttributesEntry
	1,  // 36: mtechnavi.api.forum.UnreadListResourcesResponse.Resource.base_thread:type_name -> mtechnavi.api.forum.BaseThread
	10, // 37: mtechnavi.api.forum.ForumService.CreateBaseThread:input_type -> mtechnavi.api.forum.CreateBaseThreadRequest
	11, // 38: mtechnavi.api.forum.ForumService.ListBaseThreads:input_type -> mtechnavi.api.forum.ListBaseThreadsRequest
	13, // 39: mtechnavi.api.forum.ForumService.GetBaseThread:input_type -> mtechnavi.api.forum.GetBaseThreadRequest
	14, // 40: mtechnavi.api.forum.ForumService.UpdateBaseThread:input_type -> mtechnavi.api.forum.UpdateBaseThreadRequest
	15, // 41: mtechnavi.api.forum.ForumService.DeleteBaseThread:input_type -> mtechnavi.api.forum.DeleteBaseThreadRequest
	16, // 42: mtechnavi.api.forum.ForumService.CreateThread:input_type -> mtechnavi.api.forum.CreateThreadRequest
	17, // 43: mtechnavi.api.forum.ForumService.ListThreads:input_type -> mtechnavi.api.forum.ListThreadsRequest
	19, // 44: mtechnavi.api.forum.ForumService.GetThread:input_type -> mtechnavi.api.forum.GetThreadRequest
	20, // 45: mtechnavi.api.forum.ForumService.UpdateThread:input_type -> mtechnavi.api.forum.UpdateThreadRequest
	21, // 46: mtechnavi.api.forum.ForumService.DeleteThread:input_type -> mtechnavi.api.forum.DeleteThreadRequest
	22, // 47: mtechnavi.api.forum.ForumService.CreateComment:input_type -> mtechnavi.api.forum.CreateCommentRequest
	23, // 48: mtechnavi.api.forum.ForumService.ListComments:input_type -> mtechnavi.api.forum.ListCommentsRequest
	25, // 49: mtechnavi.api.forum.ForumService.GetComment:input_type -> mtechnavi.api.forum.GetCommentRequest
	26, // 50: mtechnavi.api.forum.ForumService.UpdateComment:input_type -> mtechnavi.api.forum.UpdateCommentRequest
	27, // 51: mtechnavi.api.forum.ForumService.DeleteComment:input_type -> mtechnavi.api.forum.DeleteCommentRequest
	28, // 52: mtechnavi.api.forum.ForumService.SetMarker:input_type -> mtechnavi.api.forum.SetMarkerRequest
	30, // 53: mtechnavi.api.forum.ForumService.UnsetMarker:input_type -> mtechnavi.api.forum.UnsetMarkerRequest
	32, // 54: mtechnavi.api.forum.ForumTaskListService.UnreadListResources:input_type -> mtechnavi.api.forum.UnreadListResourcesRequest
	1,  // 55: mtechnavi.api.forum.ForumService.CreateBaseThread:output_type -> mtechnavi.api.forum.BaseThread
	12, // 56: mtechnavi.api.forum.ForumService.ListBaseThreads:output_type -> mtechnavi.api.forum.ListBaseThreadsResponse
	1,  // 57: mtechnavi.api.forum.ForumService.GetBaseThread:output_type -> mtechnavi.api.forum.BaseThread
	1,  // 58: mtechnavi.api.forum.ForumService.UpdateBaseThread:output_type -> mtechnavi.api.forum.BaseThread
	41, // 59: mtechnavi.api.forum.ForumService.DeleteBaseThread:output_type -> google.protobuf.Empty
	2,  // 60: mtechnavi.api.forum.ForumService.CreateThread:output_type -> mtechnavi.api.forum.Thread
	18, // 61: mtechnavi.api.forum.ForumService.ListThreads:output_type -> mtechnavi.api.forum.ListThreadsResponse
	2,  // 62: mtechnavi.api.forum.ForumService.GetThread:output_type -> mtechnavi.api.forum.Thread
	2,  // 63: mtechnavi.api.forum.ForumService.UpdateThread:output_type -> mtechnavi.api.forum.Thread
	41, // 64: mtechnavi.api.forum.ForumService.DeleteThread:output_type -> google.protobuf.Empty
	4,  // 65: mtechnavi.api.forum.ForumService.CreateComment:output_type -> mtechnavi.api.forum.Comment
	24, // 66: mtechnavi.api.forum.ForumService.ListComments:output_type -> mtechnavi.api.forum.ListCommentsResponse
	4,  // 67: mtechnavi.api.forum.ForumService.GetComment:output_type -> mtechnavi.api.forum.Comment
	4,  // 68: mtechnavi.api.forum.ForumService.UpdateComment:output_type -> mtechnavi.api.forum.Comment
	41, // 69: mtechnavi.api.forum.ForumService.DeleteComment:output_type -> google.protobuf.Empty
	29, // 70: mtechnavi.api.forum.ForumService.SetMarker:output_type -> mtechnavi.api.forum.SetMarkerResponse
	31, // 71: mtechnavi.api.forum.ForumService.UnsetMarker:output_type -> mtechnavi.api.forum.UnsetMarkerResponse
	33, // 72: mtechnavi.api.forum.ForumTaskListService.UnreadListResources:output_type -> mtechnavi.api.forum.UnreadListResourcesResponse
	55, // [55:73] is the sub-list for method output_type
	37, // [37:55] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_forum_proto_init() }
func file_forum_proto_init() {
	if File_forum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_forum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadUserSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Marker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachmentFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBaseThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBaseThreadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBaseThreadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBaseThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBaseThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBaseThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListThreadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListThreadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMarkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMarkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsetMarkerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsetMarkerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadListResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadListResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread_AttachedPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadListResourcesResponse_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_forum_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_forum_proto_goTypes,
		DependencyIndexes: file_forum_proto_depIdxs,
		EnumInfos:         file_forum_proto_enumTypes,
		MessageInfos:      file_forum_proto_msgTypes,
	}.Build()
	File_forum_proto = out.File
	file_forum_proto_rawDesc = nil
	file_forum_proto_goTypes = nil
	file_forum_proto_depIdxs = nil
}
