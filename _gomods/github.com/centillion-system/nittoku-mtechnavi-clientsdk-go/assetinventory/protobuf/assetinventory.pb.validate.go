// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: assetinventory.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SignedUrl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignedUrl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignedUrl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignedUrlMultiError, or nil
// if none found.
func (m *SignedUrl) ValidateAll() error {
	return m.validate(true)
}

func (m *SignedUrl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return SignedUrlMultiError(errors)
	}

	return nil
}

// SignedUrlMultiError is an error wrapping multiple validation errors returned
// by SignedUrl.ValidateAll() if the designated constraints aren't met.
type SignedUrlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignedUrlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignedUrlMultiError) AllErrors() []error { return m }

// SignedUrlValidationError is the validation error returned by
// SignedUrl.Validate if the designated constraints aren't met.
type SignedUrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignedUrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignedUrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignedUrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignedUrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignedUrlValidationError) ErrorName() string { return "SignedUrlValidationError" }

// Error satisfies the builtin error interface
func (e SignedUrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignedUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignedUrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignedUrlValidationError{}

// Validate checks the field values on GenerateWritableSignedUrlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GenerateWritableSignedUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateWritableSignedUrlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateWritableSignedUrlRequestMultiError, or nil if none found.
func (m *GenerateWritableSignedUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateWritableSignedUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expires

	// no validation rules for ContentType

	if len(errors) > 0 {
		return GenerateWritableSignedUrlRequestMultiError(errors)
	}

	return nil
}

// GenerateWritableSignedUrlRequestMultiError is an error wrapping multiple
// validation errors returned by
// GenerateWritableSignedUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateWritableSignedUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateWritableSignedUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateWritableSignedUrlRequestMultiError) AllErrors() []error { return m }

// GenerateWritableSignedUrlRequestValidationError is the validation error
// returned by GenerateWritableSignedUrlRequest.Validate if the designated
// constraints aren't met.
type GenerateWritableSignedUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateWritableSignedUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateWritableSignedUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateWritableSignedUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateWritableSignedUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateWritableSignedUrlRequestValidationError) ErrorName() string {
	return "GenerateWritableSignedUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateWritableSignedUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateWritableSignedUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateWritableSignedUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateWritableSignedUrlRequestValidationError{}

// Validate checks the field values on GenerateReadableSignedUrlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GenerateReadableSignedUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateReadableSignedUrlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateReadableSignedUrlRequestMultiError, or nil if none found.
func (m *GenerateReadableSignedUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateReadableSignedUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expires

	// no validation rules for SignedUrl

	if len(errors) > 0 {
		return GenerateReadableSignedUrlRequestMultiError(errors)
	}

	return nil
}

// GenerateReadableSignedUrlRequestMultiError is an error wrapping multiple
// validation errors returned by
// GenerateReadableSignedUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateReadableSignedUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateReadableSignedUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateReadableSignedUrlRequestMultiError) AllErrors() []error { return m }

// GenerateReadableSignedUrlRequestValidationError is the validation error
// returned by GenerateReadableSignedUrlRequest.Validate if the designated
// constraints aren't met.
type GenerateReadableSignedUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateReadableSignedUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateReadableSignedUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateReadableSignedUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateReadableSignedUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateReadableSignedUrlRequestValidationError) ErrorName() string {
	return "GenerateReadableSignedUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateReadableSignedUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateReadableSignedUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateReadableSignedUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateReadableSignedUrlRequestValidationError{}

// Validate checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssetMultiError, or nil if none found.
func (m *Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for Filename

	// no validation rules for MimeType

	// no validation rules for DisplayName

	// no validation rules for AssetDataId

	for idx, item := range m.GetPurposeUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("PurposeUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("PurposeUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetValidationError{
					field:  fmt.Sprintf("PurposeUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PurposeUnitProperties

	if all {
		switch v := interface{}(m.GetCreatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "CreatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "CreatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AssetMultiError(errors)
	}

	return nil
}

// AssetMultiError is an error wrapping multiple validation errors returned by
// Asset.ValidateAll() if the designated constraints aren't met.
type AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetMultiError) AllErrors() []error { return m }

// AssetValidationError is the validation error returned by Asset.Validate if
// the designated constraints aren't met.
type AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetValidationError) ErrorName() string { return "AssetValidationError" }

// Error satisfies the builtin error interface
func (e AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetValidationError{}

// Validate checks the field values on AssetStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetStatusMultiError, or
// nil if none found.
func (m *AssetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetStatusValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetStatusValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetStatusValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetStatusValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetStatusValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetStatusValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetStatusMultiError(errors)
	}

	return nil
}

// AssetStatusMultiError is an error wrapping multiple validation errors
// returned by AssetStatus.ValidateAll() if the designated constraints aren't met.
type AssetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetStatusMultiError) AllErrors() []error { return m }

// AssetStatusValidationError is the validation error returned by
// AssetStatus.Validate if the designated constraints aren't met.
type AssetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetStatusValidationError) ErrorName() string { return "AssetStatusValidationError" }

// Error satisfies the builtin error interface
func (e AssetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetStatusValidationError{}

// Validate checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssetRequestMultiError, or nil if none found.
func (m *CreateAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SourceUrl

	if len(errors) > 0 {
		return CreateAssetRequestMultiError(errors)
	}

	return nil
}

// CreateAssetRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetRequestMultiError) AllErrors() []error { return m }

// CreateAssetRequestValidationError is the validation error returned by
// CreateAssetRequest.Validate if the designated constraints aren't met.
type CreateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetRequestValidationError) ErrorName() string {
	return "CreateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetRequestValidationError{}

// Validate checks the field values on GetAssetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetRequestMultiError, or nil if none found.
func (m *GetAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return GetAssetRequestMultiError(errors)
	}

	return nil
}

// GetAssetRequestMultiError is an error wrapping multiple validation errors
// returned by GetAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetRequestMultiError) AllErrors() []error { return m }

// GetAssetRequestValidationError is the validation error returned by
// GetAssetRequest.Validate if the designated constraints aren't met.
type GetAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetRequestValidationError) ErrorName() string { return "GetAssetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetRequestValidationError{}

// Validate checks the field values on ListAssetsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssetsRequestMultiError, or nil if none found.
func (m *ListAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAssetsRequestMultiError(errors)
	}

	return nil
}

// ListAssetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAssetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssetsRequestMultiError) AllErrors() []error { return m }

// ListAssetsRequestValidationError is the validation error returned by
// ListAssetsRequest.Validate if the designated constraints aren't met.
type ListAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsRequestValidationError) ErrorName() string {
	return "ListAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsRequestValidationError{}

// Validate checks the field values on ListAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssetsResponseMultiError, or nil if none found.
func (m *ListAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssetsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssetsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssetsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAssetsResponseMultiError(errors)
	}

	return nil
}

// ListAssetsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAssetsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssetsResponseMultiError) AllErrors() []error { return m }

// ListAssetsResponseValidationError is the validation error returned by
// ListAssetsResponse.Validate if the designated constraints aren't met.
type ListAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssetsResponseValidationError) ErrorName() string {
	return "ListAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssetsResponseValidationError{}

// Validate checks the field values on UpdateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssetRequestMultiError, or nil if none found.
func (m *UpdateAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SourceUrl

	if len(errors) > 0 {
		return UpdateAssetRequestMultiError(errors)
	}

	return nil
}

// UpdateAssetRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssetRequestMultiError) AllErrors() []error { return m }

// UpdateAssetRequestValidationError is the validation error returned by
// UpdateAssetRequest.Validate if the designated constraints aren't met.
type UpdateAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssetRequestValidationError) ErrorName() string {
	return "UpdateAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssetRequestValidationError{}

// Validate checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssetRequestMultiError, or nil if none found.
func (m *DeleteAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAssetRequestMultiError(errors)
	}

	return nil
}

// DeleteAssetRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssetRequestMultiError) AllErrors() []error { return m }

// DeleteAssetRequestValidationError is the validation error returned by
// DeleteAssetRequest.Validate if the designated constraints aren't met.
type DeleteAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetRequestValidationError) ErrorName() string {
	return "DeleteAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetRequestValidationError{}

// Validate checks the field values on ImportBlueprintPropertiessRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportBlueprintPropertiessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBlueprintPropertiessRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportBlueprintPropertiessRequestMultiError, or nil if none found.
func (m *ImportBlueprintPropertiessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBlueprintPropertiessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBlueprintPropertiessRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBlueprintPropertiessRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBlueprintPropertiessRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportBlueprintPropertiessRequestMultiError(errors)
	}

	return nil
}

// ImportBlueprintPropertiessRequestMultiError is an error wrapping multiple
// validation errors returned by
// ImportBlueprintPropertiessRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportBlueprintPropertiessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBlueprintPropertiessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBlueprintPropertiessRequestMultiError) AllErrors() []error { return m }

// ImportBlueprintPropertiessRequestValidationError is the validation error
// returned by ImportBlueprintPropertiessRequest.Validate if the designated
// constraints aren't met.
type ImportBlueprintPropertiessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBlueprintPropertiessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBlueprintPropertiessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBlueprintPropertiessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBlueprintPropertiessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBlueprintPropertiessRequestValidationError) ErrorName() string {
	return "ImportBlueprintPropertiessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBlueprintPropertiessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBlueprintPropertiessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBlueprintPropertiessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBlueprintPropertiessRequestValidationError{}

// Validate checks the field values on ImportBlueprintPropertiessResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportBlueprintPropertiessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportBlueprintPropertiessResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportBlueprintPropertiessResponseMultiError, or nil if none found.
func (m *ImportBlueprintPropertiessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportBlueprintPropertiessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportBlueprintPropertiessResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportBlueprintPropertiessResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportBlueprintPropertiessResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportBlueprintPropertiessResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportBlueprintPropertiessResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportBlueprintPropertiessResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportBlueprintPropertiessResponseMultiError(errors)
	}

	return nil
}

// ImportBlueprintPropertiessResponseMultiError is an error wrapping multiple
// validation errors returned by
// ImportBlueprintPropertiessResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportBlueprintPropertiessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportBlueprintPropertiessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportBlueprintPropertiessResponseMultiError) AllErrors() []error { return m }

// ImportBlueprintPropertiessResponseValidationError is the validation error
// returned by ImportBlueprintPropertiessResponse.Validate if the designated
// constraints aren't met.
type ImportBlueprintPropertiessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportBlueprintPropertiessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportBlueprintPropertiessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportBlueprintPropertiessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportBlueprintPropertiessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportBlueprintPropertiessResponseValidationError) ErrorName() string {
	return "ImportBlueprintPropertiessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportBlueprintPropertiessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportBlueprintPropertiessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportBlueprintPropertiessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportBlueprintPropertiessResponseValidationError{}

// Validate checks the field values on ExportBlueprintPropertiessRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportBlueprintPropertiessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBlueprintPropertiessRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportBlueprintPropertiessRequestMultiError, or nil if none found.
func (m *ExportBlueprintPropertiessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBlueprintPropertiessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportBlueprintPropertiessRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportBlueprintPropertiessRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportBlueprintPropertiessRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportBlueprintPropertiessRequestMultiError(errors)
	}

	return nil
}

// ExportBlueprintPropertiessRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExportBlueprintPropertiessRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportBlueprintPropertiessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBlueprintPropertiessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBlueprintPropertiessRequestMultiError) AllErrors() []error { return m }

// ExportBlueprintPropertiessRequestValidationError is the validation error
// returned by ExportBlueprintPropertiessRequest.Validate if the designated
// constraints aren't met.
type ExportBlueprintPropertiessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBlueprintPropertiessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBlueprintPropertiessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBlueprintPropertiessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBlueprintPropertiessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBlueprintPropertiessRequestValidationError) ErrorName() string {
	return "ExportBlueprintPropertiessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBlueprintPropertiessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBlueprintPropertiessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBlueprintPropertiessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBlueprintPropertiessRequestValidationError{}

// Validate checks the field values on ExportBlueprintPropertiessResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportBlueprintPropertiessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportBlueprintPropertiessResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportBlueprintPropertiessResponseMultiError, or nil if none found.
func (m *ExportBlueprintPropertiessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportBlueprintPropertiessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportBlueprintPropertiessResponseMultiError(errors)
	}

	return nil
}

// ExportBlueprintPropertiessResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExportBlueprintPropertiessResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportBlueprintPropertiessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportBlueprintPropertiessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportBlueprintPropertiessResponseMultiError) AllErrors() []error { return m }

// ExportBlueprintPropertiessResponseValidationError is the validation error
// returned by ExportBlueprintPropertiessResponse.Validate if the designated
// constraints aren't met.
type ExportBlueprintPropertiessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportBlueprintPropertiessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportBlueprintPropertiessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportBlueprintPropertiessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportBlueprintPropertiessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportBlueprintPropertiessResponseValidationError) ErrorName() string {
	return "ExportBlueprintPropertiessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportBlueprintPropertiessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportBlueprintPropertiessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportBlueprintPropertiessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportBlueprintPropertiessResponseValidationError{}

// Validate checks the field values on ListBlueprintPropertiesFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBlueprintPropertiesFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBlueprintPropertiesFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListBlueprintPropertiesFormatsRequestMultiError, or nil if none found.
func (m *ListBlueprintPropertiesFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBlueprintPropertiesFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBlueprintPropertiesFormatsRequestMultiError(errors)
	}

	return nil
}

// ListBlueprintPropertiesFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListBlueprintPropertiesFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBlueprintPropertiesFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBlueprintPropertiesFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBlueprintPropertiesFormatsRequestMultiError) AllErrors() []error { return m }

// ListBlueprintPropertiesFormatsRequestValidationError is the validation error
// returned by ListBlueprintPropertiesFormatsRequest.Validate if the
// designated constraints aren't met.
type ListBlueprintPropertiesFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBlueprintPropertiesFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBlueprintPropertiesFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBlueprintPropertiesFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBlueprintPropertiesFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBlueprintPropertiesFormatsRequestValidationError) ErrorName() string {
	return "ListBlueprintPropertiesFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBlueprintPropertiesFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBlueprintPropertiesFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBlueprintPropertiesFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBlueprintPropertiesFormatsRequestValidationError{}

// Validate checks the field values on ListBlueprintPropertiesFormatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListBlueprintPropertiesFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBlueprintPropertiesFormatsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListBlueprintPropertiesFormatsResponseMultiError, or nil if none found.
func (m *ListBlueprintPropertiesFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBlueprintPropertiesFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBlueprintPropertiesFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBlueprintPropertiesFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBlueprintPropertiesFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBlueprintPropertiesFormatsResponseMultiError(errors)
	}

	return nil
}

// ListBlueprintPropertiesFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListBlueprintPropertiesFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBlueprintPropertiesFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBlueprintPropertiesFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBlueprintPropertiesFormatsResponseMultiError) AllErrors() []error { return m }

// ListBlueprintPropertiesFormatsResponseValidationError is the validation
// error returned by ListBlueprintPropertiesFormatsResponse.Validate if the
// designated constraints aren't met.
type ListBlueprintPropertiesFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBlueprintPropertiesFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBlueprintPropertiesFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBlueprintPropertiesFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBlueprintPropertiesFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBlueprintPropertiesFormatsResponseValidationError) ErrorName() string {
	return "ListBlueprintPropertiesFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBlueprintPropertiesFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBlueprintPropertiesFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBlueprintPropertiesFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBlueprintPropertiesFormatsResponseValidationError{}

// Validate checks the field values on CreateZippedAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateZippedAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateZippedAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateZippedAssetRequestMultiError, or nil if none found.
func (m *CreateZippedAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateZippedAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Expires

	if len(errors) > 0 {
		return CreateZippedAssetRequestMultiError(errors)
	}

	return nil
}

// CreateZippedAssetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateZippedAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateZippedAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateZippedAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateZippedAssetRequestMultiError) AllErrors() []error { return m }

// CreateZippedAssetRequestValidationError is the validation error returned by
// CreateZippedAssetRequest.Validate if the designated constraints aren't met.
type CreateZippedAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateZippedAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateZippedAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateZippedAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateZippedAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateZippedAssetRequestValidationError) ErrorName() string {
	return "CreateZippedAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateZippedAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateZippedAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateZippedAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateZippedAssetRequestValidationError{}

// Validate checks the field values on CreateZippedAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateZippedAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateZippedAssetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateZippedAssetResponseMultiError, or nil if none found.
func (m *CreateZippedAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateZippedAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return CreateZippedAssetResponseMultiError(errors)
	}

	return nil
}

// CreateZippedAssetResponseMultiError is an error wrapping multiple validation
// errors returned by CreateZippedAssetResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateZippedAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateZippedAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateZippedAssetResponseMultiError) AllErrors() []error { return m }

// CreateZippedAssetResponseValidationError is the validation error returned by
// CreateZippedAssetResponse.Validate if the designated constraints aren't met.
type CreateZippedAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateZippedAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateZippedAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateZippedAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateZippedAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateZippedAssetResponseValidationError) ErrorName() string {
	return "CreateZippedAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateZippedAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateZippedAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateZippedAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateZippedAssetResponseValidationError{}
