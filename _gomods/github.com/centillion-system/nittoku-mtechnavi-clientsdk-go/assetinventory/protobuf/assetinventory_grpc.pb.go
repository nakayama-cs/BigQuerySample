// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetInventoryClient is the client API for AssetInventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetInventoryClient interface {
	GenerateWritableSignedUrl(ctx context.Context, in *GenerateWritableSignedUrlRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	GenerateReadableSignedUrl(ctx context.Context, in *GenerateReadableSignedUrlRequest, opts ...grpc.CallOption) (*SignedUrl, error)
	CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// zipアセットの作成
	CreateZippedAsset(ctx context.Context, in *CreateZippedAssetRequest, opts ...grpc.CallOption) (*CreateZippedAssetResponse, error)
	// 図面個別情報取込
	ImportBlueprintPropertiess(ctx context.Context, in *ImportBlueprintPropertiessRequest, opts ...grpc.CallOption) (*ImportBlueprintPropertiessResponse, error)
	// 図面個別情報取込フォーマット出力
	ExportBlueprintPropertiess(ctx context.Context, in *ExportBlueprintPropertiessRequest, opts ...grpc.CallOption) (*ExportBlueprintPropertiessResponse, error)
	// 図面個別情報取込フォーマット取得
	ListBlueprintPropertiesFormats(ctx context.Context, in *ListBlueprintPropertiesFormatsRequest, opts ...grpc.CallOption) (*ListBlueprintPropertiesFormatsResponse, error)
}

type assetInventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetInventoryClient(cc grpc.ClientConnInterface) AssetInventoryClient {
	return &assetInventoryClient{cc}
}

func (c *assetInventoryClient) GenerateWritableSignedUrl(ctx context.Context, in *GenerateWritableSignedUrlRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/GenerateWritableSignedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) GenerateReadableSignedUrl(ctx context.Context, in *GenerateReadableSignedUrlRequest, opts ...grpc.CallOption) (*SignedUrl, error) {
	out := new(SignedUrl)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/GenerateReadableSignedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) CreateAsset(ctx context.Context, in *CreateAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/CreateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/DeleteAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) CreateZippedAsset(ctx context.Context, in *CreateZippedAssetRequest, opts ...grpc.CallOption) (*CreateZippedAssetResponse, error) {
	out := new(CreateZippedAssetResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/CreateZippedAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) ImportBlueprintPropertiess(ctx context.Context, in *ImportBlueprintPropertiessRequest, opts ...grpc.CallOption) (*ImportBlueprintPropertiessResponse, error) {
	out := new(ImportBlueprintPropertiessResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/ImportBlueprintPropertiess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) ExportBlueprintPropertiess(ctx context.Context, in *ExportBlueprintPropertiessRequest, opts ...grpc.CallOption) (*ExportBlueprintPropertiessResponse, error) {
	out := new(ExportBlueprintPropertiessResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/ExportBlueprintPropertiess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetInventoryClient) ListBlueprintPropertiesFormats(ctx context.Context, in *ListBlueprintPropertiesFormatsRequest, opts ...grpc.CallOption) (*ListBlueprintPropertiesFormatsResponse, error) {
	out := new(ListBlueprintPropertiesFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.assetinventory.AssetInventory/ListBlueprintPropertiesFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetInventoryServer is the server API for AssetInventory service.
// All implementations must embed UnimplementedAssetInventoryServer
// for forward compatibility
type AssetInventoryServer interface {
	GenerateWritableSignedUrl(context.Context, *GenerateWritableSignedUrlRequest) (*SignedUrl, error)
	GenerateReadableSignedUrl(context.Context, *GenerateReadableSignedUrlRequest) (*SignedUrl, error)
	CreateAsset(context.Context, *CreateAssetRequest) (*Asset, error)
	GetAsset(context.Context, *GetAssetRequest) (*Asset, error)
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	UpdateAsset(context.Context, *UpdateAssetRequest) (*Asset, error)
	DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error)
	// zipアセットの作成
	CreateZippedAsset(context.Context, *CreateZippedAssetRequest) (*CreateZippedAssetResponse, error)
	// 図面個別情報取込
	ImportBlueprintPropertiess(context.Context, *ImportBlueprintPropertiessRequest) (*ImportBlueprintPropertiessResponse, error)
	// 図面個別情報取込フォーマット出力
	ExportBlueprintPropertiess(context.Context, *ExportBlueprintPropertiessRequest) (*ExportBlueprintPropertiessResponse, error)
	// 図面個別情報取込フォーマット取得
	ListBlueprintPropertiesFormats(context.Context, *ListBlueprintPropertiesFormatsRequest) (*ListBlueprintPropertiesFormatsResponse, error)
	mustEmbedUnimplementedAssetInventoryServer()
}

// UnimplementedAssetInventoryServer must be embedded to have forward compatible implementations.
type UnimplementedAssetInventoryServer struct {
}

func (UnimplementedAssetInventoryServer) GenerateWritableSignedUrl(context.Context, *GenerateWritableSignedUrlRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWritableSignedUrl not implemented")
}
func (UnimplementedAssetInventoryServer) GenerateReadableSignedUrl(context.Context, *GenerateReadableSignedUrlRequest) (*SignedUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReadableSignedUrl not implemented")
}
func (UnimplementedAssetInventoryServer) CreateAsset(context.Context, *CreateAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (UnimplementedAssetInventoryServer) GetAsset(context.Context, *GetAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetInventoryServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedAssetInventoryServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedAssetInventoryServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedAssetInventoryServer) CreateZippedAsset(context.Context, *CreateZippedAssetRequest) (*CreateZippedAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZippedAsset not implemented")
}
func (UnimplementedAssetInventoryServer) ImportBlueprintPropertiess(context.Context, *ImportBlueprintPropertiessRequest) (*ImportBlueprintPropertiessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBlueprintPropertiess not implemented")
}
func (UnimplementedAssetInventoryServer) ExportBlueprintPropertiess(context.Context, *ExportBlueprintPropertiessRequest) (*ExportBlueprintPropertiessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBlueprintPropertiess not implemented")
}
func (UnimplementedAssetInventoryServer) ListBlueprintPropertiesFormats(context.Context, *ListBlueprintPropertiesFormatsRequest) (*ListBlueprintPropertiesFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlueprintPropertiesFormats not implemented")
}
func (UnimplementedAssetInventoryServer) mustEmbedUnimplementedAssetInventoryServer() {}

// UnsafeAssetInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetInventoryServer will
// result in compilation errors.
type UnsafeAssetInventoryServer interface {
	mustEmbedUnimplementedAssetInventoryServer()
}

func RegisterAssetInventoryServer(s grpc.ServiceRegistrar, srv AssetInventoryServer) {
	s.RegisterService(&AssetInventory_ServiceDesc, srv)
}

func _AssetInventory_GenerateWritableSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWritableSignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).GenerateWritableSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/GenerateWritableSignedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).GenerateWritableSignedUrl(ctx, req.(*GenerateWritableSignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_GenerateReadableSignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReadableSignedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).GenerateReadableSignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/GenerateReadableSignedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).GenerateReadableSignedUrl(ctx, req.(*GenerateReadableSignedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/CreateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).CreateAsset(ctx, req.(*CreateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/ListAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/DeleteAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_CreateZippedAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZippedAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).CreateZippedAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/CreateZippedAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).CreateZippedAsset(ctx, req.(*CreateZippedAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_ImportBlueprintPropertiess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBlueprintPropertiessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).ImportBlueprintPropertiess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/ImportBlueprintPropertiess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).ImportBlueprintPropertiess(ctx, req.(*ImportBlueprintPropertiessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_ExportBlueprintPropertiess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBlueprintPropertiessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).ExportBlueprintPropertiess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/ExportBlueprintPropertiess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).ExportBlueprintPropertiess(ctx, req.(*ExportBlueprintPropertiessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetInventory_ListBlueprintPropertiesFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlueprintPropertiesFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetInventoryServer).ListBlueprintPropertiesFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.assetinventory.AssetInventory/ListBlueprintPropertiesFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetInventoryServer).ListBlueprintPropertiesFormats(ctx, req.(*ListBlueprintPropertiesFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetInventory_ServiceDesc is the grpc.ServiceDesc for AssetInventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetInventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.assetinventory.AssetInventory",
	HandlerType: (*AssetInventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateWritableSignedUrl",
			Handler:    _AssetInventory_GenerateWritableSignedUrl_Handler,
		},
		{
			MethodName: "GenerateReadableSignedUrl",
			Handler:    _AssetInventory_GenerateReadableSignedUrl_Handler,
		},
		{
			MethodName: "CreateAsset",
			Handler:    _AssetInventory_CreateAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AssetInventory_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _AssetInventory_ListAssets_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _AssetInventory_UpdateAsset_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _AssetInventory_DeleteAsset_Handler,
		},
		{
			MethodName: "CreateZippedAsset",
			Handler:    _AssetInventory_CreateZippedAsset_Handler,
		},
		{
			MethodName: "ImportBlueprintPropertiess",
			Handler:    _AssetInventory_ImportBlueprintPropertiess_Handler,
		},
		{
			MethodName: "ExportBlueprintPropertiess",
			Handler:    _AssetInventory_ExportBlueprintPropertiess_Handler,
		},
		{
			MethodName: "ListBlueprintPropertiesFormats",
			Handler:    _AssetInventory_ListBlueprintPropertiesFormats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "assetinventory.proto",
}
