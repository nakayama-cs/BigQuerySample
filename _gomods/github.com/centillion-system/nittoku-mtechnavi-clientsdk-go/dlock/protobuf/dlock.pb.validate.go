// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dlock.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Lock with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Lock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lock with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LockMultiError, or nil if none found.
func (m *Lock) ValidateAll() error {
	return m.validate(true)
}

func (m *Lock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for LockId

	// no validation rules for LockedBy

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return LockMultiError(errors)
	}

	return nil
}

// LockMultiError is an error wrapping multiple validation errors returned by
// Lock.ValidateAll() if the designated constraints aren't met.
type LockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockMultiError) AllErrors() []error { return m }

// LockValidationError is the validation error returned by Lock.Validate if the
// designated constraints aren't met.
type LockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockValidationError) ErrorName() string { return "LockValidationError" }

// Error satisfies the builtin error interface
func (e LockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockValidationError{}

// Validate checks the field values on AcquireLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcquireLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcquireLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcquireLockRequestMultiError, or nil if none found.
func (m *AcquireLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcquireLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := AcquireLockRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetExpire(); val < 1 || val > 86400 {
		err := AcquireLockRequestValidationError{
			field:  "Expire",
			reason: "value must be inside range [1, 86400]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AcquireLockRequestMultiError(errors)
	}

	return nil
}

// AcquireLockRequestMultiError is an error wrapping multiple validation errors
// returned by AcquireLockRequest.ValidateAll() if the designated constraints
// aren't met.
type AcquireLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcquireLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcquireLockRequestMultiError) AllErrors() []error { return m }

// AcquireLockRequestValidationError is the validation error returned by
// AcquireLockRequest.Validate if the designated constraints aren't met.
type AcquireLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcquireLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcquireLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcquireLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcquireLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcquireLockRequestValidationError) ErrorName() string {
	return "AcquireLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcquireLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcquireLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcquireLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcquireLockRequestValidationError{}

// Validate checks the field values on GetLockStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLockStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLockStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLockStatusRequestMultiError, or nil if none found.
func (m *GetLockStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLockStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetLockStatusRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLockStatusRequestMultiError(errors)
	}

	return nil
}

// GetLockStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetLockStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLockStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLockStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLockStatusRequestMultiError) AllErrors() []error { return m }

// GetLockStatusRequestValidationError is the validation error returned by
// GetLockStatusRequest.Validate if the designated constraints aren't met.
type GetLockStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockStatusRequestValidationError) ErrorName() string {
	return "GetLockStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLockStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockStatusRequestValidationError{}

// Validate checks the field values on GetLockStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLockStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLockStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLockStatusResponseMultiError, or nil if none found.
func (m *GetLockStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLockStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return GetLockStatusResponseMultiError(errors)
	}

	return nil
}

// GetLockStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetLockStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLockStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLockStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLockStatusResponseMultiError) AllErrors() []error { return m }

// GetLockStatusResponseValidationError is the validation error returned by
// GetLockStatusResponse.Validate if the designated constraints aren't met.
type GetLockStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockStatusResponseValidationError) ErrorName() string {
	return "GetLockStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLockStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockStatusResponseValidationError{}

// Validate checks the field values on ExtendLockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExtendLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtendLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtendLockRequestMultiError, or nil if none found.
func (m *ExtendLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtendLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := ExtendLockRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLockId()) < 1 {
		err := ExtendLockRequestValidationError{
			field:  "LockId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Expire

	if len(errors) > 0 {
		return ExtendLockRequestMultiError(errors)
	}

	return nil
}

// ExtendLockRequestMultiError is an error wrapping multiple validation errors
// returned by ExtendLockRequest.ValidateAll() if the designated constraints
// aren't met.
type ExtendLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtendLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtendLockRequestMultiError) AllErrors() []error { return m }

// ExtendLockRequestValidationError is the validation error returned by
// ExtendLockRequest.Validate if the designated constraints aren't met.
type ExtendLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendLockRequestValidationError) ErrorName() string {
	return "ExtendLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExtendLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtendLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendLockRequestValidationError{}

// Validate checks the field values on ExtendLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExtendLockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtendLockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExtendLockResponseMultiError, or nil if none found.
func (m *ExtendLockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtendLockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLock() == nil {
		err := ExtendLockResponseValidationError{
			field:  "Lock",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtendLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtendLockResponseValidationError{
					field:  "Lock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtendLockResponseValidationError{
				field:  "Lock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtendLockResponseMultiError(errors)
	}

	return nil
}

// ExtendLockResponseMultiError is an error wrapping multiple validation errors
// returned by ExtendLockResponse.ValidateAll() if the designated constraints
// aren't met.
type ExtendLockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtendLockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtendLockResponseMultiError) AllErrors() []error { return m }

// ExtendLockResponseValidationError is the validation error returned by
// ExtendLockResponse.Validate if the designated constraints aren't met.
type ExtendLockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtendLockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtendLockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtendLockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtendLockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtendLockResponseValidationError) ErrorName() string {
	return "ExtendLockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExtendLockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtendLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtendLockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtendLockResponseValidationError{}

// Validate checks the field values on ReleaseLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReleaseLockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReleaseLockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReleaseLockRequestMultiError, or nil if none found.
func (m *ReleaseLockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReleaseLockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := ReleaseLockRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLockId()) < 1 {
		err := ReleaseLockRequestValidationError{
			field:  "LockId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReleaseLockRequestMultiError(errors)
	}

	return nil
}

// ReleaseLockRequestMultiError is an error wrapping multiple validation errors
// returned by ReleaseLockRequest.ValidateAll() if the designated constraints
// aren't met.
type ReleaseLockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseLockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseLockRequestMultiError) AllErrors() []error { return m }

// ReleaseLockRequestValidationError is the validation error returned by
// ReleaseLockRequest.Validate if the designated constraints aren't met.
type ReleaseLockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseLockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseLockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseLockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseLockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseLockRequestValidationError) ErrorName() string {
	return "ReleaseLockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReleaseLockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseLockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseLockRequestValidationError{}
