// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LockerClient is the client API for Locker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockerClient interface {
	// ロックを新規作成
	AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*Lock, error)
	// ロックを試す
	GetLockStatus(ctx context.Context, in *GetLockStatusRequest, opts ...grpc.CallOption) (*GetLockStatusResponse, error)
	// ロックを延長
	ExtendLock(ctx context.Context, in *ExtendLockRequest, opts ...grpc.CallOption) (*Lock, error)
	// ロックを開放
	// 所有している人は削除可能
	// エラー　→ internal error
	// 所有してない人はerror (Invalid Argument)
	ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type lockerClient struct {
	cc grpc.ClientConnInterface
}

func NewLockerClient(cc grpc.ClientConnInterface) LockerClient {
	return &lockerClient{cc}
}

func (c *lockerClient) AcquireLock(ctx context.Context, in *AcquireLockRequest, opts ...grpc.CallOption) (*Lock, error) {
	out := new(Lock)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.dlock.Locker/AcquireLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) GetLockStatus(ctx context.Context, in *GetLockStatusRequest, opts ...grpc.CallOption) (*GetLockStatusResponse, error) {
	out := new(GetLockStatusResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.dlock.Locker/GetLockStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) ExtendLock(ctx context.Context, in *ExtendLockRequest, opts ...grpc.CallOption) (*Lock, error) {
	out := new(Lock)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.dlock.Locker/ExtendLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockerClient) ReleaseLock(ctx context.Context, in *ReleaseLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.dlock.Locker/ReleaseLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LockerServer is the server API for Locker service.
// All implementations must embed UnimplementedLockerServer
// for forward compatibility
type LockerServer interface {
	// ロックを新規作成
	AcquireLock(context.Context, *AcquireLockRequest) (*Lock, error)
	// ロックを試す
	GetLockStatus(context.Context, *GetLockStatusRequest) (*GetLockStatusResponse, error)
	// ロックを延長
	ExtendLock(context.Context, *ExtendLockRequest) (*Lock, error)
	// ロックを開放
	// 所有している人は削除可能
	// エラー　→ internal error
	// 所有してない人はerror (Invalid Argument)
	ReleaseLock(context.Context, *ReleaseLockRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLockerServer()
}

// UnimplementedLockerServer must be embedded to have forward compatible implementations.
type UnimplementedLockerServer struct {
}

func (UnimplementedLockerServer) AcquireLock(context.Context, *AcquireLockRequest) (*Lock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLock not implemented")
}
func (UnimplementedLockerServer) GetLockStatus(context.Context, *GetLockStatusRequest) (*GetLockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockStatus not implemented")
}
func (UnimplementedLockerServer) ExtendLock(context.Context, *ExtendLockRequest) (*Lock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendLock not implemented")
}
func (UnimplementedLockerServer) ReleaseLock(context.Context, *ReleaseLockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLock not implemented")
}
func (UnimplementedLockerServer) mustEmbedUnimplementedLockerServer() {}

// UnsafeLockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockerServer will
// result in compilation errors.
type UnsafeLockerServer interface {
	mustEmbedUnimplementedLockerServer()
}

func RegisterLockerServer(s grpc.ServiceRegistrar, srv LockerServer) {
	s.RegisterService(&Locker_ServiceDesc, srv)
}

func _Locker_AcquireLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).AcquireLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.dlock.Locker/AcquireLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).AcquireLock(ctx, req.(*AcquireLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_GetLockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).GetLockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.dlock.Locker/GetLockStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).GetLockStatus(ctx, req.(*GetLockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_ExtendLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).ExtendLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.dlock.Locker/ExtendLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).ExtendLock(ctx, req.(*ExtendLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locker_ReleaseLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockerServer).ReleaseLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.dlock.Locker/ReleaseLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockerServer).ReleaseLock(ctx, req.(*ReleaseLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Locker_ServiceDesc is the grpc.ServiceDesc for Locker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.dlock.Locker",
	HandlerType: (*LockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireLock",
			Handler:    _Locker_AcquireLock_Handler,
		},
		{
			MethodName: "GetLockStatus",
			Handler:    _Locker_GetLockStatus_Handler,
		},
		{
			MethodName: "ExtendLock",
			Handler:    _Locker_ExtendLock_Handler,
		},
		{
			MethodName: "ReleaseLock",
			Handler:    _Locker_ReleaseLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dlock.proto",
}
