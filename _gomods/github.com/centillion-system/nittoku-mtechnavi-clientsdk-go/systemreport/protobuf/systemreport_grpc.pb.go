// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemReportServiceClient is the client API for SystemReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemReportServiceClient interface {
	// 単発メール管理データ
	CreateOneOffMailManagement(ctx context.Context, in *CreateOneOffMailManagementRequest, opts ...grpc.CallOption) (*OneOffMailManagement, error)
	GetOneOffMailManagement(ctx context.Context, in *GetOneOffMailManagementRequest, opts ...grpc.CallOption) (*OneOffMailManagement, error)
}

type systemReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemReportServiceClient(cc grpc.ClientConnInterface) SystemReportServiceClient {
	return &systemReportServiceClient{cc}
}

func (c *systemReportServiceClient) CreateOneOffMailManagement(ctx context.Context, in *CreateOneOffMailManagementRequest, opts ...grpc.CallOption) (*OneOffMailManagement, error) {
	out := new(OneOffMailManagement)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.systemreport.SystemReportService/CreateOneOffMailManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemReportServiceClient) GetOneOffMailManagement(ctx context.Context, in *GetOneOffMailManagementRequest, opts ...grpc.CallOption) (*OneOffMailManagement, error) {
	out := new(OneOffMailManagement)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.systemreport.SystemReportService/GetOneOffMailManagement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemReportServiceServer is the server API for SystemReportService service.
// All implementations must embed UnimplementedSystemReportServiceServer
// for forward compatibility
type SystemReportServiceServer interface {
	// 単発メール管理データ
	CreateOneOffMailManagement(context.Context, *CreateOneOffMailManagementRequest) (*OneOffMailManagement, error)
	GetOneOffMailManagement(context.Context, *GetOneOffMailManagementRequest) (*OneOffMailManagement, error)
	mustEmbedUnimplementedSystemReportServiceServer()
}

// UnimplementedSystemReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemReportServiceServer struct {
}

func (UnimplementedSystemReportServiceServer) CreateOneOffMailManagement(context.Context, *CreateOneOffMailManagementRequest) (*OneOffMailManagement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneOffMailManagement not implemented")
}
func (UnimplementedSystemReportServiceServer) GetOneOffMailManagement(context.Context, *GetOneOffMailManagementRequest) (*OneOffMailManagement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneOffMailManagement not implemented")
}
func (UnimplementedSystemReportServiceServer) mustEmbedUnimplementedSystemReportServiceServer() {}

// UnsafeSystemReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemReportServiceServer will
// result in compilation errors.
type UnsafeSystemReportServiceServer interface {
	mustEmbedUnimplementedSystemReportServiceServer()
}

func RegisterSystemReportServiceServer(s grpc.ServiceRegistrar, srv SystemReportServiceServer) {
	s.RegisterService(&SystemReportService_ServiceDesc, srv)
}

func _SystemReportService_CreateOneOffMailManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneOffMailManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemReportServiceServer).CreateOneOffMailManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.systemreport.SystemReportService/CreateOneOffMailManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemReportServiceServer).CreateOneOffMailManagement(ctx, req.(*CreateOneOffMailManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemReportService_GetOneOffMailManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneOffMailManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemReportServiceServer).GetOneOffMailManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.systemreport.SystemReportService/GetOneOffMailManagement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemReportServiceServer).GetOneOffMailManagement(ctx, req.(*GetOneOffMailManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemReportService_ServiceDesc is the grpc.ServiceDesc for SystemReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.systemreport.SystemReportService",
	HandlerType: (*SystemReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneOffMailManagement",
			Handler:    _SystemReportService_CreateOneOffMailManagement_Handler,
		},
		{
			MethodName: "GetOneOffMailManagement",
			Handler:    _SystemReportService_GetOneOffMailManagement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemreport.proto",
}
