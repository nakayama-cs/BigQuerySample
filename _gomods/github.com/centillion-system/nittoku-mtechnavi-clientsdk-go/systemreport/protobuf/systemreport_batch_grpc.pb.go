// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SystemReportBatchServiceClient is the client API for SystemReportBatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemReportBatchServiceClient interface {
	// 定期実行 日次振分処理
	ScheduleTaskDaily(ctx context.Context, in *ScheduleTaskDailyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 非同期 日次メール作成振分処理
	TaskCreateDailyMail(ctx context.Context, in *TaskCreateDailyMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 非同期 日次メール作成処理（共通）
	TaskCreateDailyCommonMail(ctx context.Context, in *TaskCreateDailyCommonMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 非同期 日次メール送信処理
	TaskSendDailyMail(ctx context.Context, in *TaskSendDailyMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type systemReportBatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemReportBatchServiceClient(cc grpc.ClientConnInterface) SystemReportBatchServiceClient {
	return &systemReportBatchServiceClient{cc}
}

func (c *systemReportBatchServiceClient) ScheduleTaskDaily(ctx context.Context, in *ScheduleTaskDailyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.systemreport.SystemReportBatchService/ScheduleTaskDaily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemReportBatchServiceClient) TaskCreateDailyMail(ctx context.Context, in *TaskCreateDailyMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.systemreport.SystemReportBatchService/TaskCreateDailyMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemReportBatchServiceClient) TaskCreateDailyCommonMail(ctx context.Context, in *TaskCreateDailyCommonMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.systemreport.SystemReportBatchService/TaskCreateDailyCommonMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemReportBatchServiceClient) TaskSendDailyMail(ctx context.Context, in *TaskSendDailyMailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.systemreport.SystemReportBatchService/TaskSendDailyMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemReportBatchServiceServer is the server API for SystemReportBatchService service.
// All implementations must embed UnimplementedSystemReportBatchServiceServer
// for forward compatibility
type SystemReportBatchServiceServer interface {
	// 定期実行 日次振分処理
	ScheduleTaskDaily(context.Context, *ScheduleTaskDailyRequest) (*emptypb.Empty, error)
	// 非同期 日次メール作成振分処理
	TaskCreateDailyMail(context.Context, *TaskCreateDailyMailRequest) (*emptypb.Empty, error)
	// 非同期 日次メール作成処理（共通）
	TaskCreateDailyCommonMail(context.Context, *TaskCreateDailyCommonMailRequest) (*emptypb.Empty, error)
	// 非同期 日次メール送信処理
	TaskSendDailyMail(context.Context, *TaskSendDailyMailRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSystemReportBatchServiceServer()
}

// UnimplementedSystemReportBatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemReportBatchServiceServer struct {
}

func (UnimplementedSystemReportBatchServiceServer) ScheduleTaskDaily(context.Context, *ScheduleTaskDailyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleTaskDaily not implemented")
}
func (UnimplementedSystemReportBatchServiceServer) TaskCreateDailyMail(context.Context, *TaskCreateDailyMailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateDailyMail not implemented")
}
func (UnimplementedSystemReportBatchServiceServer) TaskCreateDailyCommonMail(context.Context, *TaskCreateDailyCommonMailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateDailyCommonMail not implemented")
}
func (UnimplementedSystemReportBatchServiceServer) TaskSendDailyMail(context.Context, *TaskSendDailyMailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSendDailyMail not implemented")
}
func (UnimplementedSystemReportBatchServiceServer) mustEmbedUnimplementedSystemReportBatchServiceServer() {
}

// UnsafeSystemReportBatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemReportBatchServiceServer will
// result in compilation errors.
type UnsafeSystemReportBatchServiceServer interface {
	mustEmbedUnimplementedSystemReportBatchServiceServer()
}

func RegisterSystemReportBatchServiceServer(s grpc.ServiceRegistrar, srv SystemReportBatchServiceServer) {
	s.RegisterService(&SystemReportBatchService_ServiceDesc, srv)
}

func _SystemReportBatchService_ScheduleTaskDaily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleTaskDailyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemReportBatchServiceServer).ScheduleTaskDaily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.systemreport.SystemReportBatchService/ScheduleTaskDaily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemReportBatchServiceServer).ScheduleTaskDaily(ctx, req.(*ScheduleTaskDailyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemReportBatchService_TaskCreateDailyMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateDailyMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemReportBatchServiceServer).TaskCreateDailyMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.systemreport.SystemReportBatchService/TaskCreateDailyMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemReportBatchServiceServer).TaskCreateDailyMail(ctx, req.(*TaskCreateDailyMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemReportBatchService_TaskCreateDailyCommonMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateDailyCommonMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemReportBatchServiceServer).TaskCreateDailyCommonMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.systemreport.SystemReportBatchService/TaskCreateDailyCommonMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemReportBatchServiceServer).TaskCreateDailyCommonMail(ctx, req.(*TaskCreateDailyCommonMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemReportBatchService_TaskSendDailyMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSendDailyMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemReportBatchServiceServer).TaskSendDailyMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.systemreport.SystemReportBatchService/TaskSendDailyMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemReportBatchServiceServer).TaskSendDailyMail(ctx, req.(*TaskSendDailyMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemReportBatchService_ServiceDesc is the grpc.ServiceDesc for SystemReportBatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemReportBatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.systemreport.SystemReportBatchService",
	HandlerType: (*SystemReportBatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleTaskDaily",
			Handler:    _SystemReportBatchService_ScheduleTaskDaily_Handler,
		},
		{
			MethodName: "TaskCreateDailyMail",
			Handler:    _SystemReportBatchService_TaskCreateDailyMail_Handler,
		},
		{
			MethodName: "TaskCreateDailyCommonMail",
			Handler:    _SystemReportBatchService_TaskCreateDailyCommonMail_Handler,
		},
		{
			MethodName: "TaskSendDailyMail",
			Handler:    _SystemReportBatchService_TaskSendDailyMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systemreport_batch.proto",
}
