// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: systemreport_batch.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定期実行 日次振分処理
type ScheduleTaskDailyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScheduleTaskDailyRequest) Reset() {
	*x = ScheduleTaskDailyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemreport_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTaskDailyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskDailyRequest) ProtoMessage() {}

func (x *ScheduleTaskDailyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemreport_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskDailyRequest.ProtoReflect.Descriptor instead.
func (*ScheduleTaskDailyRequest) Descriptor() ([]byte, []int) {
	return file_systemreport_batch_proto_rawDescGZIP(), []int{0}
}

// 非同期 日次メール作成振分処理
// required tenant_id
// required operated_at
// required daily_mail_categorys
type TaskCreateDailyMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,2,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
	// 分類リスト
	DailyMailCategorys []string `protobuf:"bytes,3,rep,name=daily_mail_categorys,json=dailyMailCategorys,proto3" json:"daily_mail_categorys,omitempty"`
}

func (x *TaskCreateDailyMailRequest) Reset() {
	*x = TaskCreateDailyMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemreport_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailRequest) ProtoMessage() {}

func (x *TaskCreateDailyMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemreport_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailRequest) Descriptor() ([]byte, []int) {
	return file_systemreport_batch_proto_rawDescGZIP(), []int{1}
}

func (x *TaskCreateDailyMailRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateDailyMailRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

func (x *TaskCreateDailyMailRequest) GetDailyMailCategorys() []string {
	if x != nil {
		return x.DailyMailCategorys
	}
	return nil
}

// 非同期 日次メール作成処理（共通）
// required tenant_id
// required user_id
// required operated_at
// required daily_mail_category
type TaskCreateDailyCommonMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// アカウントID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,3,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
	// 分類
	DailyMailCategory string `protobuf:"bytes,4,opt,name=daily_mail_category,json=dailyMailCategory,proto3" json:"daily_mail_category,omitempty"`
	// 分類リスト
	DailyMailCategorys []string `protobuf:"bytes,5,rep,name=daily_mail_categorys,json=dailyMailCategorys,proto3" json:"daily_mail_categorys,omitempty"`
}

func (x *TaskCreateDailyCommonMailRequest) Reset() {
	*x = TaskCreateDailyCommonMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemreport_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyCommonMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyCommonMailRequest) ProtoMessage() {}

func (x *TaskCreateDailyCommonMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemreport_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyCommonMailRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyCommonMailRequest) Descriptor() ([]byte, []int) {
	return file_systemreport_batch_proto_rawDescGZIP(), []int{2}
}

func (x *TaskCreateDailyCommonMailRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateDailyCommonMailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskCreateDailyCommonMailRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

func (x *TaskCreateDailyCommonMailRequest) GetDailyMailCategory() string {
	if x != nil {
		return x.DailyMailCategory
	}
	return ""
}

func (x *TaskCreateDailyCommonMailRequest) GetDailyMailCategorys() []string {
	if x != nil {
		return x.DailyMailCategorys
	}
	return nil
}

// 非同期 日次メール送信処理
// required tenant_id
// required user_id
// required daily_mail_categorys
type TaskSendDailyMailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// アカウントID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,3,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
	// 分類リスト
	DailyMailCategorys []string `protobuf:"bytes,4,rep,name=daily_mail_categorys,json=dailyMailCategorys,proto3" json:"daily_mail_categorys,omitempty"`
}

func (x *TaskSendDailyMailRequest) Reset() {
	*x = TaskSendDailyMailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_systemreport_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSendDailyMailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSendDailyMailRequest) ProtoMessage() {}

func (x *TaskSendDailyMailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_systemreport_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSendDailyMailRequest.ProtoReflect.Descriptor instead.
func (*TaskSendDailyMailRequest) Descriptor() ([]byte, []int) {
	return file_systemreport_batch_proto_rawDescGZIP(), []int{3}
}

func (x *TaskSendDailyMailRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskSendDailyMailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskSendDailyMailRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

func (x *TaskSendDailyMailRequest) GetDailyMailCategorys() []string {
	if x != nil {
		return x.DailyMailCategorys
	}
	return nil
}

var File_systemreport_batch_proto protoreflect.FileDescriptor

var file_systemreport_batch_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x8c, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x22, 0xdb,
	0x01, 0x0a, 0x20, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61,
	0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4d,
	0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x22, 0xa3, 0x01, 0x0a,
	0x18, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x73, 0x32, 0xba, 0x03, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x61, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x65, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x71, 0x0a, 0x19, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x11,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x21, 0x5a, 0x1f, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_systemreport_batch_proto_rawDescOnce sync.Once
	file_systemreport_batch_proto_rawDescData = file_systemreport_batch_proto_rawDesc
)

func file_systemreport_batch_proto_rawDescGZIP() []byte {
	file_systemreport_batch_proto_rawDescOnce.Do(func() {
		file_systemreport_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_systemreport_batch_proto_rawDescData)
	})
	return file_systemreport_batch_proto_rawDescData
}

var file_systemreport_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_systemreport_batch_proto_goTypes = []interface{}{
	(*ScheduleTaskDailyRequest)(nil),         // 0: mtechnavi.api.systemreport.ScheduleTaskDailyRequest
	(*TaskCreateDailyMailRequest)(nil),       // 1: mtechnavi.api.systemreport.TaskCreateDailyMailRequest
	(*TaskCreateDailyCommonMailRequest)(nil), // 2: mtechnavi.api.systemreport.TaskCreateDailyCommonMailRequest
	(*TaskSendDailyMailRequest)(nil),         // 3: mtechnavi.api.systemreport.TaskSendDailyMailRequest
	(*emptypb.Empty)(nil),                    // 4: google.protobuf.Empty
}
var file_systemreport_batch_proto_depIdxs = []int32{
	0, // 0: mtechnavi.api.systemreport.SystemReportBatchService.ScheduleTaskDaily:input_type -> mtechnavi.api.systemreport.ScheduleTaskDailyRequest
	1, // 1: mtechnavi.api.systemreport.SystemReportBatchService.TaskCreateDailyMail:input_type -> mtechnavi.api.systemreport.TaskCreateDailyMailRequest
	2, // 2: mtechnavi.api.systemreport.SystemReportBatchService.TaskCreateDailyCommonMail:input_type -> mtechnavi.api.systemreport.TaskCreateDailyCommonMailRequest
	3, // 3: mtechnavi.api.systemreport.SystemReportBatchService.TaskSendDailyMail:input_type -> mtechnavi.api.systemreport.TaskSendDailyMailRequest
	4, // 4: mtechnavi.api.systemreport.SystemReportBatchService.ScheduleTaskDaily:output_type -> google.protobuf.Empty
	4, // 5: mtechnavi.api.systemreport.SystemReportBatchService.TaskCreateDailyMail:output_type -> google.protobuf.Empty
	4, // 6: mtechnavi.api.systemreport.SystemReportBatchService.TaskCreateDailyCommonMail:output_type -> google.protobuf.Empty
	4, // 7: mtechnavi.api.systemreport.SystemReportBatchService.TaskSendDailyMail:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_systemreport_batch_proto_init() }
func file_systemreport_batch_proto_init() {
	if File_systemreport_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_systemreport_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTaskDailyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemreport_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemreport_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyCommonMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_systemreport_batch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSendDailyMailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_systemreport_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_systemreport_batch_proto_goTypes,
		DependencyIndexes: file_systemreport_batch_proto_depIdxs,
		MessageInfos:      file_systemreport_batch_proto_msgTypes,
	}.Build()
	File_systemreport_batch_proto = out.File
	file_systemreport_batch_proto_rawDesc = nil
	file_systemreport_batch_proto_goTypes = nil
	file_systemreport_batch_proto_depIdxs = nil
}
