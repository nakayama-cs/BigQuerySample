// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantProvisionServiceClient is the client API for TenantProvisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantProvisionServiceClient interface {
	// テナント申請取得
	GetTenantRequest(ctx context.Context, in *GetTenantRequestRequest, opts ...grpc.CallOption) (*GetTenantRequestResponse, error)
	// テナント申請確認
	VerifyTenantRequest(ctx context.Context, in *VerifyTenantRequestRequest, opts ...grpc.CallOption) (*VerifyTenantRequestResponse, error)
	// テナント申請確定
	ApplyTenantRequest(ctx context.Context, in *ApplyTenantRequestRequest, opts ...grpc.CallOption) (*ApplyTenantRequestResponse, error)
}

type tenantProvisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantProvisionServiceClient(cc grpc.ClientConnInterface) TenantProvisionServiceClient {
	return &tenantProvisionServiceClient{cc}
}

func (c *tenantProvisionServiceClient) GetTenantRequest(ctx context.Context, in *GetTenantRequestRequest, opts ...grpc.CallOption) (*GetTenantRequestResponse, error) {
	out := new(GetTenantRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantprovision.TenantProvisionService/GetTenantRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisionServiceClient) VerifyTenantRequest(ctx context.Context, in *VerifyTenantRequestRequest, opts ...grpc.CallOption) (*VerifyTenantRequestResponse, error) {
	out := new(VerifyTenantRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantprovision.TenantProvisionService/VerifyTenantRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisionServiceClient) ApplyTenantRequest(ctx context.Context, in *ApplyTenantRequestRequest, opts ...grpc.CallOption) (*ApplyTenantRequestResponse, error) {
	out := new(ApplyTenantRequestResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantprovision.TenantProvisionService/ApplyTenantRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantProvisionServiceServer is the server API for TenantProvisionService service.
// All implementations must embed UnimplementedTenantProvisionServiceServer
// for forward compatibility
type TenantProvisionServiceServer interface {
	// テナント申請取得
	GetTenantRequest(context.Context, *GetTenantRequestRequest) (*GetTenantRequestResponse, error)
	// テナント申請確認
	VerifyTenantRequest(context.Context, *VerifyTenantRequestRequest) (*VerifyTenantRequestResponse, error)
	// テナント申請確定
	ApplyTenantRequest(context.Context, *ApplyTenantRequestRequest) (*ApplyTenantRequestResponse, error)
	mustEmbedUnimplementedTenantProvisionServiceServer()
}

// UnimplementedTenantProvisionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantProvisionServiceServer struct {
}

func (UnimplementedTenantProvisionServiceServer) GetTenantRequest(context.Context, *GetTenantRequestRequest) (*GetTenantRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantRequest not implemented")
}
func (UnimplementedTenantProvisionServiceServer) VerifyTenantRequest(context.Context, *VerifyTenantRequestRequest) (*VerifyTenantRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTenantRequest not implemented")
}
func (UnimplementedTenantProvisionServiceServer) ApplyTenantRequest(context.Context, *ApplyTenantRequestRequest) (*ApplyTenantRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyTenantRequest not implemented")
}
func (UnimplementedTenantProvisionServiceServer) mustEmbedUnimplementedTenantProvisionServiceServer() {
}

// UnsafeTenantProvisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantProvisionServiceServer will
// result in compilation errors.
type UnsafeTenantProvisionServiceServer interface {
	mustEmbedUnimplementedTenantProvisionServiceServer()
}

func RegisterTenantProvisionServiceServer(s grpc.ServiceRegistrar, srv TenantProvisionServiceServer) {
	s.RegisterService(&TenantProvisionService_ServiceDesc, srv)
}

func _TenantProvisionService_GetTenantRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisionServiceServer).GetTenantRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantprovision.TenantProvisionService/GetTenantRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisionServiceServer).GetTenantRequest(ctx, req.(*GetTenantRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisionService_VerifyTenantRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTenantRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisionServiceServer).VerifyTenantRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantprovision.TenantProvisionService/VerifyTenantRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisionServiceServer).VerifyTenantRequest(ctx, req.(*VerifyTenantRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisionService_ApplyTenantRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyTenantRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisionServiceServer).ApplyTenantRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantprovision.TenantProvisionService/ApplyTenantRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisionServiceServer).ApplyTenantRequest(ctx, req.(*ApplyTenantRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantProvisionService_ServiceDesc is the grpc.ServiceDesc for TenantProvisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantProvisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.tenantprovision.TenantProvisionService",
	HandlerType: (*TenantProvisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenantRequest",
			Handler:    _TenantProvisionService_GetTenantRequest_Handler,
		},
		{
			MethodName: "VerifyTenantRequest",
			Handler:    _TenantProvisionService_VerifyTenantRequest_Handler,
		},
		{
			MethodName: "ApplyTenantRequest",
			Handler:    _TenantProvisionService_ApplyTenantRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenantprovision.proto",
}
