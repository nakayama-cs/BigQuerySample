// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantprovisionBatchServiceClient is the client API for TenantprovisionBatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantprovisionBatchServiceClient interface {
	// テナント申請データ作成
	TaskCreateTenentRequest(ctx context.Context, in *TaskCreateTenentRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tenantprovisionBatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantprovisionBatchServiceClient(cc grpc.ClientConnInterface) TenantprovisionBatchServiceClient {
	return &tenantprovisionBatchServiceClient{cc}
}

func (c *tenantprovisionBatchServiceClient) TaskCreateTenentRequest(ctx context.Context, in *TaskCreateTenentRequestRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantprovision.tenantprovisionBatchService/TaskCreateTenentRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantprovisionBatchServiceServer is the server API for TenantprovisionBatchService service.
// All implementations must embed UnimplementedTenantprovisionBatchServiceServer
// for forward compatibility
type TenantprovisionBatchServiceServer interface {
	// テナント申請データ作成
	TaskCreateTenentRequest(context.Context, *TaskCreateTenentRequestRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTenantprovisionBatchServiceServer()
}

// UnimplementedTenantprovisionBatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantprovisionBatchServiceServer struct {
}

func (UnimplementedTenantprovisionBatchServiceServer) TaskCreateTenentRequest(context.Context, *TaskCreateTenentRequestRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateTenentRequest not implemented")
}
func (UnimplementedTenantprovisionBatchServiceServer) mustEmbedUnimplementedTenantprovisionBatchServiceServer() {
}

// UnsafeTenantprovisionBatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantprovisionBatchServiceServer will
// result in compilation errors.
type UnsafeTenantprovisionBatchServiceServer interface {
	mustEmbedUnimplementedTenantprovisionBatchServiceServer()
}

func RegisterTenantprovisionBatchServiceServer(s grpc.ServiceRegistrar, srv TenantprovisionBatchServiceServer) {
	s.RegisterService(&TenantprovisionBatchService_ServiceDesc, srv)
}

func _TenantprovisionBatchService_TaskCreateTenentRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateTenentRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantprovisionBatchServiceServer).TaskCreateTenentRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantprovision.tenantprovisionBatchService/TaskCreateTenentRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantprovisionBatchServiceServer).TaskCreateTenentRequest(ctx, req.(*TaskCreateTenentRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantprovisionBatchService_ServiceDesc is the grpc.ServiceDesc for TenantprovisionBatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantprovisionBatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.tenantprovision.tenantprovisionBatchService",
	HandlerType: (*TenantprovisionBatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskCreateTenentRequest",
			Handler:    _TenantprovisionBatchService_TaskCreateTenentRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenantprovision_batch.proto",
}
