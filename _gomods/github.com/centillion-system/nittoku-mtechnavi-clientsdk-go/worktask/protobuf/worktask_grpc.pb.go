// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkTaskServiceClient is the client API for WorkTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkTaskServiceClient interface {
	// 履歴
	ListHistorys(ctx context.Context, in *ListHistorysRequest, opts ...grpc.CallOption) (*ListHistorysResponse, error)
	// 指図案件カタログ
	CreateWorkTaskCatalog(ctx context.Context, in *CreateWorkTaskCatalogRequest, opts ...grpc.CallOption) (*WorkTaskCatalog, error)
	ListWorkTaskCatalogs(ctx context.Context, in *ListWorkTaskCatalogsRequest, opts ...grpc.CallOption) (*ListWorkTaskCatalogResponse, error)
	GetWorkTaskCatalog(ctx context.Context, in *GetWorkTaskCatalogRequest, opts ...grpc.CallOption) (*WorkTaskCatalog, error)
	UpdateWorkTaskCatalog(ctx context.Context, in *UpdateWorkTaskCatalogRequest, opts ...grpc.CallOption) (*WorkTaskCatalog, error)
	DeleteWorkTaskCatalog(ctx context.Context, in *DeleteWorkTaskCatalogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 指図案件
	CreateWorkTask(ctx context.Context, in *CreateWorkTaskRequest, opts ...grpc.CallOption) (*WorkTask, error)
	ListWorkTasks(ctx context.Context, in *ListWorkTasksRequest, opts ...grpc.CallOption) (*ListWorkTasksResponse, error)
	GetWorkTask(ctx context.Context, in *GetWorkTaskRequest, opts ...grpc.CallOption) (*WorkTask, error)
	UpdateWorkTask(ctx context.Context, in *UpdateWorkTaskRequest, opts ...grpc.CallOption) (*WorkTask, error)
	DeleteWorkTask(ctx context.Context, in *DeleteWorkTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExportWorkTasks(ctx context.Context, in *ExportWorkTasksRequest, opts ...grpc.CallOption) (*ExportWorkTasksResponse, error)
	// 指図案件 ステータス変更
	ApprovalRequestWorkTask(ctx context.Context, in *ApprovalRequestWorkTaskRequest, opts ...grpc.CallOption) (*ApprovalRequestWorkTaskResponse, error)
	ApproveWorkTask(ctx context.Context, in *ApproveWorkTaskRequest, opts ...grpc.CallOption) (*ApproveWorkTaskResponse, error)
	RejectWorkTask(ctx context.Context, in *RejectWorkTaskRequest, opts ...grpc.CallOption) (*RejectWorkTaskResponse, error)
	ActivateWorkTask(ctx context.Context, in *ActivateWorkTaskRequest, opts ...grpc.CallOption) (*ActivateWorkTaskResponse, error)
	DiscardWorkTask(ctx context.Context, in *DiscardWorkTaskRequest, opts ...grpc.CallOption) (*DiscardWorkTaskResponse, error)
	CompleteWorkTask(ctx context.Context, in *CompleteWorkTaskRequest, opts ...grpc.CallOption) (*CompleteWorkTaskResponse, error)
	UncompleteWorkTask(ctx context.Context, in *UncompleteWorkTaskRequest, opts ...grpc.CallOption) (*UncompleteWorkTaskResponse, error)
	// 指図案件チケット変更
	CompleteWorkTaskTicket(ctx context.Context, in *CompleteWorkTaskTicketRequest, opts ...grpc.CallOption) (*CompleteWorkTaskTicketResponse, error)
	UncompleteWorkTaskTicket(ctx context.Context, in *UncompleteWorkTaskTicketRequest, opts ...grpc.CallOption) (*UncompleteWorkTaskTicketResponse, error)
	// 指図案件フォーマット
	ListWorkTaskFormats(ctx context.Context, in *ListWorkTaskFormatsRequest, opts ...grpc.CallOption) (*ListWorkTaskFormatsResponse, error)
	// 作業案件紐付け
	CreateWorkTaskRelation(ctx context.Context, in *CreateWorkTaskRelationRequest, opts ...grpc.CallOption) (*WorkTaskRelation, error)
	DeleteWorkTaskRelation(ctx context.Context, in *DeleteWorkTaskRelationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWorkTaskRelationContents(ctx context.Context, in *ListWorkTaskRelationContentsRequest, opts ...grpc.CallOption) (*ListWorkTaskRelationContentsResponse, error)
	GetWorkTaskRelationContent(ctx context.Context, in *GetWorkTaskRelationContentRequest, opts ...grpc.CallOption) (*WorkTaskRelationContent, error)
}

type workTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkTaskServiceClient(cc grpc.ClientConnInterface) WorkTaskServiceClient {
	return &workTaskServiceClient{cc}
}

func (c *workTaskServiceClient) ListHistorys(ctx context.Context, in *ListHistorysRequest, opts ...grpc.CallOption) (*ListHistorysResponse, error) {
	out := new(ListHistorysResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ListHistorys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) CreateWorkTaskCatalog(ctx context.Context, in *CreateWorkTaskCatalogRequest, opts ...grpc.CallOption) (*WorkTaskCatalog, error) {
	out := new(WorkTaskCatalog)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/CreateWorkTaskCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ListWorkTaskCatalogs(ctx context.Context, in *ListWorkTaskCatalogsRequest, opts ...grpc.CallOption) (*ListWorkTaskCatalogResponse, error) {
	out := new(ListWorkTaskCatalogResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ListWorkTaskCatalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) GetWorkTaskCatalog(ctx context.Context, in *GetWorkTaskCatalogRequest, opts ...grpc.CallOption) (*WorkTaskCatalog, error) {
	out := new(WorkTaskCatalog)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/GetWorkTaskCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) UpdateWorkTaskCatalog(ctx context.Context, in *UpdateWorkTaskCatalogRequest, opts ...grpc.CallOption) (*WorkTaskCatalog, error) {
	out := new(WorkTaskCatalog)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/UpdateWorkTaskCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) DeleteWorkTaskCatalog(ctx context.Context, in *DeleteWorkTaskCatalogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/DeleteWorkTaskCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) CreateWorkTask(ctx context.Context, in *CreateWorkTaskRequest, opts ...grpc.CallOption) (*WorkTask, error) {
	out := new(WorkTask)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/CreateWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ListWorkTasks(ctx context.Context, in *ListWorkTasksRequest, opts ...grpc.CallOption) (*ListWorkTasksResponse, error) {
	out := new(ListWorkTasksResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ListWorkTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) GetWorkTask(ctx context.Context, in *GetWorkTaskRequest, opts ...grpc.CallOption) (*WorkTask, error) {
	out := new(WorkTask)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/GetWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) UpdateWorkTask(ctx context.Context, in *UpdateWorkTaskRequest, opts ...grpc.CallOption) (*WorkTask, error) {
	out := new(WorkTask)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/UpdateWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) DeleteWorkTask(ctx context.Context, in *DeleteWorkTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/DeleteWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ExportWorkTasks(ctx context.Context, in *ExportWorkTasksRequest, opts ...grpc.CallOption) (*ExportWorkTasksResponse, error) {
	out := new(ExportWorkTasksResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ExportWorkTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ApprovalRequestWorkTask(ctx context.Context, in *ApprovalRequestWorkTaskRequest, opts ...grpc.CallOption) (*ApprovalRequestWorkTaskResponse, error) {
	out := new(ApprovalRequestWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ApprovalRequestWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ApproveWorkTask(ctx context.Context, in *ApproveWorkTaskRequest, opts ...grpc.CallOption) (*ApproveWorkTaskResponse, error) {
	out := new(ApproveWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ApproveWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) RejectWorkTask(ctx context.Context, in *RejectWorkTaskRequest, opts ...grpc.CallOption) (*RejectWorkTaskResponse, error) {
	out := new(RejectWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/RejectWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ActivateWorkTask(ctx context.Context, in *ActivateWorkTaskRequest, opts ...grpc.CallOption) (*ActivateWorkTaskResponse, error) {
	out := new(ActivateWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ActivateWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) DiscardWorkTask(ctx context.Context, in *DiscardWorkTaskRequest, opts ...grpc.CallOption) (*DiscardWorkTaskResponse, error) {
	out := new(DiscardWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/DiscardWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) CompleteWorkTask(ctx context.Context, in *CompleteWorkTaskRequest, opts ...grpc.CallOption) (*CompleteWorkTaskResponse, error) {
	out := new(CompleteWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/CompleteWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) UncompleteWorkTask(ctx context.Context, in *UncompleteWorkTaskRequest, opts ...grpc.CallOption) (*UncompleteWorkTaskResponse, error) {
	out := new(UncompleteWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/UncompleteWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) CompleteWorkTaskTicket(ctx context.Context, in *CompleteWorkTaskTicketRequest, opts ...grpc.CallOption) (*CompleteWorkTaskTicketResponse, error) {
	out := new(CompleteWorkTaskTicketResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/CompleteWorkTaskTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) UncompleteWorkTaskTicket(ctx context.Context, in *UncompleteWorkTaskTicketRequest, opts ...grpc.CallOption) (*UncompleteWorkTaskTicketResponse, error) {
	out := new(UncompleteWorkTaskTicketResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/UncompleteWorkTaskTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ListWorkTaskFormats(ctx context.Context, in *ListWorkTaskFormatsRequest, opts ...grpc.CallOption) (*ListWorkTaskFormatsResponse, error) {
	out := new(ListWorkTaskFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ListWorkTaskFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) CreateWorkTaskRelation(ctx context.Context, in *CreateWorkTaskRelationRequest, opts ...grpc.CallOption) (*WorkTaskRelation, error) {
	out := new(WorkTaskRelation)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/CreateWorkTaskRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) DeleteWorkTaskRelation(ctx context.Context, in *DeleteWorkTaskRelationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/DeleteWorkTaskRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) ListWorkTaskRelationContents(ctx context.Context, in *ListWorkTaskRelationContentsRequest, opts ...grpc.CallOption) (*ListWorkTaskRelationContentsResponse, error) {
	out := new(ListWorkTaskRelationContentsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/ListWorkTaskRelationContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskServiceClient) GetWorkTaskRelationContent(ctx context.Context, in *GetWorkTaskRelationContentRequest, opts ...grpc.CallOption) (*WorkTaskRelationContent, error) {
	out := new(WorkTaskRelationContent)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskService/GetWorkTaskRelationContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkTaskServiceServer is the server API for WorkTaskService service.
// All implementations must embed UnimplementedWorkTaskServiceServer
// for forward compatibility
type WorkTaskServiceServer interface {
	// 履歴
	ListHistorys(context.Context, *ListHistorysRequest) (*ListHistorysResponse, error)
	// 指図案件カタログ
	CreateWorkTaskCatalog(context.Context, *CreateWorkTaskCatalogRequest) (*WorkTaskCatalog, error)
	ListWorkTaskCatalogs(context.Context, *ListWorkTaskCatalogsRequest) (*ListWorkTaskCatalogResponse, error)
	GetWorkTaskCatalog(context.Context, *GetWorkTaskCatalogRequest) (*WorkTaskCatalog, error)
	UpdateWorkTaskCatalog(context.Context, *UpdateWorkTaskCatalogRequest) (*WorkTaskCatalog, error)
	DeleteWorkTaskCatalog(context.Context, *DeleteWorkTaskCatalogRequest) (*emptypb.Empty, error)
	// 指図案件
	CreateWorkTask(context.Context, *CreateWorkTaskRequest) (*WorkTask, error)
	ListWorkTasks(context.Context, *ListWorkTasksRequest) (*ListWorkTasksResponse, error)
	GetWorkTask(context.Context, *GetWorkTaskRequest) (*WorkTask, error)
	UpdateWorkTask(context.Context, *UpdateWorkTaskRequest) (*WorkTask, error)
	DeleteWorkTask(context.Context, *DeleteWorkTaskRequest) (*emptypb.Empty, error)
	ExportWorkTasks(context.Context, *ExportWorkTasksRequest) (*ExportWorkTasksResponse, error)
	// 指図案件 ステータス変更
	ApprovalRequestWorkTask(context.Context, *ApprovalRequestWorkTaskRequest) (*ApprovalRequestWorkTaskResponse, error)
	ApproveWorkTask(context.Context, *ApproveWorkTaskRequest) (*ApproveWorkTaskResponse, error)
	RejectWorkTask(context.Context, *RejectWorkTaskRequest) (*RejectWorkTaskResponse, error)
	ActivateWorkTask(context.Context, *ActivateWorkTaskRequest) (*ActivateWorkTaskResponse, error)
	DiscardWorkTask(context.Context, *DiscardWorkTaskRequest) (*DiscardWorkTaskResponse, error)
	CompleteWorkTask(context.Context, *CompleteWorkTaskRequest) (*CompleteWorkTaskResponse, error)
	UncompleteWorkTask(context.Context, *UncompleteWorkTaskRequest) (*UncompleteWorkTaskResponse, error)
	// 指図案件チケット変更
	CompleteWorkTaskTicket(context.Context, *CompleteWorkTaskTicketRequest) (*CompleteWorkTaskTicketResponse, error)
	UncompleteWorkTaskTicket(context.Context, *UncompleteWorkTaskTicketRequest) (*UncompleteWorkTaskTicketResponse, error)
	// 指図案件フォーマット
	ListWorkTaskFormats(context.Context, *ListWorkTaskFormatsRequest) (*ListWorkTaskFormatsResponse, error)
	// 作業案件紐付け
	CreateWorkTaskRelation(context.Context, *CreateWorkTaskRelationRequest) (*WorkTaskRelation, error)
	DeleteWorkTaskRelation(context.Context, *DeleteWorkTaskRelationRequest) (*emptypb.Empty, error)
	ListWorkTaskRelationContents(context.Context, *ListWorkTaskRelationContentsRequest) (*ListWorkTaskRelationContentsResponse, error)
	GetWorkTaskRelationContent(context.Context, *GetWorkTaskRelationContentRequest) (*WorkTaskRelationContent, error)
	mustEmbedUnimplementedWorkTaskServiceServer()
}

// UnimplementedWorkTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkTaskServiceServer struct {
}

func (UnimplementedWorkTaskServiceServer) ListHistorys(context.Context, *ListHistorysRequest) (*ListHistorysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHistorys not implemented")
}
func (UnimplementedWorkTaskServiceServer) CreateWorkTaskCatalog(context.Context, *CreateWorkTaskCatalogRequest) (*WorkTaskCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkTaskCatalog not implemented")
}
func (UnimplementedWorkTaskServiceServer) ListWorkTaskCatalogs(context.Context, *ListWorkTaskCatalogsRequest) (*ListWorkTaskCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkTaskCatalogs not implemented")
}
func (UnimplementedWorkTaskServiceServer) GetWorkTaskCatalog(context.Context, *GetWorkTaskCatalogRequest) (*WorkTaskCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkTaskCatalog not implemented")
}
func (UnimplementedWorkTaskServiceServer) UpdateWorkTaskCatalog(context.Context, *UpdateWorkTaskCatalogRequest) (*WorkTaskCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkTaskCatalog not implemented")
}
func (UnimplementedWorkTaskServiceServer) DeleteWorkTaskCatalog(context.Context, *DeleteWorkTaskCatalogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkTaskCatalog not implemented")
}
func (UnimplementedWorkTaskServiceServer) CreateWorkTask(context.Context, *CreateWorkTaskRequest) (*WorkTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) ListWorkTasks(context.Context, *ListWorkTasksRequest) (*ListWorkTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkTasks not implemented")
}
func (UnimplementedWorkTaskServiceServer) GetWorkTask(context.Context, *GetWorkTaskRequest) (*WorkTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) UpdateWorkTask(context.Context, *UpdateWorkTaskRequest) (*WorkTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) DeleteWorkTask(context.Context, *DeleteWorkTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) ExportWorkTasks(context.Context, *ExportWorkTasksRequest) (*ExportWorkTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportWorkTasks not implemented")
}
func (UnimplementedWorkTaskServiceServer) ApprovalRequestWorkTask(context.Context, *ApprovalRequestWorkTaskRequest) (*ApprovalRequestWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalRequestWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) ApproveWorkTask(context.Context, *ApproveWorkTaskRequest) (*ApproveWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) RejectWorkTask(context.Context, *RejectWorkTaskRequest) (*RejectWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) ActivateWorkTask(context.Context, *ActivateWorkTaskRequest) (*ActivateWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) DiscardWorkTask(context.Context, *DiscardWorkTaskRequest) (*DiscardWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) CompleteWorkTask(context.Context, *CompleteWorkTaskRequest) (*CompleteWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) UncompleteWorkTask(context.Context, *UncompleteWorkTaskRequest) (*UncompleteWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompleteWorkTask not implemented")
}
func (UnimplementedWorkTaskServiceServer) CompleteWorkTaskTicket(context.Context, *CompleteWorkTaskTicketRequest) (*CompleteWorkTaskTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteWorkTaskTicket not implemented")
}
func (UnimplementedWorkTaskServiceServer) UncompleteWorkTaskTicket(context.Context, *UncompleteWorkTaskTicketRequest) (*UncompleteWorkTaskTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompleteWorkTaskTicket not implemented")
}
func (UnimplementedWorkTaskServiceServer) ListWorkTaskFormats(context.Context, *ListWorkTaskFormatsRequest) (*ListWorkTaskFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkTaskFormats not implemented")
}
func (UnimplementedWorkTaskServiceServer) CreateWorkTaskRelation(context.Context, *CreateWorkTaskRelationRequest) (*WorkTaskRelation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkTaskRelation not implemented")
}
func (UnimplementedWorkTaskServiceServer) DeleteWorkTaskRelation(context.Context, *DeleteWorkTaskRelationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkTaskRelation not implemented")
}
func (UnimplementedWorkTaskServiceServer) ListWorkTaskRelationContents(context.Context, *ListWorkTaskRelationContentsRequest) (*ListWorkTaskRelationContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkTaskRelationContents not implemented")
}
func (UnimplementedWorkTaskServiceServer) GetWorkTaskRelationContent(context.Context, *GetWorkTaskRelationContentRequest) (*WorkTaskRelationContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkTaskRelationContent not implemented")
}
func (UnimplementedWorkTaskServiceServer) mustEmbedUnimplementedWorkTaskServiceServer() {}

// UnsafeWorkTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkTaskServiceServer will
// result in compilation errors.
type UnsafeWorkTaskServiceServer interface {
	mustEmbedUnimplementedWorkTaskServiceServer()
}

func RegisterWorkTaskServiceServer(s grpc.ServiceRegistrar, srv WorkTaskServiceServer) {
	s.RegisterService(&WorkTaskService_ServiceDesc, srv)
}

func _WorkTaskService_ListHistorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHistorysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ListHistorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ListHistorys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ListHistorys(ctx, req.(*ListHistorysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_CreateWorkTaskCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkTaskCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).CreateWorkTaskCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/CreateWorkTaskCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).CreateWorkTaskCatalog(ctx, req.(*CreateWorkTaskCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ListWorkTaskCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkTaskCatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ListWorkTaskCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ListWorkTaskCatalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ListWorkTaskCatalogs(ctx, req.(*ListWorkTaskCatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_GetWorkTaskCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkTaskCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).GetWorkTaskCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/GetWorkTaskCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).GetWorkTaskCatalog(ctx, req.(*GetWorkTaskCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_UpdateWorkTaskCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkTaskCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).UpdateWorkTaskCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/UpdateWorkTaskCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).UpdateWorkTaskCatalog(ctx, req.(*UpdateWorkTaskCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_DeleteWorkTaskCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkTaskCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).DeleteWorkTaskCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/DeleteWorkTaskCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).DeleteWorkTaskCatalog(ctx, req.(*DeleteWorkTaskCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_CreateWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).CreateWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/CreateWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).CreateWorkTask(ctx, req.(*CreateWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ListWorkTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ListWorkTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ListWorkTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ListWorkTasks(ctx, req.(*ListWorkTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_GetWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).GetWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/GetWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).GetWorkTask(ctx, req.(*GetWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_UpdateWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).UpdateWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/UpdateWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).UpdateWorkTask(ctx, req.(*UpdateWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_DeleteWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).DeleteWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/DeleteWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).DeleteWorkTask(ctx, req.(*DeleteWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ExportWorkTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportWorkTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ExportWorkTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ExportWorkTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ExportWorkTasks(ctx, req.(*ExportWorkTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ApprovalRequestWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequestWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ApprovalRequestWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ApprovalRequestWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ApprovalRequestWorkTask(ctx, req.(*ApprovalRequestWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ApproveWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ApproveWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ApproveWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ApproveWorkTask(ctx, req.(*ApproveWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_RejectWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).RejectWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/RejectWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).RejectWorkTask(ctx, req.(*RejectWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ActivateWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ActivateWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ActivateWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ActivateWorkTask(ctx, req.(*ActivateWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_DiscardWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).DiscardWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/DiscardWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).DiscardWorkTask(ctx, req.(*DiscardWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_CompleteWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).CompleteWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/CompleteWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).CompleteWorkTask(ctx, req.(*CompleteWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_UncompleteWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompleteWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).UncompleteWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/UncompleteWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).UncompleteWorkTask(ctx, req.(*UncompleteWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_CompleteWorkTaskTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteWorkTaskTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).CompleteWorkTaskTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/CompleteWorkTaskTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).CompleteWorkTaskTicket(ctx, req.(*CompleteWorkTaskTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_UncompleteWorkTaskTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompleteWorkTaskTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).UncompleteWorkTaskTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/UncompleteWorkTaskTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).UncompleteWorkTaskTicket(ctx, req.(*UncompleteWorkTaskTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ListWorkTaskFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkTaskFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ListWorkTaskFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ListWorkTaskFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ListWorkTaskFormats(ctx, req.(*ListWorkTaskFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_CreateWorkTaskRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkTaskRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).CreateWorkTaskRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/CreateWorkTaskRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).CreateWorkTaskRelation(ctx, req.(*CreateWorkTaskRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_DeleteWorkTaskRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkTaskRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).DeleteWorkTaskRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/DeleteWorkTaskRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).DeleteWorkTaskRelation(ctx, req.(*DeleteWorkTaskRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_ListWorkTaskRelationContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkTaskRelationContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).ListWorkTaskRelationContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/ListWorkTaskRelationContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).ListWorkTaskRelationContents(ctx, req.(*ListWorkTaskRelationContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskService_GetWorkTaskRelationContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkTaskRelationContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskServiceServer).GetWorkTaskRelationContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskService/GetWorkTaskRelationContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskServiceServer).GetWorkTaskRelationContent(ctx, req.(*GetWorkTaskRelationContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkTaskService_ServiceDesc is the grpc.ServiceDesc for WorkTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.worktask.WorkTaskService",
	HandlerType: (*WorkTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHistorys",
			Handler:    _WorkTaskService_ListHistorys_Handler,
		},
		{
			MethodName: "CreateWorkTaskCatalog",
			Handler:    _WorkTaskService_CreateWorkTaskCatalog_Handler,
		},
		{
			MethodName: "ListWorkTaskCatalogs",
			Handler:    _WorkTaskService_ListWorkTaskCatalogs_Handler,
		},
		{
			MethodName: "GetWorkTaskCatalog",
			Handler:    _WorkTaskService_GetWorkTaskCatalog_Handler,
		},
		{
			MethodName: "UpdateWorkTaskCatalog",
			Handler:    _WorkTaskService_UpdateWorkTaskCatalog_Handler,
		},
		{
			MethodName: "DeleteWorkTaskCatalog",
			Handler:    _WorkTaskService_DeleteWorkTaskCatalog_Handler,
		},
		{
			MethodName: "CreateWorkTask",
			Handler:    _WorkTaskService_CreateWorkTask_Handler,
		},
		{
			MethodName: "ListWorkTasks",
			Handler:    _WorkTaskService_ListWorkTasks_Handler,
		},
		{
			MethodName: "GetWorkTask",
			Handler:    _WorkTaskService_GetWorkTask_Handler,
		},
		{
			MethodName: "UpdateWorkTask",
			Handler:    _WorkTaskService_UpdateWorkTask_Handler,
		},
		{
			MethodName: "DeleteWorkTask",
			Handler:    _WorkTaskService_DeleteWorkTask_Handler,
		},
		{
			MethodName: "ExportWorkTasks",
			Handler:    _WorkTaskService_ExportWorkTasks_Handler,
		},
		{
			MethodName: "ApprovalRequestWorkTask",
			Handler:    _WorkTaskService_ApprovalRequestWorkTask_Handler,
		},
		{
			MethodName: "ApproveWorkTask",
			Handler:    _WorkTaskService_ApproveWorkTask_Handler,
		},
		{
			MethodName: "RejectWorkTask",
			Handler:    _WorkTaskService_RejectWorkTask_Handler,
		},
		{
			MethodName: "ActivateWorkTask",
			Handler:    _WorkTaskService_ActivateWorkTask_Handler,
		},
		{
			MethodName: "DiscardWorkTask",
			Handler:    _WorkTaskService_DiscardWorkTask_Handler,
		},
		{
			MethodName: "CompleteWorkTask",
			Handler:    _WorkTaskService_CompleteWorkTask_Handler,
		},
		{
			MethodName: "UncompleteWorkTask",
			Handler:    _WorkTaskService_UncompleteWorkTask_Handler,
		},
		{
			MethodName: "CompleteWorkTaskTicket",
			Handler:    _WorkTaskService_CompleteWorkTaskTicket_Handler,
		},
		{
			MethodName: "UncompleteWorkTaskTicket",
			Handler:    _WorkTaskService_UncompleteWorkTaskTicket_Handler,
		},
		{
			MethodName: "ListWorkTaskFormats",
			Handler:    _WorkTaskService_ListWorkTaskFormats_Handler,
		},
		{
			MethodName: "CreateWorkTaskRelation",
			Handler:    _WorkTaskService_CreateWorkTaskRelation_Handler,
		},
		{
			MethodName: "DeleteWorkTaskRelation",
			Handler:    _WorkTaskService_DeleteWorkTaskRelation_Handler,
		},
		{
			MethodName: "ListWorkTaskRelationContents",
			Handler:    _WorkTaskService_ListWorkTaskRelationContents_Handler,
		},
		{
			MethodName: "GetWorkTaskRelationContent",
			Handler:    _WorkTaskService_GetWorkTaskRelationContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worktask.proto",
}

// WorkTaskTaskListServiceClient is the client API for WorkTaskTaskListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkTaskTaskListServiceClient interface {
	// 未完了作業
	UncompletedListWorkTaskTickets(ctx context.Context, in *UncompletedListWorkTaskTicketsRequest, opts ...grpc.CallOption) (*UncompletedListWorkTaskTicketsResponse, error)
	// 未完了案件
	UncompletedListWorkTasks(ctx context.Context, in *UncompletedListWorkTasksRequest, opts ...grpc.CallOption) (*UncompletedListWorkTasksResponse, error)
}

type workTaskTaskListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkTaskTaskListServiceClient(cc grpc.ClientConnInterface) WorkTaskTaskListServiceClient {
	return &workTaskTaskListServiceClient{cc}
}

func (c *workTaskTaskListServiceClient) UncompletedListWorkTaskTickets(ctx context.Context, in *UncompletedListWorkTaskTicketsRequest, opts ...grpc.CallOption) (*UncompletedListWorkTaskTicketsResponse, error) {
	out := new(UncompletedListWorkTaskTicketsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskTaskListService/UncompletedListWorkTaskTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskTaskListServiceClient) UncompletedListWorkTasks(ctx context.Context, in *UncompletedListWorkTasksRequest, opts ...grpc.CallOption) (*UncompletedListWorkTasksResponse, error) {
	out := new(UncompletedListWorkTasksResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.WorkTaskTaskListService/UncompletedListWorkTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkTaskTaskListServiceServer is the server API for WorkTaskTaskListService service.
// All implementations must embed UnimplementedWorkTaskTaskListServiceServer
// for forward compatibility
type WorkTaskTaskListServiceServer interface {
	// 未完了作業
	UncompletedListWorkTaskTickets(context.Context, *UncompletedListWorkTaskTicketsRequest) (*UncompletedListWorkTaskTicketsResponse, error)
	// 未完了案件
	UncompletedListWorkTasks(context.Context, *UncompletedListWorkTasksRequest) (*UncompletedListWorkTasksResponse, error)
	mustEmbedUnimplementedWorkTaskTaskListServiceServer()
}

// UnimplementedWorkTaskTaskListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkTaskTaskListServiceServer struct {
}

func (UnimplementedWorkTaskTaskListServiceServer) UncompletedListWorkTaskTickets(context.Context, *UncompletedListWorkTaskTicketsRequest) (*UncompletedListWorkTaskTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompletedListWorkTaskTickets not implemented")
}
func (UnimplementedWorkTaskTaskListServiceServer) UncompletedListWorkTasks(context.Context, *UncompletedListWorkTasksRequest) (*UncompletedListWorkTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncompletedListWorkTasks not implemented")
}
func (UnimplementedWorkTaskTaskListServiceServer) mustEmbedUnimplementedWorkTaskTaskListServiceServer() {
}

// UnsafeWorkTaskTaskListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkTaskTaskListServiceServer will
// result in compilation errors.
type UnsafeWorkTaskTaskListServiceServer interface {
	mustEmbedUnimplementedWorkTaskTaskListServiceServer()
}

func RegisterWorkTaskTaskListServiceServer(s grpc.ServiceRegistrar, srv WorkTaskTaskListServiceServer) {
	s.RegisterService(&WorkTaskTaskListService_ServiceDesc, srv)
}

func _WorkTaskTaskListService_UncompletedListWorkTaskTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompletedListWorkTaskTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskTaskListServiceServer).UncompletedListWorkTaskTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskTaskListService/UncompletedListWorkTaskTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskTaskListServiceServer).UncompletedListWorkTaskTickets(ctx, req.(*UncompletedListWorkTaskTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskTaskListService_UncompletedListWorkTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncompletedListWorkTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskTaskListServiceServer).UncompletedListWorkTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.WorkTaskTaskListService/UncompletedListWorkTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskTaskListServiceServer).UncompletedListWorkTasks(ctx, req.(*UncompletedListWorkTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkTaskTaskListService_ServiceDesc is the grpc.ServiceDesc for WorkTaskTaskListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkTaskTaskListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.worktask.WorkTaskTaskListService",
	HandlerType: (*WorkTaskTaskListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UncompletedListWorkTaskTickets",
			Handler:    _WorkTaskTaskListService_UncompletedListWorkTaskTickets_Handler,
		},
		{
			MethodName: "UncompletedListWorkTasks",
			Handler:    _WorkTaskTaskListService_UncompletedListWorkTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worktask.proto",
}
