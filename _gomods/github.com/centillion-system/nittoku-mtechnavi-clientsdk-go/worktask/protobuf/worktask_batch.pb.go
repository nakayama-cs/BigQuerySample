// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: worktask_batch.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	protobuf1 "mtechnavi/systemreport/protobuf"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 非同期Queue(バッチ) 履歴作成
// required tenant_id
// required history_category_name
// required content_name
// required occurred_at
// required type_name
// required record_id
type TaskCreateHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// 分類
	HistoryCategoryName string `protobuf:"bytes,2,opt,name=history_category_name,json=historyCategoryName,proto3" json:"history_category_name,omitempty"`
	// 内容
	ContentName string `protobuf:"bytes,3,opt,name=content_name,json=contentName,proto3" json:"content_name,omitempty"`
	// 内容パラメータ
	ContentParamaters []string `protobuf:"bytes,4,rep,name=content_paramaters,json=contentParamaters,proto3" json:"content_paramaters,omitempty"`
	// 発生日
	OccurredAt int64 `protobuf:"varint,5,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	// 伝票種類
	TypeName string `protobuf:"bytes,6,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// 伝票ID
	RecordId string `protobuf:"bytes,7,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	// 通知レベル
	Level int64 `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *TaskCreateHistoryRequest) Reset() {
	*x = TaskCreateHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateHistoryRequest) ProtoMessage() {}

func (x *TaskCreateHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateHistoryRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateHistoryRequest) Descriptor() ([]byte, []int) {
	return file_worktask_batch_proto_rawDescGZIP(), []int{0}
}

func (x *TaskCreateHistoryRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetHistoryCategoryName() string {
	if x != nil {
		return x.HistoryCategoryName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetContentName() string {
	if x != nil {
		return x.ContentName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetContentParamaters() []string {
	if x != nil {
		return x.ContentParamaters
	}
	return nil
}

func (x *TaskCreateHistoryRequest) GetOccurredAt() int64 {
	if x != nil {
		return x.OccurredAt
	}
	return 0
}

func (x *TaskCreateHistoryRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *TaskCreateHistoryRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

// 日次メール作成処理
// required tenant_id
// required user_id
// required operated_at
type TaskCreateDailyMailWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 自テナントID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// アカウントID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 処理日
	OperatedAt int64 `protobuf:"varint,3,opt,name=operated_at,json=operatedAt,proto3" json:"operated_at,omitempty"`
}

func (x *TaskCreateDailyMailWorkTaskRequest) Reset() {
	*x = TaskCreateDailyMailWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailWorkTaskRequest) ProtoMessage() {}

func (x *TaskCreateDailyMailWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_batch_proto_rawDescGZIP(), []int{1}
}

func (x *TaskCreateDailyMailWorkTaskRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TaskCreateDailyMailWorkTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TaskCreateDailyMailWorkTaskRequest) GetOperatedAt() int64 {
	if x != nil {
		return x.OperatedAt
	}
	return 0
}

type TaskCreateDailyMailWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 通知内容
	NotificationSettings []*protobuf.NotificationSetting `protobuf:"bytes,1,rep,name=notification_settings,json=notificationSettings,proto3" json:"notification_settings,omitempty"`
	// 単発メール管理
	OneOffMailManagements []*protobuf1.OneOffMailManagement `protobuf:"bytes,2,rep,name=one_off_mail_managements,json=oneOffMailManagements,proto3" json:"one_off_mail_managements,omitempty"`
}

func (x *TaskCreateDailyMailWorkTaskResponse) Reset() {
	*x = TaskCreateDailyMailWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreateDailyMailWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreateDailyMailWorkTaskResponse) ProtoMessage() {}

func (x *TaskCreateDailyMailWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreateDailyMailWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*TaskCreateDailyMailWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_batch_proto_rawDescGZIP(), []int{2}
}

func (x *TaskCreateDailyMailWorkTaskResponse) GetNotificationSettings() []*protobuf.NotificationSetting {
	if x != nil {
		return x.NotificationSettings
	}
	return nil
}

func (x *TaskCreateDailyMailWorkTaskResponse) GetOneOffMailManagements() []*protobuf1.OneOffMailManagement {
	if x != nil {
		return x.OneOffMailManagements
	}
	return nil
}

var File_worktask_batch_proto protoreflect.FileDescriptor

var file_worktask_batch_proto_rawDesc = []byte{
	0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x18, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7b, 0x0a, 0x22, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x23, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d, 0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x4d,
	0x61, 0x69, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x8e,
	0x02, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d,
	0x61, 0x69, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4d, 0x61, 0x69, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x1d, 0x5a, 0x1b, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worktask_batch_proto_rawDescOnce sync.Once
	file_worktask_batch_proto_rawDescData = file_worktask_batch_proto_rawDesc
)

func file_worktask_batch_proto_rawDescGZIP() []byte {
	file_worktask_batch_proto_rawDescOnce.Do(func() {
		file_worktask_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_worktask_batch_proto_rawDescData)
	})
	return file_worktask_batch_proto_rawDescData
}

var file_worktask_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_worktask_batch_proto_goTypes = []interface{}{
	(*TaskCreateHistoryRequest)(nil),            // 0: mtechnavi.api.worktask.TaskCreateHistoryRequest
	(*TaskCreateDailyMailWorkTaskRequest)(nil),  // 1: mtechnavi.api.worktask.TaskCreateDailyMailWorkTaskRequest
	(*TaskCreateDailyMailWorkTaskResponse)(nil), // 2: mtechnavi.api.worktask.TaskCreateDailyMailWorkTaskResponse
	(*protobuf.NotificationSetting)(nil),        // 3: sharelib.NotificationSetting
	(*protobuf1.OneOffMailManagement)(nil),      // 4: mtechnavi.api.systemreport.OneOffMailManagement
	(*emptypb.Empty)(nil),                       // 5: google.protobuf.Empty
}
var file_worktask_batch_proto_depIdxs = []int32{
	3, // 0: mtechnavi.api.worktask.TaskCreateDailyMailWorkTaskResponse.notification_settings:type_name -> sharelib.NotificationSetting
	4, // 1: mtechnavi.api.worktask.TaskCreateDailyMailWorkTaskResponse.one_off_mail_managements:type_name -> mtechnavi.api.systemreport.OneOffMailManagement
	0, // 2: mtechnavi.api.worktask.workTaskBatchService.TaskCreateHistory:input_type -> mtechnavi.api.worktask.TaskCreateHistoryRequest
	1, // 3: mtechnavi.api.worktask.workTaskBatchService.TaskCreateDailyMailWorkTask:input_type -> mtechnavi.api.worktask.TaskCreateDailyMailWorkTaskRequest
	5, // 4: mtechnavi.api.worktask.workTaskBatchService.TaskCreateHistory:output_type -> google.protobuf.Empty
	2, // 5: mtechnavi.api.worktask.workTaskBatchService.TaskCreateDailyMailWorkTask:output_type -> mtechnavi.api.worktask.TaskCreateDailyMailWorkTaskResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_worktask_batch_proto_init() }
func file_worktask_batch_proto_init() {
	if File_worktask_batch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worktask_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreateDailyMailWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worktask_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_worktask_batch_proto_goTypes,
		DependencyIndexes: file_worktask_batch_proto_depIdxs,
		MessageInfos:      file_worktask_batch_proto_msgTypes,
	}.Build()
	File_worktask_batch_proto = out.File
	file_worktask_batch_proto_rawDesc = nil
	file_worktask_batch_proto_goTypes = nil
	file_worktask_batch_proto_depIdxs = nil
}
