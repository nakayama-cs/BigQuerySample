// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: worktask.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListHistorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistorysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistorysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistorysRequestMultiError, or nil if none found.
func (m *ListHistorysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistorysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ListHistorysRequestMultiError(errors)
	}

	return nil
}

// ListHistorysRequestMultiError is an error wrapping multiple validation
// errors returned by ListHistorysRequest.ValidateAll() if the designated
// constraints aren't met.
type ListHistorysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistorysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistorysRequestMultiError) AllErrors() []error { return m }

// ListHistorysRequestValidationError is the validation error returned by
// ListHistorysRequest.Validate if the designated constraints aren't met.
type ListHistorysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistorysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistorysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistorysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistorysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistorysRequestValidationError) ErrorName() string {
	return "ListHistorysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistorysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistorysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistorysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistorysRequestValidationError{}

// Validate checks the field values on ListHistorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListHistorysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHistorysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHistorysResponseMultiError, or nil if none found.
func (m *ListHistorysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHistorysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHistorysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHistorysResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHistorysResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListHistorysResponseMultiError(errors)
	}

	return nil
}

// ListHistorysResponseMultiError is an error wrapping multiple validation
// errors returned by ListHistorysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListHistorysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHistorysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHistorysResponseMultiError) AllErrors() []error { return m }

// ListHistorysResponseValidationError is the validation error returned by
// ListHistorysResponse.Validate if the designated constraints aren't met.
type ListHistorysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHistorysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHistorysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHistorysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHistorysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHistorysResponseValidationError) ErrorName() string {
	return "ListHistorysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHistorysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHistorysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHistorysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHistorysResponseValidationError{}

// Validate checks the field values on CreateWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkTaskCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkTaskCatalogRequestMultiError, or nil if none found.
func (m *CreateWorkTaskCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkTaskCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTaskCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkTaskCatalogRequestValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkTaskCatalogRequestValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTaskCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkTaskCatalogRequestValidationError{
				field:  "WorkTaskCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkTaskCatalogRequestMultiError(errors)
	}

	return nil
}

// CreateWorkTaskCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWorkTaskCatalogRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateWorkTaskCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkTaskCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkTaskCatalogRequestMultiError) AllErrors() []error { return m }

// CreateWorkTaskCatalogRequestValidationError is the validation error returned
// by CreateWorkTaskCatalogRequest.Validate if the designated constraints
// aren't met.
type CreateWorkTaskCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkTaskCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkTaskCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkTaskCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkTaskCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkTaskCatalogRequestValidationError) ErrorName() string {
	return "CreateWorkTaskCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkTaskCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkTaskCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkTaskCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkTaskCatalogRequestValidationError{}

// Validate checks the field values on ListWorkTaskCatalogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTaskCatalogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTaskCatalogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkTaskCatalogsRequestMultiError, or nil if none found.
func (m *ListWorkTaskCatalogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskCatalogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkTaskCatalogsRequestMultiError(errors)
	}

	return nil
}

// ListWorkTaskCatalogsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWorkTaskCatalogsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWorkTaskCatalogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskCatalogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskCatalogsRequestMultiError) AllErrors() []error { return m }

// ListWorkTaskCatalogsRequestValidationError is the validation error returned
// by ListWorkTaskCatalogsRequest.Validate if the designated constraints
// aren't met.
type ListWorkTaskCatalogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskCatalogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskCatalogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTaskCatalogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskCatalogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskCatalogsRequestValidationError) ErrorName() string {
	return "ListWorkTaskCatalogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskCatalogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskCatalogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskCatalogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskCatalogsRequestValidationError{}

// Validate checks the field values on ListWorkTaskCatalogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTaskCatalogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTaskCatalogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkTaskCatalogResponseMultiError, or nil if none found.
func (m *ListWorkTaskCatalogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskCatalogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkTaskCatalogResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkTaskCatalogResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkTaskCatalogResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkTaskCatalogResponseMultiError(errors)
	}

	return nil
}

// ListWorkTaskCatalogResponseMultiError is an error wrapping multiple
// validation errors returned by ListWorkTaskCatalogResponse.ValidateAll() if
// the designated constraints aren't met.
type ListWorkTaskCatalogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskCatalogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskCatalogResponseMultiError) AllErrors() []error { return m }

// ListWorkTaskCatalogResponseValidationError is the validation error returned
// by ListWorkTaskCatalogResponse.Validate if the designated constraints
// aren't met.
type ListWorkTaskCatalogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskCatalogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskCatalogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTaskCatalogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskCatalogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskCatalogResponseValidationError) ErrorName() string {
	return "ListWorkTaskCatalogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskCatalogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskCatalogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskCatalogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskCatalogResponseValidationError{}

// Validate checks the field values on GetWorkTaskCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkTaskCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkTaskCatalogRequestMultiError, or nil if none found.
func (m *GetWorkTaskCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkTaskCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskCatalogId

	if len(errors) > 0 {
		return GetWorkTaskCatalogRequestMultiError(errors)
	}

	return nil
}

// GetWorkTaskCatalogRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkTaskCatalogRequest.ValidateAll() if the
// designated constraints aren't met.
type GetWorkTaskCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkTaskCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkTaskCatalogRequestMultiError) AllErrors() []error { return m }

// GetWorkTaskCatalogRequestValidationError is the validation error returned by
// GetWorkTaskCatalogRequest.Validate if the designated constraints aren't met.
type GetWorkTaskCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkTaskCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkTaskCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkTaskCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkTaskCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkTaskCatalogRequestValidationError) ErrorName() string {
	return "GetWorkTaskCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkTaskCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkTaskCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkTaskCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkTaskCatalogRequestValidationError{}

// Validate checks the field values on UpdateWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkTaskCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkTaskCatalogRequestMultiError, or nil if none found.
func (m *UpdateWorkTaskCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkTaskCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTaskCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkTaskCatalogRequestValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkTaskCatalogRequestValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTaskCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkTaskCatalogRequestValidationError{
				field:  "WorkTaskCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkTaskCatalogRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkTaskCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateWorkTaskCatalogRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateWorkTaskCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkTaskCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkTaskCatalogRequestMultiError) AllErrors() []error { return m }

// UpdateWorkTaskCatalogRequestValidationError is the validation error returned
// by UpdateWorkTaskCatalogRequest.Validate if the designated constraints
// aren't met.
type UpdateWorkTaskCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkTaskCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkTaskCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkTaskCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkTaskCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkTaskCatalogRequestValidationError) ErrorName() string {
	return "UpdateWorkTaskCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkTaskCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkTaskCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkTaskCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkTaskCatalogRequestValidationError{}

// Validate checks the field values on DeleteWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkTaskCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkTaskCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkTaskCatalogRequestMultiError, or nil if none found.
func (m *DeleteWorkTaskCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkTaskCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTaskCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWorkTaskCatalogRequestValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWorkTaskCatalogRequestValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTaskCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWorkTaskCatalogRequestValidationError{
				field:  "WorkTaskCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWorkTaskCatalogRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkTaskCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkTaskCatalogRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteWorkTaskCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkTaskCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkTaskCatalogRequestMultiError) AllErrors() []error { return m }

// DeleteWorkTaskCatalogRequestValidationError is the validation error returned
// by DeleteWorkTaskCatalogRequest.Validate if the designated constraints
// aren't met.
type DeleteWorkTaskCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkTaskCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkTaskCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkTaskCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkTaskCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkTaskCatalogRequestValidationError) ErrorName() string {
	return "DeleteWorkTaskCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkTaskCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkTaskCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkTaskCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkTaskCatalogRequestValidationError{}

// Validate checks the field values on CreateWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkTaskRequestMultiError, or nil if none found.
func (m *CreateWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkTaskRequestValidationError{
					field:  "WorkTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkTaskRequestValidationError{
					field:  "WorkTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkTaskRequestValidationError{
				field:  "WorkTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkTaskRequestMultiError(errors)
	}

	return nil
}

// CreateWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkTaskRequestMultiError) AllErrors() []error { return m }

// CreateWorkTaskRequestValidationError is the validation error returned by
// CreateWorkTaskRequest.Validate if the designated constraints aren't met.
type CreateWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkTaskRequestValidationError) ErrorName() string {
	return "CreateWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkTaskRequestValidationError{}

// Validate checks the field values on ListWorkTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkTasksRequestMultiError, or nil if none found.
func (m *ListWorkTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetDataFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWorkTasksRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWorkTasksRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWorkTasksRequestValidationError{
				field:  "DataFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWorkTasksRequestMultiError(errors)
	}

	return nil
}

// ListWorkTasksRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTasksRequestMultiError) AllErrors() []error { return m }

// ListWorkTasksRequestValidationError is the validation error returned by
// ListWorkTasksRequest.Validate if the designated constraints aren't met.
type ListWorkTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTasksRequestValidationError) ErrorName() string {
	return "ListWorkTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTasksRequestValidationError{}

// Validate checks the field values on ListWorkTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkTasksResponseMultiError, or nil if none found.
func (m *ListWorkTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkTasksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkTasksResponseMultiError(errors)
	}

	return nil
}

// ListWorkTasksResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTasksResponseMultiError) AllErrors() []error { return m }

// ListWorkTasksResponseValidationError is the validation error returned by
// ListWorkTasksResponse.Validate if the designated constraints aren't met.
type ListWorkTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTasksResponseValidationError) ErrorName() string {
	return "ListWorkTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTasksResponseValidationError{}

// Validate checks the field values on GetWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkTaskRequestMultiError, or nil if none found.
func (m *GetWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	if len(errors) > 0 {
		return GetWorkTaskRequestMultiError(errors)
	}

	return nil
}

// GetWorkTaskRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkTaskRequestMultiError) AllErrors() []error { return m }

// GetWorkTaskRequestValidationError is the validation error returned by
// GetWorkTaskRequest.Validate if the designated constraints aren't met.
type GetWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkTaskRequestValidationError) ErrorName() string {
	return "GetWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkTaskRequestValidationError{}

// Validate checks the field values on UpdateWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkTaskRequestMultiError, or nil if none found.
func (m *UpdateWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkTaskRequestValidationError{
					field:  "WorkTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkTaskRequestValidationError{
					field:  "WorkTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkTaskRequestValidationError{
				field:  "WorkTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkTaskRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkTaskRequestMultiError) AllErrors() []error { return m }

// UpdateWorkTaskRequestValidationError is the validation error returned by
// UpdateWorkTaskRequest.Validate if the designated constraints aren't met.
type UpdateWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkTaskRequestValidationError) ErrorName() string {
	return "UpdateWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkTaskRequestValidationError{}

// Validate checks the field values on DeleteWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkTaskRequestMultiError, or nil if none found.
func (m *DeleteWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWorkTaskRequestValidationError{
					field:  "WorkTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWorkTaskRequestValidationError{
					field:  "WorkTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWorkTaskRequestValidationError{
				field:  "WorkTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWorkTaskRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkTaskRequestMultiError) AllErrors() []error { return m }

// DeleteWorkTaskRequestValidationError is the validation error returned by
// DeleteWorkTaskRequest.Validate if the designated constraints aren't met.
type DeleteWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkTaskRequestValidationError) ErrorName() string {
	return "DeleteWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkTaskRequestValidationError{}

// Validate checks the field values on ExportWorkTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportWorkTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportWorkTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportWorkTasksRequestMultiError, or nil if none found.
func (m *ExportWorkTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportWorkTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportWorkTasksRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportWorkTasksRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportWorkTasksRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportWorkTasksRequestMultiError(errors)
	}

	return nil
}

// ExportWorkTasksRequestMultiError is an error wrapping multiple validation
// errors returned by ExportWorkTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportWorkTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportWorkTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportWorkTasksRequestMultiError) AllErrors() []error { return m }

// ExportWorkTasksRequestValidationError is the validation error returned by
// ExportWorkTasksRequest.Validate if the designated constraints aren't met.
type ExportWorkTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportWorkTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportWorkTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportWorkTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportWorkTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportWorkTasksRequestValidationError) ErrorName() string {
	return "ExportWorkTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportWorkTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportWorkTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportWorkTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportWorkTasksRequestValidationError{}

// Validate checks the field values on ExportWorkTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportWorkTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportWorkTasksResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportWorkTasksResponseMultiError, or nil if none found.
func (m *ExportWorkTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportWorkTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportWorkTasksResponseMultiError(errors)
	}

	return nil
}

// ExportWorkTasksResponseMultiError is an error wrapping multiple validation
// errors returned by ExportWorkTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportWorkTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportWorkTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportWorkTasksResponseMultiError) AllErrors() []error { return m }

// ExportWorkTasksResponseValidationError is the validation error returned by
// ExportWorkTasksResponse.Validate if the designated constraints aren't met.
type ExportWorkTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportWorkTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportWorkTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportWorkTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportWorkTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportWorkTasksResponseValidationError) ErrorName() string {
	return "ExportWorkTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportWorkTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportWorkTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportWorkTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportWorkTasksResponseValidationError{}

// Validate checks the field values on ApprovalRequestWorkTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovalRequestWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalRequestWorkTaskRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApprovalRequestWorkTaskRequestMultiError, or nil if none found.
func (m *ApprovalRequestWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	if all {
		switch v := interface{}(m.GetApprovalPlanStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestWorkTaskRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestWorkTaskRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestWorkTaskRequestValidationError{
				field:  "ApprovalPlanStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalPlanOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestWorkTaskRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestWorkTaskRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestWorkTaskRequestValidationError{
				field:  "ApprovalPlanOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApprovalRequestWorkTaskRequestMultiError(errors)
	}

	return nil
}

// ApprovalRequestWorkTaskRequestMultiError is an error wrapping multiple
// validation errors returned by ApprovalRequestWorkTaskRequest.ValidateAll()
// if the designated constraints aren't met.
type ApprovalRequestWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestWorkTaskRequestMultiError) AllErrors() []error { return m }

// ApprovalRequestWorkTaskRequestValidationError is the validation error
// returned by ApprovalRequestWorkTaskRequest.Validate if the designated
// constraints aren't met.
type ApprovalRequestWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestWorkTaskRequestValidationError) ErrorName() string {
	return "ApprovalRequestWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestWorkTaskRequestValidationError{}

// Validate checks the field values on ApprovalRequestWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApprovalRequestWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalRequestWorkTaskResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ApprovalRequestWorkTaskResponseMultiError, or nil if none found.
func (m *ApprovalRequestWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequestWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApprovalRequestWorkTaskResponseMultiError(errors)
	}

	return nil
}

// ApprovalRequestWorkTaskResponseMultiError is an error wrapping multiple
// validation errors returned by ApprovalRequestWorkTaskResponse.ValidateAll()
// if the designated constraints aren't met.
type ApprovalRequestWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestWorkTaskResponseMultiError) AllErrors() []error { return m }

// ApprovalRequestWorkTaskResponseValidationError is the validation error
// returned by ApprovalRequestWorkTaskResponse.Validate if the designated
// constraints aren't met.
type ApprovalRequestWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestWorkTaskResponseValidationError) ErrorName() string {
	return "ApprovalRequestWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApprovalRequestWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequestWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestWorkTaskResponseValidationError{}

// Validate checks the field values on ApproveWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveWorkTaskRequestMultiError, or nil if none found.
func (m *ApproveWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	// no validation rules for Comment

	if len(errors) > 0 {
		return ApproveWorkTaskRequestMultiError(errors)
	}

	return nil
}

// ApproveWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveWorkTaskRequestMultiError) AllErrors() []error { return m }

// ApproveWorkTaskRequestValidationError is the validation error returned by
// ApproveWorkTaskRequest.Validate if the designated constraints aren't met.
type ApproveWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveWorkTaskRequestValidationError) ErrorName() string {
	return "ApproveWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveWorkTaskRequestValidationError{}

// Validate checks the field values on ApproveWorkTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveWorkTaskResponseMultiError, or nil if none found.
func (m *ApproveWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ApproveWorkTaskResponseMultiError(errors)
	}

	return nil
}

// ApproveWorkTaskResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveWorkTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveWorkTaskResponseMultiError) AllErrors() []error { return m }

// ApproveWorkTaskResponseValidationError is the validation error returned by
// ApproveWorkTaskResponse.Validate if the designated constraints aren't met.
type ApproveWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveWorkTaskResponseValidationError) ErrorName() string {
	return "ApproveWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveWorkTaskResponseValidationError{}

// Validate checks the field values on RejectWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectWorkTaskRequestMultiError, or nil if none found.
func (m *RejectWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	// no validation rules for Comment

	if len(errors) > 0 {
		return RejectWorkTaskRequestMultiError(errors)
	}

	return nil
}

// RejectWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by RejectWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type RejectWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectWorkTaskRequestMultiError) AllErrors() []error { return m }

// RejectWorkTaskRequestValidationError is the validation error returned by
// RejectWorkTaskRequest.Validate if the designated constraints aren't met.
type RejectWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectWorkTaskRequestValidationError) ErrorName() string {
	return "RejectWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectWorkTaskRequestValidationError{}

// Validate checks the field values on RejectWorkTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RejectWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RejectWorkTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RejectWorkTaskResponseMultiError, or nil if none found.
func (m *RejectWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RejectWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RejectWorkTaskResponseMultiError(errors)
	}

	return nil
}

// RejectWorkTaskResponseMultiError is an error wrapping multiple validation
// errors returned by RejectWorkTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type RejectWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RejectWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RejectWorkTaskResponseMultiError) AllErrors() []error { return m }

// RejectWorkTaskResponseValidationError is the validation error returned by
// RejectWorkTaskResponse.Validate if the designated constraints aren't met.
type RejectWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectWorkTaskResponseValidationError) ErrorName() string {
	return "RejectWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RejectWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectWorkTaskResponseValidationError{}

// Validate checks the field values on ListWorkTaskFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTaskFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTaskFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkTaskFormatsRequestMultiError, or nil if none found.
func (m *ListWorkTaskFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkTaskFormatsRequestMultiError(errors)
	}

	return nil
}

// ListWorkTaskFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWorkTaskFormatsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWorkTaskFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskFormatsRequestMultiError) AllErrors() []error { return m }

// ListWorkTaskFormatsRequestValidationError is the validation error returned
// by ListWorkTaskFormatsRequest.Validate if the designated constraints aren't met.
type ListWorkTaskFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTaskFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskFormatsRequestValidationError) ErrorName() string {
	return "ListWorkTaskFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskFormatsRequestValidationError{}

// Validate checks the field values on ListWorkTaskFormatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTaskFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTaskFormatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkTaskFormatsResponseMultiError, or nil if none found.
func (m *ListWorkTaskFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkTaskFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkTaskFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkTaskFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkTaskFormatsResponseMultiError(errors)
	}

	return nil
}

// ListWorkTaskFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWorkTaskFormatsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListWorkTaskFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskFormatsResponseMultiError) AllErrors() []error { return m }

// ListWorkTaskFormatsResponseValidationError is the validation error returned
// by ListWorkTaskFormatsResponse.Validate if the designated constraints
// aren't met.
type ListWorkTaskFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTaskFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskFormatsResponseValidationError) ErrorName() string {
	return "ListWorkTaskFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskFormatsResponseValidationError{}

// Validate checks the field values on CreateWorkTaskRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkTaskRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkTaskRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWorkTaskRelationRequestMultiError, or nil if none found.
func (m *CreateWorkTaskRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkTaskRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTaskRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkTaskRelationRequestValidationError{
					field:  "WorkTaskRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkTaskRelationRequestValidationError{
					field:  "WorkTaskRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTaskRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkTaskRelationRequestValidationError{
				field:  "WorkTaskRelation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkTaskRelationRequestMultiError(errors)
	}

	return nil
}

// CreateWorkTaskRelationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWorkTaskRelationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateWorkTaskRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkTaskRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkTaskRelationRequestMultiError) AllErrors() []error { return m }

// CreateWorkTaskRelationRequestValidationError is the validation error
// returned by CreateWorkTaskRelationRequest.Validate if the designated
// constraints aren't met.
type CreateWorkTaskRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkTaskRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkTaskRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkTaskRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkTaskRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkTaskRelationRequestValidationError) ErrorName() string {
	return "CreateWorkTaskRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkTaskRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkTaskRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkTaskRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkTaskRelationRequestValidationError{}

// Validate checks the field values on DeleteWorkTaskRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkTaskRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkTaskRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWorkTaskRelationRequestMultiError, or nil if none found.
func (m *DeleteWorkTaskRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkTaskRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkTaskRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWorkTaskRelationRequestValidationError{
					field:  "WorkTaskRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWorkTaskRelationRequestValidationError{
					field:  "WorkTaskRelation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTaskRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWorkTaskRelationRequestValidationError{
				field:  "WorkTaskRelation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWorkTaskRelationRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkTaskRelationRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkTaskRelationRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteWorkTaskRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkTaskRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkTaskRelationRequestMultiError) AllErrors() []error { return m }

// DeleteWorkTaskRelationRequestValidationError is the validation error
// returned by DeleteWorkTaskRelationRequest.Validate if the designated
// constraints aren't met.
type DeleteWorkTaskRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkTaskRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkTaskRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkTaskRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkTaskRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkTaskRelationRequestValidationError) ErrorName() string {
	return "DeleteWorkTaskRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkTaskRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkTaskRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkTaskRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkTaskRelationRequestValidationError{}

// Validate checks the field values on ListWorkTaskRelationContentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListWorkTaskRelationContentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTaskRelationContentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWorkTaskRelationContentsRequestMultiError, or nil if none found.
func (m *ListWorkTaskRelationContentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskRelationContentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if all {
		switch v := interface{}(m.GetDataFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWorkTaskRelationContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWorkTaskRelationContentsRequestValidationError{
					field:  "DataFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWorkTaskRelationContentsRequestValidationError{
				field:  "DataFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListWorkTaskRelationContentsRequestMultiError(errors)
	}

	return nil
}

// ListWorkTaskRelationContentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListWorkTaskRelationContentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkTaskRelationContentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskRelationContentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskRelationContentsRequestMultiError) AllErrors() []error { return m }

// ListWorkTaskRelationContentsRequestValidationError is the validation error
// returned by ListWorkTaskRelationContentsRequest.Validate if the designated
// constraints aren't met.
type ListWorkTaskRelationContentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskRelationContentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskRelationContentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTaskRelationContentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskRelationContentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskRelationContentsRequestValidationError) ErrorName() string {
	return "ListWorkTaskRelationContentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskRelationContentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskRelationContentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskRelationContentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskRelationContentsRequestValidationError{}

// Validate checks the field values on ListWorkTaskRelationContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWorkTaskRelationContentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTaskRelationContentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWorkTaskRelationContentsResponseMultiError, or nil if none found.
func (m *ListWorkTaskRelationContentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskRelationContentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkTaskRelationContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkTaskRelationContentsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkTaskRelationContentsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListWorkTaskRelationContentsResponseMultiError(errors)
	}

	return nil
}

// ListWorkTaskRelationContentsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListWorkTaskRelationContentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkTaskRelationContentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskRelationContentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskRelationContentsResponseMultiError) AllErrors() []error { return m }

// ListWorkTaskRelationContentsResponseValidationError is the validation error
// returned by ListWorkTaskRelationContentsResponse.Validate if the designated
// constraints aren't met.
type ListWorkTaskRelationContentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskRelationContentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskRelationContentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTaskRelationContentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskRelationContentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskRelationContentsResponseValidationError) ErrorName() string {
	return "ListWorkTaskRelationContentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskRelationContentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskRelationContentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskRelationContentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskRelationContentsResponseValidationError{}

// Validate checks the field values on GetWorkTaskRelationContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWorkTaskRelationContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkTaskRelationContentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetWorkTaskRelationContentRequestMultiError, or nil if none found.
func (m *GetWorkTaskRelationContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkTaskRelationContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskRelationId

	if len(errors) > 0 {
		return GetWorkTaskRelationContentRequestMultiError(errors)
	}

	return nil
}

// GetWorkTaskRelationContentRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetWorkTaskRelationContentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkTaskRelationContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkTaskRelationContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkTaskRelationContentRequestMultiError) AllErrors() []error { return m }

// GetWorkTaskRelationContentRequestValidationError is the validation error
// returned by GetWorkTaskRelationContentRequest.Validate if the designated
// constraints aren't met.
type GetWorkTaskRelationContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkTaskRelationContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkTaskRelationContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkTaskRelationContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkTaskRelationContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkTaskRelationContentRequestValidationError) ErrorName() string {
	return "GetWorkTaskRelationContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkTaskRelationContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkTaskRelationContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkTaskRelationContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkTaskRelationContentRequestValidationError{}

// Validate checks the field values on ActivateWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateWorkTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateWorkTaskRequestMultiError, or nil if none found.
func (m *ActivateWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	if len(errors) > 0 {
		return ActivateWorkTaskRequestMultiError(errors)
	}

	return nil
}

// ActivateWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by ActivateWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type ActivateWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateWorkTaskRequestMultiError) AllErrors() []error { return m }

// ActivateWorkTaskRequestValidationError is the validation error returned by
// ActivateWorkTaskRequest.Validate if the designated constraints aren't met.
type ActivateWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateWorkTaskRequestValidationError) ErrorName() string {
	return "ActivateWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateWorkTaskRequestValidationError{}

// Validate checks the field values on ActivateWorkTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivateWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateWorkTaskResponseMultiError, or nil if none found.
func (m *ActivateWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActivateWorkTaskResponseMultiError(errors)
	}

	return nil
}

// ActivateWorkTaskResponseMultiError is an error wrapping multiple validation
// errors returned by ActivateWorkTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type ActivateWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateWorkTaskResponseMultiError) AllErrors() []error { return m }

// ActivateWorkTaskResponseValidationError is the validation error returned by
// ActivateWorkTaskResponse.Validate if the designated constraints aren't met.
type ActivateWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateWorkTaskResponseValidationError) ErrorName() string {
	return "ActivateWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateWorkTaskResponseValidationError{}

// Validate checks the field values on DiscardWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscardWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscardWorkTaskRequestMultiError, or nil if none found.
func (m *DiscardWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	// no validation rules for Comment

	if len(errors) > 0 {
		return DiscardWorkTaskRequestMultiError(errors)
	}

	return nil
}

// DiscardWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by DiscardWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type DiscardWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardWorkTaskRequestMultiError) AllErrors() []error { return m }

// DiscardWorkTaskRequestValidationError is the validation error returned by
// DiscardWorkTaskRequest.Validate if the designated constraints aren't met.
type DiscardWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardWorkTaskRequestValidationError) ErrorName() string {
	return "DiscardWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardWorkTaskRequestValidationError{}

// Validate checks the field values on DiscardWorkTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscardWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscardWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscardWorkTaskResponseMultiError, or nil if none found.
func (m *DiscardWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscardWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DiscardWorkTaskResponseMultiError(errors)
	}

	return nil
}

// DiscardWorkTaskResponseMultiError is an error wrapping multiple validation
// errors returned by DiscardWorkTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type DiscardWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscardWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscardWorkTaskResponseMultiError) AllErrors() []error { return m }

// DiscardWorkTaskResponseValidationError is the validation error returned by
// DiscardWorkTaskResponse.Validate if the designated constraints aren't met.
type DiscardWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscardWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscardWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscardWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscardWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscardWorkTaskResponseValidationError) ErrorName() string {
	return "DiscardWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscardWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscardWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscardWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscardWorkTaskResponseValidationError{}

// Validate checks the field values on CompleteWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteWorkTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteWorkTaskRequestMultiError, or nil if none found.
func (m *CompleteWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	if len(errors) > 0 {
		return CompleteWorkTaskRequestMultiError(errors)
	}

	return nil
}

// CompleteWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteWorkTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteWorkTaskRequestMultiError) AllErrors() []error { return m }

// CompleteWorkTaskRequestValidationError is the validation error returned by
// CompleteWorkTaskRequest.Validate if the designated constraints aren't met.
type CompleteWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteWorkTaskRequestValidationError) ErrorName() string {
	return "CompleteWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteWorkTaskRequestValidationError{}

// Validate checks the field values on CompleteWorkTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteWorkTaskResponseMultiError, or nil if none found.
func (m *CompleteWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteWorkTaskResponseMultiError(errors)
	}

	return nil
}

// CompleteWorkTaskResponseMultiError is an error wrapping multiple validation
// errors returned by CompleteWorkTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type CompleteWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteWorkTaskResponseMultiError) AllErrors() []error { return m }

// CompleteWorkTaskResponseValidationError is the validation error returned by
// CompleteWorkTaskResponse.Validate if the designated constraints aren't met.
type CompleteWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteWorkTaskResponseValidationError) ErrorName() string {
	return "CompleteWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteWorkTaskResponseValidationError{}

// Validate checks the field values on UncompleteWorkTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncompleteWorkTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteWorkTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UncompleteWorkTaskRequestMultiError, or nil if none found.
func (m *UncompleteWorkTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteWorkTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	if len(errors) > 0 {
		return UncompleteWorkTaskRequestMultiError(errors)
	}

	return nil
}

// UncompleteWorkTaskRequestMultiError is an error wrapping multiple validation
// errors returned by UncompleteWorkTaskRequest.ValidateAll() if the
// designated constraints aren't met.
type UncompleteWorkTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteWorkTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteWorkTaskRequestMultiError) AllErrors() []error { return m }

// UncompleteWorkTaskRequestValidationError is the validation error returned by
// UncompleteWorkTaskRequest.Validate if the designated constraints aren't met.
type UncompleteWorkTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteWorkTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteWorkTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteWorkTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteWorkTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteWorkTaskRequestValidationError) ErrorName() string {
	return "UncompleteWorkTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteWorkTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteWorkTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteWorkTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteWorkTaskRequestValidationError{}

// Validate checks the field values on UncompleteWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncompleteWorkTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteWorkTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UncompleteWorkTaskResponseMultiError, or nil if none found.
func (m *UncompleteWorkTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteWorkTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UncompleteWorkTaskResponseMultiError(errors)
	}

	return nil
}

// UncompleteWorkTaskResponseMultiError is an error wrapping multiple
// validation errors returned by UncompleteWorkTaskResponse.ValidateAll() if
// the designated constraints aren't met.
type UncompleteWorkTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteWorkTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteWorkTaskResponseMultiError) AllErrors() []error { return m }

// UncompleteWorkTaskResponseValidationError is the validation error returned
// by UncompleteWorkTaskResponse.Validate if the designated constraints aren't met.
type UncompleteWorkTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteWorkTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteWorkTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteWorkTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteWorkTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteWorkTaskResponseValidationError) ErrorName() string {
	return "UncompleteWorkTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteWorkTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteWorkTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteWorkTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteWorkTaskResponseValidationError{}

// Validate checks the field values on CompleteWorkTaskTicketRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteWorkTaskTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteWorkTaskTicketRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteWorkTaskTicketRequestMultiError, or nil if none found.
func (m *CompleteWorkTaskTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteWorkTaskTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	// no validation rules for ResultRemarks

	for idx, item := range m.GetResultAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteWorkTaskTicketRequestValidationError{
						field:  fmt.Sprintf("ResultAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteWorkTaskTicketRequestValidationError{
						field:  fmt.Sprintf("ResultAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteWorkTaskTicketRequestValidationError{
					field:  fmt.Sprintf("ResultAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompleteWorkTaskTicketRequestMultiError(errors)
	}

	return nil
}

// CompleteWorkTaskTicketRequestMultiError is an error wrapping multiple
// validation errors returned by CompleteWorkTaskTicketRequest.ValidateAll()
// if the designated constraints aren't met.
type CompleteWorkTaskTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteWorkTaskTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteWorkTaskTicketRequestMultiError) AllErrors() []error { return m }

// CompleteWorkTaskTicketRequestValidationError is the validation error
// returned by CompleteWorkTaskTicketRequest.Validate if the designated
// constraints aren't met.
type CompleteWorkTaskTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteWorkTaskTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteWorkTaskTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteWorkTaskTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteWorkTaskTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteWorkTaskTicketRequestValidationError) ErrorName() string {
	return "CompleteWorkTaskTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteWorkTaskTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteWorkTaskTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteWorkTaskTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteWorkTaskTicketRequestValidationError{}

// Validate checks the field values on CompleteWorkTaskTicketResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteWorkTaskTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteWorkTaskTicketResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteWorkTaskTicketResponseMultiError, or nil if none found.
func (m *CompleteWorkTaskTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteWorkTaskTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompleteWorkTaskTicketResponseMultiError(errors)
	}

	return nil
}

// CompleteWorkTaskTicketResponseMultiError is an error wrapping multiple
// validation errors returned by CompleteWorkTaskTicketResponse.ValidateAll()
// if the designated constraints aren't met.
type CompleteWorkTaskTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteWorkTaskTicketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteWorkTaskTicketResponseMultiError) AllErrors() []error { return m }

// CompleteWorkTaskTicketResponseValidationError is the validation error
// returned by CompleteWorkTaskTicketResponse.Validate if the designated
// constraints aren't met.
type CompleteWorkTaskTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteWorkTaskTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteWorkTaskTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteWorkTaskTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteWorkTaskTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteWorkTaskTicketResponseValidationError) ErrorName() string {
	return "CompleteWorkTaskTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteWorkTaskTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteWorkTaskTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteWorkTaskTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteWorkTaskTicketResponseValidationError{}

// Validate checks the field values on UncompleteWorkTaskTicketRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncompleteWorkTaskTicketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteWorkTaskTicketRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncompleteWorkTaskTicketRequestMultiError, or nil if none found.
func (m *UncompleteWorkTaskTicketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteWorkTaskTicketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	// no validation rules for Comment

	if len(errors) > 0 {
		return UncompleteWorkTaskTicketRequestMultiError(errors)
	}

	return nil
}

// UncompleteWorkTaskTicketRequestMultiError is an error wrapping multiple
// validation errors returned by UncompleteWorkTaskTicketRequest.ValidateAll()
// if the designated constraints aren't met.
type UncompleteWorkTaskTicketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteWorkTaskTicketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteWorkTaskTicketRequestMultiError) AllErrors() []error { return m }

// UncompleteWorkTaskTicketRequestValidationError is the validation error
// returned by UncompleteWorkTaskTicketRequest.Validate if the designated
// constraints aren't met.
type UncompleteWorkTaskTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteWorkTaskTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteWorkTaskTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteWorkTaskTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteWorkTaskTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteWorkTaskTicketRequestValidationError) ErrorName() string {
	return "UncompleteWorkTaskTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteWorkTaskTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteWorkTaskTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteWorkTaskTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteWorkTaskTicketRequestValidationError{}

// Validate checks the field values on UncompleteWorkTaskTicketResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UncompleteWorkTaskTicketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompleteWorkTaskTicketResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncompleteWorkTaskTicketResponseMultiError, or nil if none found.
func (m *UncompleteWorkTaskTicketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompleteWorkTaskTicketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UncompleteWorkTaskTicketResponseMultiError(errors)
	}

	return nil
}

// UncompleteWorkTaskTicketResponseMultiError is an error wrapping multiple
// validation errors returned by
// UncompleteWorkTaskTicketResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompleteWorkTaskTicketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompleteWorkTaskTicketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompleteWorkTaskTicketResponseMultiError) AllErrors() []error { return m }

// UncompleteWorkTaskTicketResponseValidationError is the validation error
// returned by UncompleteWorkTaskTicketResponse.Validate if the designated
// constraints aren't met.
type UncompleteWorkTaskTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompleteWorkTaskTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompleteWorkTaskTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompleteWorkTaskTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompleteWorkTaskTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompleteWorkTaskTicketResponseValidationError) ErrorName() string {
	return "UncompleteWorkTaskTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompleteWorkTaskTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompleteWorkTaskTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompleteWorkTaskTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompleteWorkTaskTicketResponseValidationError{}

// Validate checks the field values on WorkTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkTaskMultiError, or nil
// if none found.
func (m *WorkTask) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkTaskId

	for idx, item := range m.GetSystemNotificationUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkTaskValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkTaskValidationError{
						field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkTaskValidationError{
					field:  fmt.Sprintf("SystemNotificationUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WorkTaskAutoName

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Completed

	// no validation rules for DisplayName

	// no validation rules for Asap

	// no validation rules for AsapComment

	if all {
		switch v := interface{}(m.GetWorkTaskCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkTaskCatalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkTaskCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorkTaskCatalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkTaskCatalogId

	// no validation rules for Contents

	// no validation rules for Approval

	if all {
		switch v := interface{}(m.GetManagementOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ManagementOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ManagementOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManagementOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "ManagementOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManagementStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ManagementStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ManagementStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManagementStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "ManagementStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManagementStaffChangeProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ManagementStaffChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ManagementStaffChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManagementStaffChangeProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "ManagementStaffChangeProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorkOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorkStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkStaffChangeProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkStaffChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorkStaffChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkStaffChangeProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorkStaffChangeProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestRemarks

	for idx, item := range m.GetRequestAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkTaskValidationError{
						field:  fmt.Sprintf("RequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkTaskValidationError{
						field:  fmt.Sprintf("RequestAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkTaskValidationError{
					field:  fmt.Sprintf("RequestAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RequestedAt

	if all {
		switch v := interface{}(m.GetRequestedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "RequestedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "RequestedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "RequestedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTicket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "Ticket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "Ticket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTicketRestartProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "TicketRestartProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "TicketRestartProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTicketRestartProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "TicketRestartProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscardProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "DiscardProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "DiscardProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscardProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "DiscardProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompleteProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "CompleteProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "CompleteProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompleteProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "CompleteProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorktaskDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorktaskDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorktaskDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorktaskDueDateChangeProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskDueDateChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskDueDateChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorktaskDueDateChangeProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorktaskDueDateChangeProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorktaskTicketDueDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketDueDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorktaskTicketDueDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorktaskTicketDueDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorktaskTicketDueDateChangeProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketDueDateChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketDueDateChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorktaskTicketDueDateChangeProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorktaskTicketDueDateChangeProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorktaskTicketScheduledDateDt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketScheduledDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketScheduledDateDt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorktaskTicketScheduledDateDt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorktaskTicketScheduledDateDt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorktaskTicketScheduledDateChangeProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketScheduledDateChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "WorktaskTicketScheduledDateChangeProcess",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorktaskTicketScheduledDateChangeProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "WorktaskTicketScheduledDateChangeProcess",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ApprovalStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "ApprovalStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ApprovalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ApprovalRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "ApprovalRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ApprovalResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkTaskValidationError{
					field:  "ApprovalResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkTaskValidationError{
				field:  "ApprovalResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return WorkTaskMultiError(errors)
	}

	return nil
}

// WorkTaskMultiError is an error wrapping multiple validation errors returned
// by WorkTask.ValidateAll() if the designated constraints aren't met.
type WorkTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkTaskMultiError) AllErrors() []error { return m }

// WorkTaskValidationError is the validation error returned by
// WorkTask.Validate if the designated constraints aren't met.
type WorkTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkTaskValidationError) ErrorName() string { return "WorkTaskValidationError" }

// Error satisfies the builtin error interface
func (e WorkTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkTaskValidationError{}

// Validate checks the field values on ApprovalRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApprovalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApprovalRequestMultiError, or nil if none found.
func (m *ApprovalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestedAt

	if all {
		switch v := interface{}(m.GetRequestedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "RequestedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "RequestedStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestedOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "RequestedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestedOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "RequestedOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalPlanStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "ApprovalPlanStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApprovalPlanOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalRequestValidationError{
					field:  "ApprovalPlanOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApprovalPlanOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalRequestValidationError{
				field:  "ApprovalPlanOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RequestedComment

	if len(errors) > 0 {
		return ApprovalRequestMultiError(errors)
	}

	return nil
}

// ApprovalRequestMultiError is an error wrapping multiple validation errors
// returned by ApprovalRequest.ValidateAll() if the designated constraints
// aren't met.
type ApprovalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalRequestMultiError) AllErrors() []error { return m }

// ApprovalRequestValidationError is the validation error returned by
// ApprovalRequest.Validate if the designated constraints aren't met.
type ApprovalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalRequestValidationError) ErrorName() string { return "ApprovalRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApprovalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalRequestValidationError{}

// Validate checks the field values on ApprovalResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApprovalResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApprovalResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApprovalResultMultiError,
// or nil if none found.
func (m *ApprovalResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ApprovalResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DecidedAt

	if all {
		switch v := interface{}(m.GetDecidedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecidedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalResultValidationError{
				field:  "DecidedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDecidedStaff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedStaff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecidedStaff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalResultValidationError{
				field:  "DecidedStaff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDecidedOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApprovalResultValidationError{
					field:  "DecidedOrganization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecidedOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApprovalResultValidationError{
				field:  "DecidedOrganization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DecidedComment

	if len(errors) > 0 {
		return ApprovalResultMultiError(errors)
	}

	return nil
}

// ApprovalResultMultiError is an error wrapping multiple validation errors
// returned by ApprovalResult.ValidateAll() if the designated constraints
// aren't met.
type ApprovalResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApprovalResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApprovalResultMultiError) AllErrors() []error { return m }

// ApprovalResultValidationError is the validation error returned by
// ApprovalResult.Validate if the designated constraints aren't met.
type ApprovalResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApprovalResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApprovalResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApprovalResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApprovalResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApprovalResultValidationError) ErrorName() string { return "ApprovalResultValidationError" }

// Error satisfies the builtin error interface
func (e ApprovalResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApprovalResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApprovalResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApprovalResultValidationError{}

// Validate checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Ticket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TicketMultiError, or nil if none found.
func (m *Ticket) ValidateAll() error {
	return m.validate(true)
}

func (m *Ticket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remarks

	// no validation rules for ResultRemarks

	for idx, item := range m.GetResultAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TicketValidationError{
						field:  fmt.Sprintf("ResultAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TicketValidationError{
						field:  fmt.Sprintf("ResultAttachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TicketValidationError{
					field:  fmt.Sprintf("ResultAttachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CompletedAt

	if all {
		switch v := interface{}(m.GetCompletedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CompletedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TicketValidationError{
					field:  "CompletedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TicketValidationError{
				field:  "CompletedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TicketMultiError(errors)
	}

	return nil
}

// TicketMultiError is an error wrapping multiple validation errors returned by
// Ticket.ValidateAll() if the designated constraints aren't met.
type TicketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TicketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TicketMultiError) AllErrors() []error { return m }

// TicketValidationError is the validation error returned by Ticket.Validate if
// the designated constraints aren't met.
type TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketValidationError) ErrorName() string { return "TicketValidationError" }

// Error satisfies the builtin error interface
func (e TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketValidationError{}

// Validate checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Process with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProcessMultiError, or nil if none found.
func (m *Process) ValidateAll() error {
	return m.validate(true)
}

func (m *Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProcessedAt

	if all {
		switch v := interface{}(m.GetProcessedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "ProcessedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessValidationError{
					field:  "ProcessedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessValidationError{
				field:  "ProcessedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProcessedComment

	if len(errors) > 0 {
		return ProcessMultiError(errors)
	}

	return nil
}

// ProcessMultiError is an error wrapping multiple validation errors returned
// by Process.ValidateAll() if the designated constraints aren't met.
type ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessMultiError) AllErrors() []error { return m }

// ProcessValidationError is the validation error returned by Process.Validate
// if the designated constraints aren't met.
type ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessValidationError) ErrorName() string { return "ProcessValidationError" }

// Error satisfies the builtin error interface
func (e ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessValidationError{}

// Validate checks the field values on UncompletedListWorkTaskTicketsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UncompletedListWorkTaskTicketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompletedListWorkTaskTicketsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UncompletedListWorkTaskTicketsRequestMultiError, or nil if none found.
func (m *UncompletedListWorkTaskTicketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompletedListWorkTaskTicketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UncompletedListWorkTaskTicketsRequestMultiError(errors)
	}

	return nil
}

// UncompletedListWorkTaskTicketsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UncompletedListWorkTaskTicketsRequest.ValidateAll() if the designated
// constraints aren't met.
type UncompletedListWorkTaskTicketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompletedListWorkTaskTicketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompletedListWorkTaskTicketsRequestMultiError) AllErrors() []error { return m }

// UncompletedListWorkTaskTicketsRequestValidationError is the validation error
// returned by UncompletedListWorkTaskTicketsRequest.Validate if the
// designated constraints aren't met.
type UncompletedListWorkTaskTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompletedListWorkTaskTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompletedListWorkTaskTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompletedListWorkTaskTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompletedListWorkTaskTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompletedListWorkTaskTicketsRequestValidationError) ErrorName() string {
	return "UncompletedListWorkTaskTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompletedListWorkTaskTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompletedListWorkTaskTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompletedListWorkTaskTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompletedListWorkTaskTicketsRequestValidationError{}

// Validate checks the field values on UncompletedListWorkTaskTicketsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UncompletedListWorkTaskTicketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UncompletedListWorkTaskTicketsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UncompletedListWorkTaskTicketsResponseMultiError, or nil if none found.
func (m *UncompletedListWorkTaskTicketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompletedListWorkTaskTicketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UncompletedListWorkTaskTicketsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UncompletedListWorkTaskTicketsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UncompletedListWorkTaskTicketsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UncompletedListWorkTaskTicketsResponseMultiError(errors)
	}

	return nil
}

// UncompletedListWorkTaskTicketsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UncompletedListWorkTaskTicketsResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompletedListWorkTaskTicketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompletedListWorkTaskTicketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompletedListWorkTaskTicketsResponseMultiError) AllErrors() []error { return m }

// UncompletedListWorkTaskTicketsResponseValidationError is the validation
// error returned by UncompletedListWorkTaskTicketsResponse.Validate if the
// designated constraints aren't met.
type UncompletedListWorkTaskTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompletedListWorkTaskTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompletedListWorkTaskTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompletedListWorkTaskTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompletedListWorkTaskTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompletedListWorkTaskTicketsResponseValidationError) ErrorName() string {
	return "UncompletedListWorkTaskTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompletedListWorkTaskTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompletedListWorkTaskTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompletedListWorkTaskTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompletedListWorkTaskTicketsResponseValidationError{}

// Validate checks the field values on UncompletedListWorkTasksRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UncompletedListWorkTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompletedListWorkTasksRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncompletedListWorkTasksRequestMultiError, or nil if none found.
func (m *UncompletedListWorkTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompletedListWorkTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UncompletedListWorkTasksRequestMultiError(errors)
	}

	return nil
}

// UncompletedListWorkTasksRequestMultiError is an error wrapping multiple
// validation errors returned by UncompletedListWorkTasksRequest.ValidateAll()
// if the designated constraints aren't met.
type UncompletedListWorkTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompletedListWorkTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompletedListWorkTasksRequestMultiError) AllErrors() []error { return m }

// UncompletedListWorkTasksRequestValidationError is the validation error
// returned by UncompletedListWorkTasksRequest.Validate if the designated
// constraints aren't met.
type UncompletedListWorkTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompletedListWorkTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompletedListWorkTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompletedListWorkTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompletedListWorkTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompletedListWorkTasksRequestValidationError) ErrorName() string {
	return "UncompletedListWorkTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UncompletedListWorkTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompletedListWorkTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompletedListWorkTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompletedListWorkTasksRequestValidationError{}

// Validate checks the field values on UncompletedListWorkTasksResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UncompletedListWorkTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UncompletedListWorkTasksResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UncompletedListWorkTasksResponseMultiError, or nil if none found.
func (m *UncompletedListWorkTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UncompletedListWorkTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UncompletedListWorkTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UncompletedListWorkTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UncompletedListWorkTasksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return UncompletedListWorkTasksResponseMultiError(errors)
	}

	return nil
}

// UncompletedListWorkTasksResponseMultiError is an error wrapping multiple
// validation errors returned by
// UncompletedListWorkTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type UncompletedListWorkTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UncompletedListWorkTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UncompletedListWorkTasksResponseMultiError) AllErrors() []error { return m }

// UncompletedListWorkTasksResponseValidationError is the validation error
// returned by UncompletedListWorkTasksResponse.Validate if the designated
// constraints aren't met.
type UncompletedListWorkTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UncompletedListWorkTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UncompletedListWorkTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UncompletedListWorkTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UncompletedListWorkTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UncompletedListWorkTasksResponseValidationError) ErrorName() string {
	return "UncompletedListWorkTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UncompletedListWorkTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUncompletedListWorkTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UncompletedListWorkTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UncompletedListWorkTasksResponseValidationError{}

// Validate checks the field values on ListWorkTasksRequest_DataFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkTasksRequest_DataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkTasksRequest_DataFilter with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWorkTasksRequest_DataFilterMultiError, or nil if none found.
func (m *ListWorkTasksRequest_DataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTasksRequest_DataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestedAtFrom

	// no validation rules for RequestedAtTo

	if len(errors) > 0 {
		return ListWorkTasksRequest_DataFilterMultiError(errors)
	}

	return nil
}

// ListWorkTasksRequest_DataFilterMultiError is an error wrapping multiple
// validation errors returned by ListWorkTasksRequest_DataFilter.ValidateAll()
// if the designated constraints aren't met.
type ListWorkTasksRequest_DataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTasksRequest_DataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTasksRequest_DataFilterMultiError) AllErrors() []error { return m }

// ListWorkTasksRequest_DataFilterValidationError is the validation error
// returned by ListWorkTasksRequest_DataFilter.Validate if the designated
// constraints aren't met.
type ListWorkTasksRequest_DataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTasksRequest_DataFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTasksRequest_DataFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkTasksRequest_DataFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTasksRequest_DataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTasksRequest_DataFilterValidationError) ErrorName() string {
	return "ListWorkTasksRequest_DataFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTasksRequest_DataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTasksRequest_DataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTasksRequest_DataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTasksRequest_DataFilterValidationError{}

// Validate checks the field values on
// ListWorkTaskRelationContentsRequest_DataFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWorkTaskRelationContentsRequest_DataFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWorkTaskRelationContentsRequest_DataFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListWorkTaskRelationContentsRequest_DataFilterMultiError, or nil if none found.
func (m *ListWorkTaskRelationContentsRequest_DataFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkTaskRelationContentsRequest_DataFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TypeName

	if len(errors) > 0 {
		return ListWorkTaskRelationContentsRequest_DataFilterMultiError(errors)
	}

	return nil
}

// ListWorkTaskRelationContentsRequest_DataFilterMultiError is an error
// wrapping multiple validation errors returned by
// ListWorkTaskRelationContentsRequest_DataFilter.ValidateAll() if the
// designated constraints aren't met.
type ListWorkTaskRelationContentsRequest_DataFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkTaskRelationContentsRequest_DataFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkTaskRelationContentsRequest_DataFilterMultiError) AllErrors() []error { return m }

// ListWorkTaskRelationContentsRequest_DataFilterValidationError is the
// validation error returned by
// ListWorkTaskRelationContentsRequest_DataFilter.Validate if the designated
// constraints aren't met.
type ListWorkTaskRelationContentsRequest_DataFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkTaskRelationContentsRequest_DataFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkTaskRelationContentsRequest_DataFilterValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListWorkTaskRelationContentsRequest_DataFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkTaskRelationContentsRequest_DataFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkTaskRelationContentsRequest_DataFilterValidationError) ErrorName() string {
	return "ListWorkTaskRelationContentsRequest_DataFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkTaskRelationContentsRequest_DataFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkTaskRelationContentsRequest_DataFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkTaskRelationContentsRequest_DataFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkTaskRelationContentsRequest_DataFilterValidationError{}
