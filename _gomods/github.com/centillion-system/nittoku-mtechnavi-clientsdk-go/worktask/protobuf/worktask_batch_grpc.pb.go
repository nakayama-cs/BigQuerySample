// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkTaskBatchServiceClient is the client API for WorkTaskBatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkTaskBatchServiceClient interface {
	// 非同期Queue(バッチ) 履歴作成
	TaskCreateHistory(ctx context.Context, in *TaskCreateHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 日次メール作成処理
	TaskCreateDailyMailWorkTask(ctx context.Context, in *TaskCreateDailyMailWorkTaskRequest, opts ...grpc.CallOption) (*TaskCreateDailyMailWorkTaskResponse, error)
}

type workTaskBatchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkTaskBatchServiceClient(cc grpc.ClientConnInterface) WorkTaskBatchServiceClient {
	return &workTaskBatchServiceClient{cc}
}

func (c *workTaskBatchServiceClient) TaskCreateHistory(ctx context.Context, in *TaskCreateHistoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.workTaskBatchService/TaskCreateHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workTaskBatchServiceClient) TaskCreateDailyMailWorkTask(ctx context.Context, in *TaskCreateDailyMailWorkTaskRequest, opts ...grpc.CallOption) (*TaskCreateDailyMailWorkTaskResponse, error) {
	out := new(TaskCreateDailyMailWorkTaskResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.worktask.workTaskBatchService/TaskCreateDailyMailWorkTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkTaskBatchServiceServer is the server API for WorkTaskBatchService service.
// All implementations must embed UnimplementedWorkTaskBatchServiceServer
// for forward compatibility
type WorkTaskBatchServiceServer interface {
	// 非同期Queue(バッチ) 履歴作成
	TaskCreateHistory(context.Context, *TaskCreateHistoryRequest) (*emptypb.Empty, error)
	// 日次メール作成処理
	TaskCreateDailyMailWorkTask(context.Context, *TaskCreateDailyMailWorkTaskRequest) (*TaskCreateDailyMailWorkTaskResponse, error)
	mustEmbedUnimplementedWorkTaskBatchServiceServer()
}

// UnimplementedWorkTaskBatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkTaskBatchServiceServer struct {
}

func (UnimplementedWorkTaskBatchServiceServer) TaskCreateHistory(context.Context, *TaskCreateHistoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateHistory not implemented")
}
func (UnimplementedWorkTaskBatchServiceServer) TaskCreateDailyMailWorkTask(context.Context, *TaskCreateDailyMailWorkTaskRequest) (*TaskCreateDailyMailWorkTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskCreateDailyMailWorkTask not implemented")
}
func (UnimplementedWorkTaskBatchServiceServer) mustEmbedUnimplementedWorkTaskBatchServiceServer() {}

// UnsafeWorkTaskBatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkTaskBatchServiceServer will
// result in compilation errors.
type UnsafeWorkTaskBatchServiceServer interface {
	mustEmbedUnimplementedWorkTaskBatchServiceServer()
}

func RegisterWorkTaskBatchServiceServer(s grpc.ServiceRegistrar, srv WorkTaskBatchServiceServer) {
	s.RegisterService(&WorkTaskBatchService_ServiceDesc, srv)
}

func _WorkTaskBatchService_TaskCreateHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskBatchServiceServer).TaskCreateHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.workTaskBatchService/TaskCreateHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskBatchServiceServer).TaskCreateHistory(ctx, req.(*TaskCreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkTaskBatchService_TaskCreateDailyMailWorkTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskCreateDailyMailWorkTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkTaskBatchServiceServer).TaskCreateDailyMailWorkTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.worktask.workTaskBatchService/TaskCreateDailyMailWorkTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkTaskBatchServiceServer).TaskCreateDailyMailWorkTask(ctx, req.(*TaskCreateDailyMailWorkTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkTaskBatchService_ServiceDesc is the grpc.ServiceDesc for WorkTaskBatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkTaskBatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.worktask.workTaskBatchService",
	HandlerType: (*WorkTaskBatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskCreateHistory",
			Handler:    _WorkTaskBatchService_TaskCreateHistory_Handler,
		},
		{
			MethodName: "TaskCreateDailyMailWorkTask",
			Handler:    _WorkTaskBatchService_TaskCreateDailyMailWorkTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worktask_batch.proto",
}
