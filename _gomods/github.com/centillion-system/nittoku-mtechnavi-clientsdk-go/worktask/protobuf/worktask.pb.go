// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: worktask.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 履歴
type ListHistorysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// レコードタイプ
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// レコードID
	RecordIds []string `protobuf:"bytes,3,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ListHistorysRequest) Reset() {
	*x = ListHistorysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistorysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistorysRequest) ProtoMessage() {}

func (x *ListHistorysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistorysRequest.ProtoReflect.Descriptor instead.
func (*ListHistorysRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{0}
}

func (x *ListHistorysRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListHistorysRequest) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListHistorysRequest) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

type ListHistorysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 履歴
	Items []*History `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListHistorysResponse) Reset() {
	*x = ListHistorysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHistorysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHistorysResponse) ProtoMessage() {}

func (x *ListHistorysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHistorysResponse.ProtoReflect.Descriptor instead.
func (*ListHistorysResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{1}
}

func (x *ListHistorysResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListHistorysResponse) GetItems() []*History {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListHistorysResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 指図案件カタログ
// required work_task_catalog
type CreateWorkTaskCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required code
	WorkTaskCatalog *WorkTaskCatalog `protobuf:"bytes,1,opt,name=work_task_catalog,json=workTaskCatalog,proto3" json:"work_task_catalog,omitempty"`
}

func (x *CreateWorkTaskCatalogRequest) Reset() {
	*x = CreateWorkTaskCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkTaskCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkTaskCatalogRequest) ProtoMessage() {}

func (x *CreateWorkTaskCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkTaskCatalogRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkTaskCatalogRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWorkTaskCatalogRequest) GetWorkTaskCatalog() *WorkTaskCatalog {
	if x != nil {
		return x.WorkTaskCatalog
	}
	return nil
}

type ListWorkTaskCatalogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkTaskCatalogsRequest) Reset() {
	*x = ListWorkTaskCatalogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskCatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskCatalogsRequest) ProtoMessage() {}

func (x *ListWorkTaskCatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskCatalogsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkTaskCatalogsRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{3}
}

func (x *ListWorkTaskCatalogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWorkTaskCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 指図案件カタログ
	Items []*WorkTaskCatalog `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkTaskCatalogResponse) Reset() {
	*x = ListWorkTaskCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskCatalogResponse) ProtoMessage() {}

func (x *ListWorkTaskCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskCatalogResponse.ProtoReflect.Descriptor instead.
func (*ListWorkTaskCatalogResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{4}
}

func (x *ListWorkTaskCatalogResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListWorkTaskCatalogResponse) GetItems() []*WorkTaskCatalog {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListWorkTaskCatalogResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required work_task_catalog_id
type GetWorkTaskCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件カタログID
	WorkTaskCatalogId string `protobuf:"bytes,1,opt,name=work_task_catalog_id,json=workTaskCatalogId,proto3" json:"work_task_catalog_id,omitempty"`
}

func (x *GetWorkTaskCatalogRequest) Reset() {
	*x = GetWorkTaskCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkTaskCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkTaskCatalogRequest) ProtoMessage() {}

func (x *GetWorkTaskCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkTaskCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetWorkTaskCatalogRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{5}
}

func (x *GetWorkTaskCatalogRequest) GetWorkTaskCatalogId() string {
	if x != nil {
		return x.WorkTaskCatalogId
	}
	return ""
}

// required work_task_catalog
type UpdateWorkTaskCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required work_task_catalog_id
	// required updated_at
	WorkTaskCatalog *WorkTaskCatalog `protobuf:"bytes,1,opt,name=work_task_catalog,json=workTaskCatalog,proto3" json:"work_task_catalog,omitempty"`
}

func (x *UpdateWorkTaskCatalogRequest) Reset() {
	*x = UpdateWorkTaskCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkTaskCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkTaskCatalogRequest) ProtoMessage() {}

func (x *UpdateWorkTaskCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkTaskCatalogRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkTaskCatalogRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateWorkTaskCatalogRequest) GetWorkTaskCatalog() *WorkTaskCatalog {
	if x != nil {
		return x.WorkTaskCatalog
	}
	return nil
}

// required work_task_catalog
type DeleteWorkTaskCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required work_task_catalog_id
	// required updated_at
	WorkTaskCatalog *WorkTaskCatalog `protobuf:"bytes,1,opt,name=work_task_catalog,json=workTaskCatalog,proto3" json:"work_task_catalog,omitempty"`
}

func (x *DeleteWorkTaskCatalogRequest) Reset() {
	*x = DeleteWorkTaskCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkTaskCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkTaskCatalogRequest) ProtoMessage() {}

func (x *DeleteWorkTaskCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkTaskCatalogRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkTaskCatalogRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteWorkTaskCatalogRequest) GetWorkTaskCatalog() *WorkTaskCatalog {
	if x != nil {
		return x.WorkTaskCatalog
	}
	return nil
}

// 指図案件
// required work_task
type CreateWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件データ
	WorkTask *WorkTask `protobuf:"bytes,1,opt,name=work_task,json=workTask,proto3" json:"work_task,omitempty"`
}

func (x *CreateWorkTaskRequest) Reset() {
	*x = CreateWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkTaskRequest) ProtoMessage() {}

func (x *CreateWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{8}
}

func (x *CreateWorkTaskRequest) GetWorkTask() *WorkTask {
	if x != nil {
		return x.WorkTask
	}
	return nil
}

type ListWorkTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// データフィルタ
	DataFilter *ListWorkTasksRequest_DataFilter `protobuf:"bytes,2,opt,name=data_filter,json=dataFilter,proto3" json:"data_filter,omitempty"`
}

func (x *ListWorkTasksRequest) Reset() {
	*x = ListWorkTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTasksRequest) ProtoMessage() {}

func (x *ListWorkTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTasksRequest.ProtoReflect.Descriptor instead.
func (*ListWorkTasksRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{9}
}

func (x *ListWorkTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListWorkTasksRequest) GetDataFilter() *ListWorkTasksRequest_DataFilter {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

type ListWorkTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 指図案件データ
	Items []*WorkTask `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkTasksResponse) Reset() {
	*x = ListWorkTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTasksResponse) ProtoMessage() {}

func (x *ListWorkTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTasksResponse.ProtoReflect.Descriptor instead.
func (*ListWorkTasksResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{10}
}

func (x *ListWorkTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListWorkTasksResponse) GetItems() []*WorkTask {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListWorkTasksResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// required work_task_id
type GetWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
}

func (x *GetWorkTaskRequest) Reset() {
	*x = GetWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkTaskRequest) ProtoMessage() {}

func (x *GetWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*GetWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{11}
}

func (x *GetWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

// required work_task
type UpdateWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件データ
	// required work_task_id
	// required updated_at
	WorkTask *WorkTask `protobuf:"bytes,1,opt,name=work_task,json=workTask,proto3" json:"work_task,omitempty"`
}

func (x *UpdateWorkTaskRequest) Reset() {
	*x = UpdateWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkTaskRequest) ProtoMessage() {}

func (x *UpdateWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateWorkTaskRequest) GetWorkTask() *WorkTask {
	if x != nil {
		return x.WorkTask
	}
	return nil
}

// required work_task
type DeleteWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件データ
	// required work_task_id
	// required updated_at
	WorkTask *WorkTask `protobuf:"bytes,1,opt,name=work_task,json=workTask,proto3" json:"work_task,omitempty"`
}

func (x *DeleteWorkTaskRequest) Reset() {
	*x = DeleteWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkTaskRequest) ProtoMessage() {}

func (x *DeleteWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteWorkTaskRequest) GetWorkTask() *WorkTask {
	if x != nil {
		return x.WorkTask
	}
	return nil
}

// 指図案件データ出力
// required file_format
type ExportWorkTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// work_task_ids
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// ファイルフォーマット
	FileFormat *protobuf.FileFormat `protobuf:"bytes,2,opt,name=file_format,json=fileFormat,proto3" json:"file_format,omitempty"`
}

func (x *ExportWorkTasksRequest) Reset() {
	*x = ExportWorkTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportWorkTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportWorkTasksRequest) ProtoMessage() {}

func (x *ExportWorkTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportWorkTasksRequest.ProtoReflect.Descriptor instead.
func (*ExportWorkTasksRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{14}
}

func (x *ExportWorkTasksRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ExportWorkTasksRequest) GetFileFormat() *protobuf.FileFormat {
	if x != nil {
		return x.FileFormat
	}
	return nil
}

type ExportWorkTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// アセットID（一時領域）
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ExportWorkTasksResponse) Reset() {
	*x = ExportWorkTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportWorkTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportWorkTasksResponse) ProtoMessage() {}

func (x *ExportWorkTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportWorkTasksResponse.ProtoReflect.Descriptor instead.
func (*ExportWorkTasksResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{15}
}

func (x *ExportWorkTasksResponse) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// 指図案件データ を 承認依頼 する
// required work_task_id
type ApprovalRequestWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// 承認予定担当
	ApprovalPlanStaff *protobuf.StaffReference `protobuf:"bytes,2,opt,name=approval_plan_staff,json=approvalPlanStaff,proto3" json:"approval_plan_staff,omitempty"`
	// 承認予定部門
	ApprovalPlanOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,3,opt,name=approval_plan_organization,json=approvalPlanOrganization,proto3" json:"approval_plan_organization,omitempty"`
	// 承認依頼コメント
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ApprovalRequestWorkTaskRequest) Reset() {
	*x = ApprovalRequestWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalRequestWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequestWorkTaskRequest) ProtoMessage() {}

func (x *ApprovalRequestWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequestWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*ApprovalRequestWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{16}
}

func (x *ApprovalRequestWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *ApprovalRequestWorkTaskRequest) GetApprovalPlanStaff() *protobuf.StaffReference {
	if x != nil {
		return x.ApprovalPlanStaff
	}
	return nil
}

func (x *ApprovalRequestWorkTaskRequest) GetApprovalPlanOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.ApprovalPlanOrganization
	}
	return nil
}

func (x *ApprovalRequestWorkTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ApprovalRequestWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApprovalRequestWorkTaskResponse) Reset() {
	*x = ApprovalRequestWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalRequestWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequestWorkTaskResponse) ProtoMessage() {}

func (x *ApprovalRequestWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequestWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*ApprovalRequestWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{17}
}

// 指図案件データ を 承認 する
// required work_task_id
type ApproveWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ApproveWorkTaskRequest) Reset() {
	*x = ApproveWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveWorkTaskRequest) ProtoMessage() {}

func (x *ApproveWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*ApproveWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{18}
}

func (x *ApproveWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *ApproveWorkTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ApproveWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveWorkTaskResponse) Reset() {
	*x = ApproveWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveWorkTaskResponse) ProtoMessage() {}

func (x *ApproveWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*ApproveWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{19}
}

// 指図案件データ を 却下 する
// required work_task_id
type RejectWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RejectWorkTaskRequest) Reset() {
	*x = RejectWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectWorkTaskRequest) ProtoMessage() {}

func (x *RejectWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*RejectWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{20}
}

func (x *RejectWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *RejectWorkTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type RejectWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectWorkTaskResponse) Reset() {
	*x = RejectWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectWorkTaskResponse) ProtoMessage() {}

func (x *RejectWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*RejectWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{21}
}

// 指図案件フォーマット取得
type ListWorkTaskFormatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkTaskFormatsRequest) Reset() {
	*x = ListWorkTaskFormatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskFormatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskFormatsRequest) ProtoMessage() {}

func (x *ListWorkTaskFormatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskFormatsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkTaskFormatsRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{22}
}

func (x *ListWorkTaskFormatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWorkTaskFormatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// ファイルフォーマット
	Items []*protobuf.FileFormat `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkTaskFormatsResponse) Reset() {
	*x = ListWorkTaskFormatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskFormatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskFormatsResponse) ProtoMessage() {}

func (x *ListWorkTaskFormatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskFormatsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkTaskFormatsResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{23}
}

func (x *ListWorkTaskFormatsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListWorkTaskFormatsResponse) GetItems() []*protobuf.FileFormat {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListWorkTaskFormatsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 作業案件紐付け
// required work_task_relation
type CreateWorkTaskRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 作業案件紐付けデータ
	// required type_name
	// required record_id
	// required system_category
	WorkTaskRelation *WorkTaskRelation `protobuf:"bytes,1,opt,name=work_task_relation,json=workTaskRelation,proto3" json:"work_task_relation,omitempty"`
}

func (x *CreateWorkTaskRelationRequest) Reset() {
	*x = CreateWorkTaskRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkTaskRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkTaskRelationRequest) ProtoMessage() {}

func (x *CreateWorkTaskRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkTaskRelationRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkTaskRelationRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{24}
}

func (x *CreateWorkTaskRelationRequest) GetWorkTaskRelation() *WorkTaskRelation {
	if x != nil {
		return x.WorkTaskRelation
	}
	return nil
}

// required work_task_relation
type DeleteWorkTaskRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 作業案件紐付けデータ
	// required work_task_relation_id
	// required updated_at
	WorkTaskRelation *WorkTaskRelation `protobuf:"bytes,1,opt,name=work_task_relation,json=workTaskRelation,proto3" json:"work_task_relation,omitempty"`
}

func (x *DeleteWorkTaskRelationRequest) Reset() {
	*x = DeleteWorkTaskRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkTaskRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkTaskRelationRequest) ProtoMessage() {}

func (x *DeleteWorkTaskRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkTaskRelationRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkTaskRelationRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteWorkTaskRelationRequest) GetWorkTaskRelation() *WorkTaskRelation {
	if x != nil {
		return x.WorkTaskRelation
	}
	return nil
}

type ListWorkTaskRelationContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken  string                                          `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	DataFilter *ListWorkTaskRelationContentsRequest_DataFilter `protobuf:"bytes,2,opt,name=data_filter,json=dataFilter,proto3" json:"data_filter,omitempty"`
}

func (x *ListWorkTaskRelationContentsRequest) Reset() {
	*x = ListWorkTaskRelationContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskRelationContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskRelationContentsRequest) ProtoMessage() {}

func (x *ListWorkTaskRelationContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskRelationContentsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkTaskRelationContentsRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{26}
}

func (x *ListWorkTaskRelationContentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListWorkTaskRelationContentsRequest) GetDataFilter() *ListWorkTaskRelationContentsRequest_DataFilter {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

type ListWorkTaskRelationContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 作業案件紐付けコンテンツ
	Items []*WorkTaskRelationContent `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListWorkTaskRelationContentsResponse) Reset() {
	*x = ListWorkTaskRelationContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskRelationContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskRelationContentsResponse) ProtoMessage() {}

func (x *ListWorkTaskRelationContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskRelationContentsResponse.ProtoReflect.Descriptor instead.
func (*ListWorkTaskRelationContentsResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{27}
}

func (x *ListWorkTaskRelationContentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListWorkTaskRelationContentsResponse) GetItems() []*WorkTaskRelationContent {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListWorkTaskRelationContentsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// 作業案件紐付けコンテンツ 取得
// required work_task_relation_id
type GetWorkTaskRelationContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 作業案件紐付けID
	WorkTaskRelationId string `protobuf:"bytes,1,opt,name=work_task_relation_id,json=workTaskRelationId,proto3" json:"work_task_relation_id,omitempty"`
}

func (x *GetWorkTaskRelationContentRequest) Reset() {
	*x = GetWorkTaskRelationContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkTaskRelationContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkTaskRelationContentRequest) ProtoMessage() {}

func (x *GetWorkTaskRelationContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkTaskRelationContentRequest.ProtoReflect.Descriptor instead.
func (*GetWorkTaskRelationContentRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{28}
}

func (x *GetWorkTaskRelationContentRequest) GetWorkTaskRelationId() string {
	if x != nil {
		return x.WorkTaskRelationId
	}
	return ""
}

// 指図案件データ を アクティブ にする
// required work_task_id
type ActivateWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
}

func (x *ActivateWorkTaskRequest) Reset() {
	*x = ActivateWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateWorkTaskRequest) ProtoMessage() {}

func (x *ActivateWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*ActivateWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{29}
}

func (x *ActivateWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

type ActivateWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateWorkTaskResponse) Reset() {
	*x = ActivateWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateWorkTaskResponse) ProtoMessage() {}

func (x *ActivateWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*ActivateWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{30}
}

// 指図案件データ を 破棄　する
// required work_task_id
type DiscardWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DiscardWorkTaskRequest) Reset() {
	*x = DiscardWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardWorkTaskRequest) ProtoMessage() {}

func (x *DiscardWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*DiscardWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{31}
}

func (x *DiscardWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *DiscardWorkTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type DiscardWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiscardWorkTaskResponse) Reset() {
	*x = DiscardWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardWorkTaskResponse) ProtoMessage() {}

func (x *DiscardWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*DiscardWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{32}
}

// 指図案件データ を 完了 にする
// required work_task_id
type CompleteWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
}

func (x *CompleteWorkTaskRequest) Reset() {
	*x = CompleteWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkTaskRequest) ProtoMessage() {}

func (x *CompleteWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*CompleteWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{33}
}

func (x *CompleteWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

type CompleteWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteWorkTaskResponse) Reset() {
	*x = CompleteWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkTaskResponse) ProtoMessage() {}

func (x *CompleteWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*CompleteWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{34}
}

// 指図案件データ を 未完了 にする
// required work_task_id
type UncompleteWorkTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
}

func (x *UncompleteWorkTaskRequest) Reset() {
	*x = UncompleteWorkTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompleteWorkTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompleteWorkTaskRequest) ProtoMessage() {}

func (x *UncompleteWorkTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompleteWorkTaskRequest.ProtoReflect.Descriptor instead.
func (*UncompleteWorkTaskRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{35}
}

func (x *UncompleteWorkTaskRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

type UncompleteWorkTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UncompleteWorkTaskResponse) Reset() {
	*x = UncompleteWorkTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompleteWorkTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompleteWorkTaskResponse) ProtoMessage() {}

func (x *UncompleteWorkTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompleteWorkTaskResponse.ProtoReflect.Descriptor instead.
func (*UncompleteWorkTaskResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{36}
}

// 指図案件チケット を 完了 にする
// required work_task_id
type CompleteWorkTaskTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// 作業結果メモ
	ResultRemarks string `protobuf:"bytes,2,opt,name=result_remarks,json=resultRemarks,proto3" json:"result_remarks,omitempty"`
	// 作業結果ファイルリスト
	ResultAttachments []*protobuf.Attachment `protobuf:"bytes,3,rep,name=result_attachments,json=resultAttachments,proto3" json:"result_attachments,omitempty"`
}

func (x *CompleteWorkTaskTicketRequest) Reset() {
	*x = CompleteWorkTaskTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkTaskTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkTaskTicketRequest) ProtoMessage() {}

func (x *CompleteWorkTaskTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkTaskTicketRequest.ProtoReflect.Descriptor instead.
func (*CompleteWorkTaskTicketRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{37}
}

func (x *CompleteWorkTaskTicketRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *CompleteWorkTaskTicketRequest) GetResultRemarks() string {
	if x != nil {
		return x.ResultRemarks
	}
	return ""
}

func (x *CompleteWorkTaskTicketRequest) GetResultAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.ResultAttachments
	}
	return nil
}

type CompleteWorkTaskTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompleteWorkTaskTicketResponse) Reset() {
	*x = CompleteWorkTaskTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteWorkTaskTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteWorkTaskTicketResponse) ProtoMessage() {}

func (x *CompleteWorkTaskTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteWorkTaskTicketResponse.ProtoReflect.Descriptor instead.
func (*CompleteWorkTaskTicketResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{38}
}

// 指図案件チケット を 未完了 にする
// required work_task_id
type UncompleteWorkTaskTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *UncompleteWorkTaskTicketRequest) Reset() {
	*x = UncompleteWorkTaskTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompleteWorkTaskTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompleteWorkTaskTicketRequest) ProtoMessage() {}

func (x *UncompleteWorkTaskTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompleteWorkTaskTicketRequest.ProtoReflect.Descriptor instead.
func (*UncompleteWorkTaskTicketRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{39}
}

func (x *UncompleteWorkTaskTicketRequest) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *UncompleteWorkTaskTicketRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type UncompleteWorkTaskTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UncompleteWorkTaskTicketResponse) Reset() {
	*x = UncompleteWorkTaskTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompleteWorkTaskTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompleteWorkTaskTicketResponse) ProtoMessage() {}

func (x *UncompleteWorkTaskTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompleteWorkTaskTicketResponse.ProtoReflect.Descriptor instead.
func (*UncompleteWorkTaskTicketResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{40}
}

// 指図案件データ
type WorkTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指図案件ID
	WorkTaskId string `protobuf:"bytes,1,opt,name=work_task_id,json=workTaskId,proto3" json:"work_task_id,omitempty"`
	// システム通知先
	SystemNotificationUsers []*protobuf.UserReference `protobuf:"bytes,2,rep,name=system_notification_users,json=systemNotificationUsers,proto3" json:"system_notification_users,omitempty"`
	// readonly 指図案件番号
	WorkTaskAutoName int64 `protobuf:"varint,3,opt,name=work_task_auto_name,json=workTaskAutoName,proto3" json:"work_task_auto_name,omitempty"`
	// readonly ステータス
	// 名称マスタにおける種別 A2010001 (指図案件ステータス) を参照
	Status *protobuf.NameOption `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// readonly 完了
	Completed bool `protobuf:"varint,5,opt,name=completed,proto3" json:"completed,omitempty"`
	// 件名
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// ASAP
	Asap bool `protobuf:"varint,7,opt,name=asap,proto3" json:"asap,omitempty"`
	// ASAP理由
	AsapComment string `protobuf:"bytes,8,opt,name=asap_comment,json=asapComment,proto3" json:"asap_comment,omitempty"`
	// 指図案件カタログ
	WorkTaskCatalog *WorkTaskCatalog `protobuf:"bytes,9,opt,name=work_task_catalog,json=workTaskCatalog,proto3" json:"work_task_catalog,omitempty"`
	// readonly 指図案件カタログID
	WorkTaskCatalogId string `protobuf:"bytes,10,opt,name=work_task_catalog_id,json=workTaskCatalogId,proto3" json:"work_task_catalog_id,omitempty"`
	// 作業依頼内容
	Contents string `protobuf:"bytes,11,opt,name=contents,proto3" json:"contents,omitempty"`
	// 承認必要
	Approval bool `protobuf:"varint,12,opt,name=approval,proto3" json:"approval,omitempty"`
	// 管理部門
	ManagementOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,13,opt,name=management_organization,json=managementOrganization,proto3" json:"management_organization,omitempty"`
	// 管理担当
	ManagementStaff *protobuf.StaffReference `protobuf:"bytes,14,opt,name=management_staff,json=managementStaff,proto3" json:"management_staff,omitempty"`
	// readonly 管理担当変更情報
	ManagementStaffChangeProcess *Process `protobuf:"bytes,15,opt,name=management_staff_change_process,json=managementStaffChangeProcess,proto3" json:"management_staff_change_process,omitempty"`
	// 作業部門
	WorkOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,16,opt,name=work_organization,json=workOrganization,proto3" json:"work_organization,omitempty"`
	// 作業担当
	WorkStaff *protobuf.StaffReference `protobuf:"bytes,17,opt,name=work_staff,json=workStaff,proto3" json:"work_staff,omitempty"`
	// readonly 作業担当変更情報
	WorkStaffChangeProcess *Process `protobuf:"bytes,18,opt,name=work_staff_change_process,json=workStaffChangeProcess,proto3" json:"work_staff_change_process,omitempty"`
	// 依頼メモ
	RequestRemarks string `protobuf:"bytes,19,opt,name=request_remarks,json=requestRemarks,proto3" json:"request_remarks,omitempty"`
	// 依頼ファイルリスト
	RequestAttachments []*protobuf.Attachment `protobuf:"bytes,20,rep,name=request_attachments,json=requestAttachments,proto3" json:"request_attachments,omitempty"`
	// readonly 作業依頼日
	RequestedAt int64 `protobuf:"varint,21,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	// readonly 作業依頼ユーザー
	RequestedBy *protobuf.EmbeddedUser `protobuf:"bytes,22,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	// 作業情報
	Ticket *Ticket `protobuf:"bytes,23,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// readonly 作業再開情報
	TicketRestartProcess *Process `protobuf:"bytes,24,opt,name=ticket_restart_process,json=ticketRestartProcess,proto3" json:"ticket_restart_process,omitempty"`
	// readonly 破棄情報
	DiscardProcess *Process `protobuf:"bytes,25,opt,name=discard_process,json=discardProcess,proto3" json:"discard_process,omitempty"`
	// reeadonly 案件完了情報
	CompleteProcess *Process `protobuf:"bytes,26,opt,name=complete_process,json=completeProcess,proto3" json:"complete_process,omitempty"`
	// 案件完了期日
	WorktaskDueDateDt *protobuf.Datetime `protobuf:"bytes,27,opt,name=worktask_due_date_dt,json=worktaskDueDateDt,proto3" json:"worktask_due_date_dt,omitempty"`
	// readonly 案件完了期日変更情報
	WorktaskDueDateChangeProcess *Process `protobuf:"bytes,28,opt,name=worktask_due_date_change_process,json=worktaskDueDateChangeProcess,proto3" json:"worktask_due_date_change_process,omitempty"`
	// 作業完了期日
	WorktaskTicketDueDateDt *protobuf.Datetime `protobuf:"bytes,29,opt,name=worktask_ticket_due_date_dt,json=worktaskTicketDueDateDt,proto3" json:"worktask_ticket_due_date_dt,omitempty"`
	// readonly 作業完了期日変更情報
	WorktaskTicketDueDateChangeProcess *Process `protobuf:"bytes,30,opt,name=worktask_ticket_due_date_change_process,json=worktaskTicketDueDateChangeProcess,proto3" json:"worktask_ticket_due_date_change_process,omitempty"`
	// 作業完了予定日
	WorktaskTicketScheduledDateDt *protobuf.Datetime `protobuf:"bytes,31,opt,name=worktask_ticket_scheduled_date_dt,json=worktaskTicketScheduledDateDt,proto3" json:"worktask_ticket_scheduled_date_dt,omitempty"`
	// readonly 作業完了予定日変更情報
	WorktaskTicketScheduledDateChangeProcess *Process `protobuf:"bytes,32,opt,name=worktask_ticket_scheduled_date_change_process,json=worktaskTicketScheduledDateChangeProcess,proto3" json:"worktask_ticket_scheduled_date_change_process,omitempty"`
	// readonly 承認ステータス
	ApprovalStatus *protobuf.NameOption `protobuf:"bytes,33,opt,name=approval_status,json=approvalStatus,proto3" json:"approval_status,omitempty"`
	// readonly 承認依頼情報
	ApprovalRequest *ApprovalRequest `protobuf:"bytes,34,opt,name=approval_request,json=approvalRequest,proto3" json:"approval_request,omitempty"`
	// readonly 承認実績情報
	ApprovalResult *ApprovalResult `protobuf:"bytes,35,opt,name=approval_result,json=approvalResult,proto3" json:"approval_result,omitempty"`
	// created_at
	CreatedAt int64 `protobuf:"varint,36,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at
	UpdatedAt int64 `protobuf:"varint,37,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// deleted_at
	DeletedAt int64 `protobuf:"varint,38,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *WorkTask) Reset() {
	*x = WorkTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkTask) ProtoMessage() {}

func (x *WorkTask) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkTask.ProtoReflect.Descriptor instead.
func (*WorkTask) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{41}
}

func (x *WorkTask) GetWorkTaskId() string {
	if x != nil {
		return x.WorkTaskId
	}
	return ""
}

func (x *WorkTask) GetSystemNotificationUsers() []*protobuf.UserReference {
	if x != nil {
		return x.SystemNotificationUsers
	}
	return nil
}

func (x *WorkTask) GetWorkTaskAutoName() int64 {
	if x != nil {
		return x.WorkTaskAutoName
	}
	return 0
}

func (x *WorkTask) GetStatus() *protobuf.NameOption {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *WorkTask) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *WorkTask) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *WorkTask) GetAsap() bool {
	if x != nil {
		return x.Asap
	}
	return false
}

func (x *WorkTask) GetAsapComment() string {
	if x != nil {
		return x.AsapComment
	}
	return ""
}

func (x *WorkTask) GetWorkTaskCatalog() *WorkTaskCatalog {
	if x != nil {
		return x.WorkTaskCatalog
	}
	return nil
}

func (x *WorkTask) GetWorkTaskCatalogId() string {
	if x != nil {
		return x.WorkTaskCatalogId
	}
	return ""
}

func (x *WorkTask) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *WorkTask) GetApproval() bool {
	if x != nil {
		return x.Approval
	}
	return false
}

func (x *WorkTask) GetManagementOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.ManagementOrganization
	}
	return nil
}

func (x *WorkTask) GetManagementStaff() *protobuf.StaffReference {
	if x != nil {
		return x.ManagementStaff
	}
	return nil
}

func (x *WorkTask) GetManagementStaffChangeProcess() *Process {
	if x != nil {
		return x.ManagementStaffChangeProcess
	}
	return nil
}

func (x *WorkTask) GetWorkOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.WorkOrganization
	}
	return nil
}

func (x *WorkTask) GetWorkStaff() *protobuf.StaffReference {
	if x != nil {
		return x.WorkStaff
	}
	return nil
}

func (x *WorkTask) GetWorkStaffChangeProcess() *Process {
	if x != nil {
		return x.WorkStaffChangeProcess
	}
	return nil
}

func (x *WorkTask) GetRequestRemarks() string {
	if x != nil {
		return x.RequestRemarks
	}
	return ""
}

func (x *WorkTask) GetRequestAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.RequestAttachments
	}
	return nil
}

func (x *WorkTask) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *WorkTask) GetRequestedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *WorkTask) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *WorkTask) GetTicketRestartProcess() *Process {
	if x != nil {
		return x.TicketRestartProcess
	}
	return nil
}

func (x *WorkTask) GetDiscardProcess() *Process {
	if x != nil {
		return x.DiscardProcess
	}
	return nil
}

func (x *WorkTask) GetCompleteProcess() *Process {
	if x != nil {
		return x.CompleteProcess
	}
	return nil
}

func (x *WorkTask) GetWorktaskDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.WorktaskDueDateDt
	}
	return nil
}

func (x *WorkTask) GetWorktaskDueDateChangeProcess() *Process {
	if x != nil {
		return x.WorktaskDueDateChangeProcess
	}
	return nil
}

func (x *WorkTask) GetWorktaskTicketDueDateDt() *protobuf.Datetime {
	if x != nil {
		return x.WorktaskTicketDueDateDt
	}
	return nil
}

func (x *WorkTask) GetWorktaskTicketDueDateChangeProcess() *Process {
	if x != nil {
		return x.WorktaskTicketDueDateChangeProcess
	}
	return nil
}

func (x *WorkTask) GetWorktaskTicketScheduledDateDt() *protobuf.Datetime {
	if x != nil {
		return x.WorktaskTicketScheduledDateDt
	}
	return nil
}

func (x *WorkTask) GetWorktaskTicketScheduledDateChangeProcess() *Process {
	if x != nil {
		return x.WorktaskTicketScheduledDateChangeProcess
	}
	return nil
}

func (x *WorkTask) GetApprovalStatus() *protobuf.NameOption {
	if x != nil {
		return x.ApprovalStatus
	}
	return nil
}

func (x *WorkTask) GetApprovalRequest() *ApprovalRequest {
	if x != nil {
		return x.ApprovalRequest
	}
	return nil
}

func (x *WorkTask) GetApprovalResult() *ApprovalResult {
	if x != nil {
		return x.ApprovalResult
	}
	return nil
}

func (x *WorkTask) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WorkTask) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *WorkTask) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

// 承認依頼
type ApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 承認依頼日時
	RequestedAt int64 `protobuf:"varint,1,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	// 承認依頼ユーザー
	RequestedBy *protobuf.EmbeddedUser `protobuf:"bytes,2,opt,name=requested_by,json=requestedBy,proto3" json:"requested_by,omitempty"`
	// 承認依頼担当者
	RequestedStaff *protobuf.StaffReference `protobuf:"bytes,3,opt,name=requested_staff,json=requestedStaff,proto3" json:"requested_staff,omitempty"`
	// 承認依頼部門
	RequestedOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,4,opt,name=requested_organization,json=requestedOrganization,proto3" json:"requested_organization,omitempty"`
	// 承認担当者（予定）
	ApprovalPlanStaff *protobuf.StaffReference `protobuf:"bytes,5,opt,name=approval_plan_staff,json=approvalPlanStaff,proto3" json:"approval_plan_staff,omitempty"`
	// 承認部門（予定）
	ApprovalPlanOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,6,opt,name=approval_plan_organization,json=approvalPlanOrganization,proto3" json:"approval_plan_organization,omitempty"`
	// 承認依頼コメント
	RequestedComment string `protobuf:"bytes,7,opt,name=requested_comment,json=requestedComment,proto3" json:"requested_comment,omitempty"`
}

func (x *ApprovalRequest) Reset() {
	*x = ApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalRequest) ProtoMessage() {}

func (x *ApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalRequest.ProtoReflect.Descriptor instead.
func (*ApprovalRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{42}
}

func (x *ApprovalRequest) GetRequestedAt() int64 {
	if x != nil {
		return x.RequestedAt
	}
	return 0
}

func (x *ApprovalRequest) GetRequestedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.RequestedBy
	}
	return nil
}

func (x *ApprovalRequest) GetRequestedStaff() *protobuf.StaffReference {
	if x != nil {
		return x.RequestedStaff
	}
	return nil
}

func (x *ApprovalRequest) GetRequestedOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.RequestedOrganization
	}
	return nil
}

func (x *ApprovalRequest) GetApprovalPlanStaff() *protobuf.StaffReference {
	if x != nil {
		return x.ApprovalPlanStaff
	}
	return nil
}

func (x *ApprovalRequest) GetApprovalPlanOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.ApprovalPlanOrganization
	}
	return nil
}

func (x *ApprovalRequest) GetRequestedComment() string {
	if x != nil {
		return x.RequestedComment
	}
	return ""
}

// 承認実績
type ApprovalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 承認実績日時
	DecidedAt int64 `protobuf:"varint,1,opt,name=decided_at,json=decidedAt,proto3" json:"decided_at,omitempty"`
	// 承認実績ユーザー
	DecidedBy *protobuf.EmbeddedUser `protobuf:"bytes,2,opt,name=decided_by,json=decidedBy,proto3" json:"decided_by,omitempty"`
	// 承認担当者（実績）
	DecidedStaff *protobuf.StaffReference `protobuf:"bytes,3,opt,name=decided_staff,json=decidedStaff,proto3" json:"decided_staff,omitempty"`
	// 承認部門（実績）
	DecidedOrganization *protobuf.ComponentUnitReference `protobuf:"bytes,4,opt,name=decided_organization,json=decidedOrganization,proto3" json:"decided_organization,omitempty"`
	// 承認実績コメント
	DecidedComment string `protobuf:"bytes,5,opt,name=decided_comment,json=decidedComment,proto3" json:"decided_comment,omitempty"`
}

func (x *ApprovalResult) Reset() {
	*x = ApprovalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalResult) ProtoMessage() {}

func (x *ApprovalResult) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalResult.ProtoReflect.Descriptor instead.
func (*ApprovalResult) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{43}
}

func (x *ApprovalResult) GetDecidedAt() int64 {
	if x != nil {
		return x.DecidedAt
	}
	return 0
}

func (x *ApprovalResult) GetDecidedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.DecidedBy
	}
	return nil
}

func (x *ApprovalResult) GetDecidedStaff() *protobuf.StaffReference {
	if x != nil {
		return x.DecidedStaff
	}
	return nil
}

func (x *ApprovalResult) GetDecidedOrganization() *protobuf.ComponentUnitReference {
	if x != nil {
		return x.DecidedOrganization
	}
	return nil
}

func (x *ApprovalResult) GetDecidedComment() string {
	if x != nil {
		return x.DecidedComment
	}
	return ""
}

// 作業情報
type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 作業メモ
	Remarks string `protobuf:"bytes,1,opt,name=remarks,proto3" json:"remarks,omitempty"`
	// 作業結果メモ
	ResultRemarks string `protobuf:"bytes,2,opt,name=result_remarks,json=resultRemarks,proto3" json:"result_remarks,omitempty"`
	// 作業結果ファイルリスト
	ResultAttachments []*protobuf.Attachment `protobuf:"bytes,3,rep,name=result_attachments,json=resultAttachments,proto3" json:"result_attachments,omitempty"`
	// 作業完了日時
	CompletedAt int64 `protobuf:"varint,4,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// 作業完了ユーザー
	CompletedBy *protobuf.EmbeddedUser `protobuf:"bytes,5,opt,name=completed_by,json=completedBy,proto3" json:"completed_by,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{44}
}

func (x *Ticket) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *Ticket) GetResultRemarks() string {
	if x != nil {
		return x.ResultRemarks
	}
	return ""
}

func (x *Ticket) GetResultAttachments() []*protobuf.Attachment {
	if x != nil {
		return x.ResultAttachments
	}
	return nil
}

func (x *Ticket) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Ticket) GetCompletedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.CompletedBy
	}
	return nil
}

// 実行情報
type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 実行日時
	ProcessedAt int64 `protobuf:"varint,1,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	// 実行ユーザー
	ProcessedBy *protobuf.EmbeddedUser `protobuf:"bytes,2,opt,name=processed_by,json=processedBy,proto3" json:"processed_by,omitempty"`
	// 実行コメント
	ProcessedComment string `protobuf:"bytes,3,opt,name=processed_comment,json=processedComment,proto3" json:"processed_comment,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{45}
}

func (x *Process) GetProcessedAt() int64 {
	if x != nil {
		return x.ProcessedAt
	}
	return 0
}

func (x *Process) GetProcessedBy() *protobuf.EmbeddedUser {
	if x != nil {
		return x.ProcessedBy
	}
	return nil
}

func (x *Process) GetProcessedComment() string {
	if x != nil {
		return x.ProcessedComment
	}
	return ""
}

type UncompletedListWorkTaskTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UncompletedListWorkTaskTicketsRequest) Reset() {
	*x = UncompletedListWorkTaskTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompletedListWorkTaskTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompletedListWorkTaskTicketsRequest) ProtoMessage() {}

func (x *UncompletedListWorkTaskTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompletedListWorkTaskTicketsRequest.ProtoReflect.Descriptor instead.
func (*UncompletedListWorkTaskTicketsRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{46}
}

func (x *UncompletedListWorkTaskTicketsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UncompletedListWorkTaskTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 指図案件データ
	Items []*WorkTask `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UncompletedListWorkTaskTicketsResponse) Reset() {
	*x = UncompletedListWorkTaskTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompletedListWorkTaskTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompletedListWorkTaskTicketsResponse) ProtoMessage() {}

func (x *UncompletedListWorkTaskTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompletedListWorkTaskTicketsResponse.ProtoReflect.Descriptor instead.
func (*UncompletedListWorkTaskTicketsResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{47}
}

func (x *UncompletedListWorkTaskTicketsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UncompletedListWorkTaskTicketsResponse) GetItems() []*WorkTask {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UncompletedListWorkTaskTicketsResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UncompletedListWorkTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ページトークン
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UncompletedListWorkTasksRequest) Reset() {
	*x = UncompletedListWorkTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompletedListWorkTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompletedListWorkTasksRequest) ProtoMessage() {}

func (x *UncompletedListWorkTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompletedListWorkTasksRequest.ProtoReflect.Descriptor instead.
func (*UncompletedListWorkTasksRequest) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{48}
}

func (x *UncompletedListWorkTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type UncompletedListWorkTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 件数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 指図案件データ
	Items []*WorkTask `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// ページトークン
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *UncompletedListWorkTasksResponse) Reset() {
	*x = UncompletedListWorkTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncompletedListWorkTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncompletedListWorkTasksResponse) ProtoMessage() {}

func (x *UncompletedListWorkTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncompletedListWorkTasksResponse.ProtoReflect.Descriptor instead.
func (*UncompletedListWorkTasksResponse) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{49}
}

func (x *UncompletedListWorkTasksResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UncompletedListWorkTasksResponse) GetItems() []*WorkTask {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UncompletedListWorkTasksResponse) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListWorkTasksRequest_DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ステータス
	//
	// Implementation Note:
	//
	//	status.code が渡され、BEで名称マスタを取得する（種別 category_name: "A2010001"）
	//	status.system_nameが "B06"案件完了 を含まない場合、completed = false で indexFilterをかける
	StatusCodes []string `protobuf:"bytes,1,rep,name=status_codes,json=statusCodes,proto3" json:"status_codes,omitempty"`
	// 指図案件カタログID
	WorkTaskCatalogIds []string `protobuf:"bytes,2,rep,name=work_task_catalog_ids,json=workTaskCatalogIds,proto3" json:"work_task_catalog_ids,omitempty"`
	// 作業依頼日 開始
	RequestedAtFrom int64 `protobuf:"varint,3,opt,name=requested_at_from,json=requestedAtFrom,proto3" json:"requested_at_from,omitempty"`
	// 作業依頼日 終了
	RequestedAtTo int64 `protobuf:"varint,4,opt,name=requested_at_to,json=requestedAtTo,proto3" json:"requested_at_to,omitempty"`
}

func (x *ListWorkTasksRequest_DataFilter) Reset() {
	*x = ListWorkTasksRequest_DataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTasksRequest_DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTasksRequest_DataFilter) ProtoMessage() {}

func (x *ListWorkTasksRequest_DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTasksRequest_DataFilter.ProtoReflect.Descriptor instead.
func (*ListWorkTasksRequest_DataFilter) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListWorkTasksRequest_DataFilter) GetStatusCodes() []string {
	if x != nil {
		return x.StatusCodes
	}
	return nil
}

func (x *ListWorkTasksRequest_DataFilter) GetWorkTaskCatalogIds() []string {
	if x != nil {
		return x.WorkTaskCatalogIds
	}
	return nil
}

func (x *ListWorkTasksRequest_DataFilter) GetRequestedAtFrom() int64 {
	if x != nil {
		return x.RequestedAtFrom
	}
	return 0
}

func (x *ListWorkTasksRequest_DataFilter) GetRequestedAtTo() int64 {
	if x != nil {
		return x.RequestedAtTo
	}
	return 0
}

type ListWorkTaskRelationContentsRequest_DataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 親指図案件ID
	LinkedWorkTaskIds []string `protobuf:"bytes,1,rep,name=linked_work_task_ids,json=linkedWorkTaskIds,proto3" json:"linked_work_task_ids,omitempty"`
	// type_name
	TypeName string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// record_id
	RecordIds []string `protobuf:"bytes,3,rep,name=record_ids,json=recordIds,proto3" json:"record_ids,omitempty"`
}

func (x *ListWorkTaskRelationContentsRequest_DataFilter) Reset() {
	*x = ListWorkTaskRelationContentsRequest_DataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worktask_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkTaskRelationContentsRequest_DataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkTaskRelationContentsRequest_DataFilter) ProtoMessage() {}

func (x *ListWorkTaskRelationContentsRequest_DataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_worktask_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkTaskRelationContentsRequest_DataFilter.ProtoReflect.Descriptor instead.
func (*ListWorkTaskRelationContentsRequest_DataFilter) Descriptor() ([]byte, []int) {
	return file_worktask_proto_rawDescGZIP(), []int{26, 0}
}

func (x *ListWorkTaskRelationContentsRequest_DataFilter) GetLinkedWorkTaskIds() []string {
	if x != nil {
		return x.LinkedWorkTaskIds
	}
	return nil
}

func (x *ListWorkTaskRelationContentsRequest_DataFilter) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListWorkTaskRelationContentsRequest_DataFilter) GetRecordIds() []string {
	if x != nil {
		return x.RecordIds
	}
	return nil
}

var File_worktask_proto protoreflect.FileDescriptor

var file_worktask_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d, 0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53,
	0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x22, 0x3c, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x73, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x56, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xc8, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x58, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0xb6, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x6f,
	0x22, 0x84, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x36, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x56, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x56, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x22,
	0x61, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x34, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x1e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x5e, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x77, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x67, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x79, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0xa2,
	0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x17, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d,
	0x0a, 0x19, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x1c, 0x0a,
	0x1a, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1d,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a,
	0x1f, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x0a, 0x20,
	0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd2, 0x13, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x61, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x73, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x73, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x11,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x4d, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xd2, 0xb8, 0x02, 0x18, 0x0a, 0x16, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x17, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x66, 0x0a, 0x1f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x66, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x4d, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x5a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x16, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x66, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x45, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x42, 0x14, 0xd2, 0xb8, 0x02, 0x10,
	0x0a, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x55, 0x0a, 0x16, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x14, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a,
	0x14, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x44, 0x74, 0x12, 0x67, 0x0a, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x1c, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x1b, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64,
	0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x44, 0x74, 0x12, 0x74, 0x0a,
	0x27, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x22, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a, 0x21, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x44,
	0x74, 0x12, 0x80, 0x01, 0x0a, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x28, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe2, 0x03, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x57, 0x0a, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x5e, 0x0a,
	0x1a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x0a,
	0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x66, 0x66, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x66, 0x66, 0x12, 0x53, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xec, 0x01, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x6c, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x94, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x25, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95,
	0x01, 0x0a, 0x26, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x1f, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x20, 0x55, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x9c, 0x18, 0x0a, 0x0f, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x12, 0x2b,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x80, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x31, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x76, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x65,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x6c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x61, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x72, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x75, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d,
	0x01, 0x0a, 0x18, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0xcb, 0x02, 0x0a, 0x17, 0x57, 0x6f,
	0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x1e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x55, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x37, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_worktask_proto_rawDescOnce sync.Once
	file_worktask_proto_rawDescData = file_worktask_proto_rawDesc
)

func file_worktask_proto_rawDescGZIP() []byte {
	file_worktask_proto_rawDescOnce.Do(func() {
		file_worktask_proto_rawDescData = protoimpl.X.CompressGZIP(file_worktask_proto_rawDescData)
	})
	return file_worktask_proto_rawDescData
}

var file_worktask_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_worktask_proto_goTypes = []interface{}{
	(*ListHistorysRequest)(nil),                            // 0: mtechnavi.api.worktask.ListHistorysRequest
	(*ListHistorysResponse)(nil),                           // 1: mtechnavi.api.worktask.ListHistorysResponse
	(*CreateWorkTaskCatalogRequest)(nil),                   // 2: mtechnavi.api.worktask.CreateWorkTaskCatalogRequest
	(*ListWorkTaskCatalogsRequest)(nil),                    // 3: mtechnavi.api.worktask.ListWorkTaskCatalogsRequest
	(*ListWorkTaskCatalogResponse)(nil),                    // 4: mtechnavi.api.worktask.ListWorkTaskCatalogResponse
	(*GetWorkTaskCatalogRequest)(nil),                      // 5: mtechnavi.api.worktask.GetWorkTaskCatalogRequest
	(*UpdateWorkTaskCatalogRequest)(nil),                   // 6: mtechnavi.api.worktask.UpdateWorkTaskCatalogRequest
	(*DeleteWorkTaskCatalogRequest)(nil),                   // 7: mtechnavi.api.worktask.DeleteWorkTaskCatalogRequest
	(*CreateWorkTaskRequest)(nil),                          // 8: mtechnavi.api.worktask.CreateWorkTaskRequest
	(*ListWorkTasksRequest)(nil),                           // 9: mtechnavi.api.worktask.ListWorkTasksRequest
	(*ListWorkTasksResponse)(nil),                          // 10: mtechnavi.api.worktask.ListWorkTasksResponse
	(*GetWorkTaskRequest)(nil),                             // 11: mtechnavi.api.worktask.GetWorkTaskRequest
	(*UpdateWorkTaskRequest)(nil),                          // 12: mtechnavi.api.worktask.UpdateWorkTaskRequest
	(*DeleteWorkTaskRequest)(nil),                          // 13: mtechnavi.api.worktask.DeleteWorkTaskRequest
	(*ExportWorkTasksRequest)(nil),                         // 14: mtechnavi.api.worktask.ExportWorkTasksRequest
	(*ExportWorkTasksResponse)(nil),                        // 15: mtechnavi.api.worktask.ExportWorkTasksResponse
	(*ApprovalRequestWorkTaskRequest)(nil),                 // 16: mtechnavi.api.worktask.ApprovalRequestWorkTaskRequest
	(*ApprovalRequestWorkTaskResponse)(nil),                // 17: mtechnavi.api.worktask.ApprovalRequestWorkTaskResponse
	(*ApproveWorkTaskRequest)(nil),                         // 18: mtechnavi.api.worktask.ApproveWorkTaskRequest
	(*ApproveWorkTaskResponse)(nil),                        // 19: mtechnavi.api.worktask.ApproveWorkTaskResponse
	(*RejectWorkTaskRequest)(nil),                          // 20: mtechnavi.api.worktask.RejectWorkTaskRequest
	(*RejectWorkTaskResponse)(nil),                         // 21: mtechnavi.api.worktask.RejectWorkTaskResponse
	(*ListWorkTaskFormatsRequest)(nil),                     // 22: mtechnavi.api.worktask.ListWorkTaskFormatsRequest
	(*ListWorkTaskFormatsResponse)(nil),                    // 23: mtechnavi.api.worktask.ListWorkTaskFormatsResponse
	(*CreateWorkTaskRelationRequest)(nil),                  // 24: mtechnavi.api.worktask.CreateWorkTaskRelationRequest
	(*DeleteWorkTaskRelationRequest)(nil),                  // 25: mtechnavi.api.worktask.DeleteWorkTaskRelationRequest
	(*ListWorkTaskRelationContentsRequest)(nil),            // 26: mtechnavi.api.worktask.ListWorkTaskRelationContentsRequest
	(*ListWorkTaskRelationContentsResponse)(nil),           // 27: mtechnavi.api.worktask.ListWorkTaskRelationContentsResponse
	(*GetWorkTaskRelationContentRequest)(nil),              // 28: mtechnavi.api.worktask.GetWorkTaskRelationContentRequest
	(*ActivateWorkTaskRequest)(nil),                        // 29: mtechnavi.api.worktask.ActivateWorkTaskRequest
	(*ActivateWorkTaskResponse)(nil),                       // 30: mtechnavi.api.worktask.ActivateWorkTaskResponse
	(*DiscardWorkTaskRequest)(nil),                         // 31: mtechnavi.api.worktask.DiscardWorkTaskRequest
	(*DiscardWorkTaskResponse)(nil),                        // 32: mtechnavi.api.worktask.DiscardWorkTaskResponse
	(*CompleteWorkTaskRequest)(nil),                        // 33: mtechnavi.api.worktask.CompleteWorkTaskRequest
	(*CompleteWorkTaskResponse)(nil),                       // 34: mtechnavi.api.worktask.CompleteWorkTaskResponse
	(*UncompleteWorkTaskRequest)(nil),                      // 35: mtechnavi.api.worktask.UncompleteWorkTaskRequest
	(*UncompleteWorkTaskResponse)(nil),                     // 36: mtechnavi.api.worktask.UncompleteWorkTaskResponse
	(*CompleteWorkTaskTicketRequest)(nil),                  // 37: mtechnavi.api.worktask.CompleteWorkTaskTicketRequest
	(*CompleteWorkTaskTicketResponse)(nil),                 // 38: mtechnavi.api.worktask.CompleteWorkTaskTicketResponse
	(*UncompleteWorkTaskTicketRequest)(nil),                // 39: mtechnavi.api.worktask.UncompleteWorkTaskTicketRequest
	(*UncompleteWorkTaskTicketResponse)(nil),               // 40: mtechnavi.api.worktask.UncompleteWorkTaskTicketResponse
	(*WorkTask)(nil),                                       // 41: mtechnavi.api.worktask.WorkTask
	(*ApprovalRequest)(nil),                                // 42: mtechnavi.api.worktask.ApprovalRequest
	(*ApprovalResult)(nil),                                 // 43: mtechnavi.api.worktask.ApprovalResult
	(*Ticket)(nil),                                         // 44: mtechnavi.api.worktask.Ticket
	(*Process)(nil),                                        // 45: mtechnavi.api.worktask.Process
	(*UncompletedListWorkTaskTicketsRequest)(nil),          // 46: mtechnavi.api.worktask.UncompletedListWorkTaskTicketsRequest
	(*UncompletedListWorkTaskTicketsResponse)(nil),         // 47: mtechnavi.api.worktask.UncompletedListWorkTaskTicketsResponse
	(*UncompletedListWorkTasksRequest)(nil),                // 48: mtechnavi.api.worktask.UncompletedListWorkTasksRequest
	(*UncompletedListWorkTasksResponse)(nil),               // 49: mtechnavi.api.worktask.UncompletedListWorkTasksResponse
	(*ListWorkTasksRequest_DataFilter)(nil),                // 50: mtechnavi.api.worktask.ListWorkTasksRequest.DataFilter
	(*ListWorkTaskRelationContentsRequest_DataFilter)(nil), // 51: mtechnavi.api.worktask.ListWorkTaskRelationContentsRequest.DataFilter
	(*History)(nil),                                        // 52: mtechnavi.api.worktask.History
	(*WorkTaskCatalog)(nil),                                // 53: mtechnavi.api.worktask.WorkTaskCatalog
	(*protobuf.FileFormat)(nil),                            // 54: sharelib.FileFormat
	(*protobuf.StaffReference)(nil),                        // 55: sharelib.StaffReference
	(*protobuf.ComponentUnitReference)(nil),                // 56: sharelib.ComponentUnitReference
	(*WorkTaskRelation)(nil),                               // 57: mtechnavi.api.worktask.WorkTaskRelation
	(*WorkTaskRelationContent)(nil),                        // 58: mtechnavi.api.worktask.WorkTaskRelationContent
	(*protobuf.Attachment)(nil),                            // 59: sharelib.Attachment
	(*protobuf.UserReference)(nil),                         // 60: sharelib.UserReference
	(*protobuf.NameOption)(nil),                            // 61: sharelib.NameOption
	(*protobuf.EmbeddedUser)(nil),                          // 62: sharelib.EmbeddedUser
	(*protobuf.Datetime)(nil),                              // 63: sharelib.Datetime
	(*emptypb.Empty)(nil),                                  // 64: google.protobuf.Empty
}
var file_worktask_proto_depIdxs = []int32{
	52, // 0: mtechnavi.api.worktask.ListHistorysResponse.items:type_name -> mtechnavi.api.worktask.History
	53, // 1: mtechnavi.api.worktask.CreateWorkTaskCatalogRequest.work_task_catalog:type_name -> mtechnavi.api.worktask.WorkTaskCatalog
	53, // 2: mtechnavi.api.worktask.ListWorkTaskCatalogResponse.items:type_name -> mtechnavi.api.worktask.WorkTaskCatalog
	53, // 3: mtechnavi.api.worktask.UpdateWorkTaskCatalogRequest.work_task_catalog:type_name -> mtechnavi.api.worktask.WorkTaskCatalog
	53, // 4: mtechnavi.api.worktask.DeleteWorkTaskCatalogRequest.work_task_catalog:type_name -> mtechnavi.api.worktask.WorkTaskCatalog
	41, // 5: mtechnavi.api.worktask.CreateWorkTaskRequest.work_task:type_name -> mtechnavi.api.worktask.WorkTask
	50, // 6: mtechnavi.api.worktask.ListWorkTasksRequest.data_filter:type_name -> mtechnavi.api.worktask.ListWorkTasksRequest.DataFilter
	41, // 7: mtechnavi.api.worktask.ListWorkTasksResponse.items:type_name -> mtechnavi.api.worktask.WorkTask
	41, // 8: mtechnavi.api.worktask.UpdateWorkTaskRequest.work_task:type_name -> mtechnavi.api.worktask.WorkTask
	41, // 9: mtechnavi.api.worktask.DeleteWorkTaskRequest.work_task:type_name -> mtechnavi.api.worktask.WorkTask
	54, // 10: mtechnavi.api.worktask.ExportWorkTasksRequest.file_format:type_name -> sharelib.FileFormat
	55, // 11: mtechnavi.api.worktask.ApprovalRequestWorkTaskRequest.approval_plan_staff:type_name -> sharelib.StaffReference
	56, // 12: mtechnavi.api.worktask.ApprovalRequestWorkTaskRequest.approval_plan_organization:type_name -> sharelib.ComponentUnitReference
	54, // 13: mtechnavi.api.worktask.ListWorkTaskFormatsResponse.items:type_name -> sharelib.FileFormat
	57, // 14: mtechnavi.api.worktask.CreateWorkTaskRelationRequest.work_task_relation:type_name -> mtechnavi.api.worktask.WorkTaskRelation
	57, // 15: mtechnavi.api.worktask.DeleteWorkTaskRelationRequest.work_task_relation:type_name -> mtechnavi.api.worktask.WorkTaskRelation
	51, // 16: mtechnavi.api.worktask.ListWorkTaskRelationContentsRequest.data_filter:type_name -> mtechnavi.api.worktask.ListWorkTaskRelationContentsRequest.DataFilter
	58, // 17: mtechnavi.api.worktask.ListWorkTaskRelationContentsResponse.items:type_name -> mtechnavi.api.worktask.WorkTaskRelationContent
	59, // 18: mtechnavi.api.worktask.CompleteWorkTaskTicketRequest.result_attachments:type_name -> sharelib.Attachment
	60, // 19: mtechnavi.api.worktask.WorkTask.system_notification_users:type_name -> sharelib.UserReference
	61, // 20: mtechnavi.api.worktask.WorkTask.status:type_name -> sharelib.NameOption
	53, // 21: mtechnavi.api.worktask.WorkTask.work_task_catalog:type_name -> mtechnavi.api.worktask.WorkTaskCatalog
	56, // 22: mtechnavi.api.worktask.WorkTask.management_organization:type_name -> sharelib.ComponentUnitReference
	55, // 23: mtechnavi.api.worktask.WorkTask.management_staff:type_name -> sharelib.StaffReference
	45, // 24: mtechnavi.api.worktask.WorkTask.management_staff_change_process:type_name -> mtechnavi.api.worktask.Process
	56, // 25: mtechnavi.api.worktask.WorkTask.work_organization:type_name -> sharelib.ComponentUnitReference
	55, // 26: mtechnavi.api.worktask.WorkTask.work_staff:type_name -> sharelib.StaffReference
	45, // 27: mtechnavi.api.worktask.WorkTask.work_staff_change_process:type_name -> mtechnavi.api.worktask.Process
	59, // 28: mtechnavi.api.worktask.WorkTask.request_attachments:type_name -> sharelib.Attachment
	62, // 29: mtechnavi.api.worktask.WorkTask.requested_by:type_name -> sharelib.EmbeddedUser
	44, // 30: mtechnavi.api.worktask.WorkTask.ticket:type_name -> mtechnavi.api.worktask.Ticket
	45, // 31: mtechnavi.api.worktask.WorkTask.ticket_restart_process:type_name -> mtechnavi.api.worktask.Process
	45, // 32: mtechnavi.api.worktask.WorkTask.discard_process:type_name -> mtechnavi.api.worktask.Process
	45, // 33: mtechnavi.api.worktask.WorkTask.complete_process:type_name -> mtechnavi.api.worktask.Process
	63, // 34: mtechnavi.api.worktask.WorkTask.worktask_due_date_dt:type_name -> sharelib.Datetime
	45, // 35: mtechnavi.api.worktask.WorkTask.worktask_due_date_change_process:type_name -> mtechnavi.api.worktask.Process
	63, // 36: mtechnavi.api.worktask.WorkTask.worktask_ticket_due_date_dt:type_name -> sharelib.Datetime
	45, // 37: mtechnavi.api.worktask.WorkTask.worktask_ticket_due_date_change_process:type_name -> mtechnavi.api.worktask.Process
	63, // 38: mtechnavi.api.worktask.WorkTask.worktask_ticket_scheduled_date_dt:type_name -> sharelib.Datetime
	45, // 39: mtechnavi.api.worktask.WorkTask.worktask_ticket_scheduled_date_change_process:type_name -> mtechnavi.api.worktask.Process
	61, // 40: mtechnavi.api.worktask.WorkTask.approval_status:type_name -> sharelib.NameOption
	42, // 41: mtechnavi.api.worktask.WorkTask.approval_request:type_name -> mtechnavi.api.worktask.ApprovalRequest
	43, // 42: mtechnavi.api.worktask.WorkTask.approval_result:type_name -> mtechnavi.api.worktask.ApprovalResult
	62, // 43: mtechnavi.api.worktask.ApprovalRequest.requested_by:type_name -> sharelib.EmbeddedUser
	55, // 44: mtechnavi.api.worktask.ApprovalRequest.requested_staff:type_name -> sharelib.StaffReference
	56, // 45: mtechnavi.api.worktask.ApprovalRequest.requested_organization:type_name -> sharelib.ComponentUnitReference
	55, // 46: mtechnavi.api.worktask.ApprovalRequest.approval_plan_staff:type_name -> sharelib.StaffReference
	56, // 47: mtechnavi.api.worktask.ApprovalRequest.approval_plan_organization:type_name -> sharelib.ComponentUnitReference
	62, // 48: mtechnavi.api.worktask.ApprovalResult.decided_by:type_name -> sharelib.EmbeddedUser
	55, // 49: mtechnavi.api.worktask.ApprovalResult.decided_staff:type_name -> sharelib.StaffReference
	56, // 50: mtechnavi.api.worktask.ApprovalResult.decided_organization:type_name -> sharelib.ComponentUnitReference
	59, // 51: mtechnavi.api.worktask.Ticket.result_attachments:type_name -> sharelib.Attachment
	62, // 52: mtechnavi.api.worktask.Ticket.completed_by:type_name -> sharelib.EmbeddedUser
	62, // 53: mtechnavi.api.worktask.Process.processed_by:type_name -> sharelib.EmbeddedUser
	41, // 54: mtechnavi.api.worktask.UncompletedListWorkTaskTicketsResponse.items:type_name -> mtechnavi.api.worktask.WorkTask
	41, // 55: mtechnavi.api.worktask.UncompletedListWorkTasksResponse.items:type_name -> mtechnavi.api.worktask.WorkTask
	0,  // 56: mtechnavi.api.worktask.WorkTaskService.ListHistorys:input_type -> mtechnavi.api.worktask.ListHistorysRequest
	2,  // 57: mtechnavi.api.worktask.WorkTaskService.CreateWorkTaskCatalog:input_type -> mtechnavi.api.worktask.CreateWorkTaskCatalogRequest
	3,  // 58: mtechnavi.api.worktask.WorkTaskService.ListWorkTaskCatalogs:input_type -> mtechnavi.api.worktask.ListWorkTaskCatalogsRequest
	5,  // 59: mtechnavi.api.worktask.WorkTaskService.GetWorkTaskCatalog:input_type -> mtechnavi.api.worktask.GetWorkTaskCatalogRequest
	6,  // 60: mtechnavi.api.worktask.WorkTaskService.UpdateWorkTaskCatalog:input_type -> mtechnavi.api.worktask.UpdateWorkTaskCatalogRequest
	7,  // 61: mtechnavi.api.worktask.WorkTaskService.DeleteWorkTaskCatalog:input_type -> mtechnavi.api.worktask.DeleteWorkTaskCatalogRequest
	8,  // 62: mtechnavi.api.worktask.WorkTaskService.CreateWorkTask:input_type -> mtechnavi.api.worktask.CreateWorkTaskRequest
	9,  // 63: mtechnavi.api.worktask.WorkTaskService.ListWorkTasks:input_type -> mtechnavi.api.worktask.ListWorkTasksRequest
	11, // 64: mtechnavi.api.worktask.WorkTaskService.GetWorkTask:input_type -> mtechnavi.api.worktask.GetWorkTaskRequest
	12, // 65: mtechnavi.api.worktask.WorkTaskService.UpdateWorkTask:input_type -> mtechnavi.api.worktask.UpdateWorkTaskRequest
	13, // 66: mtechnavi.api.worktask.WorkTaskService.DeleteWorkTask:input_type -> mtechnavi.api.worktask.DeleteWorkTaskRequest
	14, // 67: mtechnavi.api.worktask.WorkTaskService.ExportWorkTasks:input_type -> mtechnavi.api.worktask.ExportWorkTasksRequest
	16, // 68: mtechnavi.api.worktask.WorkTaskService.ApprovalRequestWorkTask:input_type -> mtechnavi.api.worktask.ApprovalRequestWorkTaskRequest
	18, // 69: mtechnavi.api.worktask.WorkTaskService.ApproveWorkTask:input_type -> mtechnavi.api.worktask.ApproveWorkTaskRequest
	20, // 70: mtechnavi.api.worktask.WorkTaskService.RejectWorkTask:input_type -> mtechnavi.api.worktask.RejectWorkTaskRequest
	29, // 71: mtechnavi.api.worktask.WorkTaskService.ActivateWorkTask:input_type -> mtechnavi.api.worktask.ActivateWorkTaskRequest
	31, // 72: mtechnavi.api.worktask.WorkTaskService.DiscardWorkTask:input_type -> mtechnavi.api.worktask.DiscardWorkTaskRequest
	33, // 73: mtechnavi.api.worktask.WorkTaskService.CompleteWorkTask:input_type -> mtechnavi.api.worktask.CompleteWorkTaskRequest
	35, // 74: mtechnavi.api.worktask.WorkTaskService.UncompleteWorkTask:input_type -> mtechnavi.api.worktask.UncompleteWorkTaskRequest
	37, // 75: mtechnavi.api.worktask.WorkTaskService.CompleteWorkTaskTicket:input_type -> mtechnavi.api.worktask.CompleteWorkTaskTicketRequest
	39, // 76: mtechnavi.api.worktask.WorkTaskService.UncompleteWorkTaskTicket:input_type -> mtechnavi.api.worktask.UncompleteWorkTaskTicketRequest
	22, // 77: mtechnavi.api.worktask.WorkTaskService.ListWorkTaskFormats:input_type -> mtechnavi.api.worktask.ListWorkTaskFormatsRequest
	24, // 78: mtechnavi.api.worktask.WorkTaskService.CreateWorkTaskRelation:input_type -> mtechnavi.api.worktask.CreateWorkTaskRelationRequest
	25, // 79: mtechnavi.api.worktask.WorkTaskService.DeleteWorkTaskRelation:input_type -> mtechnavi.api.worktask.DeleteWorkTaskRelationRequest
	26, // 80: mtechnavi.api.worktask.WorkTaskService.ListWorkTaskRelationContents:input_type -> mtechnavi.api.worktask.ListWorkTaskRelationContentsRequest
	28, // 81: mtechnavi.api.worktask.WorkTaskService.GetWorkTaskRelationContent:input_type -> mtechnavi.api.worktask.GetWorkTaskRelationContentRequest
	46, // 82: mtechnavi.api.worktask.WorkTaskTaskListService.UncompletedListWorkTaskTickets:input_type -> mtechnavi.api.worktask.UncompletedListWorkTaskTicketsRequest
	48, // 83: mtechnavi.api.worktask.WorkTaskTaskListService.UncompletedListWorkTasks:input_type -> mtechnavi.api.worktask.UncompletedListWorkTasksRequest
	1,  // 84: mtechnavi.api.worktask.WorkTaskService.ListHistorys:output_type -> mtechnavi.api.worktask.ListHistorysResponse
	53, // 85: mtechnavi.api.worktask.WorkTaskService.CreateWorkTaskCatalog:output_type -> mtechnavi.api.worktask.WorkTaskCatalog
	4,  // 86: mtechnavi.api.worktask.WorkTaskService.ListWorkTaskCatalogs:output_type -> mtechnavi.api.worktask.ListWorkTaskCatalogResponse
	53, // 87: mtechnavi.api.worktask.WorkTaskService.GetWorkTaskCatalog:output_type -> mtechnavi.api.worktask.WorkTaskCatalog
	53, // 88: mtechnavi.api.worktask.WorkTaskService.UpdateWorkTaskCatalog:output_type -> mtechnavi.api.worktask.WorkTaskCatalog
	64, // 89: mtechnavi.api.worktask.WorkTaskService.DeleteWorkTaskCatalog:output_type -> google.protobuf.Empty
	41, // 90: mtechnavi.api.worktask.WorkTaskService.CreateWorkTask:output_type -> mtechnavi.api.worktask.WorkTask
	10, // 91: mtechnavi.api.worktask.WorkTaskService.ListWorkTasks:output_type -> mtechnavi.api.worktask.ListWorkTasksResponse
	41, // 92: mtechnavi.api.worktask.WorkTaskService.GetWorkTask:output_type -> mtechnavi.api.worktask.WorkTask
	41, // 93: mtechnavi.api.worktask.WorkTaskService.UpdateWorkTask:output_type -> mtechnavi.api.worktask.WorkTask
	64, // 94: mtechnavi.api.worktask.WorkTaskService.DeleteWorkTask:output_type -> google.protobuf.Empty
	15, // 95: mtechnavi.api.worktask.WorkTaskService.ExportWorkTasks:output_type -> mtechnavi.api.worktask.ExportWorkTasksResponse
	17, // 96: mtechnavi.api.worktask.WorkTaskService.ApprovalRequestWorkTask:output_type -> mtechnavi.api.worktask.ApprovalRequestWorkTaskResponse
	19, // 97: mtechnavi.api.worktask.WorkTaskService.ApproveWorkTask:output_type -> mtechnavi.api.worktask.ApproveWorkTaskResponse
	21, // 98: mtechnavi.api.worktask.WorkTaskService.RejectWorkTask:output_type -> mtechnavi.api.worktask.RejectWorkTaskResponse
	30, // 99: mtechnavi.api.worktask.WorkTaskService.ActivateWorkTask:output_type -> mtechnavi.api.worktask.ActivateWorkTaskResponse
	32, // 100: mtechnavi.api.worktask.WorkTaskService.DiscardWorkTask:output_type -> mtechnavi.api.worktask.DiscardWorkTaskResponse
	34, // 101: mtechnavi.api.worktask.WorkTaskService.CompleteWorkTask:output_type -> mtechnavi.api.worktask.CompleteWorkTaskResponse
	36, // 102: mtechnavi.api.worktask.WorkTaskService.UncompleteWorkTask:output_type -> mtechnavi.api.worktask.UncompleteWorkTaskResponse
	38, // 103: mtechnavi.api.worktask.WorkTaskService.CompleteWorkTaskTicket:output_type -> mtechnavi.api.worktask.CompleteWorkTaskTicketResponse
	40, // 104: mtechnavi.api.worktask.WorkTaskService.UncompleteWorkTaskTicket:output_type -> mtechnavi.api.worktask.UncompleteWorkTaskTicketResponse
	23, // 105: mtechnavi.api.worktask.WorkTaskService.ListWorkTaskFormats:output_type -> mtechnavi.api.worktask.ListWorkTaskFormatsResponse
	57, // 106: mtechnavi.api.worktask.WorkTaskService.CreateWorkTaskRelation:output_type -> mtechnavi.api.worktask.WorkTaskRelation
	64, // 107: mtechnavi.api.worktask.WorkTaskService.DeleteWorkTaskRelation:output_type -> google.protobuf.Empty
	27, // 108: mtechnavi.api.worktask.WorkTaskService.ListWorkTaskRelationContents:output_type -> mtechnavi.api.worktask.ListWorkTaskRelationContentsResponse
	58, // 109: mtechnavi.api.worktask.WorkTaskService.GetWorkTaskRelationContent:output_type -> mtechnavi.api.worktask.WorkTaskRelationContent
	47, // 110: mtechnavi.api.worktask.WorkTaskTaskListService.UncompletedListWorkTaskTickets:output_type -> mtechnavi.api.worktask.UncompletedListWorkTaskTicketsResponse
	49, // 111: mtechnavi.api.worktask.WorkTaskTaskListService.UncompletedListWorkTasks:output_type -> mtechnavi.api.worktask.UncompletedListWorkTasksResponse
	84, // [84:112] is the sub-list for method output_type
	56, // [56:84] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_worktask_proto_init() }
func file_worktask_proto_init() {
	if File_worktask_proto != nil {
		return
	}
	file_history_proto_init()
	file_worktaskcatalog_proto_init()
	file_worktaskrelation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_worktask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistorysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHistorysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkTaskCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskCatalogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkTaskCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkTaskCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkTaskCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportWorkTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportWorkTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalRequestWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalRequestWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskFormatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskFormatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkTaskRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkTaskRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskRelationContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskRelationContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkTaskRelationContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompleteWorkTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompleteWorkTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkTaskTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteWorkTaskTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompleteWorkTaskTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompleteWorkTaskTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompletedListWorkTaskTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompletedListWorkTaskTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompletedListWorkTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncompletedListWorkTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTasksRequest_DataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worktask_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkTaskRelationContentsRequest_DataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worktask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_worktask_proto_goTypes,
		DependencyIndexes: file_worktask_proto_depIdxs,
		MessageInfos:      file_worktask_proto_msgTypes,
	}.Build()
	File_worktask_proto = out.File
	file_worktask_proto_rawDesc = nil
	file_worktask_proto_goTypes = nil
	file_worktask_proto_depIdxs = nil
}
