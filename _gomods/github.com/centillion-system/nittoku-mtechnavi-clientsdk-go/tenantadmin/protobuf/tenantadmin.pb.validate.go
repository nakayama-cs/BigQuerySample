// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tenantadmin.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserAttribute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserAttributeMultiError, or
// nil if none found.
func (m *UserAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserAttributeId

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAttributeValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAttributeValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAttributeValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAttributeValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAttributeValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAttributeValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserAttributeUpdatedAt

	if all {
		switch v := interface{}(m.GetUserAttributeUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAttributeValidationError{
					field:  "UserAttributeUpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAttributeValidationError{
					field:  "UserAttributeUpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttributeUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAttributeValidationError{
				field:  "UserAttributeUpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserAttributeMultiError(errors)
	}

	return nil
}

// UserAttributeMultiError is an error wrapping multiple validation errors
// returned by UserAttribute.ValidateAll() if the designated constraints
// aren't met.
type UserAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAttributeMultiError) AllErrors() []error { return m }

// UserAttributeValidationError is the validation error returned by
// UserAttribute.Validate if the designated constraints aren't met.
type UserAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAttributeValidationError) ErrorName() string { return "UserAttributeValidationError" }

// Error satisfies the builtin error interface
func (e UserAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAttributeValidationError{}

// Validate checks the field values on UserGroupAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGroupAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGroupAttributeMultiError, or nil if none found.
func (m *UserGroupAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupAttributeId

	if all {
		switch v := interface{}(m.GetUserGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGroupAttributeValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGroupAttributeValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGroupAttributeValidationError{
				field:  "UserGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remarks

	// no validation rules for SystemGroup

	if all {
		switch v := interface{}(m.GetUserSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGroupAttributeValidationError{
					field:  "UserSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGroupAttributeValidationError{
					field:  "UserSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGroupAttributeValidationError{
				field:  "UserSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return UserGroupAttributeMultiError(errors)
	}

	return nil
}

// UserGroupAttributeMultiError is an error wrapping multiple validation errors
// returned by UserGroupAttribute.ValidateAll() if the designated constraints
// aren't met.
type UserGroupAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupAttributeMultiError) AllErrors() []error { return m }

// UserGroupAttributeValidationError is the validation error returned by
// UserGroupAttribute.Validate if the designated constraints aren't met.
type UserGroupAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupAttributeValidationError) ErrorName() string {
	return "UserGroupAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e UserGroupAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupAttributeValidationError{}

// Validate checks the field values on RoleAttribute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAttributeMultiError, or
// nil if none found.
func (m *RoleAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleAttributeId

	// no validation rules for RoleName

	// no validation rules for Remarks

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return RoleAttributeMultiError(errors)
	}

	return nil
}

// RoleAttributeMultiError is an error wrapping multiple validation errors
// returned by RoleAttribute.ValidateAll() if the designated constraints
// aren't met.
type RoleAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAttributeMultiError) AllErrors() []error { return m }

// RoleAttributeValidationError is the validation error returned by
// RoleAttribute.Validate if the designated constraints aren't met.
type RoleAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAttributeValidationError) ErrorName() string { return "RoleAttributeValidationError" }

// Error satisfies the builtin error interface
func (e RoleAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAttributeValidationError{}

// Validate checks the field values on CreateUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserAttributeRequestMultiError, or nil if none found.
func (m *CreateUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserAttributeRequestValidationError{
				field:  "UserAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateUserAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserAttributeRequestMultiError) AllErrors() []error { return m }

// CreateUserAttributeRequestValidationError is the validation error returned
// by CreateUserAttributeRequest.Validate if the designated constraints aren't met.
type CreateUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserAttributeRequestValidationError) ErrorName() string {
	return "CreateUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserAttributeRequestValidationError{}

// Validate checks the field values on CreateUserAndUserAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateUserAndUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserAndUserAttributeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUserAndUserAttributeRequestMultiError, or nil if none found.
func (m *CreateUserAndUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserAndUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// skipping validation for user

	if all {
		switch v := interface{}(m.GetUserAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserAndUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserAndUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserAndUserAttributeRequestValidationError{
				field:  "UserAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserAndUserAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateUserAndUserAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateUserAndUserAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserAndUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserAndUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserAndUserAttributeRequestMultiError) AllErrors() []error { return m }

// CreateUserAndUserAttributeRequestValidationError is the validation error
// returned by CreateUserAndUserAttributeRequest.Validate if the designated
// constraints aren't met.
type CreateUserAndUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserAndUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserAndUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserAndUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserAndUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserAndUserAttributeRequestValidationError) ErrorName() string {
	return "CreateUserAndUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserAndUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserAndUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserAndUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserAndUserAttributeRequestValidationError{}

// Validate checks the field values on ListUserAttributesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserAttributesRequestMultiError, or nil if none found.
func (m *ListUserAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserAttributesRequestMultiError(errors)
	}

	return nil
}

// ListUserAttributesRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserAttributesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListUserAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserAttributesRequestMultiError) AllErrors() []error { return m }

// ListUserAttributesRequestValidationError is the validation error returned by
// ListUserAttributesRequest.Validate if the designated constraints aren't met.
type ListUserAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserAttributesRequestValidationError) ErrorName() string {
	return "ListUserAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserAttributesRequestValidationError{}

// Validate checks the field values on ListUserAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserAttributesResponseMultiError, or nil if none found.
func (m *ListUserAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserAttributesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserAttributesResponseMultiError(errors)
	}

	return nil
}

// ListUserAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserAttributesResponseMultiError) AllErrors() []error { return m }

// ListUserAttributesResponseValidationError is the validation error returned
// by ListUserAttributesResponse.Validate if the designated constraints aren't met.
type ListUserAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserAttributesResponseValidationError) ErrorName() string {
	return "ListUserAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserAttributesResponseValidationError{}

// Validate checks the field values on GetUserAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAttributeRequestMultiError, or nil if none found.
func (m *GetUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserAttributeId

	if len(errors) > 0 {
		return GetUserAttributeRequestMultiError(errors)
	}

	return nil
}

// GetUserAttributeRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAttributeRequestMultiError) AllErrors() []error { return m }

// GetUserAttributeRequestValidationError is the validation error returned by
// GetUserAttributeRequest.Validate if the designated constraints aren't met.
type GetUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAttributeRequestValidationError) ErrorName() string {
	return "GetUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAttributeRequestValidationError{}

// Validate checks the field values on UpdateUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserAttributeRequestMultiError, or nil if none found.
func (m *UpdateUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAttributeRequestValidationError{
				field:  "UserAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateUserAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateUserAttributeRequestValidationError is the validation error returned
// by UpdateUserAttributeRequest.Validate if the designated constraints aren't met.
type UpdateUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAttributeRequestValidationError) ErrorName() string {
	return "UpdateUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAttributeRequestValidationError{}

// Validate checks the field values on UpdateUserAndUserAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateUserAndUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserAndUserAttributeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateUserAndUserAttributeRequestMultiError, or nil if none found.
func (m *UpdateUserAndUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserAndUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserAndUserAttributeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserAndUserAttributeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAndUserAttributeRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserAndUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserAndUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserAndUserAttributeRequestValidationError{
				field:  "UserAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserAndUserAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateUserAndUserAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserAndUserAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserAndUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserAndUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserAndUserAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateUserAndUserAttributeRequestValidationError is the validation error
// returned by UpdateUserAndUserAttributeRequest.Validate if the designated
// constraints aren't met.
type UpdateUserAndUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserAndUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserAndUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserAndUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserAndUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserAndUserAttributeRequestValidationError) ErrorName() string {
	return "UpdateUserAndUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserAndUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserAndUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserAndUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserAndUserAttributeRequestValidationError{}

// Validate checks the field values on DeleteUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserAttributeRequestMultiError, or nil if none found.
func (m *DeleteUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserAttributeRequestValidationError{
				field:  "UserAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteUserAttributeRequestMultiError(errors)
	}

	return nil
}

// DeleteUserAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserAttributeRequestMultiError) AllErrors() []error { return m }

// DeleteUserAttributeRequestValidationError is the validation error returned
// by DeleteUserAttributeRequest.Validate if the designated constraints aren't met.
type DeleteUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserAttributeRequestValidationError) ErrorName() string {
	return "DeleteUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserAttributeRequestValidationError{}

// Validate checks the field values on DeleteUserAndUserAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteUserAndUserAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserAndUserAttributeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteUserAndUserAttributeRequestMultiError, or nil if none found.
func (m *DeleteUserAndUserAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserAndUserAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserAndUserAttributeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserAndUserAttributeRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserAndUserAttributeRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserAndUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserAndUserAttributeRequestValidationError{
					field:  "UserAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserAndUserAttributeRequestValidationError{
				field:  "UserAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteUserAndUserAttributeRequestMultiError(errors)
	}

	return nil
}

// DeleteUserAndUserAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteUserAndUserAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserAndUserAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserAndUserAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserAndUserAttributeRequestMultiError) AllErrors() []error { return m }

// DeleteUserAndUserAttributeRequestValidationError is the validation error
// returned by DeleteUserAndUserAttributeRequest.Validate if the designated
// constraints aren't met.
type DeleteUserAndUserAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserAndUserAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserAndUserAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserAndUserAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserAndUserAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserAndUserAttributeRequestValidationError) ErrorName() string {
	return "DeleteUserAndUserAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserAndUserAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserAndUserAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserAndUserAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserAndUserAttributeRequestValidationError{}

// Validate checks the field values on DisableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserRequestMultiError, or nil if none found.
func (m *DisableUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisableUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisableUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisableUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisableUserRequestMultiError(errors)
	}

	return nil
}

// DisableUserRequestMultiError is an error wrapping multiple validation errors
// returned by DisableUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DisableUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserRequestMultiError) AllErrors() []error { return m }

// DisableUserRequestValidationError is the validation error returned by
// DisableUserRequest.Validate if the designated constraints aren't met.
type DisableUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserRequestValidationError) ErrorName() string {
	return "DisableUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserRequestValidationError{}

// Validate checks the field values on DisableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableUserResponseMultiError, or nil if none found.
func (m *DisableUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisableUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisableUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisableUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisableUserResponseMultiError(errors)
	}

	return nil
}

// DisableUserResponseMultiError is an error wrapping multiple validation
// errors returned by DisableUserResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableUserResponseMultiError) AllErrors() []error { return m }

// DisableUserResponseValidationError is the validation error returned by
// DisableUserResponse.Validate if the designated constraints aren't met.
type DisableUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableUserResponseValidationError) ErrorName() string {
	return "DisableUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableUserResponseValidationError{}

// Validate checks the field values on EnableUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnableUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserRequestMultiError, or nil if none found.
func (m *EnableUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnableUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnableUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnableUserRequestMultiError(errors)
	}

	return nil
}

// EnableUserRequestMultiError is an error wrapping multiple validation errors
// returned by EnableUserRequest.ValidateAll() if the designated constraints
// aren't met.
type EnableUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserRequestMultiError) AllErrors() []error { return m }

// EnableUserRequestValidationError is the validation error returned by
// EnableUserRequest.Validate if the designated constraints aren't met.
type EnableUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserRequestValidationError) ErrorName() string {
	return "EnableUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserRequestValidationError{}

// Validate checks the field values on EnableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableUserResponseMultiError, or nil if none found.
func (m *EnableUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnableUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnableUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnableUserResponseMultiError(errors)
	}

	return nil
}

// EnableUserResponseMultiError is an error wrapping multiple validation errors
// returned by EnableUserResponse.ValidateAll() if the designated constraints
// aren't met.
type EnableUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableUserResponseMultiError) AllErrors() []error { return m }

// EnableUserResponseValidationError is the validation error returned by
// EnableUserResponse.Validate if the designated constraints aren't met.
type EnableUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableUserResponseValidationError) ErrorName() string {
	return "EnableUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableUserResponseValidationError{}

// Validate checks the field values on ImportUserAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportUserAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportUserAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportUserAttributesRequestMultiError, or nil if none found.
func (m *ImportUserAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportUserAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportUserAttributesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportUserAttributesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportUserAttributesRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportUserAttributesRequestMultiError(errors)
	}

	return nil
}

// ImportUserAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by ImportUserAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportUserAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportUserAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportUserAttributesRequestMultiError) AllErrors() []error { return m }

// ImportUserAttributesRequestValidationError is the validation error returned
// by ImportUserAttributesRequest.Validate if the designated constraints
// aren't met.
type ImportUserAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportUserAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportUserAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportUserAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportUserAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportUserAttributesRequestValidationError) ErrorName() string {
	return "ImportUserAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportUserAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportUserAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportUserAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportUserAttributesRequestValidationError{}

// Validate checks the field values on ImportUserAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportUserAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportUserAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportUserAttributesResponseMultiError, or nil if none found.
func (m *ImportUserAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportUserAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportUserAttributesResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportUserAttributesResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportUserAttributesResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportUserAttributesResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportUserAttributesResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportUserAttributesResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportUserAttributesResponseMultiError(errors)
	}

	return nil
}

// ImportUserAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ImportUserAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type ImportUserAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportUserAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportUserAttributesResponseMultiError) AllErrors() []error { return m }

// ImportUserAttributesResponseValidationError is the validation error returned
// by ImportUserAttributesResponse.Validate if the designated constraints
// aren't met.
type ImportUserAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportUserAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportUserAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportUserAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportUserAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportUserAttributesResponseValidationError) ErrorName() string {
	return "ImportUserAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportUserAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportUserAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportUserAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportUserAttributesResponseValidationError{}

// Validate checks the field values on ExportUserAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportUserAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserAttributesRequestMultiError, or nil if none found.
func (m *ExportUserAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportUserAttributesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportUserAttributesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportUserAttributesRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportUserAttributesRequestMultiError(errors)
	}

	return nil
}

// ExportUserAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by ExportUserAttributesRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportUserAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserAttributesRequestMultiError) AllErrors() []error { return m }

// ExportUserAttributesRequestValidationError is the validation error returned
// by ExportUserAttributesRequest.Validate if the designated constraints
// aren't met.
type ExportUserAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserAttributesRequestValidationError) ErrorName() string {
	return "ExportUserAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserAttributesRequestValidationError{}

// Validate checks the field values on ExportUserAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportUserAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportUserAttributesResponseMultiError, or nil if none found.
func (m *ExportUserAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportUserAttributesResponseMultiError(errors)
	}

	return nil
}

// ExportUserAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ExportUserAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type ExportUserAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserAttributesResponseMultiError) AllErrors() []error { return m }

// ExportUserAttributesResponseValidationError is the validation error returned
// by ExportUserAttributesResponse.Validate if the designated constraints
// aren't met.
type ExportUserAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserAttributesResponseValidationError) ErrorName() string {
	return "ExportUserAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserAttributesResponseValidationError{}

// Validate checks the field values on ListUserAttributeFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserAttributeFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserAttributeFormatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserAttributeFormatsRequestMultiError, or nil if none found.
func (m *ListUserAttributeFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserAttributeFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserAttributeFormatsRequestMultiError(errors)
	}

	return nil
}

// ListUserAttributeFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserAttributeFormatsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUserAttributeFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserAttributeFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserAttributeFormatsRequestMultiError) AllErrors() []error { return m }

// ListUserAttributeFormatsRequestValidationError is the validation error
// returned by ListUserAttributeFormatsRequest.Validate if the designated
// constraints aren't met.
type ListUserAttributeFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserAttributeFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserAttributeFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserAttributeFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserAttributeFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserAttributeFormatsRequestValidationError) ErrorName() string {
	return "ListUserAttributeFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserAttributeFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserAttributeFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserAttributeFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserAttributeFormatsRequestValidationError{}

// Validate checks the field values on ListUserAttributeFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserAttributeFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserAttributeFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserAttributeFormatsResponseMultiError, or nil if none found.
func (m *ListUserAttributeFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserAttributeFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserAttributeFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserAttributeFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserAttributeFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserAttributeFormatsResponseMultiError(errors)
	}

	return nil
}

// ListUserAttributeFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListUserAttributeFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserAttributeFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserAttributeFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserAttributeFormatsResponseMultiError) AllErrors() []error { return m }

// ListUserAttributeFormatsResponseValidationError is the validation error
// returned by ListUserAttributeFormatsResponse.Validate if the designated
// constraints aren't met.
type ListUserAttributeFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserAttributeFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserAttributeFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserAttributeFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserAttributeFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserAttributeFormatsResponseValidationError) ErrorName() string {
	return "ListUserAttributeFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserAttributeFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserAttributeFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserAttributeFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserAttributeFormatsResponseValidationError{}

// Validate checks the field values on SendEmailUserCreatedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailUserCreatedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailUserCreatedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailUserCreatedRequestMultiError, or nil if none found.
func (m *SendEmailUserCreatedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailUserCreatedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendEmailUserCreatedRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendEmailUserCreatedRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendEmailUserCreatedRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendEmailUserCreatedRequestMultiError(errors)
	}

	return nil
}

// SendEmailUserCreatedRequestMultiError is an error wrapping multiple
// validation errors returned by SendEmailUserCreatedRequest.ValidateAll() if
// the designated constraints aren't met.
type SendEmailUserCreatedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailUserCreatedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailUserCreatedRequestMultiError) AllErrors() []error { return m }

// SendEmailUserCreatedRequestValidationError is the validation error returned
// by SendEmailUserCreatedRequest.Validate if the designated constraints
// aren't met.
type SendEmailUserCreatedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailUserCreatedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailUserCreatedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailUserCreatedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailUserCreatedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailUserCreatedRequestValidationError) ErrorName() string {
	return "SendEmailUserCreatedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailUserCreatedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailUserCreatedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailUserCreatedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailUserCreatedRequestValidationError{}

// Validate checks the field values on SendEmailUserCreatedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendEmailUserCreatedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendEmailUserCreatedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendEmailUserCreatedResponseMultiError, or nil if none found.
func (m *SendEmailUserCreatedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendEmailUserCreatedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendEmailUserCreatedResponseMultiError(errors)
	}

	return nil
}

// SendEmailUserCreatedResponseMultiError is an error wrapping multiple
// validation errors returned by SendEmailUserCreatedResponse.ValidateAll() if
// the designated constraints aren't met.
type SendEmailUserCreatedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendEmailUserCreatedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendEmailUserCreatedResponseMultiError) AllErrors() []error { return m }

// SendEmailUserCreatedResponseValidationError is the validation error returned
// by SendEmailUserCreatedResponse.Validate if the designated constraints
// aren't met.
type SendEmailUserCreatedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendEmailUserCreatedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendEmailUserCreatedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendEmailUserCreatedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendEmailUserCreatedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendEmailUserCreatedResponseValidationError) ErrorName() string {
	return "SendEmailUserCreatedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendEmailUserCreatedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendEmailUserCreatedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendEmailUserCreatedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendEmailUserCreatedResponseValidationError{}

// Validate checks the field values on CreateUserGroupAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserGroupAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateUserGroupAttributeRequestMultiError, or nil if none found.
func (m *CreateUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroupAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserGroupAttributeRequestValidationError{
				field:  "UserGroupAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateUserGroupAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateUserGroupAttributeRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// CreateUserGroupAttributeRequestValidationError is the validation error
// returned by CreateUserGroupAttributeRequest.Validate if the designated
// constraints aren't met.
type CreateUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserGroupAttributeRequestValidationError) ErrorName() string {
	return "CreateUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserGroupAttributeRequestValidationError{}

// Validate checks the field values on
// CreateUserGroupAndUserGroupAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserGroupAndUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateUserGroupAndUserGroupAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateUserGroupAndUserGroupAttributeRequestMultiError, or nil if none found.
func (m *CreateUserGroupAndUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserGroupAndUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserGroupAndUserGroupAttributeRequestValidationError{
				field:  "UserGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserGroupAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserGroupAndUserGroupAttributeRequestValidationError{
				field:  "UserGroupAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserGroupAndUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateUserGroupAndUserGroupAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateUserGroupAndUserGroupAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserGroupAndUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserGroupAndUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserGroupAndUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// CreateUserGroupAndUserGroupAttributeRequestValidationError is the validation
// error returned by CreateUserGroupAndUserGroupAttributeRequest.Validate if
// the designated constraints aren't met.
type CreateUserGroupAndUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserGroupAndUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserGroupAndUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserGroupAndUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserGroupAndUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserGroupAndUserGroupAttributeRequestValidationError) ErrorName() string {
	return "CreateUserGroupAndUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserGroupAndUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserGroupAndUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserGroupAndUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserGroupAndUserGroupAttributeRequestValidationError{}

// Validate checks the field values on ListUserGroupAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupAttributesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserGroupAttributesRequestMultiError, or nil if none found.
func (m *ListUserGroupAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserGroupAttributesRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupAttributesRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserGroupAttributesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUserGroupAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupAttributesRequestMultiError) AllErrors() []error { return m }

// ListUserGroupAttributesRequestValidationError is the validation error
// returned by ListUserGroupAttributesRequest.Validate if the designated
// constraints aren't met.
type ListUserGroupAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupAttributesRequestValidationError) ErrorName() string {
	return "ListUserGroupAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupAttributesRequestValidationError{}

// Validate checks the field values on ListUserGroupAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupAttributesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserGroupAttributesResponseMultiError, or nil if none found.
func (m *ListUserGroupAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupAttributesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGroupAttributesResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserGroupAttributesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListUserGroupAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupAttributesResponseMultiError) AllErrors() []error { return m }

// ListUserGroupAttributesResponseValidationError is the validation error
// returned by ListUserGroupAttributesResponse.Validate if the designated
// constraints aren't met.
type ListUserGroupAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupAttributesResponseValidationError) ErrorName() string {
	return "ListUserGroupAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupAttributesResponseValidationError{}

// Validate checks the field values on GetUserGroupAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserGroupAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserGroupAttributeRequestMultiError, or nil if none found.
func (m *GetUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupAttributeId

	if len(errors) > 0 {
		return GetUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// GetUserGroupAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserGroupAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// GetUserGroupAttributeRequestValidationError is the validation error returned
// by GetUserGroupAttributeRequest.Validate if the designated constraints
// aren't met.
type GetUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserGroupAttributeRequestValidationError) ErrorName() string {
	return "GetUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserGroupAttributeRequestValidationError{}

// Validate checks the field values on UpdateUserGroupAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserGroupAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserGroupAttributeRequestMultiError, or nil if none found.
func (m *UpdateUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroupAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserGroupAttributeRequestValidationError{
				field:  "UserGroupAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateUserGroupAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserGroupAttributeRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateUserGroupAttributeRequestValidationError is the validation error
// returned by UpdateUserGroupAttributeRequest.Validate if the designated
// constraints aren't met.
type UpdateUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserGroupAttributeRequestValidationError) ErrorName() string {
	return "UpdateUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserGroupAttributeRequestValidationError{}

// Validate checks the field values on
// UpdateUserGroupAndUserGroupAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserGroupAndUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateUserGroupAndUserGroupAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateUserGroupAndUserGroupAttributeRequestMultiError, or nil if none found.
func (m *UpdateUserGroupAndUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserGroupAndUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserGroupAndUserGroupAttributeRequestValidationError{
				field:  "UserGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserGroupAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserGroupAndUserGroupAttributeRequestValidationError{
				field:  "UserGroupAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserGroupAndUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateUserGroupAndUserGroupAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateUserGroupAndUserGroupAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserGroupAndUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserGroupAndUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserGroupAndUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateUserGroupAndUserGroupAttributeRequestValidationError is the validation
// error returned by UpdateUserGroupAndUserGroupAttributeRequest.Validate if
// the designated constraints aren't met.
type UpdateUserGroupAndUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserGroupAndUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserGroupAndUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserGroupAndUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserGroupAndUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserGroupAndUserGroupAttributeRequestValidationError) ErrorName() string {
	return "UpdateUserGroupAndUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserGroupAndUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserGroupAndUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserGroupAndUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserGroupAndUserGroupAttributeRequestValidationError{}

// Validate checks the field values on DeleteUserGroupAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserGroupAttributeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteUserGroupAttributeRequestMultiError, or nil if none found.
func (m *DeleteUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroupAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserGroupAttributeRequestValidationError{
				field:  "UserGroupAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// DeleteUserGroupAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserGroupAttributeRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// DeleteUserGroupAttributeRequestValidationError is the validation error
// returned by DeleteUserGroupAttributeRequest.Validate if the designated
// constraints aren't met.
type DeleteUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserGroupAttributeRequestValidationError) ErrorName() string {
	return "DeleteUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserGroupAttributeRequestValidationError{}

// Validate checks the field values on
// DeleteUserGroupAndUserGroupAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUserGroupAndUserGroupAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteUserGroupAndUserGroupAttributeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteUserGroupAndUserGroupAttributeRequestMultiError, or nil if none found.
func (m *DeleteUserGroupAndUserGroupAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserGroupAndUserGroupAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserGroupAndUserGroupAttributeRequestValidationError{
				field:  "UserGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserGroupAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteUserGroupAndUserGroupAttributeRequestValidationError{
					field:  "UserGroupAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteUserGroupAndUserGroupAttributeRequestValidationError{
				field:  "UserGroupAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteUserGroupAndUserGroupAttributeRequestMultiError(errors)
	}

	return nil
}

// DeleteUserGroupAndUserGroupAttributeRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteUserGroupAndUserGroupAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserGroupAndUserGroupAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserGroupAndUserGroupAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserGroupAndUserGroupAttributeRequestMultiError) AllErrors() []error { return m }

// DeleteUserGroupAndUserGroupAttributeRequestValidationError is the validation
// error returned by DeleteUserGroupAndUserGroupAttributeRequest.Validate if
// the designated constraints aren't met.
type DeleteUserGroupAndUserGroupAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserGroupAndUserGroupAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserGroupAndUserGroupAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserGroupAndUserGroupAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserGroupAndUserGroupAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserGroupAndUserGroupAttributeRequestValidationError) ErrorName() string {
	return "DeleteUserGroupAndUserGroupAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserGroupAndUserGroupAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserGroupAndUserGroupAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserGroupAndUserGroupAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserGroupAndUserGroupAttributeRequestValidationError{}

// Validate checks the field values on ImportUserBelongsUserGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportUserBelongsUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportUserBelongsUserGroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportUserBelongsUserGroupsRequestMultiError, or nil if none found.
func (m *ImportUserBelongsUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportUserBelongsUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportUserBelongsUserGroupsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportUserBelongsUserGroupsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportUserBelongsUserGroupsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportUserBelongsUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ImportUserBelongsUserGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ImportUserBelongsUserGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportUserBelongsUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportUserBelongsUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportUserBelongsUserGroupsRequestMultiError) AllErrors() []error { return m }

// ImportUserBelongsUserGroupsRequestValidationError is the validation error
// returned by ImportUserBelongsUserGroupsRequest.Validate if the designated
// constraints aren't met.
type ImportUserBelongsUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportUserBelongsUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportUserBelongsUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportUserBelongsUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportUserBelongsUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportUserBelongsUserGroupsRequestValidationError) ErrorName() string {
	return "ImportUserBelongsUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportUserBelongsUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportUserBelongsUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportUserBelongsUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportUserBelongsUserGroupsRequestValidationError{}

// Validate checks the field values on ImportUserBelongsUserGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportUserBelongsUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportUserBelongsUserGroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ImportUserBelongsUserGroupsResponseMultiError, or nil if none found.
func (m *ImportUserBelongsUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportUserBelongsUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportUserBelongsUserGroupsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportUserBelongsUserGroupsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportUserBelongsUserGroupsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportUserBelongsUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportUserBelongsUserGroupsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportUserBelongsUserGroupsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportUserBelongsUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ImportUserBelongsUserGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ImportUserBelongsUserGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportUserBelongsUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportUserBelongsUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportUserBelongsUserGroupsResponseMultiError) AllErrors() []error { return m }

// ImportUserBelongsUserGroupsResponseValidationError is the validation error
// returned by ImportUserBelongsUserGroupsResponse.Validate if the designated
// constraints aren't met.
type ImportUserBelongsUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportUserBelongsUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportUserBelongsUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportUserBelongsUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportUserBelongsUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportUserBelongsUserGroupsResponseValidationError) ErrorName() string {
	return "ImportUserBelongsUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportUserBelongsUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportUserBelongsUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportUserBelongsUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportUserBelongsUserGroupsResponseValidationError{}

// Validate checks the field values on ExportUserBelongsUserGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportUserBelongsUserGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserBelongsUserGroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportUserBelongsUserGroupsRequestMultiError, or nil if none found.
func (m *ExportUserBelongsUserGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserBelongsUserGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportUserBelongsUserGroupsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportUserBelongsUserGroupsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportUserBelongsUserGroupsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportUserBelongsUserGroupsRequestMultiError(errors)
	}

	return nil
}

// ExportUserBelongsUserGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ExportUserBelongsUserGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportUserBelongsUserGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserBelongsUserGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserBelongsUserGroupsRequestMultiError) AllErrors() []error { return m }

// ExportUserBelongsUserGroupsRequestValidationError is the validation error
// returned by ExportUserBelongsUserGroupsRequest.Validate if the designated
// constraints aren't met.
type ExportUserBelongsUserGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserBelongsUserGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserBelongsUserGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserBelongsUserGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserBelongsUserGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserBelongsUserGroupsRequestValidationError) ErrorName() string {
	return "ExportUserBelongsUserGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserBelongsUserGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserBelongsUserGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserBelongsUserGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserBelongsUserGroupsRequestValidationError{}

// Validate checks the field values on ExportUserBelongsUserGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExportUserBelongsUserGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportUserBelongsUserGroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExportUserBelongsUserGroupsResponseMultiError, or nil if none found.
func (m *ExportUserBelongsUserGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportUserBelongsUserGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportUserBelongsUserGroupsResponseMultiError(errors)
	}

	return nil
}

// ExportUserBelongsUserGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ExportUserBelongsUserGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportUserBelongsUserGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportUserBelongsUserGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportUserBelongsUserGroupsResponseMultiError) AllErrors() []error { return m }

// ExportUserBelongsUserGroupsResponseValidationError is the validation error
// returned by ExportUserBelongsUserGroupsResponse.Validate if the designated
// constraints aren't met.
type ExportUserBelongsUserGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportUserBelongsUserGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportUserBelongsUserGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportUserBelongsUserGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportUserBelongsUserGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportUserBelongsUserGroupsResponseValidationError) ErrorName() string {
	return "ExportUserBelongsUserGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportUserBelongsUserGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportUserBelongsUserGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportUserBelongsUserGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportUserBelongsUserGroupsResponseValidationError{}

// Validate checks the field values on ListUserBelongsUserGroupFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListUserBelongsUserGroupFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserBelongsUserGroupFormatsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListUserBelongsUserGroupFormatsRequestMultiError, or nil if none found.
func (m *ListUserBelongsUserGroupFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserBelongsUserGroupFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserBelongsUserGroupFormatsRequestMultiError(errors)
	}

	return nil
}

// ListUserBelongsUserGroupFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListUserBelongsUserGroupFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserBelongsUserGroupFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserBelongsUserGroupFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserBelongsUserGroupFormatsRequestMultiError) AllErrors() []error { return m }

// ListUserBelongsUserGroupFormatsRequestValidationError is the validation
// error returned by ListUserBelongsUserGroupFormatsRequest.Validate if the
// designated constraints aren't met.
type ListUserBelongsUserGroupFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserBelongsUserGroupFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserBelongsUserGroupFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserBelongsUserGroupFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserBelongsUserGroupFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserBelongsUserGroupFormatsRequestValidationError) ErrorName() string {
	return "ListUserBelongsUserGroupFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserBelongsUserGroupFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserBelongsUserGroupFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserBelongsUserGroupFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserBelongsUserGroupFormatsRequestValidationError{}

// Validate checks the field values on ListUserBelongsUserGroupFormatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListUserBelongsUserGroupFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserBelongsUserGroupFormatsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListUserBelongsUserGroupFormatsResponseMultiError, or nil if none found.
func (m *ListUserBelongsUserGroupFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserBelongsUserGroupFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserBelongsUserGroupFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserBelongsUserGroupFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserBelongsUserGroupFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserBelongsUserGroupFormatsResponseMultiError(errors)
	}

	return nil
}

// ListUserBelongsUserGroupFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListUserBelongsUserGroupFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserBelongsUserGroupFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserBelongsUserGroupFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserBelongsUserGroupFormatsResponseMultiError) AllErrors() []error { return m }

// ListUserBelongsUserGroupFormatsResponseValidationError is the validation
// error returned by ListUserBelongsUserGroupFormatsResponse.Validate if the
// designated constraints aren't met.
type ListUserBelongsUserGroupFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserBelongsUserGroupFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserBelongsUserGroupFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserBelongsUserGroupFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserBelongsUserGroupFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserBelongsUserGroupFormatsResponseValidationError) ErrorName() string {
	return "ListUserBelongsUserGroupFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserBelongsUserGroupFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserBelongsUserGroupFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserBelongsUserGroupFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserBelongsUserGroupFormatsResponseValidationError{}

// Validate checks the field values on ExportAttachedRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportAttachedRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportAttachedRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportAttachedRolesRequestMultiError, or nil if none found.
func (m *ExportAttachedRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportAttachedRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportAttachedRolesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportAttachedRolesRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportAttachedRolesRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportAttachedRolesRequestMultiError(errors)
	}

	return nil
}

// ExportAttachedRolesRequestMultiError is an error wrapping multiple
// validation errors returned by ExportAttachedRolesRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportAttachedRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportAttachedRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportAttachedRolesRequestMultiError) AllErrors() []error { return m }

// ExportAttachedRolesRequestValidationError is the validation error returned
// by ExportAttachedRolesRequest.Validate if the designated constraints aren't met.
type ExportAttachedRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportAttachedRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportAttachedRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportAttachedRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportAttachedRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportAttachedRolesRequestValidationError) ErrorName() string {
	return "ExportAttachedRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportAttachedRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportAttachedRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportAttachedRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportAttachedRolesRequestValidationError{}

// Validate checks the field values on ExportAttachedRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportAttachedRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportAttachedRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportAttachedRolesResponseMultiError, or nil if none found.
func (m *ExportAttachedRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportAttachedRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportAttachedRolesResponseMultiError(errors)
	}

	return nil
}

// ExportAttachedRolesResponseMultiError is an error wrapping multiple
// validation errors returned by ExportAttachedRolesResponse.ValidateAll() if
// the designated constraints aren't met.
type ExportAttachedRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportAttachedRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportAttachedRolesResponseMultiError) AllErrors() []error { return m }

// ExportAttachedRolesResponseValidationError is the validation error returned
// by ExportAttachedRolesResponse.Validate if the designated constraints
// aren't met.
type ExportAttachedRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportAttachedRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportAttachedRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportAttachedRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportAttachedRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportAttachedRolesResponseValidationError) ErrorName() string {
	return "ExportAttachedRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportAttachedRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportAttachedRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportAttachedRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportAttachedRolesResponseValidationError{}

// Validate checks the field values on ListUserGroupAttachedRolesFormatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListUserGroupAttachedRolesFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserGroupAttachedRolesFormatsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListUserGroupAttachedRolesFormatsRequestMultiError, or nil if none found.
func (m *ListUserGroupAttachedRolesFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupAttachedRolesFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserGroupAttachedRolesFormatsRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupAttachedRolesFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListUserGroupAttachedRolesFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupAttachedRolesFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupAttachedRolesFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupAttachedRolesFormatsRequestMultiError) AllErrors() []error { return m }

// ListUserGroupAttachedRolesFormatsRequestValidationError is the validation
// error returned by ListUserGroupAttachedRolesFormatsRequest.Validate if the
// designated constraints aren't met.
type ListUserGroupAttachedRolesFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupAttachedRolesFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupAttachedRolesFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupAttachedRolesFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupAttachedRolesFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupAttachedRolesFormatsRequestValidationError) ErrorName() string {
	return "ListUserGroupAttachedRolesFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupAttachedRolesFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupAttachedRolesFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupAttachedRolesFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupAttachedRolesFormatsRequestValidationError{}

// Validate checks the field values on
// ListUserGroupAttachedRolesFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupAttachedRolesFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserGroupAttachedRolesFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListUserGroupAttachedRolesFormatsResponseMultiError, or nil if none found.
func (m *ListUserGroupAttachedRolesFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupAttachedRolesFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupAttachedRolesFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupAttachedRolesFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupAttachedRolesFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGroupAttachedRolesFormatsResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupAttachedRolesFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListUserGroupAttachedRolesFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupAttachedRolesFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupAttachedRolesFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupAttachedRolesFormatsResponseMultiError) AllErrors() []error { return m }

// ListUserGroupAttachedRolesFormatsResponseValidationError is the validation
// error returned by ListUserGroupAttachedRolesFormatsResponse.Validate if the
// designated constraints aren't met.
type ListUserGroupAttachedRolesFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupAttachedRolesFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupAttachedRolesFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupAttachedRolesFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupAttachedRolesFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupAttachedRolesFormatsResponseValidationError) ErrorName() string {
	return "ListUserGroupAttachedRolesFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupAttachedRolesFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupAttachedRolesFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupAttachedRolesFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupAttachedRolesFormatsResponseValidationError{}

// Validate checks the field values on ExportAllowedMenuItemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportAllowedMenuItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportAllowedMenuItemsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportAllowedMenuItemsRequestMultiError, or nil if none found.
func (m *ExportAllowedMenuItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportAllowedMenuItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportAllowedMenuItemsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportAllowedMenuItemsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportAllowedMenuItemsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportAllowedMenuItemsRequestMultiError(errors)
	}

	return nil
}

// ExportAllowedMenuItemsRequestMultiError is an error wrapping multiple
// validation errors returned by ExportAllowedMenuItemsRequest.ValidateAll()
// if the designated constraints aren't met.
type ExportAllowedMenuItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportAllowedMenuItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportAllowedMenuItemsRequestMultiError) AllErrors() []error { return m }

// ExportAllowedMenuItemsRequestValidationError is the validation error
// returned by ExportAllowedMenuItemsRequest.Validate if the designated
// constraints aren't met.
type ExportAllowedMenuItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportAllowedMenuItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportAllowedMenuItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportAllowedMenuItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportAllowedMenuItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportAllowedMenuItemsRequestValidationError) ErrorName() string {
	return "ExportAllowedMenuItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportAllowedMenuItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportAllowedMenuItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportAllowedMenuItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportAllowedMenuItemsRequestValidationError{}

// Validate checks the field values on ExportAllowedMenuItemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportAllowedMenuItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportAllowedMenuItemsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ExportAllowedMenuItemsResponseMultiError, or nil if none found.
func (m *ExportAllowedMenuItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportAllowedMenuItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportAllowedMenuItemsResponseMultiError(errors)
	}

	return nil
}

// ExportAllowedMenuItemsResponseMultiError is an error wrapping multiple
// validation errors returned by ExportAllowedMenuItemsResponse.ValidateAll()
// if the designated constraints aren't met.
type ExportAllowedMenuItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportAllowedMenuItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportAllowedMenuItemsResponseMultiError) AllErrors() []error { return m }

// ExportAllowedMenuItemsResponseValidationError is the validation error
// returned by ExportAllowedMenuItemsResponse.Validate if the designated
// constraints aren't met.
type ExportAllowedMenuItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportAllowedMenuItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportAllowedMenuItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportAllowedMenuItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportAllowedMenuItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportAllowedMenuItemsResponseValidationError) ErrorName() string {
	return "ExportAllowedMenuItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportAllowedMenuItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportAllowedMenuItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportAllowedMenuItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportAllowedMenuItemsResponseValidationError{}

// Validate checks the field values on
// ListUserGroupAllowedMenuItemFormatsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupAllowedMenuItemFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserGroupAllowedMenuItemFormatsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListUserGroupAllowedMenuItemFormatsRequestMultiError, or nil if none found.
func (m *ListUserGroupAllowedMenuItemFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupAllowedMenuItemFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserGroupAllowedMenuItemFormatsRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupAllowedMenuItemFormatsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListUserGroupAllowedMenuItemFormatsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupAllowedMenuItemFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupAllowedMenuItemFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupAllowedMenuItemFormatsRequestMultiError) AllErrors() []error { return m }

// ListUserGroupAllowedMenuItemFormatsRequestValidationError is the validation
// error returned by ListUserGroupAllowedMenuItemFormatsRequest.Validate if
// the designated constraints aren't met.
type ListUserGroupAllowedMenuItemFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupAllowedMenuItemFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupAllowedMenuItemFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupAllowedMenuItemFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupAllowedMenuItemFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupAllowedMenuItemFormatsRequestValidationError) ErrorName() string {
	return "ListUserGroupAllowedMenuItemFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupAllowedMenuItemFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupAllowedMenuItemFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupAllowedMenuItemFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupAllowedMenuItemFormatsRequestValidationError{}

// Validate checks the field values on
// ListUserGroupAllowedMenuItemFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupAllowedMenuItemFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUserGroupAllowedMenuItemFormatsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListUserGroupAllowedMenuItemFormatsResponseMultiError, or nil if none found.
func (m *ListUserGroupAllowedMenuItemFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupAllowedMenuItemFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupAllowedMenuItemFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupAllowedMenuItemFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupAllowedMenuItemFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserGroupAllowedMenuItemFormatsResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupAllowedMenuItemFormatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListUserGroupAllowedMenuItemFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupAllowedMenuItemFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupAllowedMenuItemFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupAllowedMenuItemFormatsResponseMultiError) AllErrors() []error { return m }

// ListUserGroupAllowedMenuItemFormatsResponseValidationError is the validation
// error returned by ListUserGroupAllowedMenuItemFormatsResponse.Validate if
// the designated constraints aren't met.
type ListUserGroupAllowedMenuItemFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupAllowedMenuItemFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupAllowedMenuItemFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupAllowedMenuItemFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupAllowedMenuItemFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupAllowedMenuItemFormatsResponseValidationError) ErrorName() string {
	return "ListUserGroupAllowedMenuItemFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupAllowedMenuItemFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupAllowedMenuItemFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupAllowedMenuItemFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupAllowedMenuItemFormatsResponseValidationError{}

// Validate checks the field values on CreateRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleAttributeRequestMultiError, or nil if none found.
func (m *CreateRoleAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleAttributeRequestValidationError{
					field:  "RoleAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleAttributeRequestValidationError{
					field:  "RoleAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleAttributeRequestValidationError{
				field:  "RoleAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleAttributeRequestMultiError(errors)
	}

	return nil
}

// CreateRoleAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by CreateRoleAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateRoleAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleAttributeRequestMultiError) AllErrors() []error { return m }

// CreateRoleAttributeRequestValidationError is the validation error returned
// by CreateRoleAttributeRequest.Validate if the designated constraints aren't met.
type CreateRoleAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleAttributeRequestValidationError) ErrorName() string {
	return "CreateRoleAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleAttributeRequestValidationError{}

// Validate checks the field values on ListRoleAttributesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleAttributesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleAttributesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleAttributesRequestMultiError, or nil if none found.
func (m *ListRoleAttributesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleAttributesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRoleAttributesRequestMultiError(errors)
	}

	return nil
}

// ListRoleAttributesRequestMultiError is an error wrapping multiple validation
// errors returned by ListRoleAttributesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListRoleAttributesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleAttributesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleAttributesRequestMultiError) AllErrors() []error { return m }

// ListRoleAttributesRequestValidationError is the validation error returned by
// ListRoleAttributesRequest.Validate if the designated constraints aren't met.
type ListRoleAttributesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleAttributesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleAttributesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleAttributesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleAttributesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleAttributesRequestValidationError) ErrorName() string {
	return "ListRoleAttributesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleAttributesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleAttributesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleAttributesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleAttributesRequestValidationError{}

// Validate checks the field values on ListRoleAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRoleAttributesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleAttributesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoleAttributesResponseMultiError, or nil if none found.
func (m *ListRoleAttributesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleAttributesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleAttributesResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleAttributesResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleAttributesResponseMultiError(errors)
	}

	return nil
}

// ListRoleAttributesResponseMultiError is an error wrapping multiple
// validation errors returned by ListRoleAttributesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListRoleAttributesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleAttributesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleAttributesResponseMultiError) AllErrors() []error { return m }

// ListRoleAttributesResponseValidationError is the validation error returned
// by ListRoleAttributesResponse.Validate if the designated constraints aren't met.
type ListRoleAttributesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleAttributesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleAttributesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleAttributesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleAttributesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleAttributesResponseValidationError) ErrorName() string {
	return "ListRoleAttributesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoleAttributesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleAttributesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleAttributesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleAttributesResponseValidationError{}

// Validate checks the field values on GetRoleAttributeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoleAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleAttributeRequestMultiError, or nil if none found.
func (m *GetRoleAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleAttributeId

	if len(errors) > 0 {
		return GetRoleAttributeRequestMultiError(errors)
	}

	return nil
}

// GetRoleAttributeRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoleAttributeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoleAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleAttributeRequestMultiError) AllErrors() []error { return m }

// GetRoleAttributeRequestValidationError is the validation error returned by
// GetRoleAttributeRequest.Validate if the designated constraints aren't met.
type GetRoleAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleAttributeRequestValidationError) ErrorName() string {
	return "GetRoleAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoleAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleAttributeRequestValidationError{}

// Validate checks the field values on UpdateRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoleAttributeRequestMultiError, or nil if none found.
func (m *UpdateRoleAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoleAttributeRequestValidationError{
					field:  "RoleAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoleAttributeRequestValidationError{
					field:  "RoleAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoleAttributeRequestValidationError{
				field:  "RoleAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoleAttributeRequestMultiError(errors)
	}

	return nil
}

// UpdateRoleAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateRoleAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateRoleAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleAttributeRequestMultiError) AllErrors() []error { return m }

// UpdateRoleAttributeRequestValidationError is the validation error returned
// by UpdateRoleAttributeRequest.Validate if the designated constraints aren't met.
type UpdateRoleAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleAttributeRequestValidationError) ErrorName() string {
	return "UpdateRoleAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoleAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleAttributeRequestValidationError{}

// Validate checks the field values on DeleteRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleAttributeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleAttributeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleAttributeRequestMultiError, or nil if none found.
func (m *DeleteRoleAttributeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleAttributeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoleAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRoleAttributeRequestValidationError{
					field:  "RoleAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRoleAttributeRequestValidationError{
					field:  "RoleAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoleAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRoleAttributeRequestValidationError{
				field:  "RoleAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRoleAttributeRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleAttributeRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteRoleAttributeRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteRoleAttributeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleAttributeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleAttributeRequestMultiError) AllErrors() []error { return m }

// DeleteRoleAttributeRequestValidationError is the validation error returned
// by DeleteRoleAttributeRequest.Validate if the designated constraints aren't met.
type DeleteRoleAttributeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleAttributeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleAttributeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleAttributeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleAttributeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleAttributeRequestValidationError) ErrorName() string {
	return "DeleteRoleAttributeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleAttributeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleAttributeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleAttributeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleAttributeRequestValidationError{}

// Validate checks the field values on UserAttribute_UserStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserAttribute_UserStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserAttribute_UserStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserAttribute_UserStatusMultiError, or nil if none found.
func (m *UserAttribute_UserStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UserAttribute_UserStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAttribute_UserStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAttribute_UserStatusValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAttribute_UserStatusValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAttribute_UserStatusValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAttribute_UserStatusValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAttribute_UserStatusValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserAttribute_UserStatusValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserAttribute_UserStatusValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserAttribute_UserStatusValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserAttribute_UserStatusMultiError(errors)
	}

	return nil
}

// UserAttribute_UserStatusMultiError is an error wrapping multiple validation
// errors returned by UserAttribute_UserStatus.ValidateAll() if the designated
// constraints aren't met.
type UserAttribute_UserStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserAttribute_UserStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserAttribute_UserStatusMultiError) AllErrors() []error { return m }

// UserAttribute_UserStatusValidationError is the validation error returned by
// UserAttribute_UserStatus.Validate if the designated constraints aren't met.
type UserAttribute_UserStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserAttribute_UserStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserAttribute_UserStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserAttribute_UserStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserAttribute_UserStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserAttribute_UserStatusValidationError) ErrorName() string {
	return "UserAttribute_UserStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UserAttribute_UserStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserAttribute_UserStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserAttribute_UserStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserAttribute_UserStatusValidationError{}

// Validate checks the field values on UserGroupAttribute_UserSummary with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserGroupAttribute_UserSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupAttribute_UserSummary with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserGroupAttribute_UserSummaryMultiError, or nil if none found.
func (m *UserGroupAttribute_UserSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupAttribute_UserSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return UserGroupAttribute_UserSummaryMultiError(errors)
	}

	return nil
}

// UserGroupAttribute_UserSummaryMultiError is an error wrapping multiple
// validation errors returned by UserGroupAttribute_UserSummary.ValidateAll()
// if the designated constraints aren't met.
type UserGroupAttribute_UserSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupAttribute_UserSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupAttribute_UserSummaryMultiError) AllErrors() []error { return m }

// UserGroupAttribute_UserSummaryValidationError is the validation error
// returned by UserGroupAttribute_UserSummary.Validate if the designated
// constraints aren't met.
type UserGroupAttribute_UserSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupAttribute_UserSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupAttribute_UserSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupAttribute_UserSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupAttribute_UserSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupAttribute_UserSummaryValidationError) ErrorName() string {
	return "UserGroupAttribute_UserSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e UserGroupAttribute_UserSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupAttribute_UserSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupAttribute_UserSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupAttribute_UserSummaryValidationError{}
