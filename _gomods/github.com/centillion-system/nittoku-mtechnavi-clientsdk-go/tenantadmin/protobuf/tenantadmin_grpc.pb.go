// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenantAdminServiceClient is the client API for TenantAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantAdminServiceClient interface {
	CreateUserAttribute(ctx context.Context, in *CreateUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error)
	CreateUserAndUserAttribute(ctx context.Context, in *CreateUserAndUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error)
	ListUserAttributes(ctx context.Context, in *ListUserAttributesRequest, opts ...grpc.CallOption) (*ListUserAttributesResponse, error)
	GetUserAttribute(ctx context.Context, in *GetUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error)
	UpdateUserAttribute(ctx context.Context, in *UpdateUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error)
	UpdateUserAndUserAttribute(ctx context.Context, in *UpdateUserAndUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error)
	DeleteUserAttribute(ctx context.Context, in *DeleteUserAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUserAndUserAttribute(ctx context.Context, in *DeleteUserAndUserAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*DisableUserResponse, error)
	EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*EnableUserResponse, error)
	// アカウント取込
	ImportUserAttributes(ctx context.Context, in *ImportUserAttributesRequest, opts ...grpc.CallOption) (*ImportUserAttributesResponse, error)
	// 取込フォーマット出力
	ExportUserAttributes(ctx context.Context, in *ExportUserAttributesRequest, opts ...grpc.CallOption) (*ExportUserAttributesResponse, error)
	// 取込フォーマット取得
	ListUserAttributeFormats(ctx context.Context, in *ListUserAttributeFormatsRequest, opts ...grpc.CallOption) (*ListUserAttributeFormatsResponse, error)
	// ユーザ作成完了通知を送信
	SendEmailUserCreated(ctx context.Context, in *SendEmailUserCreatedRequest, opts ...grpc.CallOption) (*SendEmailUserCreatedResponse, error)
	CreateUserGroupAttribute(ctx context.Context, in *CreateUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error)
	CreateUserGroupAndUserGroupAttribute(ctx context.Context, in *CreateUserGroupAndUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error)
	ListUserGroupAttributes(ctx context.Context, in *ListUserGroupAttributesRequest, opts ...grpc.CallOption) (*ListUserGroupAttributesResponse, error)
	GetUserGroupAttribute(ctx context.Context, in *GetUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error)
	UpdateUserGroupAttribute(ctx context.Context, in *UpdateUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error)
	UpdateUserGroupAndUserGroupAttribute(ctx context.Context, in *UpdateUserGroupAndUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error)
	DeleteUserGroupAttribute(ctx context.Context, in *DeleteUserGroupAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUserAndUserGroupAttribute(ctx context.Context, in *DeleteUserGroupAndUserGroupAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// メンバー取込
	ImportUserBelongsUserGroups(ctx context.Context, in *ImportUserBelongsUserGroupsRequest, opts ...grpc.CallOption) (*ImportUserBelongsUserGroupsResponse, error)
	// 取込フォーマット出力
	ExportUserBelongsUserGroups(ctx context.Context, in *ExportUserBelongsUserGroupsRequest, opts ...grpc.CallOption) (*ExportUserBelongsUserGroupsResponse, error)
	// 取込フォーマット取得
	ListUserBelongsUserGroupFormats(ctx context.Context, in *ListUserBelongsUserGroupFormatsRequest, opts ...grpc.CallOption) (*ListUserBelongsUserGroupFormatsResponse, error)
	// ロール出力
	ExportAttachedRoles(ctx context.Context, in *ExportAttachedRolesRequest, opts ...grpc.CallOption) (*ExportAttachedRolesResponse, error)
	// フォーマット取得
	ListUserGroupAttachedRolesFormats(ctx context.Context, in *ListUserGroupAttachedRolesFormatsRequest, opts ...grpc.CallOption) (*ListUserGroupAttachedRolesFormatsResponse, error)
	// メニュー画面出力
	ExportAllowedMenuItems(ctx context.Context, in *ExportAllowedMenuItemsRequest, opts ...grpc.CallOption) (*ExportAllowedMenuItemsResponse, error)
	// フォーマット取得
	ListUserGroupAllowedMenuItemFormats(ctx context.Context, in *ListUserGroupAllowedMenuItemFormatsRequest, opts ...grpc.CallOption) (*ListUserGroupAllowedMenuItemFormatsResponse, error)
	// ロール
	CreateRoleAttribute(ctx context.Context, in *CreateRoleAttributeRequest, opts ...grpc.CallOption) (*RoleAttribute, error)
	ListRoleAttributes(ctx context.Context, in *ListRoleAttributesRequest, opts ...grpc.CallOption) (*ListRoleAttributesResponse, error)
	GetRoleAttribute(ctx context.Context, in *GetRoleAttributeRequest, opts ...grpc.CallOption) (*RoleAttribute, error)
	UpdateRoleAttribute(ctx context.Context, in *UpdateRoleAttributeRequest, opts ...grpc.CallOption) (*RoleAttribute, error)
	DeleteRoleAttribute(ctx context.Context, in *DeleteRoleAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tenantAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantAdminServiceClient(cc grpc.ClientConnInterface) TenantAdminServiceClient {
	return &tenantAdminServiceClient{cc}
}

func (c *tenantAdminServiceClient) CreateUserAttribute(ctx context.Context, in *CreateUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error) {
	out := new(UserAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) CreateUserAndUserAttribute(ctx context.Context, in *CreateUserAndUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error) {
	out := new(UserAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserAndUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListUserAttributes(ctx context.Context, in *ListUserAttributesRequest, opts ...grpc.CallOption) (*ListUserAttributesResponse, error) {
	out := new(ListUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) GetUserAttribute(ctx context.Context, in *GetUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error) {
	out := new(UserAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/GetUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) UpdateUserAttribute(ctx context.Context, in *UpdateUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error) {
	out := new(UserAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) UpdateUserAndUserAttribute(ctx context.Context, in *UpdateUserAndUserAttributeRequest, opts ...grpc.CallOption) (*UserAttribute, error) {
	out := new(UserAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserAndUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) DeleteUserAttribute(ctx context.Context, in *DeleteUserAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) DeleteUserAndUserAttribute(ctx context.Context, in *DeleteUserAndUserAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserAndUserAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...grpc.CallOption) (*DisableUserResponse, error) {
	out := new(DisableUserResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/DisableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) EnableUser(ctx context.Context, in *EnableUserRequest, opts ...grpc.CallOption) (*EnableUserResponse, error) {
	out := new(EnableUserResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/EnableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ImportUserAttributes(ctx context.Context, in *ImportUserAttributesRequest, opts ...grpc.CallOption) (*ImportUserAttributesResponse, error) {
	out := new(ImportUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ImportUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ExportUserAttributes(ctx context.Context, in *ExportUserAttributesRequest, opts ...grpc.CallOption) (*ExportUserAttributesResponse, error) {
	out := new(ExportUserAttributesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ExportUserAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListUserAttributeFormats(ctx context.Context, in *ListUserAttributeFormatsRequest, opts ...grpc.CallOption) (*ListUserAttributeFormatsResponse, error) {
	out := new(ListUserAttributeFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserAttributeFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) SendEmailUserCreated(ctx context.Context, in *SendEmailUserCreatedRequest, opts ...grpc.CallOption) (*SendEmailUserCreatedResponse, error) {
	out := new(SendEmailUserCreatedResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/SendEmailUserCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) CreateUserGroupAttribute(ctx context.Context, in *CreateUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error) {
	out := new(UserGroupAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) CreateUserGroupAndUserGroupAttribute(ctx context.Context, in *CreateUserGroupAndUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error) {
	out := new(UserGroupAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserGroupAndUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListUserGroupAttributes(ctx context.Context, in *ListUserGroupAttributesRequest, opts ...grpc.CallOption) (*ListUserGroupAttributesResponse, error) {
	out := new(ListUserGroupAttributesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserGroupAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) GetUserGroupAttribute(ctx context.Context, in *GetUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error) {
	out := new(UserGroupAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/GetUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) UpdateUserGroupAttribute(ctx context.Context, in *UpdateUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error) {
	out := new(UserGroupAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) UpdateUserGroupAndUserGroupAttribute(ctx context.Context, in *UpdateUserGroupAndUserGroupAttributeRequest, opts ...grpc.CallOption) (*UserGroupAttribute, error) {
	out := new(UserGroupAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserGroupAndUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) DeleteUserGroupAttribute(ctx context.Context, in *DeleteUserGroupAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) DeleteUserAndUserGroupAttribute(ctx context.Context, in *DeleteUserGroupAndUserGroupAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserAndUserGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ImportUserBelongsUserGroups(ctx context.Context, in *ImportUserBelongsUserGroupsRequest, opts ...grpc.CallOption) (*ImportUserBelongsUserGroupsResponse, error) {
	out := new(ImportUserBelongsUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ImportUserBelongsUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ExportUserBelongsUserGroups(ctx context.Context, in *ExportUserBelongsUserGroupsRequest, opts ...grpc.CallOption) (*ExportUserBelongsUserGroupsResponse, error) {
	out := new(ExportUserBelongsUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ExportUserBelongsUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListUserBelongsUserGroupFormats(ctx context.Context, in *ListUserBelongsUserGroupFormatsRequest, opts ...grpc.CallOption) (*ListUserBelongsUserGroupFormatsResponse, error) {
	out := new(ListUserBelongsUserGroupFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserBelongsUserGroupFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ExportAttachedRoles(ctx context.Context, in *ExportAttachedRolesRequest, opts ...grpc.CallOption) (*ExportAttachedRolesResponse, error) {
	out := new(ExportAttachedRolesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ExportAttachedRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListUserGroupAttachedRolesFormats(ctx context.Context, in *ListUserGroupAttachedRolesFormatsRequest, opts ...grpc.CallOption) (*ListUserGroupAttachedRolesFormatsResponse, error) {
	out := new(ListUserGroupAttachedRolesFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserGroupAttachedRolesFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ExportAllowedMenuItems(ctx context.Context, in *ExportAllowedMenuItemsRequest, opts ...grpc.CallOption) (*ExportAllowedMenuItemsResponse, error) {
	out := new(ExportAllowedMenuItemsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ExportAllowedMenuItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListUserGroupAllowedMenuItemFormats(ctx context.Context, in *ListUserGroupAllowedMenuItemFormatsRequest, opts ...grpc.CallOption) (*ListUserGroupAllowedMenuItemFormatsResponse, error) {
	out := new(ListUserGroupAllowedMenuItemFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserGroupAllowedMenuItemFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) CreateRoleAttribute(ctx context.Context, in *CreateRoleAttributeRequest, opts ...grpc.CallOption) (*RoleAttribute, error) {
	out := new(RoleAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/CreateRoleAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) ListRoleAttributes(ctx context.Context, in *ListRoleAttributesRequest, opts ...grpc.CallOption) (*ListRoleAttributesResponse, error) {
	out := new(ListRoleAttributesResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/ListRoleAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) GetRoleAttribute(ctx context.Context, in *GetRoleAttributeRequest, opts ...grpc.CallOption) (*RoleAttribute, error) {
	out := new(RoleAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/GetRoleAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) UpdateRoleAttribute(ctx context.Context, in *UpdateRoleAttributeRequest, opts ...grpc.CallOption) (*RoleAttribute, error) {
	out := new(RoleAttribute)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateRoleAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantAdminServiceClient) DeleteRoleAttribute(ctx context.Context, in *DeleteRoleAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteRoleAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantAdminServiceServer is the server API for TenantAdminService service.
// All implementations must embed UnimplementedTenantAdminServiceServer
// for forward compatibility
type TenantAdminServiceServer interface {
	CreateUserAttribute(context.Context, *CreateUserAttributeRequest) (*UserAttribute, error)
	CreateUserAndUserAttribute(context.Context, *CreateUserAndUserAttributeRequest) (*UserAttribute, error)
	ListUserAttributes(context.Context, *ListUserAttributesRequest) (*ListUserAttributesResponse, error)
	GetUserAttribute(context.Context, *GetUserAttributeRequest) (*UserAttribute, error)
	UpdateUserAttribute(context.Context, *UpdateUserAttributeRequest) (*UserAttribute, error)
	UpdateUserAndUserAttribute(context.Context, *UpdateUserAndUserAttributeRequest) (*UserAttribute, error)
	DeleteUserAttribute(context.Context, *DeleteUserAttributeRequest) (*emptypb.Empty, error)
	DeleteUserAndUserAttribute(context.Context, *DeleteUserAndUserAttributeRequest) (*emptypb.Empty, error)
	DisableUser(context.Context, *DisableUserRequest) (*DisableUserResponse, error)
	EnableUser(context.Context, *EnableUserRequest) (*EnableUserResponse, error)
	// アカウント取込
	ImportUserAttributes(context.Context, *ImportUserAttributesRequest) (*ImportUserAttributesResponse, error)
	// 取込フォーマット出力
	ExportUserAttributes(context.Context, *ExportUserAttributesRequest) (*ExportUserAttributesResponse, error)
	// 取込フォーマット取得
	ListUserAttributeFormats(context.Context, *ListUserAttributeFormatsRequest) (*ListUserAttributeFormatsResponse, error)
	// ユーザ作成完了通知を送信
	SendEmailUserCreated(context.Context, *SendEmailUserCreatedRequest) (*SendEmailUserCreatedResponse, error)
	CreateUserGroupAttribute(context.Context, *CreateUserGroupAttributeRequest) (*UserGroupAttribute, error)
	CreateUserGroupAndUserGroupAttribute(context.Context, *CreateUserGroupAndUserGroupAttributeRequest) (*UserGroupAttribute, error)
	ListUserGroupAttributes(context.Context, *ListUserGroupAttributesRequest) (*ListUserGroupAttributesResponse, error)
	GetUserGroupAttribute(context.Context, *GetUserGroupAttributeRequest) (*UserGroupAttribute, error)
	UpdateUserGroupAttribute(context.Context, *UpdateUserGroupAttributeRequest) (*UserGroupAttribute, error)
	UpdateUserGroupAndUserGroupAttribute(context.Context, *UpdateUserGroupAndUserGroupAttributeRequest) (*UserGroupAttribute, error)
	DeleteUserGroupAttribute(context.Context, *DeleteUserGroupAttributeRequest) (*emptypb.Empty, error)
	DeleteUserAndUserGroupAttribute(context.Context, *DeleteUserGroupAndUserGroupAttributeRequest) (*emptypb.Empty, error)
	// メンバー取込
	ImportUserBelongsUserGroups(context.Context, *ImportUserBelongsUserGroupsRequest) (*ImportUserBelongsUserGroupsResponse, error)
	// 取込フォーマット出力
	ExportUserBelongsUserGroups(context.Context, *ExportUserBelongsUserGroupsRequest) (*ExportUserBelongsUserGroupsResponse, error)
	// 取込フォーマット取得
	ListUserBelongsUserGroupFormats(context.Context, *ListUserBelongsUserGroupFormatsRequest) (*ListUserBelongsUserGroupFormatsResponse, error)
	// ロール出力
	ExportAttachedRoles(context.Context, *ExportAttachedRolesRequest) (*ExportAttachedRolesResponse, error)
	// フォーマット取得
	ListUserGroupAttachedRolesFormats(context.Context, *ListUserGroupAttachedRolesFormatsRequest) (*ListUserGroupAttachedRolesFormatsResponse, error)
	// メニュー画面出力
	ExportAllowedMenuItems(context.Context, *ExportAllowedMenuItemsRequest) (*ExportAllowedMenuItemsResponse, error)
	// フォーマット取得
	ListUserGroupAllowedMenuItemFormats(context.Context, *ListUserGroupAllowedMenuItemFormatsRequest) (*ListUserGroupAllowedMenuItemFormatsResponse, error)
	// ロール
	CreateRoleAttribute(context.Context, *CreateRoleAttributeRequest) (*RoleAttribute, error)
	ListRoleAttributes(context.Context, *ListRoleAttributesRequest) (*ListRoleAttributesResponse, error)
	GetRoleAttribute(context.Context, *GetRoleAttributeRequest) (*RoleAttribute, error)
	UpdateRoleAttribute(context.Context, *UpdateRoleAttributeRequest) (*RoleAttribute, error)
	DeleteRoleAttribute(context.Context, *DeleteRoleAttributeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTenantAdminServiceServer()
}

// UnimplementedTenantAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantAdminServiceServer struct {
}

func (UnimplementedTenantAdminServiceServer) CreateUserAttribute(context.Context, *CreateUserAttributeRequest) (*UserAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) CreateUserAndUserAttribute(context.Context, *CreateUserAndUserAttributeRequest) (*UserAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAndUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListUserAttributes(context.Context, *ListUserAttributesRequest) (*ListUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAttributes not implemented")
}
func (UnimplementedTenantAdminServiceServer) GetUserAttribute(context.Context, *GetUserAttributeRequest) (*UserAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) UpdateUserAttribute(context.Context, *UpdateUserAttributeRequest) (*UserAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) UpdateUserAndUserAttribute(context.Context, *UpdateUserAndUserAttributeRequest) (*UserAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAndUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) DeleteUserAttribute(context.Context, *DeleteUserAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) DeleteUserAndUserAttribute(context.Context, *DeleteUserAndUserAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAndUserAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) DisableUser(context.Context, *DisableUserRequest) (*DisableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedTenantAdminServiceServer) EnableUser(context.Context, *EnableUserRequest) (*EnableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedTenantAdminServiceServer) ImportUserAttributes(context.Context, *ImportUserAttributesRequest) (*ImportUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserAttributes not implemented")
}
func (UnimplementedTenantAdminServiceServer) ExportUserAttributes(context.Context, *ExportUserAttributesRequest) (*ExportUserAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUserAttributes not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListUserAttributeFormats(context.Context, *ListUserAttributeFormatsRequest) (*ListUserAttributeFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAttributeFormats not implemented")
}
func (UnimplementedTenantAdminServiceServer) SendEmailUserCreated(context.Context, *SendEmailUserCreatedRequest) (*SendEmailUserCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailUserCreated not implemented")
}
func (UnimplementedTenantAdminServiceServer) CreateUserGroupAttribute(context.Context, *CreateUserGroupAttributeRequest) (*UserGroupAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) CreateUserGroupAndUserGroupAttribute(context.Context, *CreateUserGroupAndUserGroupAttributeRequest) (*UserGroupAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGroupAndUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListUserGroupAttributes(context.Context, *ListUserGroupAttributesRequest) (*ListUserGroupAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroupAttributes not implemented")
}
func (UnimplementedTenantAdminServiceServer) GetUserGroupAttribute(context.Context, *GetUserGroupAttributeRequest) (*UserGroupAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) UpdateUserGroupAttribute(context.Context, *UpdateUserGroupAttributeRequest) (*UserGroupAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) UpdateUserGroupAndUserGroupAttribute(context.Context, *UpdateUserGroupAndUserGroupAttributeRequest) (*UserGroupAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserGroupAndUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) DeleteUserGroupAttribute(context.Context, *DeleteUserGroupAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) DeleteUserAndUserGroupAttribute(context.Context, *DeleteUserGroupAndUserGroupAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAndUserGroupAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) ImportUserBelongsUserGroups(context.Context, *ImportUserBelongsUserGroupsRequest) (*ImportUserBelongsUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserBelongsUserGroups not implemented")
}
func (UnimplementedTenantAdminServiceServer) ExportUserBelongsUserGroups(context.Context, *ExportUserBelongsUserGroupsRequest) (*ExportUserBelongsUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUserBelongsUserGroups not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListUserBelongsUserGroupFormats(context.Context, *ListUserBelongsUserGroupFormatsRequest) (*ListUserBelongsUserGroupFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBelongsUserGroupFormats not implemented")
}
func (UnimplementedTenantAdminServiceServer) ExportAttachedRoles(context.Context, *ExportAttachedRolesRequest) (*ExportAttachedRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAttachedRoles not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListUserGroupAttachedRolesFormats(context.Context, *ListUserGroupAttachedRolesFormatsRequest) (*ListUserGroupAttachedRolesFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroupAttachedRolesFormats not implemented")
}
func (UnimplementedTenantAdminServiceServer) ExportAllowedMenuItems(context.Context, *ExportAllowedMenuItemsRequest) (*ExportAllowedMenuItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAllowedMenuItems not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListUserGroupAllowedMenuItemFormats(context.Context, *ListUserGroupAllowedMenuItemFormatsRequest) (*ListUserGroupAllowedMenuItemFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroupAllowedMenuItemFormats not implemented")
}
func (UnimplementedTenantAdminServiceServer) CreateRoleAttribute(context.Context, *CreateRoleAttributeRequest) (*RoleAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) ListRoleAttributes(context.Context, *ListRoleAttributesRequest) (*ListRoleAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleAttributes not implemented")
}
func (UnimplementedTenantAdminServiceServer) GetRoleAttribute(context.Context, *GetRoleAttributeRequest) (*RoleAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) UpdateRoleAttribute(context.Context, *UpdateRoleAttributeRequest) (*RoleAttribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) DeleteRoleAttribute(context.Context, *DeleteRoleAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleAttribute not implemented")
}
func (UnimplementedTenantAdminServiceServer) mustEmbedUnimplementedTenantAdminServiceServer() {}

// UnsafeTenantAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantAdminServiceServer will
// result in compilation errors.
type UnsafeTenantAdminServiceServer interface {
	mustEmbedUnimplementedTenantAdminServiceServer()
}

func RegisterTenantAdminServiceServer(s grpc.ServiceRegistrar, srv TenantAdminServiceServer) {
	s.RegisterService(&TenantAdminService_ServiceDesc, srv)
}

func _TenantAdminService_CreateUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).CreateUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).CreateUserAttribute(ctx, req.(*CreateUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_CreateUserAndUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAndUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).CreateUserAndUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserAndUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).CreateUserAndUserAttribute(ctx, req.(*CreateUserAndUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListUserAttributes(ctx, req.(*ListUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_GetUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).GetUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/GetUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).GetUserAttribute(ctx, req.(*GetUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_UpdateUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).UpdateUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).UpdateUserAttribute(ctx, req.(*UpdateUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_UpdateUserAndUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAndUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).UpdateUserAndUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserAndUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).UpdateUserAndUserAttribute(ctx, req.(*UpdateUserAndUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_DeleteUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).DeleteUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).DeleteUserAttribute(ctx, req.(*DeleteUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_DeleteUserAndUserAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAndUserAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).DeleteUserAndUserAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserAndUserAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).DeleteUserAndUserAttribute(ctx, req.(*DeleteUserAndUserAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/DisableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).DisableUser(ctx, req.(*DisableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/EnableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).EnableUser(ctx, req.(*EnableUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ImportUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ImportUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ImportUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ImportUserAttributes(ctx, req.(*ImportUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ExportUserAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ExportUserAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ExportUserAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ExportUserAttributes(ctx, req.(*ExportUserAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListUserAttributeFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAttributeFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListUserAttributeFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserAttributeFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListUserAttributeFormats(ctx, req.(*ListUserAttributeFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_SendEmailUserCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailUserCreatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).SendEmailUserCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/SendEmailUserCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).SendEmailUserCreated(ctx, req.(*SendEmailUserCreatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_CreateUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).CreateUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).CreateUserGroupAttribute(ctx, req.(*CreateUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_CreateUserGroupAndUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGroupAndUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).CreateUserGroupAndUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/CreateUserGroupAndUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).CreateUserGroupAndUserGroupAttribute(ctx, req.(*CreateUserGroupAndUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListUserGroupAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListUserGroupAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserGroupAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListUserGroupAttributes(ctx, req.(*ListUserGroupAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_GetUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).GetUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/GetUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).GetUserGroupAttribute(ctx, req.(*GetUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_UpdateUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).UpdateUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).UpdateUserGroupAttribute(ctx, req.(*UpdateUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_UpdateUserGroupAndUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserGroupAndUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).UpdateUserGroupAndUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateUserGroupAndUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).UpdateUserGroupAndUserGroupAttribute(ctx, req.(*UpdateUserGroupAndUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_DeleteUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).DeleteUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).DeleteUserGroupAttribute(ctx, req.(*DeleteUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_DeleteUserAndUserGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGroupAndUserGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).DeleteUserAndUserGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteUserAndUserGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).DeleteUserAndUserGroupAttribute(ctx, req.(*DeleteUserGroupAndUserGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ImportUserBelongsUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportUserBelongsUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ImportUserBelongsUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ImportUserBelongsUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ImportUserBelongsUserGroups(ctx, req.(*ImportUserBelongsUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ExportUserBelongsUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserBelongsUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ExportUserBelongsUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ExportUserBelongsUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ExportUserBelongsUserGroups(ctx, req.(*ExportUserBelongsUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListUserBelongsUserGroupFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBelongsUserGroupFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListUserBelongsUserGroupFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserBelongsUserGroupFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListUserBelongsUserGroupFormats(ctx, req.(*ListUserBelongsUserGroupFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ExportAttachedRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAttachedRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ExportAttachedRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ExportAttachedRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ExportAttachedRoles(ctx, req.(*ExportAttachedRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListUserGroupAttachedRolesFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupAttachedRolesFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListUserGroupAttachedRolesFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserGroupAttachedRolesFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListUserGroupAttachedRolesFormats(ctx, req.(*ListUserGroupAttachedRolesFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ExportAllowedMenuItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAllowedMenuItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ExportAllowedMenuItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ExportAllowedMenuItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ExportAllowedMenuItems(ctx, req.(*ExportAllowedMenuItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListUserGroupAllowedMenuItemFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupAllowedMenuItemFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListUserGroupAllowedMenuItemFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListUserGroupAllowedMenuItemFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListUserGroupAllowedMenuItemFormats(ctx, req.(*ListUserGroupAllowedMenuItemFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_CreateRoleAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).CreateRoleAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/CreateRoleAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).CreateRoleAttribute(ctx, req.(*CreateRoleAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_ListRoleAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).ListRoleAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/ListRoleAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).ListRoleAttributes(ctx, req.(*ListRoleAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_GetRoleAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).GetRoleAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/GetRoleAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).GetRoleAttribute(ctx, req.(*GetRoleAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_UpdateRoleAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).UpdateRoleAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/UpdateRoleAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).UpdateRoleAttribute(ctx, req.(*UpdateRoleAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantAdminService_DeleteRoleAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantAdminServiceServer).DeleteRoleAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.tenantadmin.TenantAdminService/DeleteRoleAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantAdminServiceServer).DeleteRoleAttribute(ctx, req.(*DeleteRoleAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantAdminService_ServiceDesc is the grpc.ServiceDesc for TenantAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.tenantadmin.TenantAdminService",
	HandlerType: (*TenantAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserAttribute",
			Handler:    _TenantAdminService_CreateUserAttribute_Handler,
		},
		{
			MethodName: "CreateUserAndUserAttribute",
			Handler:    _TenantAdminService_CreateUserAndUserAttribute_Handler,
		},
		{
			MethodName: "ListUserAttributes",
			Handler:    _TenantAdminService_ListUserAttributes_Handler,
		},
		{
			MethodName: "GetUserAttribute",
			Handler:    _TenantAdminService_GetUserAttribute_Handler,
		},
		{
			MethodName: "UpdateUserAttribute",
			Handler:    _TenantAdminService_UpdateUserAttribute_Handler,
		},
		{
			MethodName: "UpdateUserAndUserAttribute",
			Handler:    _TenantAdminService_UpdateUserAndUserAttribute_Handler,
		},
		{
			MethodName: "DeleteUserAttribute",
			Handler:    _TenantAdminService_DeleteUserAttribute_Handler,
		},
		{
			MethodName: "DeleteUserAndUserAttribute",
			Handler:    _TenantAdminService_DeleteUserAndUserAttribute_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _TenantAdminService_DisableUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _TenantAdminService_EnableUser_Handler,
		},
		{
			MethodName: "ImportUserAttributes",
			Handler:    _TenantAdminService_ImportUserAttributes_Handler,
		},
		{
			MethodName: "ExportUserAttributes",
			Handler:    _TenantAdminService_ExportUserAttributes_Handler,
		},
		{
			MethodName: "ListUserAttributeFormats",
			Handler:    _TenantAdminService_ListUserAttributeFormats_Handler,
		},
		{
			MethodName: "SendEmailUserCreated",
			Handler:    _TenantAdminService_SendEmailUserCreated_Handler,
		},
		{
			MethodName: "CreateUserGroupAttribute",
			Handler:    _TenantAdminService_CreateUserGroupAttribute_Handler,
		},
		{
			MethodName: "CreateUserGroupAndUserGroupAttribute",
			Handler:    _TenantAdminService_CreateUserGroupAndUserGroupAttribute_Handler,
		},
		{
			MethodName: "ListUserGroupAttributes",
			Handler:    _TenantAdminService_ListUserGroupAttributes_Handler,
		},
		{
			MethodName: "GetUserGroupAttribute",
			Handler:    _TenantAdminService_GetUserGroupAttribute_Handler,
		},
		{
			MethodName: "UpdateUserGroupAttribute",
			Handler:    _TenantAdminService_UpdateUserGroupAttribute_Handler,
		},
		{
			MethodName: "UpdateUserGroupAndUserGroupAttribute",
			Handler:    _TenantAdminService_UpdateUserGroupAndUserGroupAttribute_Handler,
		},
		{
			MethodName: "DeleteUserGroupAttribute",
			Handler:    _TenantAdminService_DeleteUserGroupAttribute_Handler,
		},
		{
			MethodName: "DeleteUserAndUserGroupAttribute",
			Handler:    _TenantAdminService_DeleteUserAndUserGroupAttribute_Handler,
		},
		{
			MethodName: "ImportUserBelongsUserGroups",
			Handler:    _TenantAdminService_ImportUserBelongsUserGroups_Handler,
		},
		{
			MethodName: "ExportUserBelongsUserGroups",
			Handler:    _TenantAdminService_ExportUserBelongsUserGroups_Handler,
		},
		{
			MethodName: "ListUserBelongsUserGroupFormats",
			Handler:    _TenantAdminService_ListUserBelongsUserGroupFormats_Handler,
		},
		{
			MethodName: "ExportAttachedRoles",
			Handler:    _TenantAdminService_ExportAttachedRoles_Handler,
		},
		{
			MethodName: "ListUserGroupAttachedRolesFormats",
			Handler:    _TenantAdminService_ListUserGroupAttachedRolesFormats_Handler,
		},
		{
			MethodName: "ExportAllowedMenuItems",
			Handler:    _TenantAdminService_ExportAllowedMenuItems_Handler,
		},
		{
			MethodName: "ListUserGroupAllowedMenuItemFormats",
			Handler:    _TenantAdminService_ListUserGroupAllowedMenuItemFormats_Handler,
		},
		{
			MethodName: "CreateRoleAttribute",
			Handler:    _TenantAdminService_CreateRoleAttribute_Handler,
		},
		{
			MethodName: "ListRoleAttributes",
			Handler:    _TenantAdminService_ListRoleAttributes_Handler,
		},
		{
			MethodName: "GetRoleAttribute",
			Handler:    _TenantAdminService_GetRoleAttribute_Handler,
		},
		{
			MethodName: "UpdateRoleAttribute",
			Handler:    _TenantAdminService_UpdateRoleAttribute_Handler,
		},
		{
			MethodName: "DeleteRoleAttribute",
			Handler:    _TenantAdminService_DeleteRoleAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenantadmin.proto",
}
