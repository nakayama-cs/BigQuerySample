// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: jobs.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DailyMailJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DailyMailJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DailyMailJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DailyMailJobRequestMultiError, or nil if none found.
func (m *DailyMailJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DailyMailJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatedAt

	// no validation rules for SinceAt

	// no validation rules for UntilAt

	for idx, item := range m.GetTaskTenants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DailyMailJobRequestValidationError{
						field:  fmt.Sprintf("TaskTenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DailyMailJobRequestValidationError{
						field:  fmt.Sprintf("TaskTenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DailyMailJobRequestValidationError{
					field:  fmt.Sprintf("TaskTenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DailyMailJobRequestMultiError(errors)
	}

	return nil
}

// DailyMailJobRequestMultiError is an error wrapping multiple validation
// errors returned by DailyMailJobRequest.ValidateAll() if the designated
// constraints aren't met.
type DailyMailJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DailyMailJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DailyMailJobRequestMultiError) AllErrors() []error { return m }

// DailyMailJobRequestValidationError is the validation error returned by
// DailyMailJobRequest.Validate if the designated constraints aren't met.
type DailyMailJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DailyMailJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DailyMailJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DailyMailJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DailyMailJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DailyMailJobRequestValidationError) ErrorName() string {
	return "DailyMailJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DailyMailJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDailyMailJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DailyMailJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DailyMailJobRequestValidationError{}

// Validate checks the field values on SharetoBusinessUnitManagementJobRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SharetoBusinessUnitManagementJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitManagementJobRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SharetoBusinessUnitManagementJobRequestMultiError, or nil if none found.
func (m *SharetoBusinessUnitManagementJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitManagementJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatedAt

	for idx, item := range m.GetTaskTenants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharetoBusinessUnitManagementJobRequestValidationError{
						field:  fmt.Sprintf("TaskTenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharetoBusinessUnitManagementJobRequestValidationError{
						field:  fmt.Sprintf("TaskTenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharetoBusinessUnitManagementJobRequestValidationError{
					field:  fmt.Sprintf("TaskTenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SharetoBusinessUnitManagementJobRequestMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitManagementJobRequestMultiError is an error wrapping
// multiple validation errors returned by
// SharetoBusinessUnitManagementJobRequest.ValidateAll() if the designated
// constraints aren't met.
type SharetoBusinessUnitManagementJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitManagementJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitManagementJobRequestMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitManagementJobRequestValidationError is the validation
// error returned by SharetoBusinessUnitManagementJobRequest.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitManagementJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitManagementJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoBusinessUnitManagementJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoBusinessUnitManagementJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoBusinessUnitManagementJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitManagementJobRequestValidationError) ErrorName() string {
	return "SharetoBusinessUnitManagementJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitManagementJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitManagementJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitManagementJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitManagementJobRequestValidationError{}

// Validate checks the field values on SharetoSurveyReminderJobRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReminderJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharetoSurveyReminderJobRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SharetoSurveyReminderJobRequestMultiError, or nil if none found.
func (m *SharetoSurveyReminderJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReminderJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatedAt

	for idx, item := range m.GetTaskTenants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SharetoSurveyReminderJobRequestValidationError{
						field:  fmt.Sprintf("TaskTenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SharetoSurveyReminderJobRequestValidationError{
						field:  fmt.Sprintf("TaskTenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SharetoSurveyReminderJobRequestValidationError{
					field:  fmt.Sprintf("TaskTenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SharetoSurveyReminderJobRequestMultiError(errors)
	}

	return nil
}

// SharetoSurveyReminderJobRequestMultiError is an error wrapping multiple
// validation errors returned by SharetoSurveyReminderJobRequest.ValidateAll()
// if the designated constraints aren't met.
type SharetoSurveyReminderJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReminderJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReminderJobRequestMultiError) AllErrors() []error { return m }

// SharetoSurveyReminderJobRequestValidationError is the validation error
// returned by SharetoSurveyReminderJobRequest.Validate if the designated
// constraints aren't met.
type SharetoSurveyReminderJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReminderJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReminderJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyReminderJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReminderJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReminderJobRequestValidationError) ErrorName() string {
	return "SharetoSurveyReminderJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReminderJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReminderJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReminderJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReminderJobRequestValidationError{}

// Validate checks the field values on DailyMailJobRequest_TaskTenant with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DailyMailJobRequest_TaskTenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DailyMailJobRequest_TaskTenant with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DailyMailJobRequest_TaskTenantMultiError, or nil if none found.
func (m *DailyMailJobRequest_TaskTenant) ValidateAll() error {
	return m.validate(true)
}

func (m *DailyMailJobRequest_TaskTenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskIndex

	if len(errors) > 0 {
		return DailyMailJobRequest_TaskTenantMultiError(errors)
	}

	return nil
}

// DailyMailJobRequest_TaskTenantMultiError is an error wrapping multiple
// validation errors returned by DailyMailJobRequest_TaskTenant.ValidateAll()
// if the designated constraints aren't met.
type DailyMailJobRequest_TaskTenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DailyMailJobRequest_TaskTenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DailyMailJobRequest_TaskTenantMultiError) AllErrors() []error { return m }

// DailyMailJobRequest_TaskTenantValidationError is the validation error
// returned by DailyMailJobRequest_TaskTenant.Validate if the designated
// constraints aren't met.
type DailyMailJobRequest_TaskTenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DailyMailJobRequest_TaskTenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DailyMailJobRequest_TaskTenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DailyMailJobRequest_TaskTenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DailyMailJobRequest_TaskTenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DailyMailJobRequest_TaskTenantValidationError) ErrorName() string {
	return "DailyMailJobRequest_TaskTenantValidationError"
}

// Error satisfies the builtin error interface
func (e DailyMailJobRequest_TaskTenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDailyMailJobRequest_TaskTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DailyMailJobRequest_TaskTenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DailyMailJobRequest_TaskTenantValidationError{}

// Validate checks the field values on
// SharetoBusinessUnitManagementJobRequest_TaskTenant with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharetoBusinessUnitManagementJobRequest_TaskTenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoBusinessUnitManagementJobRequest_TaskTenant with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// SharetoBusinessUnitManagementJobRequest_TaskTenantMultiError, or nil if
// none found.
func (m *SharetoBusinessUnitManagementJobRequest_TaskTenant) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoBusinessUnitManagementJobRequest_TaskTenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskIndex

	if len(errors) > 0 {
		return SharetoBusinessUnitManagementJobRequest_TaskTenantMultiError(errors)
	}

	return nil
}

// SharetoBusinessUnitManagementJobRequest_TaskTenantMultiError is an error
// wrapping multiple validation errors returned by
// SharetoBusinessUnitManagementJobRequest_TaskTenant.ValidateAll() if the
// designated constraints aren't met.
type SharetoBusinessUnitManagementJobRequest_TaskTenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoBusinessUnitManagementJobRequest_TaskTenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoBusinessUnitManagementJobRequest_TaskTenantMultiError) AllErrors() []error { return m }

// SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError is the
// validation error returned by
// SharetoBusinessUnitManagementJobRequest_TaskTenant.Validate if the
// designated constraints aren't met.
type SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError) ErrorName() string {
	return "SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoBusinessUnitManagementJobRequest_TaskTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoBusinessUnitManagementJobRequest_TaskTenantValidationError{}

// Validate checks the field values on
// SharetoSurveyReminderJobRequest_TaskTenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SharetoSurveyReminderJobRequest_TaskTenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SharetoSurveyReminderJobRequest_TaskTenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SharetoSurveyReminderJobRequest_TaskTenantMultiError, or nil if none found.
func (m *SharetoSurveyReminderJobRequest_TaskTenant) ValidateAll() error {
	return m.validate(true)
}

func (m *SharetoSurveyReminderJobRequest_TaskTenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskIndex

	if len(errors) > 0 {
		return SharetoSurveyReminderJobRequest_TaskTenantMultiError(errors)
	}

	return nil
}

// SharetoSurveyReminderJobRequest_TaskTenantMultiError is an error wrapping
// multiple validation errors returned by
// SharetoSurveyReminderJobRequest_TaskTenant.ValidateAll() if the designated
// constraints aren't met.
type SharetoSurveyReminderJobRequest_TaskTenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharetoSurveyReminderJobRequest_TaskTenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharetoSurveyReminderJobRequest_TaskTenantMultiError) AllErrors() []error { return m }

// SharetoSurveyReminderJobRequest_TaskTenantValidationError is the validation
// error returned by SharetoSurveyReminderJobRequest_TaskTenant.Validate if
// the designated constraints aren't met.
type SharetoSurveyReminderJobRequest_TaskTenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharetoSurveyReminderJobRequest_TaskTenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharetoSurveyReminderJobRequest_TaskTenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharetoSurveyReminderJobRequest_TaskTenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharetoSurveyReminderJobRequest_TaskTenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharetoSurveyReminderJobRequest_TaskTenantValidationError) ErrorName() string {
	return "SharetoSurveyReminderJobRequest_TaskTenantValidationError"
}

// Error satisfies the builtin error interface
func (e SharetoSurveyReminderJobRequest_TaskTenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharetoSurveyReminderJobRequest_TaskTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharetoSurveyReminderJobRequest_TaskTenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharetoSurveyReminderJobRequest_TaskTenantValidationError{}
