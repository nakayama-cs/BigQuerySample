// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: programoption.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProgramOption with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProgramOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgramOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProgramOptionMultiError, or
// nil if none found.
func (m *ProgramOption) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgramOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramOptionId

	// no validation rules for CategoryName

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramOptionValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramOptionValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramOptionValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	// no validation rules for DisplayNameLang

	// no validation rules for SystemName

	if all {
		switch v := interface{}(m.GetSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProgramOptionValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProgramOptionValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProgramOptionValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Order

	// no validation rules for UserEditable

	// no validation rules for UserEdited

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProgramOptionMultiError(errors)
	}

	return nil
}

// ProgramOptionMultiError is an error wrapping multiple validation errors
// returned by ProgramOption.ValidateAll() if the designated constraints
// aren't met.
type ProgramOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramOptionMultiError) AllErrors() []error { return m }

// ProgramOptionValidationError is the validation error returned by
// ProgramOption.Validate if the designated constraints aren't met.
type ProgramOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramOptionValidationError) ErrorName() string { return "ProgramOptionValidationError" }

// Error satisfies the builtin error interface
func (e ProgramOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgramOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramOptionValidationError{}

// Validate checks the field values on CreateProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramOptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramOptionRequestMultiError, or nil if none found.
func (m *CreateProgramOptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramOptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgramOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProgramOptionRequestValidationError{
					field:  "ProgramOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProgramOptionRequestValidationError{
					field:  "ProgramOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgramOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProgramOptionRequestValidationError{
				field:  "ProgramOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProgramOptionRequestMultiError(errors)
	}

	return nil
}

// CreateProgramOptionRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProgramOptionRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProgramOptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramOptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramOptionRequestMultiError) AllErrors() []error { return m }

// CreateProgramOptionRequestValidationError is the validation error returned
// by CreateProgramOptionRequest.Validate if the designated constraints aren't met.
type CreateProgramOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramOptionRequestValidationError) ErrorName() string {
	return "CreateProgramOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgramOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramOptionRequestValidationError{}

// Validate checks the field values on ListProgramOptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgramOptionsRequestMultiError, or nil if none found.
func (m *ListProgramOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProgramOptionsRequestMultiError(errors)
	}

	return nil
}

// ListProgramOptionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProgramOptionsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProgramOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramOptionsRequestMultiError) AllErrors() []error { return m }

// ListProgramOptionsRequestValidationError is the validation error returned by
// ListProgramOptionsRequest.Validate if the designated constraints aren't met.
type ListProgramOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramOptionsRequestValidationError) ErrorName() string {
	return "ListProgramOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramOptionsRequestValidationError{}

// Validate checks the field values on ListProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgramOptionsResponseMultiError, or nil if none found.
func (m *ListProgramOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProgramOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProgramOptionsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgramOptionsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProgramOptionsResponseMultiError(errors)
	}

	return nil
}

// ListProgramOptionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListProgramOptionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProgramOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramOptionsResponseMultiError) AllErrors() []error { return m }

// ListProgramOptionsResponseValidationError is the validation error returned
// by ListProgramOptionsResponse.Validate if the designated constraints aren't met.
type ListProgramOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramOptionsResponseValidationError) ErrorName() string {
	return "ListProgramOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramOptionsResponseValidationError{}

// Validate checks the field values on GetProgramOptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramOptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramOptionRequestMultiError, or nil if none found.
func (m *GetProgramOptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramOptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramOptionId

	if len(errors) > 0 {
		return GetProgramOptionRequestMultiError(errors)
	}

	return nil
}

// GetProgramOptionRequestMultiError is an error wrapping multiple validation
// errors returned by GetProgramOptionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProgramOptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramOptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramOptionRequestMultiError) AllErrors() []error { return m }

// GetProgramOptionRequestValidationError is the validation error returned by
// GetProgramOptionRequest.Validate if the designated constraints aren't met.
type GetProgramOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramOptionRequestValidationError) ErrorName() string {
	return "GetProgramOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramOptionRequestValidationError{}

// Validate checks the field values on UpdateProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProgramOptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProgramOptionRequestMultiError, or nil if none found.
func (m *UpdateProgramOptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProgramOptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgramOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProgramOptionRequestValidationError{
					field:  "ProgramOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProgramOptionRequestValidationError{
					field:  "ProgramOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgramOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProgramOptionRequestValidationError{
				field:  "ProgramOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProgramOptionRequestMultiError(errors)
	}

	return nil
}

// UpdateProgramOptionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProgramOptionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProgramOptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProgramOptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProgramOptionRequestMultiError) AllErrors() []error { return m }

// UpdateProgramOptionRequestValidationError is the validation error returned
// by UpdateProgramOptionRequest.Validate if the designated constraints aren't met.
type UpdateProgramOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProgramOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProgramOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProgramOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProgramOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProgramOptionRequestValidationError) ErrorName() string {
	return "UpdateProgramOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProgramOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProgramOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProgramOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProgramOptionRequestValidationError{}

// Validate checks the field values on DeleteProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProgramOptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProgramOptionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProgramOptionRequestMultiError, or nil if none found.
func (m *DeleteProgramOptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProgramOptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgramOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteProgramOptionRequestValidationError{
					field:  "ProgramOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteProgramOptionRequestValidationError{
					field:  "ProgramOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgramOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteProgramOptionRequestValidationError{
				field:  "ProgramOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteProgramOptionRequestMultiError(errors)
	}

	return nil
}

// DeleteProgramOptionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProgramOptionRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProgramOptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProgramOptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProgramOptionRequestMultiError) AllErrors() []error { return m }

// DeleteProgramOptionRequestValidationError is the validation error returned
// by DeleteProgramOptionRequest.Validate if the designated constraints aren't met.
type DeleteProgramOptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProgramOptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProgramOptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProgramOptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProgramOptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProgramOptionRequestValidationError) ErrorName() string {
	return "DeleteProgramOptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProgramOptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProgramOptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProgramOptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProgramOptionRequestValidationError{}

// Validate checks the field values on ImportProgramOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportProgramOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportProgramOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportProgramOptionsRequestMultiError, or nil if none found.
func (m *ImportProgramOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportProgramOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportProgramOptionsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportProgramOptionsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportProgramOptionsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for ExportError

	if len(errors) > 0 {
		return ImportProgramOptionsRequestMultiError(errors)
	}

	return nil
}

// ImportProgramOptionsRequestMultiError is an error wrapping multiple
// validation errors returned by ImportProgramOptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportProgramOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportProgramOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportProgramOptionsRequestMultiError) AllErrors() []error { return m }

// ImportProgramOptionsRequestValidationError is the validation error returned
// by ImportProgramOptionsRequest.Validate if the designated constraints
// aren't met.
type ImportProgramOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportProgramOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportProgramOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportProgramOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportProgramOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportProgramOptionsRequestValidationError) ErrorName() string {
	return "ImportProgramOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportProgramOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportProgramOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportProgramOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportProgramOptionsRequestValidationError{}

// Validate checks the field values on ImportProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportProgramOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportProgramOptionsResponseMultiError, or nil if none found.
func (m *ImportProgramOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportProgramOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportProgramOptionsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportProgramOptionsResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportProgramOptionsResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportProgramOptionsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportProgramOptionsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportProgramOptionsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ImportProgramOptionsResponseMultiError(errors)
	}

	return nil
}

// ImportProgramOptionsResponseMultiError is an error wrapping multiple
// validation errors returned by ImportProgramOptionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ImportProgramOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportProgramOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportProgramOptionsResponseMultiError) AllErrors() []error { return m }

// ImportProgramOptionsResponseValidationError is the validation error returned
// by ImportProgramOptionsResponse.Validate if the designated constraints
// aren't met.
type ImportProgramOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportProgramOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportProgramOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportProgramOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportProgramOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportProgramOptionsResponseValidationError) ErrorName() string {
	return "ImportProgramOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportProgramOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportProgramOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportProgramOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportProgramOptionsResponseValidationError{}

// Validate checks the field values on ExportProgramOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportProgramOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportProgramOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportProgramOptionsRequestMultiError, or nil if none found.
func (m *ExportProgramOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportProgramOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportProgramOptionsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportProgramOptionsRequestValidationError{
					field:  "FileFormat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportProgramOptionsRequestValidationError{
				field:  "FileFormat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportProgramOptionsRequestMultiError(errors)
	}

	return nil
}

// ExportProgramOptionsRequestMultiError is an error wrapping multiple
// validation errors returned by ExportProgramOptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ExportProgramOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportProgramOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportProgramOptionsRequestMultiError) AllErrors() []error { return m }

// ExportProgramOptionsRequestValidationError is the validation error returned
// by ExportProgramOptionsRequest.Validate if the designated constraints
// aren't met.
type ExportProgramOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportProgramOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportProgramOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportProgramOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportProgramOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportProgramOptionsRequestValidationError) ErrorName() string {
	return "ExportProgramOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportProgramOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportProgramOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportProgramOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportProgramOptionsRequestValidationError{}

// Validate checks the field values on ExportProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportProgramOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportProgramOptionsResponseMultiError, or nil if none found.
func (m *ExportProgramOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportProgramOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return ExportProgramOptionsResponseMultiError(errors)
	}

	return nil
}

// ExportProgramOptionsResponseMultiError is an error wrapping multiple
// validation errors returned by ExportProgramOptionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ExportProgramOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportProgramOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportProgramOptionsResponseMultiError) AllErrors() []error { return m }

// ExportProgramOptionsResponseValidationError is the validation error returned
// by ExportProgramOptionsResponse.Validate if the designated constraints
// aren't met.
type ExportProgramOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportProgramOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportProgramOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportProgramOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportProgramOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportProgramOptionsResponseValidationError) ErrorName() string {
	return "ExportProgramOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportProgramOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportProgramOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportProgramOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportProgramOptionsResponseValidationError{}

// Validate checks the field values on ListProgramOptionFormatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramOptionFormatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramOptionFormatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProgramOptionFormatsRequestMultiError, or nil if none found.
func (m *ListProgramOptionFormatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramOptionFormatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProgramOptionFormatsRequestMultiError(errors)
	}

	return nil
}

// ListProgramOptionFormatsRequestMultiError is an error wrapping multiple
// validation errors returned by ListProgramOptionFormatsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProgramOptionFormatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramOptionFormatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramOptionFormatsRequestMultiError) AllErrors() []error { return m }

// ListProgramOptionFormatsRequestValidationError is the validation error
// returned by ListProgramOptionFormatsRequest.Validate if the designated
// constraints aren't met.
type ListProgramOptionFormatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramOptionFormatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramOptionFormatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramOptionFormatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramOptionFormatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramOptionFormatsRequestValidationError) ErrorName() string {
	return "ListProgramOptionFormatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramOptionFormatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramOptionFormatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramOptionFormatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramOptionFormatsRequestValidationError{}

// Validate checks the field values on ListProgramOptionFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProgramOptionFormatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramOptionFormatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProgramOptionFormatsResponseMultiError, or nil if none found.
func (m *ListProgramOptionFormatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramOptionFormatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProgramOptionFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProgramOptionFormatsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgramOptionFormatsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProgramOptionFormatsResponseMultiError(errors)
	}

	return nil
}

// ListProgramOptionFormatsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProgramOptionFormatsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProgramOptionFormatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramOptionFormatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramOptionFormatsResponseMultiError) AllErrors() []error { return m }

// ListProgramOptionFormatsResponseValidationError is the validation error
// returned by ListProgramOptionFormatsResponse.Validate if the designated
// constraints aren't met.
type ListProgramOptionFormatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramOptionFormatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramOptionFormatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramOptionFormatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramOptionFormatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramOptionFormatsResponseValidationError) ErrorName() string {
	return "ListProgramOptionFormatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramOptionFormatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramOptionFormatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramOptionFormatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramOptionFormatsResponseValidationError{}

// Validate checks the field values on MaintenanceProgramOptionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaintenanceProgramOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaintenanceProgramOptionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MaintenanceProgramOptionsRequestMultiError, or nil if none found.
func (m *MaintenanceProgramOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MaintenanceProgramOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgramOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaintenanceProgramOptionsRequestValidationError{
						field:  fmt.Sprintf("ProgramOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaintenanceProgramOptionsRequestValidationError{
						field:  fmt.Sprintf("ProgramOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaintenanceProgramOptionsRequestValidationError{
					field:  fmt.Sprintf("ProgramOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Mode

	if len(errors) > 0 {
		return MaintenanceProgramOptionsRequestMultiError(errors)
	}

	return nil
}

// MaintenanceProgramOptionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// MaintenanceProgramOptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type MaintenanceProgramOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaintenanceProgramOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaintenanceProgramOptionsRequestMultiError) AllErrors() []error { return m }

// MaintenanceProgramOptionsRequestValidationError is the validation error
// returned by MaintenanceProgramOptionsRequest.Validate if the designated
// constraints aren't met.
type MaintenanceProgramOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceProgramOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceProgramOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceProgramOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceProgramOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceProgramOptionsRequestValidationError) ErrorName() string {
	return "MaintenanceProgramOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceProgramOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceProgramOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceProgramOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceProgramOptionsRequestValidationError{}

// Validate checks the field values on MaintenanceProgramOptionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *MaintenanceProgramOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MaintenanceProgramOptionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MaintenanceProgramOptionsResponseMultiError, or nil if none found.
func (m *MaintenanceProgramOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MaintenanceProgramOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MaintenanceProgramOptionsResponseMultiError(errors)
	}

	return nil
}

// MaintenanceProgramOptionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// MaintenanceProgramOptionsResponse.ValidateAll() if the designated
// constraints aren't met.
type MaintenanceProgramOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaintenanceProgramOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaintenanceProgramOptionsResponseMultiError) AllErrors() []error { return m }

// MaintenanceProgramOptionsResponseValidationError is the validation error
// returned by MaintenanceProgramOptionsResponse.Validate if the designated
// constraints aren't met.
type MaintenanceProgramOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintenanceProgramOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintenanceProgramOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintenanceProgramOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintenanceProgramOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintenanceProgramOptionsResponseValidationError) ErrorName() string {
	return "MaintenanceProgramOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MaintenanceProgramOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintenanceProgramOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintenanceProgramOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintenanceProgramOptionsResponseValidationError{}

// Validate checks the field values on ProvisionProgramOptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProvisionProgramOptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionProgramOptionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProvisionProgramOptionsRequestMultiError, or nil if none found.
func (m *ProvisionProgramOptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionProgramOptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProvisionProgramOptionsRequestMultiError(errors)
	}

	return nil
}

// ProvisionProgramOptionsRequestMultiError is an error wrapping multiple
// validation errors returned by ProvisionProgramOptionsRequest.ValidateAll()
// if the designated constraints aren't met.
type ProvisionProgramOptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionProgramOptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionProgramOptionsRequestMultiError) AllErrors() []error { return m }

// ProvisionProgramOptionsRequestValidationError is the validation error
// returned by ProvisionProgramOptionsRequest.Validate if the designated
// constraints aren't met.
type ProvisionProgramOptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionProgramOptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionProgramOptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionProgramOptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionProgramOptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionProgramOptionsRequestValidationError) ErrorName() string {
	return "ProvisionProgramOptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionProgramOptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionProgramOptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionProgramOptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionProgramOptionsRequestValidationError{}

// Validate checks the field values on ProvisionProgramOptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProvisionProgramOptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProvisionProgramOptionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProvisionProgramOptionsResponseMultiError, or nil if none found.
func (m *ProvisionProgramOptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProvisionProgramOptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProvisionProgramOptionsResponseMultiError(errors)
	}

	return nil
}

// ProvisionProgramOptionsResponseMultiError is an error wrapping multiple
// validation errors returned by ProvisionProgramOptionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ProvisionProgramOptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProvisionProgramOptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProvisionProgramOptionsResponseMultiError) AllErrors() []error { return m }

// ProvisionProgramOptionsResponseValidationError is the validation error
// returned by ProvisionProgramOptionsResponse.Validate if the designated
// constraints aren't met.
type ProvisionProgramOptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProvisionProgramOptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProvisionProgramOptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProvisionProgramOptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProvisionProgramOptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProvisionProgramOptionsResponseValidationError) ErrorName() string {
	return "ProvisionProgramOptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProvisionProgramOptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvisionProgramOptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProvisionProgramOptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProvisionProgramOptionsResponseValidationError{}

// Validate checks the field values on ProgramOption_DisplayNameLang with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProgramOption_DisplayNameLang) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgramOption_DisplayNameLang with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProgramOption_DisplayNameLangMultiError, or nil if none found.
func (m *ProgramOption_DisplayNameLang) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgramOption_DisplayNameLang) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayNameLang

	if len(errors) > 0 {
		return ProgramOption_DisplayNameLangMultiError(errors)
	}

	return nil
}

// ProgramOption_DisplayNameLangMultiError is an error wrapping multiple
// validation errors returned by ProgramOption_DisplayNameLang.ValidateAll()
// if the designated constraints aren't met.
type ProgramOption_DisplayNameLangMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramOption_DisplayNameLangMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramOption_DisplayNameLangMultiError) AllErrors() []error { return m }

// ProgramOption_DisplayNameLangValidationError is the validation error
// returned by ProgramOption_DisplayNameLang.Validate if the designated
// constraints aren't met.
type ProgramOption_DisplayNameLangValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramOption_DisplayNameLangValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramOption_DisplayNameLangValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramOption_DisplayNameLangValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramOption_DisplayNameLangValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramOption_DisplayNameLangValidationError) ErrorName() string {
	return "ProgramOption_DisplayNameLangValidationError"
}

// Error satisfies the builtin error interface
func (e ProgramOption_DisplayNameLangValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgramOption_DisplayNameLang.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramOption_DisplayNameLangValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramOption_DisplayNameLangValidationError{}
