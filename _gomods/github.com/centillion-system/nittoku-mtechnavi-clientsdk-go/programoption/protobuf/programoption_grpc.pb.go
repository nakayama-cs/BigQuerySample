// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProgramOptionServiceClient is the client API for ProgramOptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramOptionServiceClient interface {
	CreateProgramOption(ctx context.Context, in *CreateProgramOptionRequest, opts ...grpc.CallOption) (*ProgramOption, error)
	ListProgramOptions(ctx context.Context, in *ListProgramOptionsRequest, opts ...grpc.CallOption) (*ListProgramOptionsResponse, error)
	GetProgramOption(ctx context.Context, in *GetProgramOptionRequest, opts ...grpc.CallOption) (*ProgramOption, error)
	UpdateProgramOption(ctx context.Context, in *UpdateProgramOptionRequest, opts ...grpc.CallOption) (*ProgramOption, error)
	DeleteProgramOption(ctx context.Context, in *DeleteProgramOptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ImportProgramOptions(ctx context.Context, in *ImportProgramOptionsRequest, opts ...grpc.CallOption) (*ImportProgramOptionsResponse, error)
	ExportProgramOptions(ctx context.Context, in *ExportProgramOptionsRequest, opts ...grpc.CallOption) (*ExportProgramOptionsResponse, error)
	ListProgramOptionFormats(ctx context.Context, in *ListProgramOptionFormatsRequest, opts ...grpc.CallOption) (*ListProgramOptionFormatsResponse, error)
	MaintenanceProgramOptionFormats(ctx context.Context, in *MaintenanceProgramOptionsRequest, opts ...grpc.CallOption) (*MaintenanceProgramOptionsResponse, error)
	ProvisionProgramOptions(ctx context.Context, in *ProvisionProgramOptionsRequest, opts ...grpc.CallOption) (*ProvisionProgramOptionsResponse, error)
}

type programOptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramOptionServiceClient(cc grpc.ClientConnInterface) ProgramOptionServiceClient {
	return &programOptionServiceClient{cc}
}

func (c *programOptionServiceClient) CreateProgramOption(ctx context.Context, in *CreateProgramOptionRequest, opts ...grpc.CallOption) (*ProgramOption, error) {
	out := new(ProgramOption)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/CreateProgramOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) ListProgramOptions(ctx context.Context, in *ListProgramOptionsRequest, opts ...grpc.CallOption) (*ListProgramOptionsResponse, error) {
	out := new(ListProgramOptionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/ListProgramOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) GetProgramOption(ctx context.Context, in *GetProgramOptionRequest, opts ...grpc.CallOption) (*ProgramOption, error) {
	out := new(ProgramOption)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/GetProgramOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) UpdateProgramOption(ctx context.Context, in *UpdateProgramOptionRequest, opts ...grpc.CallOption) (*ProgramOption, error) {
	out := new(ProgramOption)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/UpdateProgramOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) DeleteProgramOption(ctx context.Context, in *DeleteProgramOptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/DeleteProgramOption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) ImportProgramOptions(ctx context.Context, in *ImportProgramOptionsRequest, opts ...grpc.CallOption) (*ImportProgramOptionsResponse, error) {
	out := new(ImportProgramOptionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/ImportProgramOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) ExportProgramOptions(ctx context.Context, in *ExportProgramOptionsRequest, opts ...grpc.CallOption) (*ExportProgramOptionsResponse, error) {
	out := new(ExportProgramOptionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/ExportProgramOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) ListProgramOptionFormats(ctx context.Context, in *ListProgramOptionFormatsRequest, opts ...grpc.CallOption) (*ListProgramOptionFormatsResponse, error) {
	out := new(ListProgramOptionFormatsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/ListProgramOptionFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) MaintenanceProgramOptionFormats(ctx context.Context, in *MaintenanceProgramOptionsRequest, opts ...grpc.CallOption) (*MaintenanceProgramOptionsResponse, error) {
	out := new(MaintenanceProgramOptionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/MaintenanceProgramOptionFormats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programOptionServiceClient) ProvisionProgramOptions(ctx context.Context, in *ProvisionProgramOptionsRequest, opts ...grpc.CallOption) (*ProvisionProgramOptionsResponse, error) {
	out := new(ProvisionProgramOptionsResponse)
	err := c.cc.Invoke(ctx, "/mtechnavi.api.programoption.ProgramOptionService/ProvisionProgramOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramOptionServiceServer is the server API for ProgramOptionService service.
// All implementations must embed UnimplementedProgramOptionServiceServer
// for forward compatibility
type ProgramOptionServiceServer interface {
	CreateProgramOption(context.Context, *CreateProgramOptionRequest) (*ProgramOption, error)
	ListProgramOptions(context.Context, *ListProgramOptionsRequest) (*ListProgramOptionsResponse, error)
	GetProgramOption(context.Context, *GetProgramOptionRequest) (*ProgramOption, error)
	UpdateProgramOption(context.Context, *UpdateProgramOptionRequest) (*ProgramOption, error)
	DeleteProgramOption(context.Context, *DeleteProgramOptionRequest) (*emptypb.Empty, error)
	ImportProgramOptions(context.Context, *ImportProgramOptionsRequest) (*ImportProgramOptionsResponse, error)
	ExportProgramOptions(context.Context, *ExportProgramOptionsRequest) (*ExportProgramOptionsResponse, error)
	ListProgramOptionFormats(context.Context, *ListProgramOptionFormatsRequest) (*ListProgramOptionFormatsResponse, error)
	MaintenanceProgramOptionFormats(context.Context, *MaintenanceProgramOptionsRequest) (*MaintenanceProgramOptionsResponse, error)
	ProvisionProgramOptions(context.Context, *ProvisionProgramOptionsRequest) (*ProvisionProgramOptionsResponse, error)
	mustEmbedUnimplementedProgramOptionServiceServer()
}

// UnimplementedProgramOptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProgramOptionServiceServer struct {
}

func (UnimplementedProgramOptionServiceServer) CreateProgramOption(context.Context, *CreateProgramOptionRequest) (*ProgramOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgramOption not implemented")
}
func (UnimplementedProgramOptionServiceServer) ListProgramOptions(context.Context, *ListProgramOptionsRequest) (*ListProgramOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgramOptions not implemented")
}
func (UnimplementedProgramOptionServiceServer) GetProgramOption(context.Context, *GetProgramOptionRequest) (*ProgramOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramOption not implemented")
}
func (UnimplementedProgramOptionServiceServer) UpdateProgramOption(context.Context, *UpdateProgramOptionRequest) (*ProgramOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgramOption not implemented")
}
func (UnimplementedProgramOptionServiceServer) DeleteProgramOption(context.Context, *DeleteProgramOptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProgramOption not implemented")
}
func (UnimplementedProgramOptionServiceServer) ImportProgramOptions(context.Context, *ImportProgramOptionsRequest) (*ImportProgramOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProgramOptions not implemented")
}
func (UnimplementedProgramOptionServiceServer) ExportProgramOptions(context.Context, *ExportProgramOptionsRequest) (*ExportProgramOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportProgramOptions not implemented")
}
func (UnimplementedProgramOptionServiceServer) ListProgramOptionFormats(context.Context, *ListProgramOptionFormatsRequest) (*ListProgramOptionFormatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgramOptionFormats not implemented")
}
func (UnimplementedProgramOptionServiceServer) MaintenanceProgramOptionFormats(context.Context, *MaintenanceProgramOptionsRequest) (*MaintenanceProgramOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaintenanceProgramOptionFormats not implemented")
}
func (UnimplementedProgramOptionServiceServer) ProvisionProgramOptions(context.Context, *ProvisionProgramOptionsRequest) (*ProvisionProgramOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionProgramOptions not implemented")
}
func (UnimplementedProgramOptionServiceServer) mustEmbedUnimplementedProgramOptionServiceServer() {}

// UnsafeProgramOptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramOptionServiceServer will
// result in compilation errors.
type UnsafeProgramOptionServiceServer interface {
	mustEmbedUnimplementedProgramOptionServiceServer()
}

func RegisterProgramOptionServiceServer(s grpc.ServiceRegistrar, srv ProgramOptionServiceServer) {
	s.RegisterService(&ProgramOptionService_ServiceDesc, srv)
}

func _ProgramOptionService_CreateProgramOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).CreateProgramOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/CreateProgramOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).CreateProgramOption(ctx, req.(*CreateProgramOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_ListProgramOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).ListProgramOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/ListProgramOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).ListProgramOptions(ctx, req.(*ListProgramOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_GetProgramOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).GetProgramOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/GetProgramOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).GetProgramOption(ctx, req.(*GetProgramOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_UpdateProgramOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgramOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).UpdateProgramOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/UpdateProgramOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).UpdateProgramOption(ctx, req.(*UpdateProgramOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_DeleteProgramOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProgramOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).DeleteProgramOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/DeleteProgramOption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).DeleteProgramOption(ctx, req.(*DeleteProgramOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_ImportProgramOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProgramOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).ImportProgramOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/ImportProgramOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).ImportProgramOptions(ctx, req.(*ImportProgramOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_ExportProgramOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportProgramOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).ExportProgramOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/ExportProgramOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).ExportProgramOptions(ctx, req.(*ExportProgramOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_ListProgramOptionFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramOptionFormatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).ListProgramOptionFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/ListProgramOptionFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).ListProgramOptionFormats(ctx, req.(*ListProgramOptionFormatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_MaintenanceProgramOptionFormats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaintenanceProgramOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).MaintenanceProgramOptionFormats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/MaintenanceProgramOptionFormats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).MaintenanceProgramOptionFormats(ctx, req.(*MaintenanceProgramOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramOptionService_ProvisionProgramOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionProgramOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramOptionServiceServer).ProvisionProgramOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtechnavi.api.programoption.ProgramOptionService/ProvisionProgramOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramOptionServiceServer).ProvisionProgramOptions(ctx, req.(*ProvisionProgramOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgramOptionService_ServiceDesc is the grpc.ServiceDesc for ProgramOptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgramOptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mtechnavi.api.programoption.ProgramOptionService",
	HandlerType: (*ProgramOptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgramOption",
			Handler:    _ProgramOptionService_CreateProgramOption_Handler,
		},
		{
			MethodName: "ListProgramOptions",
			Handler:    _ProgramOptionService_ListProgramOptions_Handler,
		},
		{
			MethodName: "GetProgramOption",
			Handler:    _ProgramOptionService_GetProgramOption_Handler,
		},
		{
			MethodName: "UpdateProgramOption",
			Handler:    _ProgramOptionService_UpdateProgramOption_Handler,
		},
		{
			MethodName: "DeleteProgramOption",
			Handler:    _ProgramOptionService_DeleteProgramOption_Handler,
		},
		{
			MethodName: "ImportProgramOptions",
			Handler:    _ProgramOptionService_ImportProgramOptions_Handler,
		},
		{
			MethodName: "ExportProgramOptions",
			Handler:    _ProgramOptionService_ExportProgramOptions_Handler,
		},
		{
			MethodName: "ListProgramOptionFormats",
			Handler:    _ProgramOptionService_ListProgramOptionFormats_Handler,
		},
		{
			MethodName: "MaintenanceProgramOptionFormats",
			Handler:    _ProgramOptionService_MaintenanceProgramOptionFormats_Handler,
		},
		{
			MethodName: "ProvisionProgramOptions",
			Handler:    _ProgramOptionService_ProvisionProgramOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "programoption.proto",
}
