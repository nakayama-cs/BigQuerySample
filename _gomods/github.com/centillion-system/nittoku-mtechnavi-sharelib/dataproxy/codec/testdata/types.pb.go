// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: types.proto

package testdata

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RootEnum int32

const (
	RootEnum_A RootEnum = 0
	RootEnum_B RootEnum = 1
	RootEnum_C RootEnum = 2
)

// Enum value maps for RootEnum.
var (
	RootEnum_name = map[int32]string{
		0: "A",
		1: "B",
		2: "C",
	}
	RootEnum_value = map[string]int32{
		"A": 0,
		"B": 1,
		"C": 2,
	}
)

func (x RootEnum) Enum() *RootEnum {
	p := new(RootEnum)
	*p = x
	return p
}

func (x RootEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RootEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (RootEnum) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x RootEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RootEnum.Descriptor instead.
func (RootEnum) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

type EnumTypes_ScopedEnum int32

const (
	EnumTypes_X EnumTypes_ScopedEnum = 0
	EnumTypes_Y EnumTypes_ScopedEnum = 1
	EnumTypes_Z EnumTypes_ScopedEnum = 2
)

// Enum value maps for EnumTypes_ScopedEnum.
var (
	EnumTypes_ScopedEnum_name = map[int32]string{
		0: "X",
		1: "Y",
		2: "Z",
	}
	EnumTypes_ScopedEnum_value = map[string]int32{
		"X": 0,
		"Y": 1,
		"Z": 2,
	}
)

func (x EnumTypes_ScopedEnum) Enum() *EnumTypes_ScopedEnum {
	p := new(EnumTypes_ScopedEnum)
	*p = x
	return p
}

func (x EnumTypes_ScopedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumTypes_ScopedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (EnumTypes_ScopedEnum) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x EnumTypes_ScopedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumTypes_ScopedEnum.Descriptor instead.
func (EnumTypes_ScopedEnum) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4, 0}
}

type ScalarTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Double_   float64 `protobuf:"fixed64,1,opt,name=double_,json=double,proto3" json:"double_,omitempty"`
	Float_    float32 `protobuf:"fixed32,3,opt,name=float_,json=float,proto3" json:"float_,omitempty"`
	Int32_    int32   `protobuf:"varint,5,opt,name=int32_,json=int32,proto3" json:"int32_,omitempty"`
	Int64_    int64   `protobuf:"varint,7,opt,name=int64_,json=int64,proto3" json:"int64_,omitempty"`
	Uint32_   uint32  `protobuf:"varint,9,opt,name=uint32_,json=uint32,proto3" json:"uint32_,omitempty"`
	Uint64_   uint64  `protobuf:"varint,11,opt,name=uint64_,json=uint64,proto3" json:"uint64_,omitempty"`
	Sint32_   int32   `protobuf:"zigzag32,13,opt,name=sint32_,json=sint32,proto3" json:"sint32_,omitempty"`
	Sint64_   int64   `protobuf:"zigzag64,15,opt,name=sint64_,json=sint64,proto3" json:"sint64_,omitempty"`
	Fixed32_  uint32  `protobuf:"fixed32,17,opt,name=fixed32_,json=fixed32,proto3" json:"fixed32_,omitempty"`
	Fixed64_  uint64  `protobuf:"fixed64,19,opt,name=fixed64_,json=fixed64,proto3" json:"fixed64_,omitempty"`
	Sfixed32_ int32   `protobuf:"fixed32,21,opt,name=sfixed32_,json=sfixed32,proto3" json:"sfixed32_,omitempty"`
	Sfixed64_ int64   `protobuf:"fixed64,23,opt,name=sfixed64_,json=sfixed64,proto3" json:"sfixed64_,omitempty"`
	Bool_     bool    `protobuf:"varint,25,opt,name=bool_,json=bool,proto3" json:"bool_,omitempty"`
	String_   string  `protobuf:"bytes,27,opt,name=string_,json=string,proto3" json:"string_,omitempty"`
	Bytes_    []byte  `protobuf:"bytes,29,opt,name=bytes_,json=bytes,proto3" json:"bytes_,omitempty"`
}

func (x *ScalarTypes) Reset() {
	*x = ScalarTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTypes) ProtoMessage() {}

func (x *ScalarTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTypes.ProtoReflect.Descriptor instead.
func (*ScalarTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *ScalarTypes) GetDouble_() float64 {
	if x != nil {
		return x.Double_
	}
	return 0
}

func (x *ScalarTypes) GetFloat_() float32 {
	if x != nil {
		return x.Float_
	}
	return 0
}

func (x *ScalarTypes) GetInt32_() int32 {
	if x != nil {
		return x.Int32_
	}
	return 0
}

func (x *ScalarTypes) GetInt64_() int64 {
	if x != nil {
		return x.Int64_
	}
	return 0
}

func (x *ScalarTypes) GetUint32_() uint32 {
	if x != nil {
		return x.Uint32_
	}
	return 0
}

func (x *ScalarTypes) GetUint64_() uint64 {
	if x != nil {
		return x.Uint64_
	}
	return 0
}

func (x *ScalarTypes) GetSint32_() int32 {
	if x != nil {
		return x.Sint32_
	}
	return 0
}

func (x *ScalarTypes) GetSint64_() int64 {
	if x != nil {
		return x.Sint64_
	}
	return 0
}

func (x *ScalarTypes) GetFixed32_() uint32 {
	if x != nil {
		return x.Fixed32_
	}
	return 0
}

func (x *ScalarTypes) GetFixed64_() uint64 {
	if x != nil {
		return x.Fixed64_
	}
	return 0
}

func (x *ScalarTypes) GetSfixed32_() int32 {
	if x != nil {
		return x.Sfixed32_
	}
	return 0
}

func (x *ScalarTypes) GetSfixed64_() int64 {
	if x != nil {
		return x.Sfixed64_
	}
	return 0
}

func (x *ScalarTypes) GetBool_() bool {
	if x != nil {
		return x.Bool_
	}
	return false
}

func (x *ScalarTypes) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *ScalarTypes) GetBytes_() []byte {
	if x != nil {
		return x.Bytes_
	}
	return nil
}

type RepeatedTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated
	RepeatedDouble_   []float64 `protobuf:"fixed64,101,rep,packed,name=repeated_double_,json=repeatedDouble,proto3" json:"repeated_double_,omitempty"`
	RepeatedFloat_    []float32 `protobuf:"fixed32,103,rep,packed,name=repeated_float_,json=repeatedFloat,proto3" json:"repeated_float_,omitempty"`
	RepeatedInt32_    []int32   `protobuf:"varint,105,rep,packed,name=repeated_int32_,json=repeatedInt32,proto3" json:"repeated_int32_,omitempty"`
	RepeatedInt64_    []int64   `protobuf:"varint,107,rep,packed,name=repeated_int64_,json=repeatedInt64,proto3" json:"repeated_int64_,omitempty"`
	RepeatedUint32_   []uint32  `protobuf:"varint,109,rep,packed,name=repeated_uint32_,json=repeatedUint32,proto3" json:"repeated_uint32_,omitempty"`
	RepeatedUint64_   []uint64  `protobuf:"varint,111,rep,packed,name=repeated_uint64_,json=repeatedUint64,proto3" json:"repeated_uint64_,omitempty"`
	RepeatedSint32_   []int32   `protobuf:"zigzag32,113,rep,packed,name=repeated_sint32_,json=repeatedSint32,proto3" json:"repeated_sint32_,omitempty"`
	RepeatedSint64_   []int64   `protobuf:"zigzag64,115,rep,packed,name=repeated_sint64_,json=repeatedSint64,proto3" json:"repeated_sint64_,omitempty"`
	RepeatedFixed32_  []uint32  `protobuf:"fixed32,117,rep,packed,name=repeated_fixed32_,json=repeatedFixed32,proto3" json:"repeated_fixed32_,omitempty"`
	RepeatedFixed64_  []uint64  `protobuf:"fixed64,119,rep,packed,name=repeated_fixed64_,json=repeatedFixed64,proto3" json:"repeated_fixed64_,omitempty"`
	RepeatedSfixed32_ []int32   `protobuf:"fixed32,121,rep,packed,name=repeated_sfixed32_,json=repeatedSfixed32,proto3" json:"repeated_sfixed32_,omitempty"`
	RepeatedSfixed64_ []int64   `protobuf:"fixed64,123,rep,packed,name=repeated_sfixed64_,json=repeatedSfixed64,proto3" json:"repeated_sfixed64_,omitempty"`
	RepeatedBool_     []bool    `protobuf:"varint,125,rep,packed,name=repeated_bool_,json=repeatedBool,proto3" json:"repeated_bool_,omitempty"`
	RepeatedString_   []string  `protobuf:"bytes,127,rep,name=repeated_string_,json=repeatedString,proto3" json:"repeated_string_,omitempty"`
	RepeatedBytes_    [][]byte  `protobuf:"bytes,129,rep,name=repeated_bytes_,json=repeatedBytes,proto3" json:"repeated_bytes_,omitempty"`
}

func (x *RepeatedTypes) Reset() {
	*x = RepeatedTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedTypes) ProtoMessage() {}

func (x *RepeatedTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedTypes.ProtoReflect.Descriptor instead.
func (*RepeatedTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedTypes) GetRepeatedDouble_() []float64 {
	if x != nil {
		return x.RepeatedDouble_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedFloat_() []float32 {
	if x != nil {
		return x.RepeatedFloat_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedInt32_() []int32 {
	if x != nil {
		return x.RepeatedInt32_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedInt64_() []int64 {
	if x != nil {
		return x.RepeatedInt64_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedUint32_() []uint32 {
	if x != nil {
		return x.RepeatedUint32_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedUint64_() []uint64 {
	if x != nil {
		return x.RepeatedUint64_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedSint32_() []int32 {
	if x != nil {
		return x.RepeatedSint32_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedSint64_() []int64 {
	if x != nil {
		return x.RepeatedSint64_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedFixed32_() []uint32 {
	if x != nil {
		return x.RepeatedFixed32_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedFixed64_() []uint64 {
	if x != nil {
		return x.RepeatedFixed64_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedSfixed32_() []int32 {
	if x != nil {
		return x.RepeatedSfixed32_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedSfixed64_() []int64 {
	if x != nil {
		return x.RepeatedSfixed64_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedBool_() []bool {
	if x != nil {
		return x.RepeatedBool_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedString_() []string {
	if x != nil {
		return x.RepeatedString_
	}
	return nil
}

func (x *RepeatedTypes) GetRepeatedBytes_() [][]byte {
	if x != nil {
		return x.RepeatedBytes_
	}
	return nil
}

type MapTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map
	MapStringDouble_    map[string]float64      `protobuf:"bytes,201,rep,name=map_string_double_,json=mapStringDouble,proto3" json:"map_string_double_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStringFloat_     map[string]float32      `protobuf:"bytes,202,rep,name=map_string_float_,json=mapStringFloat,proto3" json:"map_string_float_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStringInt32_     map[string]int32        `protobuf:"bytes,203,rep,name=map_string_int32_,json=mapStringInt32,proto3" json:"map_string_int32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt64_     map[string]int64        `protobuf:"bytes,204,rep,name=map_string_int64_,json=mapStringInt64,proto3" json:"map_string_int64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringUint32_    map[string]uint32       `protobuf:"bytes,205,rep,name=map_string_uint32_,json=mapStringUint32,proto3" json:"map_string_uint32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringUint64_    map[string]uint64       `protobuf:"bytes,206,rep,name=map_string_uint64_,json=mapStringUint64,proto3" json:"map_string_uint64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringSint32_    map[string]int32        `protobuf:"bytes,207,rep,name=map_string_sint32_,json=mapStringSint32,proto3" json:"map_string_sint32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapStringSint64_    map[string]int64        `protobuf:"bytes,208,rep,name=map_string_sint64_,json=mapStringSint64,proto3" json:"map_string_sint64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapStringFixed32_   map[string]uint32       `protobuf:"bytes,209,rep,name=map_string_fixed32_,json=mapStringFixed32,proto3" json:"map_string_fixed32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStringFixed64_   map[string]uint64       `protobuf:"bytes,210,rep,name=map_string_fixed64_,json=mapStringFixed64,proto3" json:"map_string_fixed64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStringSfixed32_  map[string]int32        `protobuf:"bytes,211,rep,name=map_string_sfixed32_,json=mapStringSfixed32,proto3" json:"map_string_sfixed32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapStringSfixed64_  map[string]int64        `protobuf:"bytes,212,rep,name=map_string_sfixed64_,json=mapStringSfixed64,proto3" json:"map_string_sfixed64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapStringBool_      map[string]bool         `protobuf:"bytes,213,rep,name=map_string_bool_,json=mapStringBool,proto3" json:"map_string_bool_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringString_    map[string]string       `protobuf:"bytes,214,rep,name=map_string_string_,json=mapStringString,proto3" json:"map_string_string_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringBytes_     map[string][]byte       `protobuf:"bytes,215,rep,name=map_string_bytes_,json=mapStringBytes,proto3" json:"map_string_bytes_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringMessage_   map[string]*RootMessage `protobuf:"bytes,216,rep,name=map_string_message_,json=mapStringMessage,proto3" json:"map_string_message_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NilMapStringString_ map[string]string       `protobuf:"bytes,217,rep,name=nil_map_string_string_,json=nilMapStringString,proto3" json:"nil_map_string_string_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Double_     map[int32]float64       `protobuf:"bytes,221,rep,name=map_int32_double_,json=mapInt32Double,proto3" json:"map_int32_double_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float_      map[int32]float32       `protobuf:"bytes,222,rep,name=map_int32_float_,json=mapInt32Float,proto3" json:"map_int32_float_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Int32_      map[int32]int32         `protobuf:"bytes,223,rep,name=map_int32_int32_,json=mapInt32Int32,proto3" json:"map_int32_int32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64_      map[int32]int64         `protobuf:"bytes,224,rep,name=map_int32_int64_,json=mapInt32Int64,proto3" json:"map_int32_int64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint32_     map[int32]uint32        `protobuf:"bytes,225,rep,name=map_int32_uint32_,json=mapInt32Uint32,proto3" json:"map_int32_uint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint64_     map[int32]uint64        `protobuf:"bytes,226,rep,name=map_int32_uint64_,json=mapInt32Uint64,proto3" json:"map_int32_uint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Sint32_     map[int32]int32         `protobuf:"bytes,227,rep,name=map_int32_sint32_,json=mapInt32Sint32,proto3" json:"map_int32_sint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt32Sint64_     map[int32]int64         `protobuf:"bytes,228,rep,name=map_int32_sint64_,json=mapInt32Sint64,proto3" json:"map_int32_sint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt32Fixed32_    map[int32]uint32        `protobuf:"bytes,229,rep,name=map_int32_fixed32_,json=mapInt32Fixed32,proto3" json:"map_int32_fixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Fixed64_    map[int32]uint64        `protobuf:"bytes,230,rep,name=map_int32_fixed64_,json=mapInt32Fixed64,proto3" json:"map_int32_fixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Sfixed32_   map[int32]int32         `protobuf:"bytes,231,rep,name=map_int32_sfixed32_,json=mapInt32Sfixed32,proto3" json:"map_int32_sfixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Sfixed64_   map[int32]int64         `protobuf:"bytes,232,rep,name=map_int32_sfixed64_,json=mapInt32Sfixed64,proto3" json:"map_int32_sfixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Bool_       map[int32]bool          `protobuf:"bytes,233,rep,name=map_int32_bool_,json=mapInt32Bool,proto3" json:"map_int32_bool_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String_     map[int32]string        `protobuf:"bytes,234,rep,name=map_int32_string_,json=mapInt32String,proto3" json:"map_int32_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes_      map[int32][]byte        `protobuf:"bytes,235,rep,name=map_int32_bytes_,json=mapInt32Bytes,proto3" json:"map_int32_bytes_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Message_    map[int32]*RootMessage  `protobuf:"bytes,236,rep,name=map_int32_message_,json=mapInt32Message,proto3" json:"map_int32_message_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NilMapInt32String_  map[int32]string        `protobuf:"bytes,237,rep,name=nil_map_int32_string_,json=nilMapInt32String,proto3" json:"nil_map_int32_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Double_     map[int64]float64       `protobuf:"bytes,241,rep,name=map_int64_double_,json=mapInt64Double,proto3" json:"map_int64_double_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt64Float_      map[int64]float32       `protobuf:"bytes,242,rep,name=map_int64_float_,json=mapInt64Float,proto3" json:"map_int64_float_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt64Int32_      map[int64]int32         `protobuf:"bytes,243,rep,name=map_int64_int32_,json=mapInt64Int32,proto3" json:"map_int64_int32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Int64_      map[int64]int64         `protobuf:"bytes,244,rep,name=map_int64_int64_,json=mapInt64Int64,proto3" json:"map_int64_int64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Uint32_     map[int64]uint32        `protobuf:"bytes,245,rep,name=map_int64_uint32_,json=mapInt64Uint32,proto3" json:"map_int64_uint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Uint64_     map[int64]uint64        `protobuf:"bytes,246,rep,name=map_int64_uint64_,json=mapInt64Uint64,proto3" json:"map_int64_uint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Sint32_     map[int64]int32         `protobuf:"bytes,247,rep,name=map_int64_sint32_,json=mapInt64Sint32,proto3" json:"map_int64_sint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt64Sint64_     map[int64]int64         `protobuf:"bytes,248,rep,name=map_int64_sint64_,json=mapInt64Sint64,proto3" json:"map_int64_sint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt64Fixed32_    map[int64]uint32        `protobuf:"bytes,249,rep,name=map_int64_fixed32_,json=mapInt64Fixed32,proto3" json:"map_int64_fixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt64Fixed64_    map[int64]uint64        `protobuf:"bytes,250,rep,name=map_int64_fixed64_,json=mapInt64Fixed64,proto3" json:"map_int64_fixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt64Sfixed32_   map[int64]int32         `protobuf:"bytes,251,rep,name=map_int64_sfixed32_,json=mapInt64Sfixed32,proto3" json:"map_int64_sfixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt64Sfixed64_   map[int64]int64         `protobuf:"bytes,252,rep,name=map_int64_sfixed64_,json=mapInt64Sfixed64,proto3" json:"map_int64_sfixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt64Bool_       map[int64]bool          `protobuf:"bytes,253,rep,name=map_int64_bool_,json=mapInt64Bool,proto3" json:"map_int64_bool_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64String_     map[int64]string        `protobuf:"bytes,254,rep,name=map_int64_string_,json=mapInt64String,proto3" json:"map_int64_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Bytes_      map[int64][]byte        `protobuf:"bytes,255,rep,name=map_int64_bytes_,json=mapInt64Bytes,proto3" json:"map_int64_bytes_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Message_    map[int64]*RootMessage  `protobuf:"bytes,256,rep,name=map_int64_message_,json=mapInt64Message,proto3" json:"map_int64_message_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NilMapInt64String_  map[int64]string        `protobuf:"bytes,257,rep,name=nil_map_int64_string_,json=nilMapInt64String,proto3" json:"nil_map_int64_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32Double_    map[uint32]float64      `protobuf:"bytes,261,rep,name=map_uint32_double_,json=mapUint32Double,proto3" json:"map_uint32_double_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapUint32Float_     map[uint32]float32      `protobuf:"bytes,262,rep,name=map_uint32_float_,json=mapUint32Float,proto3" json:"map_uint32_float_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapUint32Int32_     map[uint32]int32        `protobuf:"bytes,263,rep,name=map_uint32_int32_,json=mapUint32Int32,proto3" json:"map_uint32_int32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Int64_     map[uint32]int64        `protobuf:"bytes,264,rep,name=map_uint32_int64_,json=mapUint32Int64,proto3" json:"map_uint32_int64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Uint32_    map[uint32]uint32       `protobuf:"bytes,265,rep,name=map_uint32_uint32_,json=mapUint32Uint32,proto3" json:"map_uint32_uint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Uint64_    map[uint32]uint64       `protobuf:"bytes,266,rep,name=map_uint32_uint64_,json=mapUint32Uint64,proto3" json:"map_uint32_uint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Sint32_    map[uint32]int32        `protobuf:"bytes,267,rep,name=map_uint32_sint32_,json=mapUint32Sint32,proto3" json:"map_uint32_sint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapUint32Sint64_    map[uint32]int64        `protobuf:"bytes,268,rep,name=map_uint32_sint64_,json=mapUint32Sint64,proto3" json:"map_uint32_sint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapUint32Fixed32_   map[uint32]uint32       `protobuf:"bytes,269,rep,name=map_uint32_fixed32_,json=mapUint32Fixed32,proto3" json:"map_uint32_fixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapUint32Fixed64_   map[uint32]uint64       `protobuf:"bytes,270,rep,name=map_uint32_fixed64_,json=mapUint32Fixed64,proto3" json:"map_uint32_fixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapUint32Sfixed32_  map[uint32]int32        `protobuf:"bytes,271,rep,name=map_uint32_sfixed32_,json=mapUint32Sfixed32,proto3" json:"map_uint32_sfixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapUint32Sfixed64_  map[uint32]int64        `protobuf:"bytes,272,rep,name=map_uint32_sfixed64_,json=mapUint32Sfixed64,proto3" json:"map_uint32_sfixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapUint32Bool_      map[uint32]bool         `protobuf:"bytes,273,rep,name=map_uint32_bool_,json=mapUint32Bool,proto3" json:"map_uint32_bool_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32String_    map[uint32]string       `protobuf:"bytes,274,rep,name=map_uint32_string_,json=mapUint32String,proto3" json:"map_uint32_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32Bytes_     map[uint32][]byte       `protobuf:"bytes,275,rep,name=map_uint32_bytes_,json=mapUint32Bytes,proto3" json:"map_uint32_bytes_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32Message_   map[uint32]*RootMessage `protobuf:"bytes,276,rep,name=map_uint32_message_,json=mapUint32Message,proto3" json:"map_uint32_message_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NilMapUint32String_ map[uint32]string       `protobuf:"bytes,277,rep,name=nil_map_uint32_string_,json=nilMapUint32String,proto3" json:"nil_map_uint32_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64Double_    map[uint64]float64      `protobuf:"bytes,281,rep,name=map_uint64_double_,json=mapUint64Double,proto3" json:"map_uint64_double_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapUint64Float_     map[uint64]float32      `protobuf:"bytes,282,rep,name=map_uint64_float_,json=mapUint64Float,proto3" json:"map_uint64_float_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapUint64Int32_     map[uint64]int32        `protobuf:"bytes,283,rep,name=map_uint64_int32_,json=mapUint64Int32,proto3" json:"map_uint64_int32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Int64_     map[uint64]int64        `protobuf:"bytes,284,rep,name=map_uint64_int64_,json=mapUint64Int64,proto3" json:"map_uint64_int64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Uint32_    map[uint64]uint32       `protobuf:"bytes,285,rep,name=map_uint64_uint32_,json=mapUint64Uint32,proto3" json:"map_uint64_uint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Uint64_    map[uint64]uint64       `protobuf:"bytes,286,rep,name=map_uint64_uint64_,json=mapUint64Uint64,proto3" json:"map_uint64_uint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Sint32_    map[uint64]int32        `protobuf:"bytes,287,rep,name=map_uint64_sint32_,json=mapUint64Sint32,proto3" json:"map_uint64_sint32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapUint64Sint64_    map[uint64]int64        `protobuf:"bytes,288,rep,name=map_uint64_sint64_,json=mapUint64Sint64,proto3" json:"map_uint64_sint64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapUint64Fixed32_   map[uint64]uint32       `protobuf:"bytes,289,rep,name=map_uint64_fixed32_,json=mapUint64Fixed32,proto3" json:"map_uint64_fixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapUint64Fixed64_   map[uint64]uint64       `protobuf:"bytes,290,rep,name=map_uint64_fixed64_,json=mapUint64Fixed64,proto3" json:"map_uint64_fixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapUint64Sfixed32_  map[uint64]int32        `protobuf:"bytes,291,rep,name=map_uint64_sfixed32_,json=mapUint64Sfixed32,proto3" json:"map_uint64_sfixed32_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapUint64Sfixed64_  map[uint64]int64        `protobuf:"bytes,292,rep,name=map_uint64_sfixed64_,json=mapUint64Sfixed64,proto3" json:"map_uint64_sfixed64_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapUint64Bool_      map[uint64]bool         `protobuf:"bytes,293,rep,name=map_uint64_bool_,json=mapUint64Bool,proto3" json:"map_uint64_bool_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64String_    map[uint64]string       `protobuf:"bytes,294,rep,name=map_uint64_string_,json=mapUint64String,proto3" json:"map_uint64_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64Bytes_     map[uint64][]byte       `protobuf:"bytes,295,rep,name=map_uint64_bytes_,json=mapUint64Bytes,proto3" json:"map_uint64_bytes_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64Message_   map[uint64]*RootMessage `protobuf:"bytes,296,rep,name=map_uint64_message_,json=mapUint64Message,proto3" json:"map_uint64_message_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NilMapUint64String_ map[uint64]string       `protobuf:"bytes,297,rep,name=nil_map_uint64_string_,json=nilMapUint64String,proto3" json:"nil_map_uint64_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapTypes) Reset() {
	*x = MapTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTypes) ProtoMessage() {}

func (x *MapTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTypes.ProtoReflect.Descriptor instead.
func (*MapTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *MapTypes) GetMapStringDouble_() map[string]float64 {
	if x != nil {
		return x.MapStringDouble_
	}
	return nil
}

func (x *MapTypes) GetMapStringFloat_() map[string]float32 {
	if x != nil {
		return x.MapStringFloat_
	}
	return nil
}

func (x *MapTypes) GetMapStringInt32_() map[string]int32 {
	if x != nil {
		return x.MapStringInt32_
	}
	return nil
}

func (x *MapTypes) GetMapStringInt64_() map[string]int64 {
	if x != nil {
		return x.MapStringInt64_
	}
	return nil
}

func (x *MapTypes) GetMapStringUint32_() map[string]uint32 {
	if x != nil {
		return x.MapStringUint32_
	}
	return nil
}

func (x *MapTypes) GetMapStringUint64_() map[string]uint64 {
	if x != nil {
		return x.MapStringUint64_
	}
	return nil
}

func (x *MapTypes) GetMapStringSint32_() map[string]int32 {
	if x != nil {
		return x.MapStringSint32_
	}
	return nil
}

func (x *MapTypes) GetMapStringSint64_() map[string]int64 {
	if x != nil {
		return x.MapStringSint64_
	}
	return nil
}

func (x *MapTypes) GetMapStringFixed32_() map[string]uint32 {
	if x != nil {
		return x.MapStringFixed32_
	}
	return nil
}

func (x *MapTypes) GetMapStringFixed64_() map[string]uint64 {
	if x != nil {
		return x.MapStringFixed64_
	}
	return nil
}

func (x *MapTypes) GetMapStringSfixed32_() map[string]int32 {
	if x != nil {
		return x.MapStringSfixed32_
	}
	return nil
}

func (x *MapTypes) GetMapStringSfixed64_() map[string]int64 {
	if x != nil {
		return x.MapStringSfixed64_
	}
	return nil
}

func (x *MapTypes) GetMapStringBool_() map[string]bool {
	if x != nil {
		return x.MapStringBool_
	}
	return nil
}

func (x *MapTypes) GetMapStringString_() map[string]string {
	if x != nil {
		return x.MapStringString_
	}
	return nil
}

func (x *MapTypes) GetMapStringBytes_() map[string][]byte {
	if x != nil {
		return x.MapStringBytes_
	}
	return nil
}

func (x *MapTypes) GetMapStringMessage_() map[string]*RootMessage {
	if x != nil {
		return x.MapStringMessage_
	}
	return nil
}

func (x *MapTypes) GetNilMapStringString_() map[string]string {
	if x != nil {
		return x.NilMapStringString_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Double_() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Float_() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Int32_() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Int64_() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Uint32_() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Uint64_() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Sint32_() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sint32_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Sint64_() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sint64_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Fixed32_() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Fixed32_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Fixed64_() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Fixed64_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Sfixed32_() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sfixed32_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Sfixed64_() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sfixed64_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Bool_() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool_
	}
	return nil
}

func (x *MapTypes) GetMapInt32String_() map[int32]string {
	if x != nil {
		return x.MapInt32String_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Bytes_() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes_
	}
	return nil
}

func (x *MapTypes) GetMapInt32Message_() map[int32]*RootMessage {
	if x != nil {
		return x.MapInt32Message_
	}
	return nil
}

func (x *MapTypes) GetNilMapInt32String_() map[int32]string {
	if x != nil {
		return x.NilMapInt32String_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Double_() map[int64]float64 {
	if x != nil {
		return x.MapInt64Double_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Float_() map[int64]float32 {
	if x != nil {
		return x.MapInt64Float_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Int32_() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Int64_() map[int64]int64 {
	if x != nil {
		return x.MapInt64Int64_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Uint32_() map[int64]uint32 {
	if x != nil {
		return x.MapInt64Uint32_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Uint64_() map[int64]uint64 {
	if x != nil {
		return x.MapInt64Uint64_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Sint32_() map[int64]int32 {
	if x != nil {
		return x.MapInt64Sint32_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Sint64_() map[int64]int64 {
	if x != nil {
		return x.MapInt64Sint64_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Fixed32_() map[int64]uint32 {
	if x != nil {
		return x.MapInt64Fixed32_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Fixed64_() map[int64]uint64 {
	if x != nil {
		return x.MapInt64Fixed64_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Sfixed32_() map[int64]int32 {
	if x != nil {
		return x.MapInt64Sfixed32_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Sfixed64_() map[int64]int64 {
	if x != nil {
		return x.MapInt64Sfixed64_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Bool_() map[int64]bool {
	if x != nil {
		return x.MapInt64Bool_
	}
	return nil
}

func (x *MapTypes) GetMapInt64String_() map[int64]string {
	if x != nil {
		return x.MapInt64String_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Bytes_() map[int64][]byte {
	if x != nil {
		return x.MapInt64Bytes_
	}
	return nil
}

func (x *MapTypes) GetMapInt64Message_() map[int64]*RootMessage {
	if x != nil {
		return x.MapInt64Message_
	}
	return nil
}

func (x *MapTypes) GetNilMapInt64String_() map[int64]string {
	if x != nil {
		return x.NilMapInt64String_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Double_() map[uint32]float64 {
	if x != nil {
		return x.MapUint32Double_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Float_() map[uint32]float32 {
	if x != nil {
		return x.MapUint32Float_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Int32_() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Int64_() map[uint32]int64 {
	if x != nil {
		return x.MapUint32Int64_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Uint32_() map[uint32]uint32 {
	if x != nil {
		return x.MapUint32Uint32_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Uint64_() map[uint32]uint64 {
	if x != nil {
		return x.MapUint32Uint64_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Sint32_() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Sint32_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Sint64_() map[uint32]int64 {
	if x != nil {
		return x.MapUint32Sint64_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Fixed32_() map[uint32]uint32 {
	if x != nil {
		return x.MapUint32Fixed32_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Fixed64_() map[uint32]uint64 {
	if x != nil {
		return x.MapUint32Fixed64_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Sfixed32_() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Sfixed32_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Sfixed64_() map[uint32]int64 {
	if x != nil {
		return x.MapUint32Sfixed64_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Bool_() map[uint32]bool {
	if x != nil {
		return x.MapUint32Bool_
	}
	return nil
}

func (x *MapTypes) GetMapUint32String_() map[uint32]string {
	if x != nil {
		return x.MapUint32String_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Bytes_() map[uint32][]byte {
	if x != nil {
		return x.MapUint32Bytes_
	}
	return nil
}

func (x *MapTypes) GetMapUint32Message_() map[uint32]*RootMessage {
	if x != nil {
		return x.MapUint32Message_
	}
	return nil
}

func (x *MapTypes) GetNilMapUint32String_() map[uint32]string {
	if x != nil {
		return x.NilMapUint32String_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Double_() map[uint64]float64 {
	if x != nil {
		return x.MapUint64Double_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Float_() map[uint64]float32 {
	if x != nil {
		return x.MapUint64Float_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Int32_() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Int64_() map[uint64]int64 {
	if x != nil {
		return x.MapUint64Int64_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Uint32_() map[uint64]uint32 {
	if x != nil {
		return x.MapUint64Uint32_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Uint64_() map[uint64]uint64 {
	if x != nil {
		return x.MapUint64Uint64_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Sint32_() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Sint32_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Sint64_() map[uint64]int64 {
	if x != nil {
		return x.MapUint64Sint64_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Fixed32_() map[uint64]uint32 {
	if x != nil {
		return x.MapUint64Fixed32_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Fixed64_() map[uint64]uint64 {
	if x != nil {
		return x.MapUint64Fixed64_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Sfixed32_() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Sfixed32_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Sfixed64_() map[uint64]int64 {
	if x != nil {
		return x.MapUint64Sfixed64_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Bool_() map[uint64]bool {
	if x != nil {
		return x.MapUint64Bool_
	}
	return nil
}

func (x *MapTypes) GetMapUint64String_() map[uint64]string {
	if x != nil {
		return x.MapUint64String_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Bytes_() map[uint64][]byte {
	if x != nil {
		return x.MapUint64Bytes_
	}
	return nil
}

func (x *MapTypes) GetMapUint64Message_() map[uint64]*RootMessage {
	if x != nil {
		return x.MapUint64Message_
	}
	return nil
}

func (x *MapTypes) GetNilMapUint64String_() map[uint64]string {
	if x != nil {
		return x.NilMapUint64String_
	}
	return nil
}

type OneOfTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestOneof:
	//
	//	*OneOfTypes_Message1
	//	*OneOfTypes_Message2
	TestOneof isOneOfTypes_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *OneOfTypes) Reset() {
	*x = OneOfTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfTypes) ProtoMessage() {}

func (x *OneOfTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfTypes.ProtoReflect.Descriptor instead.
func (*OneOfTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (m *OneOfTypes) GetTestOneof() isOneOfTypes_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *OneOfTypes) GetMessage1() *RootMessage {
	if x, ok := x.GetTestOneof().(*OneOfTypes_Message1); ok {
		return x.Message1
	}
	return nil
}

func (x *OneOfTypes) GetMessage2() *RootMessage {
	if x, ok := x.GetTestOneof().(*OneOfTypes_Message2); ok {
		return x.Message2
	}
	return nil
}

type isOneOfTypes_TestOneof interface {
	isOneOfTypes_TestOneof()
}

type OneOfTypes_Message1 struct {
	Message1 *RootMessage `protobuf:"bytes,3,opt,name=message1,proto3,oneof"`
}

type OneOfTypes_Message2 struct {
	Message2 *RootMessage `protobuf:"bytes,5,opt,name=message2,proto3,oneof"`
}

func (*OneOfTypes_Message1) isOneOfTypes_TestOneof() {}

func (*OneOfTypes_Message2) isOneOfTypes_TestOneof() {}

type EnumTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootEnum1   RootEnum               `protobuf:"varint,1,opt,name=root_enum1,json=rootEnum1,proto3,enum=mtechnavi.testdata.RootEnum" json:"root_enum1,omitempty"`
	RootEnum2   []RootEnum             `protobuf:"varint,3,rep,packed,name=root_enum2,json=rootEnum2,proto3,enum=mtechnavi.testdata.RootEnum" json:"root_enum2,omitempty"`
	ScopedEnum1 EnumTypes_ScopedEnum   `protobuf:"varint,5,opt,name=scoped_enum1,json=scopedEnum1,proto3,enum=mtechnavi.testdata.EnumTypes_ScopedEnum" json:"scoped_enum1,omitempty"`
	ScopedEnum2 []EnumTypes_ScopedEnum `protobuf:"varint,7,rep,packed,name=scoped_enum2,json=scopedEnum2,proto3,enum=mtechnavi.testdata.EnumTypes_ScopedEnum" json:"scoped_enum2,omitempty"`
}

func (x *EnumTypes) Reset() {
	*x = EnumTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumTypes) ProtoMessage() {}

func (x *EnumTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumTypes.ProtoReflect.Descriptor instead.
func (*EnumTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *EnumTypes) GetRootEnum1() RootEnum {
	if x != nil {
		return x.RootEnum1
	}
	return RootEnum_A
}

func (x *EnumTypes) GetRootEnum2() []RootEnum {
	if x != nil {
		return x.RootEnum2
	}
	return nil
}

func (x *EnumTypes) GetScopedEnum1() EnumTypes_ScopedEnum {
	if x != nil {
		return x.ScopedEnum1
	}
	return EnumTypes_X
}

func (x *EnumTypes) GetScopedEnum2() []EnumTypes_ScopedEnum {
	if x != nil {
		return x.ScopedEnum2
	}
	return nil
}

type RootMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                string                             `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,2,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *RootMessage) Reset() {
	*x = RootMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootMessage) ProtoMessage() {}

func (x *RootMessage) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootMessage.ProtoReflect.Descriptor instead.
func (*RootMessage) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *RootMessage) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *RootMessage) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

func (x *RootMessage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RootMessage) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RootMessage) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type MessageTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootMessage1   *RootMessage                  `protobuf:"bytes,1,opt,name=root_message1,json=rootMessage1,proto3" json:"root_message1,omitempty"`
	RootMessage2   []*RootMessage                `protobuf:"bytes,2,rep,name=root_message2,json=rootMessage2,proto3" json:"root_message2,omitempty"`
	ScopedMessage1 *MessageTypes_ScopedMessage   `protobuf:"bytes,3,opt,name=scoped_message1,json=scopedMessage1,proto3" json:"scoped_message1,omitempty"`
	ScopedMessage2 []*MessageTypes_ScopedMessage `protobuf:"bytes,4,rep,name=scoped_message2,json=scopedMessage2,proto3" json:"scoped_message2,omitempty"`
}

func (x *MessageTypes) Reset() {
	*x = MessageTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypes) ProtoMessage() {}

func (x *MessageTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypes.ProtoReflect.Descriptor instead.
func (*MessageTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *MessageTypes) GetRootMessage1() *RootMessage {
	if x != nil {
		return x.RootMessage1
	}
	return nil
}

func (x *MessageTypes) GetRootMessage2() []*RootMessage {
	if x != nil {
		return x.RootMessage2
	}
	return nil
}

func (x *MessageTypes) GetScopedMessage1() *MessageTypes_ScopedMessage {
	if x != nil {
		return x.ScopedMessage1
	}
	return nil
}

func (x *MessageTypes) GetScopedMessage2() []*MessageTypes_ScopedMessage {
	if x != nil {
		return x.ScopedMessage2
	}
	return nil
}

type WellKnownTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Empty *emptypb.Empty `protobuf:"bytes,1,opt,name=empty,proto3" json:"empty,omitempty"`
}

func (x *WellKnownTypes) Reset() {
	*x = WellKnownTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownTypes) ProtoMessage() {}

func (x *WellKnownTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownTypes.ProtoReflect.Descriptor instead.
func (*WellKnownTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *WellKnownTypes) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

type ValidateTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
}

func (x *ValidateTypes) Reset() {
	*x = ValidateTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTypes) ProtoMessage() {}

func (x *ValidateTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTypes.ProtoReflect.Descriptor instead.
func (*ValidateTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *ValidateTypes) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

type VisibilityTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private1 string `protobuf:"bytes,1,opt,name=private1,proto3" json:"private1,omitempty"`
	Private2 string `protobuf:"bytes,2,opt,name=private2,proto3" json:"private2,omitempty"`
	Granted  string `protobuf:"bytes,3,opt,name=granted,proto3" json:"granted,omitempty"`
	Public   string `protobuf:"bytes,4,opt,name=public,proto3" json:"public,omitempty"`
}

func (x *VisibilityTypes) Reset() {
	*x = VisibilityTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisibilityTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibilityTypes) ProtoMessage() {}

func (x *VisibilityTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibilityTypes.ProtoReflect.Descriptor instead.
func (*VisibilityTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *VisibilityTypes) GetPrivate1() string {
	if x != nil {
		return x.Private1
	}
	return ""
}

func (x *VisibilityTypes) GetPrivate2() string {
	if x != nil {
		return x.Private2
	}
	return ""
}

func (x *VisibilityTypes) GetGranted() string {
	if x != nil {
		return x.Granted
	}
	return ""
}

func (x *VisibilityTypes) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

type IndexTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Double_          float64           `protobuf:"fixed64,1,opt,name=double_,json=double,proto3" json:"double_,omitempty"`
	Float_           float32           `protobuf:"fixed32,3,opt,name=float_,json=float,proto3" json:"float_,omitempty"`
	Int32_           int32             `protobuf:"varint,5,opt,name=int32_,json=int32,proto3" json:"int32_,omitempty"`
	Int64_           int64             `protobuf:"varint,7,opt,name=int64_,json=int64,proto3" json:"int64_,omitempty"`
	Uint32_          uint32            `protobuf:"varint,9,opt,name=uint32_,json=uint32,proto3" json:"uint32_,omitempty"`
	Uint64_          uint64            `protobuf:"varint,11,opt,name=uint64_,json=uint64,proto3" json:"uint64_,omitempty"`
	Sint32_          int32             `protobuf:"zigzag32,13,opt,name=sint32_,json=sint32,proto3" json:"sint32_,omitempty"`
	Sint64_          int64             `protobuf:"zigzag64,15,opt,name=sint64_,json=sint64,proto3" json:"sint64_,omitempty"`
	Fixed32_         uint32            `protobuf:"fixed32,17,opt,name=fixed32_,json=fixed32,proto3" json:"fixed32_,omitempty"`
	Fixed64_         uint64            `protobuf:"fixed64,19,opt,name=fixed64_,json=fixed64,proto3" json:"fixed64_,omitempty"`
	Sfixed32_        int32             `protobuf:"fixed32,21,opt,name=sfixed32_,json=sfixed32,proto3" json:"sfixed32_,omitempty"`
	Sfixed64_        int64             `protobuf:"fixed64,23,opt,name=sfixed64_,json=sfixed64,proto3" json:"sfixed64_,omitempty"`
	Bool_            bool              `protobuf:"varint,25,opt,name=bool_,json=bool,proto3" json:"bool_,omitempty"`
	String_          string            `protobuf:"bytes,27,opt,name=string_,json=string,proto3" json:"string_,omitempty"`
	Enum_            RootEnum          `protobuf:"varint,29,opt,name=enum_,json=enum,proto3,enum=mtechnavi.testdata.RootEnum" json:"enum_,omitempty"`
	Message_         *RootMessage      `protobuf:"bytes,31,opt,name=message_,json=message,proto3" json:"message_,omitempty"`
	NestedMessage_   *MessageTypes     `protobuf:"bytes,33,opt,name=nested_message_,json=nestedMessage,proto3" json:"nested_message_,omitempty"`
	MapStringString_ map[string]string `protobuf:"bytes,35,rep,name=map_string_string_,json=mapStringString,proto3" json:"map_string_string_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64String_  map[int64]string  `protobuf:"bytes,37,rep,name=map_int64_string_,json=mapInt64String,proto3" json:"map_int64_string_,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatedInt32_   []int32           `protobuf:"varint,39,rep,packed,name=repeated_int32_,json=repeatedInt32,proto3" json:"repeated_int32_,omitempty"`
	RepeatedInt64_   []int64           `protobuf:"varint,41,rep,packed,name=repeated_int64_,json=repeatedInt64,proto3" json:"repeated_int64_,omitempty"`
	RepeatedBool_    []bool            `protobuf:"varint,43,rep,packed,name=repeated_bool_,json=repeatedBool,proto3" json:"repeated_bool_,omitempty"`
	RepeatedString_  []string          `protobuf:"bytes,45,rep,name=repeated_string_,json=repeatedString,proto3" json:"repeated_string_,omitempty"`
	RepeatedMessage_ []*RootMessage    `protobuf:"bytes,47,rep,name=repeated_message_,json=repeatedMessage,proto3" json:"repeated_message_,omitempty"`
	IndexTypesId     string            `protobuf:"bytes,1003,opt,name=index_types_id,json=indexTypesId,proto3" json:"index_types_id,omitempty"`
	CreatedAt        int64             `protobuf:"varint,1000,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64             `protobuf:"varint,1001,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt        int64             `protobuf:"varint,1002,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *IndexTypes) Reset() {
	*x = IndexTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexTypes) ProtoMessage() {}

func (x *IndexTypes) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexTypes.ProtoReflect.Descriptor instead.
func (*IndexTypes) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *IndexTypes) GetDouble_() float64 {
	if x != nil {
		return x.Double_
	}
	return 0
}

func (x *IndexTypes) GetFloat_() float32 {
	if x != nil {
		return x.Float_
	}
	return 0
}

func (x *IndexTypes) GetInt32_() int32 {
	if x != nil {
		return x.Int32_
	}
	return 0
}

func (x *IndexTypes) GetInt64_() int64 {
	if x != nil {
		return x.Int64_
	}
	return 0
}

func (x *IndexTypes) GetUint32_() uint32 {
	if x != nil {
		return x.Uint32_
	}
	return 0
}

func (x *IndexTypes) GetUint64_() uint64 {
	if x != nil {
		return x.Uint64_
	}
	return 0
}

func (x *IndexTypes) GetSint32_() int32 {
	if x != nil {
		return x.Sint32_
	}
	return 0
}

func (x *IndexTypes) GetSint64_() int64 {
	if x != nil {
		return x.Sint64_
	}
	return 0
}

func (x *IndexTypes) GetFixed32_() uint32 {
	if x != nil {
		return x.Fixed32_
	}
	return 0
}

func (x *IndexTypes) GetFixed64_() uint64 {
	if x != nil {
		return x.Fixed64_
	}
	return 0
}

func (x *IndexTypes) GetSfixed32_() int32 {
	if x != nil {
		return x.Sfixed32_
	}
	return 0
}

func (x *IndexTypes) GetSfixed64_() int64 {
	if x != nil {
		return x.Sfixed64_
	}
	return 0
}

func (x *IndexTypes) GetBool_() bool {
	if x != nil {
		return x.Bool_
	}
	return false
}

func (x *IndexTypes) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *IndexTypes) GetEnum_() RootEnum {
	if x != nil {
		return x.Enum_
	}
	return RootEnum_A
}

func (x *IndexTypes) GetMessage_() *RootMessage {
	if x != nil {
		return x.Message_
	}
	return nil
}

func (x *IndexTypes) GetNestedMessage_() *MessageTypes {
	if x != nil {
		return x.NestedMessage_
	}
	return nil
}

func (x *IndexTypes) GetMapStringString_() map[string]string {
	if x != nil {
		return x.MapStringString_
	}
	return nil
}

func (x *IndexTypes) GetMapInt64String_() map[int64]string {
	if x != nil {
		return x.MapInt64String_
	}
	return nil
}

func (x *IndexTypes) GetRepeatedInt32_() []int32 {
	if x != nil {
		return x.RepeatedInt32_
	}
	return nil
}

func (x *IndexTypes) GetRepeatedInt64_() []int64 {
	if x != nil {
		return x.RepeatedInt64_
	}
	return nil
}

func (x *IndexTypes) GetRepeatedBool_() []bool {
	if x != nil {
		return x.RepeatedBool_
	}
	return nil
}

func (x *IndexTypes) GetRepeatedString_() []string {
	if x != nil {
		return x.RepeatedString_
	}
	return nil
}

func (x *IndexTypes) GetRepeatedMessage_() []*RootMessage {
	if x != nil {
		return x.RepeatedMessage_
	}
	return nil
}

func (x *IndexTypes) GetIndexTypesId() string {
	if x != nil {
		return x.IndexTypesId
	}
	return ""
}

func (x *IndexTypes) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *IndexTypes) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *IndexTypes) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type MessageTypes_ScopedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Y string `protobuf:"bytes,1,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *MessageTypes_ScopedMessage) Reset() {
	*x = MessageTypes_ScopedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypes_ScopedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypes_ScopedMessage) ProtoMessage() {}

func (x *MessageTypes_ScopedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypes_ScopedMessage.ProtoReflect.Descriptor instead.
func (*MessageTypes_ScopedMessage) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6, 0}
}

func (x *MessageTypes_ScopedMessage) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x6d,
	0x74, 0x6e, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84,
	0x03, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x13, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x86, 0x05, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0x65, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x18, 0x67, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x69, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x6d, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x18, 0x71, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x73, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x75, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x18, 0x77, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18,
	0x79, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x7b, 0x20,
	0x03, 0x28, 0x10, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x7d, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18,
	0x7f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x18, 0x81, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xc5,
	0x6e, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18,
	0xcb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xcc, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xcd, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xce, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xcf,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18,
	0xd0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x18, 0xd1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x62,
	0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x65, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0xd3, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x65, 0x0a, 0x14, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x18, 0xd4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0xd5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x5f, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x18, 0xd6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x18, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x18, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x69,
	0x0a, 0x16, 0x6e, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x69,
	0x6c, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0xdd,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x18, 0xde, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xdf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x59, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x18, 0xe0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xe1, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xe2, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xe3, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xe4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0xe6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0xe7, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0xe8, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x56, 0x0a, 0x0f, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0xe9, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0xea, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x18, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x18, 0xec, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x15,
	0x6e, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0xed, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x69, 0x6c, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x6e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0xf1, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x18, 0xf2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x59, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x18, 0xf3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xf4, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xf5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xf6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x18, 0xf7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5c, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x18, 0xf8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x18, 0xf9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x18, 0xfa, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x62, 0x0a,
	0x13, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x18, 0xfb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0xfc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x56, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0xfd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x5c, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x18, 0xfe, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x10, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x18,
	0xff, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x18, 0x80, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x6e, 0x69, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x18, 0x81, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x69,
	0x6c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0x85, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x18, 0x86, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x5c,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x18, 0x87, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5c, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x18, 0x88, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61,
	0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x18, 0x89, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x18, 0x8a, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x18, 0x8b, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x18, 0x8c, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x62,
	0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x8d, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x8e, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x65, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x8f,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x65, 0x0a,
	0x14, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x90, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x91, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x92, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x18, 0x93, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x62,
	0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x18, 0x94, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x69, 0x0a, 0x16, 0x6e, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x95, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x69, 0x6c, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x18, 0x99, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x5c,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x18, 0x9a, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x5c, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x18, 0x9b, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5c, 0x0a, 0x11, 0x6d, 0x61,
	0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18,
	0x9c, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x9d,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61, 0x70,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18,
	0x9e, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5f, 0x0a, 0x12, 0x6d, 0x61,
	0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x18, 0x9f, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5f, 0x0a, 0x12, 0x6d,
	0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x18, 0xa0, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x62, 0x0a, 0x13,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x18, 0xa1, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x62, 0x0a, 0x13, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0xa2, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x65, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0xa3, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x65, 0x0a, 0x14, 0x6d,
	0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x18, 0xa4, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0xa5, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x5f, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x18, 0xa6, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5c,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x18, 0xa7, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x13,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x18, 0xa8, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x69, 0x0a, 0x16, 0x6e, 0x69, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0xa9, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a,
	0x17, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x63, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44,
	0x0a, 0x16, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x64, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x15, 0x4d, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x45, 0x0a, 0x17, 0x4e, 0x69, 0x6c, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c,
	0x0a, 0x0a, 0x5f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0xd2, 0xb8, 0x02,
	0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x5f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0xc2, 0x02, 0x0a, 0x09, 0x45, 0x6e,
	0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f,
	0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x32, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x4b,
	0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x22, 0x21, 0x0a, 0x0a, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x05, 0x0a, 0x01, 0x58, 0x10, 0x00,
	0x12, 0x05, 0x0a, 0x01, 0x59, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x5a, 0x10, 0x02, 0x22, 0xc9,
	0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x78, 0x12, 0x4f, 0x0a, 0x11,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c,
	0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x0c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f,
	0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x57, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x12, 0x57, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x1a, 0x1d, 0x0a, 0x0d, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x79, 0x22, 0x3e, 0x0a, 0x0e, 0x57, 0x65, 0x6c, 0x6c,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x26, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x01, 0x78,
	0x22, 0x91, 0x01, 0x0a, 0x0f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x31,
	0x12, 0x20, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x32, 0x12, 0x20, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x22, 0xd8, 0x0d, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x10, 0xd2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x0a, 0x08, 0x5f, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f,
	0xd2, 0xb8, 0x02, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x5f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0xd2, 0xb8, 0x02, 0x0b, 0x0a, 0x09, 0x0a, 0x07,
	0x5f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0f,
	0xd2, 0xb8, 0x02, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x5f, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x10, 0xd2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x0a,
	0x08, 0x5f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x29, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x10, 0xd2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x0a, 0x08, 0x5f, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x07,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x42, 0x10, 0xd2,
	0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x0a, 0x08, 0x5f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x42, 0x10, 0xd2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a,
	0x0a, 0x08, 0x5f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x07, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x5f, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x5f, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2f,
	0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0f, 0x42, 0x12, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x5f, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x2f, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x10, 0x42, 0x12, 0xd2, 0xb8, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x5f, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x23, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0e, 0xd2, 0xb8, 0x02, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x5f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xd2, 0xb8, 0x02, 0x0c, 0x0a, 0x0a, 0x0a, 0x08,
	0x5f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x41, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0xd2,
	0xb8, 0x02, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x5f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0xd2, 0xb8, 0x02, 0x0d, 0x0a, 0x0b, 0x0a, 0x09,
	0x5f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x18, 0xd2,
	0xb8, 0x02, 0x14, 0x0a, 0x12, 0x0a, 0x10, 0x5f, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x23, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0xd2, 0xb8, 0x02, 0x17, 0x0a, 0x15, 0x0a,
	0x13, 0x5f, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x79, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a, 0xd2, 0xb8, 0x02, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x5f, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x18, 0x27, 0x20, 0x03, 0x28, 0x05, 0x42, 0x18, 0xd2, 0xb8, 0x02, 0x14, 0x0a,
	0x12, 0x0a, 0x10, 0x5f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x40, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x29, 0x20, 0x03, 0x28, 0x03, 0x42, 0x18, 0xd2, 0xb8, 0x02,
	0x14, 0x0a, 0x12, 0x0a, 0x10, 0x5f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x3d, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x08, 0x42, 0x17, 0xd2, 0xb8,
	0x02, 0x13, 0x0a, 0x11, 0x0a, 0x0f, 0x5f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0xd2,
	0xb8, 0x02, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x5f, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x18, 0x2f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x1a, 0xd2, 0xb8, 0x02, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x5f, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x1f, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x05, 0x0a, 0x01, 0x41,
	0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x02,
	0x42, 0x14, 0x5a, 0x12, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 99)
var file_types_proto_goTypes = []interface{}{
	(RootEnum)(0),                      // 0: mtechnavi.testdata.RootEnum
	(EnumTypes_ScopedEnum)(0),          // 1: mtechnavi.testdata.EnumTypes.ScopedEnum
	(*ScalarTypes)(nil),                // 2: mtechnavi.testdata.ScalarTypes
	(*RepeatedTypes)(nil),              // 3: mtechnavi.testdata.RepeatedTypes
	(*MapTypes)(nil),                   // 4: mtechnavi.testdata.MapTypes
	(*OneOfTypes)(nil),                 // 5: mtechnavi.testdata.OneOfTypes
	(*EnumTypes)(nil),                  // 6: mtechnavi.testdata.EnumTypes
	(*RootMessage)(nil),                // 7: mtechnavi.testdata.RootMessage
	(*MessageTypes)(nil),               // 8: mtechnavi.testdata.MessageTypes
	(*WellKnownTypes)(nil),             // 9: mtechnavi.testdata.WellKnownTypes
	(*ValidateTypes)(nil),              // 10: mtechnavi.testdata.ValidateTypes
	(*VisibilityTypes)(nil),            // 11: mtechnavi.testdata.VisibilityTypes
	(*IndexTypes)(nil),                 // 12: mtechnavi.testdata.IndexTypes
	nil,                                // 13: mtechnavi.testdata.MapTypes.MapStringDoubleEntry
	nil,                                // 14: mtechnavi.testdata.MapTypes.MapStringFloatEntry
	nil,                                // 15: mtechnavi.testdata.MapTypes.MapStringInt32Entry
	nil,                                // 16: mtechnavi.testdata.MapTypes.MapStringInt64Entry
	nil,                                // 17: mtechnavi.testdata.MapTypes.MapStringUint32Entry
	nil,                                // 18: mtechnavi.testdata.MapTypes.MapStringUint64Entry
	nil,                                // 19: mtechnavi.testdata.MapTypes.MapStringSint32Entry
	nil,                                // 20: mtechnavi.testdata.MapTypes.MapStringSint64Entry
	nil,                                // 21: mtechnavi.testdata.MapTypes.MapStringFixed32Entry
	nil,                                // 22: mtechnavi.testdata.MapTypes.MapStringFixed64Entry
	nil,                                // 23: mtechnavi.testdata.MapTypes.MapStringSfixed32Entry
	nil,                                // 24: mtechnavi.testdata.MapTypes.MapStringSfixed64Entry
	nil,                                // 25: mtechnavi.testdata.MapTypes.MapStringBoolEntry
	nil,                                // 26: mtechnavi.testdata.MapTypes.MapStringStringEntry
	nil,                                // 27: mtechnavi.testdata.MapTypes.MapStringBytesEntry
	nil,                                // 28: mtechnavi.testdata.MapTypes.MapStringMessageEntry
	nil,                                // 29: mtechnavi.testdata.MapTypes.NilMapStringStringEntry
	nil,                                // 30: mtechnavi.testdata.MapTypes.MapInt32DoubleEntry
	nil,                                // 31: mtechnavi.testdata.MapTypes.MapInt32FloatEntry
	nil,                                // 32: mtechnavi.testdata.MapTypes.MapInt32Int32Entry
	nil,                                // 33: mtechnavi.testdata.MapTypes.MapInt32Int64Entry
	nil,                                // 34: mtechnavi.testdata.MapTypes.MapInt32Uint32Entry
	nil,                                // 35: mtechnavi.testdata.MapTypes.MapInt32Uint64Entry
	nil,                                // 36: mtechnavi.testdata.MapTypes.MapInt32Sint32Entry
	nil,                                // 37: mtechnavi.testdata.MapTypes.MapInt32Sint64Entry
	nil,                                // 38: mtechnavi.testdata.MapTypes.MapInt32Fixed32Entry
	nil,                                // 39: mtechnavi.testdata.MapTypes.MapInt32Fixed64Entry
	nil,                                // 40: mtechnavi.testdata.MapTypes.MapInt32Sfixed32Entry
	nil,                                // 41: mtechnavi.testdata.MapTypes.MapInt32Sfixed64Entry
	nil,                                // 42: mtechnavi.testdata.MapTypes.MapInt32BoolEntry
	nil,                                // 43: mtechnavi.testdata.MapTypes.MapInt32StringEntry
	nil,                                // 44: mtechnavi.testdata.MapTypes.MapInt32BytesEntry
	nil,                                // 45: mtechnavi.testdata.MapTypes.MapInt32MessageEntry
	nil,                                // 46: mtechnavi.testdata.MapTypes.NilMapInt32StringEntry
	nil,                                // 47: mtechnavi.testdata.MapTypes.MapInt64DoubleEntry
	nil,                                // 48: mtechnavi.testdata.MapTypes.MapInt64FloatEntry
	nil,                                // 49: mtechnavi.testdata.MapTypes.MapInt64Int32Entry
	nil,                                // 50: mtechnavi.testdata.MapTypes.MapInt64Int64Entry
	nil,                                // 51: mtechnavi.testdata.MapTypes.MapInt64Uint32Entry
	nil,                                // 52: mtechnavi.testdata.MapTypes.MapInt64Uint64Entry
	nil,                                // 53: mtechnavi.testdata.MapTypes.MapInt64Sint32Entry
	nil,                                // 54: mtechnavi.testdata.MapTypes.MapInt64Sint64Entry
	nil,                                // 55: mtechnavi.testdata.MapTypes.MapInt64Fixed32Entry
	nil,                                // 56: mtechnavi.testdata.MapTypes.MapInt64Fixed64Entry
	nil,                                // 57: mtechnavi.testdata.MapTypes.MapInt64Sfixed32Entry
	nil,                                // 58: mtechnavi.testdata.MapTypes.MapInt64Sfixed64Entry
	nil,                                // 59: mtechnavi.testdata.MapTypes.MapInt64BoolEntry
	nil,                                // 60: mtechnavi.testdata.MapTypes.MapInt64StringEntry
	nil,                                // 61: mtechnavi.testdata.MapTypes.MapInt64BytesEntry
	nil,                                // 62: mtechnavi.testdata.MapTypes.MapInt64MessageEntry
	nil,                                // 63: mtechnavi.testdata.MapTypes.NilMapInt64StringEntry
	nil,                                // 64: mtechnavi.testdata.MapTypes.MapUint32DoubleEntry
	nil,                                // 65: mtechnavi.testdata.MapTypes.MapUint32FloatEntry
	nil,                                // 66: mtechnavi.testdata.MapTypes.MapUint32Int32Entry
	nil,                                // 67: mtechnavi.testdata.MapTypes.MapUint32Int64Entry
	nil,                                // 68: mtechnavi.testdata.MapTypes.MapUint32Uint32Entry
	nil,                                // 69: mtechnavi.testdata.MapTypes.MapUint32Uint64Entry
	nil,                                // 70: mtechnavi.testdata.MapTypes.MapUint32Sint32Entry
	nil,                                // 71: mtechnavi.testdata.MapTypes.MapUint32Sint64Entry
	nil,                                // 72: mtechnavi.testdata.MapTypes.MapUint32Fixed32Entry
	nil,                                // 73: mtechnavi.testdata.MapTypes.MapUint32Fixed64Entry
	nil,                                // 74: mtechnavi.testdata.MapTypes.MapUint32Sfixed32Entry
	nil,                                // 75: mtechnavi.testdata.MapTypes.MapUint32Sfixed64Entry
	nil,                                // 76: mtechnavi.testdata.MapTypes.MapUint32BoolEntry
	nil,                                // 77: mtechnavi.testdata.MapTypes.MapUint32StringEntry
	nil,                                // 78: mtechnavi.testdata.MapTypes.MapUint32BytesEntry
	nil,                                // 79: mtechnavi.testdata.MapTypes.MapUint32MessageEntry
	nil,                                // 80: mtechnavi.testdata.MapTypes.NilMapUint32StringEntry
	nil,                                // 81: mtechnavi.testdata.MapTypes.MapUint64DoubleEntry
	nil,                                // 82: mtechnavi.testdata.MapTypes.MapUint64FloatEntry
	nil,                                // 83: mtechnavi.testdata.MapTypes.MapUint64Int32Entry
	nil,                                // 84: mtechnavi.testdata.MapTypes.MapUint64Int64Entry
	nil,                                // 85: mtechnavi.testdata.MapTypes.MapUint64Uint32Entry
	nil,                                // 86: mtechnavi.testdata.MapTypes.MapUint64Uint64Entry
	nil,                                // 87: mtechnavi.testdata.MapTypes.MapUint64Sint32Entry
	nil,                                // 88: mtechnavi.testdata.MapTypes.MapUint64Sint64Entry
	nil,                                // 89: mtechnavi.testdata.MapTypes.MapUint64Fixed32Entry
	nil,                                // 90: mtechnavi.testdata.MapTypes.MapUint64Fixed64Entry
	nil,                                // 91: mtechnavi.testdata.MapTypes.MapUint64Sfixed32Entry
	nil,                                // 92: mtechnavi.testdata.MapTypes.MapUint64Sfixed64Entry
	nil,                                // 93: mtechnavi.testdata.MapTypes.MapUint64BoolEntry
	nil,                                // 94: mtechnavi.testdata.MapTypes.MapUint64StringEntry
	nil,                                // 95: mtechnavi.testdata.MapTypes.MapUint64BytesEntry
	nil,                                // 96: mtechnavi.testdata.MapTypes.MapUint64MessageEntry
	nil,                                // 97: mtechnavi.testdata.MapTypes.NilMapUint64StringEntry
	(*MessageTypes_ScopedMessage)(nil), // 98: mtechnavi.testdata.MessageTypes.ScopedMessage
	nil,                                // 99: mtechnavi.testdata.IndexTypes.MapStringStringEntry
	nil,                                // 100: mtechnavi.testdata.IndexTypes.MapInt64StringEntry
	(*protobuf.EmbeddedSharedProperties)(nil), // 101: sharelib.EmbeddedSharedProperties
	(*emptypb.Empty)(nil),                     // 102: google.protobuf.Empty
}
var file_types_proto_depIdxs = []int32{
	13,  // 0: mtechnavi.testdata.MapTypes.map_string_double_:type_name -> mtechnavi.testdata.MapTypes.MapStringDoubleEntry
	14,  // 1: mtechnavi.testdata.MapTypes.map_string_float_:type_name -> mtechnavi.testdata.MapTypes.MapStringFloatEntry
	15,  // 2: mtechnavi.testdata.MapTypes.map_string_int32_:type_name -> mtechnavi.testdata.MapTypes.MapStringInt32Entry
	16,  // 3: mtechnavi.testdata.MapTypes.map_string_int64_:type_name -> mtechnavi.testdata.MapTypes.MapStringInt64Entry
	17,  // 4: mtechnavi.testdata.MapTypes.map_string_uint32_:type_name -> mtechnavi.testdata.MapTypes.MapStringUint32Entry
	18,  // 5: mtechnavi.testdata.MapTypes.map_string_uint64_:type_name -> mtechnavi.testdata.MapTypes.MapStringUint64Entry
	19,  // 6: mtechnavi.testdata.MapTypes.map_string_sint32_:type_name -> mtechnavi.testdata.MapTypes.MapStringSint32Entry
	20,  // 7: mtechnavi.testdata.MapTypes.map_string_sint64_:type_name -> mtechnavi.testdata.MapTypes.MapStringSint64Entry
	21,  // 8: mtechnavi.testdata.MapTypes.map_string_fixed32_:type_name -> mtechnavi.testdata.MapTypes.MapStringFixed32Entry
	22,  // 9: mtechnavi.testdata.MapTypes.map_string_fixed64_:type_name -> mtechnavi.testdata.MapTypes.MapStringFixed64Entry
	23,  // 10: mtechnavi.testdata.MapTypes.map_string_sfixed32_:type_name -> mtechnavi.testdata.MapTypes.MapStringSfixed32Entry
	24,  // 11: mtechnavi.testdata.MapTypes.map_string_sfixed64_:type_name -> mtechnavi.testdata.MapTypes.MapStringSfixed64Entry
	25,  // 12: mtechnavi.testdata.MapTypes.map_string_bool_:type_name -> mtechnavi.testdata.MapTypes.MapStringBoolEntry
	26,  // 13: mtechnavi.testdata.MapTypes.map_string_string_:type_name -> mtechnavi.testdata.MapTypes.MapStringStringEntry
	27,  // 14: mtechnavi.testdata.MapTypes.map_string_bytes_:type_name -> mtechnavi.testdata.MapTypes.MapStringBytesEntry
	28,  // 15: mtechnavi.testdata.MapTypes.map_string_message_:type_name -> mtechnavi.testdata.MapTypes.MapStringMessageEntry
	29,  // 16: mtechnavi.testdata.MapTypes.nil_map_string_string_:type_name -> mtechnavi.testdata.MapTypes.NilMapStringStringEntry
	30,  // 17: mtechnavi.testdata.MapTypes.map_int32_double_:type_name -> mtechnavi.testdata.MapTypes.MapInt32DoubleEntry
	31,  // 18: mtechnavi.testdata.MapTypes.map_int32_float_:type_name -> mtechnavi.testdata.MapTypes.MapInt32FloatEntry
	32,  // 19: mtechnavi.testdata.MapTypes.map_int32_int32_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Int32Entry
	33,  // 20: mtechnavi.testdata.MapTypes.map_int32_int64_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Int64Entry
	34,  // 21: mtechnavi.testdata.MapTypes.map_int32_uint32_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Uint32Entry
	35,  // 22: mtechnavi.testdata.MapTypes.map_int32_uint64_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Uint64Entry
	36,  // 23: mtechnavi.testdata.MapTypes.map_int32_sint32_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Sint32Entry
	37,  // 24: mtechnavi.testdata.MapTypes.map_int32_sint64_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Sint64Entry
	38,  // 25: mtechnavi.testdata.MapTypes.map_int32_fixed32_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Fixed32Entry
	39,  // 26: mtechnavi.testdata.MapTypes.map_int32_fixed64_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Fixed64Entry
	40,  // 27: mtechnavi.testdata.MapTypes.map_int32_sfixed32_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Sfixed32Entry
	41,  // 28: mtechnavi.testdata.MapTypes.map_int32_sfixed64_:type_name -> mtechnavi.testdata.MapTypes.MapInt32Sfixed64Entry
	42,  // 29: mtechnavi.testdata.MapTypes.map_int32_bool_:type_name -> mtechnavi.testdata.MapTypes.MapInt32BoolEntry
	43,  // 30: mtechnavi.testdata.MapTypes.map_int32_string_:type_name -> mtechnavi.testdata.MapTypes.MapInt32StringEntry
	44,  // 31: mtechnavi.testdata.MapTypes.map_int32_bytes_:type_name -> mtechnavi.testdata.MapTypes.MapInt32BytesEntry
	45,  // 32: mtechnavi.testdata.MapTypes.map_int32_message_:type_name -> mtechnavi.testdata.MapTypes.MapInt32MessageEntry
	46,  // 33: mtechnavi.testdata.MapTypes.nil_map_int32_string_:type_name -> mtechnavi.testdata.MapTypes.NilMapInt32StringEntry
	47,  // 34: mtechnavi.testdata.MapTypes.map_int64_double_:type_name -> mtechnavi.testdata.MapTypes.MapInt64DoubleEntry
	48,  // 35: mtechnavi.testdata.MapTypes.map_int64_float_:type_name -> mtechnavi.testdata.MapTypes.MapInt64FloatEntry
	49,  // 36: mtechnavi.testdata.MapTypes.map_int64_int32_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Int32Entry
	50,  // 37: mtechnavi.testdata.MapTypes.map_int64_int64_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Int64Entry
	51,  // 38: mtechnavi.testdata.MapTypes.map_int64_uint32_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Uint32Entry
	52,  // 39: mtechnavi.testdata.MapTypes.map_int64_uint64_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Uint64Entry
	53,  // 40: mtechnavi.testdata.MapTypes.map_int64_sint32_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Sint32Entry
	54,  // 41: mtechnavi.testdata.MapTypes.map_int64_sint64_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Sint64Entry
	55,  // 42: mtechnavi.testdata.MapTypes.map_int64_fixed32_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Fixed32Entry
	56,  // 43: mtechnavi.testdata.MapTypes.map_int64_fixed64_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Fixed64Entry
	57,  // 44: mtechnavi.testdata.MapTypes.map_int64_sfixed32_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Sfixed32Entry
	58,  // 45: mtechnavi.testdata.MapTypes.map_int64_sfixed64_:type_name -> mtechnavi.testdata.MapTypes.MapInt64Sfixed64Entry
	59,  // 46: mtechnavi.testdata.MapTypes.map_int64_bool_:type_name -> mtechnavi.testdata.MapTypes.MapInt64BoolEntry
	60,  // 47: mtechnavi.testdata.MapTypes.map_int64_string_:type_name -> mtechnavi.testdata.MapTypes.MapInt64StringEntry
	61,  // 48: mtechnavi.testdata.MapTypes.map_int64_bytes_:type_name -> mtechnavi.testdata.MapTypes.MapInt64BytesEntry
	62,  // 49: mtechnavi.testdata.MapTypes.map_int64_message_:type_name -> mtechnavi.testdata.MapTypes.MapInt64MessageEntry
	63,  // 50: mtechnavi.testdata.MapTypes.nil_map_int64_string_:type_name -> mtechnavi.testdata.MapTypes.NilMapInt64StringEntry
	64,  // 51: mtechnavi.testdata.MapTypes.map_uint32_double_:type_name -> mtechnavi.testdata.MapTypes.MapUint32DoubleEntry
	65,  // 52: mtechnavi.testdata.MapTypes.map_uint32_float_:type_name -> mtechnavi.testdata.MapTypes.MapUint32FloatEntry
	66,  // 53: mtechnavi.testdata.MapTypes.map_uint32_int32_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Int32Entry
	67,  // 54: mtechnavi.testdata.MapTypes.map_uint32_int64_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Int64Entry
	68,  // 55: mtechnavi.testdata.MapTypes.map_uint32_uint32_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Uint32Entry
	69,  // 56: mtechnavi.testdata.MapTypes.map_uint32_uint64_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Uint64Entry
	70,  // 57: mtechnavi.testdata.MapTypes.map_uint32_sint32_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Sint32Entry
	71,  // 58: mtechnavi.testdata.MapTypes.map_uint32_sint64_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Sint64Entry
	72,  // 59: mtechnavi.testdata.MapTypes.map_uint32_fixed32_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Fixed32Entry
	73,  // 60: mtechnavi.testdata.MapTypes.map_uint32_fixed64_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Fixed64Entry
	74,  // 61: mtechnavi.testdata.MapTypes.map_uint32_sfixed32_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Sfixed32Entry
	75,  // 62: mtechnavi.testdata.MapTypes.map_uint32_sfixed64_:type_name -> mtechnavi.testdata.MapTypes.MapUint32Sfixed64Entry
	76,  // 63: mtechnavi.testdata.MapTypes.map_uint32_bool_:type_name -> mtechnavi.testdata.MapTypes.MapUint32BoolEntry
	77,  // 64: mtechnavi.testdata.MapTypes.map_uint32_string_:type_name -> mtechnavi.testdata.MapTypes.MapUint32StringEntry
	78,  // 65: mtechnavi.testdata.MapTypes.map_uint32_bytes_:type_name -> mtechnavi.testdata.MapTypes.MapUint32BytesEntry
	79,  // 66: mtechnavi.testdata.MapTypes.map_uint32_message_:type_name -> mtechnavi.testdata.MapTypes.MapUint32MessageEntry
	80,  // 67: mtechnavi.testdata.MapTypes.nil_map_uint32_string_:type_name -> mtechnavi.testdata.MapTypes.NilMapUint32StringEntry
	81,  // 68: mtechnavi.testdata.MapTypes.map_uint64_double_:type_name -> mtechnavi.testdata.MapTypes.MapUint64DoubleEntry
	82,  // 69: mtechnavi.testdata.MapTypes.map_uint64_float_:type_name -> mtechnavi.testdata.MapTypes.MapUint64FloatEntry
	83,  // 70: mtechnavi.testdata.MapTypes.map_uint64_int32_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Int32Entry
	84,  // 71: mtechnavi.testdata.MapTypes.map_uint64_int64_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Int64Entry
	85,  // 72: mtechnavi.testdata.MapTypes.map_uint64_uint32_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Uint32Entry
	86,  // 73: mtechnavi.testdata.MapTypes.map_uint64_uint64_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Uint64Entry
	87,  // 74: mtechnavi.testdata.MapTypes.map_uint64_sint32_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Sint32Entry
	88,  // 75: mtechnavi.testdata.MapTypes.map_uint64_sint64_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Sint64Entry
	89,  // 76: mtechnavi.testdata.MapTypes.map_uint64_fixed32_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Fixed32Entry
	90,  // 77: mtechnavi.testdata.MapTypes.map_uint64_fixed64_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Fixed64Entry
	91,  // 78: mtechnavi.testdata.MapTypes.map_uint64_sfixed32_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Sfixed32Entry
	92,  // 79: mtechnavi.testdata.MapTypes.map_uint64_sfixed64_:type_name -> mtechnavi.testdata.MapTypes.MapUint64Sfixed64Entry
	93,  // 80: mtechnavi.testdata.MapTypes.map_uint64_bool_:type_name -> mtechnavi.testdata.MapTypes.MapUint64BoolEntry
	94,  // 81: mtechnavi.testdata.MapTypes.map_uint64_string_:type_name -> mtechnavi.testdata.MapTypes.MapUint64StringEntry
	95,  // 82: mtechnavi.testdata.MapTypes.map_uint64_bytes_:type_name -> mtechnavi.testdata.MapTypes.MapUint64BytesEntry
	96,  // 83: mtechnavi.testdata.MapTypes.map_uint64_message_:type_name -> mtechnavi.testdata.MapTypes.MapUint64MessageEntry
	97,  // 84: mtechnavi.testdata.MapTypes.nil_map_uint64_string_:type_name -> mtechnavi.testdata.MapTypes.NilMapUint64StringEntry
	7,   // 85: mtechnavi.testdata.OneOfTypes.message1:type_name -> mtechnavi.testdata.RootMessage
	7,   // 86: mtechnavi.testdata.OneOfTypes.message2:type_name -> mtechnavi.testdata.RootMessage
	0,   // 87: mtechnavi.testdata.EnumTypes.root_enum1:type_name -> mtechnavi.testdata.RootEnum
	0,   // 88: mtechnavi.testdata.EnumTypes.root_enum2:type_name -> mtechnavi.testdata.RootEnum
	1,   // 89: mtechnavi.testdata.EnumTypes.scoped_enum1:type_name -> mtechnavi.testdata.EnumTypes.ScopedEnum
	1,   // 90: mtechnavi.testdata.EnumTypes.scoped_enum2:type_name -> mtechnavi.testdata.EnumTypes.ScopedEnum
	101, // 91: mtechnavi.testdata.RootMessage.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	7,   // 92: mtechnavi.testdata.MessageTypes.root_message1:type_name -> mtechnavi.testdata.RootMessage
	7,   // 93: mtechnavi.testdata.MessageTypes.root_message2:type_name -> mtechnavi.testdata.RootMessage
	98,  // 94: mtechnavi.testdata.MessageTypes.scoped_message1:type_name -> mtechnavi.testdata.MessageTypes.ScopedMessage
	98,  // 95: mtechnavi.testdata.MessageTypes.scoped_message2:type_name -> mtechnavi.testdata.MessageTypes.ScopedMessage
	102, // 96: mtechnavi.testdata.WellKnownTypes.empty:type_name -> google.protobuf.Empty
	0,   // 97: mtechnavi.testdata.IndexTypes.enum_:type_name -> mtechnavi.testdata.RootEnum
	7,   // 98: mtechnavi.testdata.IndexTypes.message_:type_name -> mtechnavi.testdata.RootMessage
	8,   // 99: mtechnavi.testdata.IndexTypes.nested_message_:type_name -> mtechnavi.testdata.MessageTypes
	99,  // 100: mtechnavi.testdata.IndexTypes.map_string_string_:type_name -> mtechnavi.testdata.IndexTypes.MapStringStringEntry
	100, // 101: mtechnavi.testdata.IndexTypes.map_int64_string_:type_name -> mtechnavi.testdata.IndexTypes.MapInt64StringEntry
	7,   // 102: mtechnavi.testdata.IndexTypes.repeated_message_:type_name -> mtechnavi.testdata.RootMessage
	7,   // 103: mtechnavi.testdata.MapTypes.MapStringMessageEntry.value:type_name -> mtechnavi.testdata.RootMessage
	7,   // 104: mtechnavi.testdata.MapTypes.MapInt32MessageEntry.value:type_name -> mtechnavi.testdata.RootMessage
	7,   // 105: mtechnavi.testdata.MapTypes.MapInt64MessageEntry.value:type_name -> mtechnavi.testdata.RootMessage
	7,   // 106: mtechnavi.testdata.MapTypes.MapUint32MessageEntry.value:type_name -> mtechnavi.testdata.RootMessage
	7,   // 107: mtechnavi.testdata.MapTypes.MapUint64MessageEntry.value:type_name -> mtechnavi.testdata.RootMessage
	108, // [108:108] is the sub-list for method output_type
	108, // [108:108] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnownTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisibilityTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTypes_ScopedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OneOfTypes_Message1)(nil),
		(*OneOfTypes_Message2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   99,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
