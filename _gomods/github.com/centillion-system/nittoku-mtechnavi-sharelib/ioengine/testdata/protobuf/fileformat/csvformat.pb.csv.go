// Code generated by protoc-gen-csv. DO NOT EDIT.

package fileformat

import (
	"errors"
	"github.com/hashicorp/go-multierror"

	mtnpb "mtechnavi/sharelib/protobuf/mtn"
	"mtechnavi/sharelib/protobuf"
	"mtechnavi/sharelib/encoding/csv"
	"mtechnavi/sharelib/encoding/csv/strconv"
	"google.golang.org/protobuf/reflect/protoreflect"
	"mtechnavi/sharelib/constants"
)

var (
	_ mtnpb.CsvFileOptions
	_ = errors.New
	_ = strconv.ToString
	_ protoreflect.Kind
	_ protobuf.Datetime
)

func (m *TestRecordFormatDefault) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
	return &mtnpb.CsvFileOptions{
		Header:         true,
		Comma:          0,
		Encoding:       1,
		QuoteMinimally: false,
	}, true
}

func (m *TestRecordFormatDefault) GetCsvHeaderColumns() []string {
	l := make([]string, 19)

	// column 1
	l[0] = "TEST_RECORD_ID"

	// column 2
	l[1] = "DOUBLE"

	// column 3
	l[2] = "FLOAT"

	// column 4
	l[3] = "INT32"

	// column 5
	l[4] = "INT64"

	// column 6
	l[5] = "UINT32"

	// column 7
	l[6] = "UINT64"

	// column 8
	l[7] = "SINT32"

	// column 9
	l[8] = "SINT64"

	// column 10
	l[9] = "FIXED32"

	// column 11
	l[10] = "FIXED64"

	// column 12
	l[11] = "SFIXED32"

	// column 13
	l[12] = "SFIXED64"

	// column 14
	l[13] = "BOOL"

	// column 15
	l[14] = "STRING"

	// column 16
	l[15] = ""

	// column 17
	l[16] = "REPEATED_STRING"

	// column 18
	l[17] = "REPEATED_INT64"

	// column 19
	l[18] = "UPDATED_AT"

	return l
}

func (m *TestRecordFormatDefault) MarshalCSV() ([]string, error) {
	l := make([]string, 19)

	// column 1
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_TestRecordId()); err != nil {
		return nil, err
	} else {
		l[0] = v
	}

	// column 2
	if v, err := strconv.ToString(protoreflect.DoubleKind, m.csvGetter_Double_()); err != nil {
		return nil, err
	} else {
		l[1] = v
	}

	// column 3
	if v, err := strconv.ToString(protoreflect.FloatKind, m.csvGetter_Float_()); err != nil {
		return nil, err
	} else {
		l[2] = v
	}

	// column 4
	if v, err := strconv.ToString(protoreflect.Int32Kind, m.csvGetter_Int32_()); err != nil {
		return nil, err
	} else {
		l[3] = v
	}

	// column 5
	if v, err := strconv.ToString(protoreflect.Int64Kind, m.csvGetter_Int64_()); err != nil {
		return nil, err
	} else {
		l[4] = v
	}

	// column 6
	if v, err := strconv.ToString(protoreflect.Uint32Kind, m.csvGetter_Uint32_()); err != nil {
		return nil, err
	} else {
		l[5] = v
	}

	// column 7
	if v, err := strconv.ToString(protoreflect.Uint64Kind, m.csvGetter_Uint64_()); err != nil {
		return nil, err
	} else {
		l[6] = v
	}

	// column 8
	if v, err := strconv.ToString(protoreflect.Sint32Kind, m.csvGetter_Sint32_()); err != nil {
		return nil, err
	} else {
		l[7] = v
	}

	// column 9
	if v, err := strconv.ToString(protoreflect.Sint64Kind, m.csvGetter_Sint64_()); err != nil {
		return nil, err
	} else {
		l[8] = v
	}

	// column 10
	if v, err := strconv.ToString(protoreflect.Fixed32Kind, m.csvGetter_Fixed32_()); err != nil {
		return nil, err
	} else {
		l[9] = v
	}

	// column 11
	if v, err := strconv.ToString(protoreflect.Fixed64Kind, m.csvGetter_Fixed64_()); err != nil {
		return nil, err
	} else {
		l[10] = v
	}

	// column 12
	if v, err := strconv.ToString(protoreflect.Sfixed32Kind, m.csvGetter_Sfixed32_()); err != nil {
		return nil, err
	} else {
		l[11] = v
	}

	// column 13
	if v, err := strconv.ToString(protoreflect.Sfixed64Kind, m.csvGetter_Sfixed64_()); err != nil {
		return nil, err
	} else {
		l[12] = v
	}

	// column 14
	if v, err := strconv.ToString(protoreflect.BoolKind, m.csvGetter_Bool_()); err != nil {
		return nil, err
	} else {
		l[13] = v
	}

	// column 15
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_String_()); err != nil {
		return nil, err
	} else {
		l[14] = v
	}

	// column 16
	l[15] = ""

	// column 17
	if v, err := strconv.ToCSV(protoreflect.StringKind, m.csvGetter_RepeatedString_()); err != nil {
		return nil, err
	} else {
		l[16] = v
	}

	// column 18
	if v, err := strconv.ToCSV(protoreflect.Int64Kind, m.csvGetter_RepeatedInt64_()); err != nil {
		return nil, err
	} else {
		l[17] = v
	}

	// column 19
	if v, err := strconv.ToString(protoreflect.Int64Kind, m.csvGetter_UpdatedAt()); err != nil {
		return nil, err
	} else {
		l[18] = v
	}

	return l, nil
}

func (m *TestRecordFormatDefault) UnmarshalCSV(src []string) error {
	var errs error
	if len(src) != 19 {
		errs = multierror.Append(errs, &csv.Error{
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000022,
		})
		return errs
	}

	// column 1
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[0]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      1,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"TEST_RECORD_ID",
			},
		})
	} else if ok {
		m.csvSetter_TestRecordId(v)
	}

	// column 2
	if v, ok, err := strconv.FromString(protoreflect.DoubleKind, src[1]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      2,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"DOUBLE",
			},
		})
	} else if ok {
		m.csvSetter_Double_(v)
	}

	// column 3
	if v, ok, err := strconv.FromString(protoreflect.FloatKind, src[2]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      3,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"FLOAT",
			},
		})
	} else if ok {
		m.csvSetter_Float_(v)
	}

	// column 4
	if v, ok, err := strconv.FromString(protoreflect.Int32Kind, src[3]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      4,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"INT32",
			},
		})
	} else if ok {
		m.csvSetter_Int32_(v)
	}

	// column 5
	if v, ok, err := strconv.FromString(protoreflect.Int64Kind, src[4]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      5,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"INT64",
			},
		})
	} else if ok {
		m.csvSetter_Int64_(v)
	}

	// column 6
	if v, ok, err := strconv.FromString(protoreflect.Uint32Kind, src[5]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      6,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"UINT32",
			},
		})
	} else if ok {
		m.csvSetter_Uint32_(v)
	}

	// column 7
	if v, ok, err := strconv.FromString(protoreflect.Uint64Kind, src[6]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      7,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"UINT64",
			},
		})
	} else if ok {
		m.csvSetter_Uint64_(v)
	}

	// column 8
	if v, ok, err := strconv.FromString(protoreflect.Sint32Kind, src[7]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      8,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SINT32",
			},
		})
	} else if ok {
		m.csvSetter_Sint32_(v)
	}

	// column 9
	if v, ok, err := strconv.FromString(protoreflect.Sint64Kind, src[8]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      9,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SINT64",
			},
		})
	} else if ok {
		m.csvSetter_Sint64_(v)
	}

	// column 10
	if v, ok, err := strconv.FromString(protoreflect.Fixed32Kind, src[9]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      10,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"FIXED32",
			},
		})
	} else if ok {
		m.csvSetter_Fixed32_(v)
	}

	// column 11
	if v, ok, err := strconv.FromString(protoreflect.Fixed64Kind, src[10]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      11,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"FIXED64",
			},
		})
	} else if ok {
		m.csvSetter_Fixed64_(v)
	}

	// column 12
	if v, ok, err := strconv.FromString(protoreflect.Sfixed32Kind, src[11]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      12,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SFIXED32",
			},
		})
	} else if ok {
		m.csvSetter_Sfixed32_(v)
	}

	// column 13
	if v, ok, err := strconv.FromString(protoreflect.Sfixed64Kind, src[12]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      13,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SFIXED64",
			},
		})
	} else if ok {
		m.csvSetter_Sfixed64_(v)
	}

	// column 14
	if v, ok, err := strconv.FromString(protoreflect.BoolKind, src[13]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      14,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"BOOL",
			},
		})
	} else if ok {
		m.csvSetter_Bool_(v)
	}

	// column 15
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[14]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      15,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"STRING",
			},
		})
	} else if ok {
		m.csvSetter_String_(v)
	}

	// column 16
	_ = src[15]

	// column 17
	if v, ok, err := strconv.FromCSV(protoreflect.StringKind, src[16]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      17,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"REPEATED_STRING",
			},
		})
	} else if ok {
		m.csvSetter_RepeatedString_(v)
	}

	// column 18
	if v, ok, err := strconv.FromCSV(protoreflect.Int64Kind, src[17]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      18,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"REPEATED_INT64",
			},
		})
	} else if ok {
		m.csvSetter_RepeatedInt64_(v)
	}

	// column 19
	if v, ok, err := strconv.FromString(protoreflect.Int64Kind, src[18]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      19,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"UPDATED_AT",
			},
		})
	} else if ok {
		m.csvSetter_UpdatedAt(v)
	}

	return errs
}

func (m *TestRecordFormatDefault) csvGetter_TestRecordId() any {
	return m.TestRecordId
}

func (m *TestRecordFormatDefault) csvSetter_TestRecordId(v any) {
	m.TestRecordId, _ = v.(string)
}

func (m *TestRecordFormatDefault) csvGetter_Double_() any {
	return m.Double_
}

func (m *TestRecordFormatDefault) csvSetter_Double_(v any) {
	m.Double_, _ = v.(float64)
}

func (m *TestRecordFormatDefault) csvGetter_Float_() any {
	return m.Float_
}

func (m *TestRecordFormatDefault) csvSetter_Float_(v any) {
	m.Float_, _ = v.(float32)
}

func (m *TestRecordFormatDefault) csvGetter_Int32_() any {
	return m.Int32_
}

func (m *TestRecordFormatDefault) csvSetter_Int32_(v any) {
	m.Int32_, _ = v.(int32)
}

func (m *TestRecordFormatDefault) csvGetter_Int64_() any {
	return m.Int64_
}

func (m *TestRecordFormatDefault) csvSetter_Int64_(v any) {
	m.Int64_, _ = v.(int64)
}

func (m *TestRecordFormatDefault) csvGetter_Uint32_() any {
	return m.Uint32_
}

func (m *TestRecordFormatDefault) csvSetter_Uint32_(v any) {
	m.Uint32_, _ = v.(uint32)
}

func (m *TestRecordFormatDefault) csvGetter_Uint64_() any {
	return m.Uint64_
}

func (m *TestRecordFormatDefault) csvSetter_Uint64_(v any) {
	m.Uint64_, _ = v.(uint64)
}

func (m *TestRecordFormatDefault) csvGetter_Sint32_() any {
	return m.Sint32_
}

func (m *TestRecordFormatDefault) csvSetter_Sint32_(v any) {
	m.Sint32_, _ = v.(int32)
}

func (m *TestRecordFormatDefault) csvGetter_Sint64_() any {
	return m.Sint64_
}

func (m *TestRecordFormatDefault) csvSetter_Sint64_(v any) {
	m.Sint64_, _ = v.(int64)
}

func (m *TestRecordFormatDefault) csvGetter_Fixed32_() any {
	return m.Fixed32_
}

func (m *TestRecordFormatDefault) csvSetter_Fixed32_(v any) {
	m.Fixed32_, _ = v.(uint32)
}

func (m *TestRecordFormatDefault) csvGetter_Fixed64_() any {
	return m.Fixed64_
}

func (m *TestRecordFormatDefault) csvSetter_Fixed64_(v any) {
	m.Fixed64_, _ = v.(uint64)
}

func (m *TestRecordFormatDefault) csvGetter_Sfixed32_() any {
	return m.Sfixed32_
}

func (m *TestRecordFormatDefault) csvSetter_Sfixed32_(v any) {
	m.Sfixed32_, _ = v.(int32)
}

func (m *TestRecordFormatDefault) csvGetter_Sfixed64_() any {
	return m.Sfixed64_
}

func (m *TestRecordFormatDefault) csvSetter_Sfixed64_(v any) {
	m.Sfixed64_, _ = v.(int64)
}

func (m *TestRecordFormatDefault) csvGetter_Bool_() any {
	return m.Bool_
}

func (m *TestRecordFormatDefault) csvSetter_Bool_(v any) {
	m.Bool_, _ = v.(bool)
}

func (m *TestRecordFormatDefault) csvGetter_String_() any {
	return m.String_
}

func (m *TestRecordFormatDefault) csvSetter_String_(v any) {
	m.String_, _ = v.(string)
}

func (m *TestRecordFormatDefault) csvGetter_RepeatedString_() any {
	return m.RepeatedString_
}

func (m *TestRecordFormatDefault) csvSetter_RepeatedString_(v any) {
	m.RepeatedString_, _ = v.([]string)
}

func (m *TestRecordFormatDefault) csvGetter_RepeatedInt64_() any {
	return m.RepeatedInt64_
}

func (m *TestRecordFormatDefault) csvSetter_RepeatedInt64_(v any) {
	m.RepeatedInt64_, _ = v.([]int64)
}

func (m *TestRecordFormatDefault) csvGetter_UpdatedAt() any {
	return m.UpdatedAt
}

func (m *TestRecordFormatDefault) csvSetter_UpdatedAt(v any) {
	m.UpdatedAt, _ = v.(int64)
}

func (m *TestRecordFormatDefault) GetTestRecordIdField(fields []string) string {
	return fields[0]
}

func (m *TestRecordFormatDefault) GetDouble_Field(fields []string) string {
	return fields[1]
}

func (m *TestRecordFormatDefault) GetFloat_Field(fields []string) string {
	return fields[2]
}

func (m *TestRecordFormatDefault) GetInt32_Field(fields []string) string {
	return fields[3]
}

func (m *TestRecordFormatDefault) GetInt64_Field(fields []string) string {
	return fields[4]
}

func (m *TestRecordFormatDefault) GetUint32_Field(fields []string) string {
	return fields[5]
}

func (m *TestRecordFormatDefault) GetUint64_Field(fields []string) string {
	return fields[6]
}

func (m *TestRecordFormatDefault) GetSint32_Field(fields []string) string {
	return fields[7]
}

func (m *TestRecordFormatDefault) GetSint64_Field(fields []string) string {
	return fields[8]
}

func (m *TestRecordFormatDefault) GetFixed32_Field(fields []string) string {
	return fields[9]
}

func (m *TestRecordFormatDefault) GetFixed64_Field(fields []string) string {
	return fields[10]
}

func (m *TestRecordFormatDefault) GetSfixed32_Field(fields []string) string {
	return fields[11]
}

func (m *TestRecordFormatDefault) GetSfixed64_Field(fields []string) string {
	return fields[12]
}

func (m *TestRecordFormatDefault) GetBool_Field(fields []string) string {
	return fields[13]
}

func (m *TestRecordFormatDefault) GetString_Field(fields []string) string {
	return fields[14]
}

func (m *TestRecordFormatDefault) GetRepeatedString_Field(fields []string) string {
	return fields[16]
}

func (m *TestRecordFormatDefault) GetRepeatedInt64_Field(fields []string) string {
	return fields[17]
}

func (m *TestRecordFormatDefault) GetUpdatedAtField(fields []string) string {
	return fields[18]
}

func (m *TestRecordWithError) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
	return &mtnpb.CsvFileOptions{
		Header:         true,
		Comma:          0,
		Encoding:       1,
		QuoteMinimally: false,
	}, true
}

func (m *TestRecordWithError) GetCsvHeaderColumns() []string {
	l := make([]string, 20)

	// column 1
	l[0] = "TEST_RECORD_ID"

	// column 2
	l[1] = "DOUBLE"

	// column 3
	l[2] = "FLOAT"

	// column 4
	l[3] = "INT32"

	// column 5
	l[4] = "INT64"

	// column 6
	l[5] = "UINT32"

	// column 7
	l[6] = "UINT64"

	// column 8
	l[7] = "SINT32"

	// column 9
	l[8] = "SINT64"

	// column 10
	l[9] = "FIXED32"

	// column 11
	l[10] = "FIXED64"

	// column 12
	l[11] = "SFIXED32"

	// column 13
	l[12] = "SFIXED64"

	// column 14
	l[13] = "BOOL"

	// column 15
	l[14] = "STRING"

	// column 16
	l[15] = ""

	// column 17
	l[16] = "REPEATED_STRING"

	// column 18
	l[17] = "REPEATED_INT64"

	// column 19
	l[18] = "UPDATED_AT"

	// column 20
	l[19] = "ERROR_CONTENT"

	return l
}

func (m *TestRecordWithError) MarshalCSV() ([]string, error) {
	l := make([]string, 20)

	// column 1
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_Base_TestRecordId()); err != nil {
		return nil, err
	} else {
		l[0] = v
	}

	// column 2
	if v, err := strconv.ToString(protoreflect.DoubleKind, m.csvGetter_Base_Double_()); err != nil {
		return nil, err
	} else {
		l[1] = v
	}

	// column 3
	if v, err := strconv.ToString(protoreflect.FloatKind, m.csvGetter_Base_Float_()); err != nil {
		return nil, err
	} else {
		l[2] = v
	}

	// column 4
	if v, err := strconv.ToString(protoreflect.Int32Kind, m.csvGetter_Base_Int32_()); err != nil {
		return nil, err
	} else {
		l[3] = v
	}

	// column 5
	if v, err := strconv.ToString(protoreflect.Int64Kind, m.csvGetter_Base_Int64_()); err != nil {
		return nil, err
	} else {
		l[4] = v
	}

	// column 6
	if v, err := strconv.ToString(protoreflect.Uint32Kind, m.csvGetter_Base_Uint32_()); err != nil {
		return nil, err
	} else {
		l[5] = v
	}

	// column 7
	if v, err := strconv.ToString(protoreflect.Uint64Kind, m.csvGetter_Base_Uint64_()); err != nil {
		return nil, err
	} else {
		l[6] = v
	}

	// column 8
	if v, err := strconv.ToString(protoreflect.Sint32Kind, m.csvGetter_Base_Sint32_()); err != nil {
		return nil, err
	} else {
		l[7] = v
	}

	// column 9
	if v, err := strconv.ToString(protoreflect.Sint64Kind, m.csvGetter_Base_Sint64_()); err != nil {
		return nil, err
	} else {
		l[8] = v
	}

	// column 10
	if v, err := strconv.ToString(protoreflect.Fixed32Kind, m.csvGetter_Base_Fixed32_()); err != nil {
		return nil, err
	} else {
		l[9] = v
	}

	// column 11
	if v, err := strconv.ToString(protoreflect.Fixed64Kind, m.csvGetter_Base_Fixed64_()); err != nil {
		return nil, err
	} else {
		l[10] = v
	}

	// column 12
	if v, err := strconv.ToString(protoreflect.Sfixed32Kind, m.csvGetter_Base_Sfixed32_()); err != nil {
		return nil, err
	} else {
		l[11] = v
	}

	// column 13
	if v, err := strconv.ToString(protoreflect.Sfixed64Kind, m.csvGetter_Base_Sfixed64_()); err != nil {
		return nil, err
	} else {
		l[12] = v
	}

	// column 14
	if v, err := strconv.ToString(protoreflect.BoolKind, m.csvGetter_Base_Bool_()); err != nil {
		return nil, err
	} else {
		l[13] = v
	}

	// column 15
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_Base_String_()); err != nil {
		return nil, err
	} else {
		l[14] = v
	}

	// column 16
	l[15] = ""

	// column 17
	if v, err := strconv.ToCSV(protoreflect.StringKind, m.csvGetter_Base_RepeatedString_()); err != nil {
		return nil, err
	} else {
		l[16] = v
	}

	// column 18
	if v, err := strconv.ToCSV(protoreflect.Int64Kind, m.csvGetter_Base_RepeatedInt64_()); err != nil {
		return nil, err
	} else {
		l[17] = v
	}

	// column 19
	if v, err := strconv.ToString(protoreflect.Int64Kind, m.csvGetter_Base_UpdatedAt()); err != nil {
		return nil, err
	} else {
		l[18] = v
	}

	// column 20
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_ErrorContent()); err != nil {
		return nil, err
	} else {
		l[19] = v
	}

	return l, nil
}

func (m *TestRecordWithError) UnmarshalCSV(src []string) error {
	var errs error
	if len(src) != 20 {
		errs = multierror.Append(errs, &csv.Error{
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000022,
		})
		return errs
	}

	// column 1
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[0]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      1,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"TEST_RECORD_ID",
			},
		})
	} else if ok {
		m.csvSetter_Base_TestRecordId(v)
	}

	// column 2
	if v, ok, err := strconv.FromString(protoreflect.DoubleKind, src[1]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      2,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"DOUBLE",
			},
		})
	} else if ok {
		m.csvSetter_Base_Double_(v)
	}

	// column 3
	if v, ok, err := strconv.FromString(protoreflect.FloatKind, src[2]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      3,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"FLOAT",
			},
		})
	} else if ok {
		m.csvSetter_Base_Float_(v)
	}

	// column 4
	if v, ok, err := strconv.FromString(protoreflect.Int32Kind, src[3]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      4,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"INT32",
			},
		})
	} else if ok {
		m.csvSetter_Base_Int32_(v)
	}

	// column 5
	if v, ok, err := strconv.FromString(protoreflect.Int64Kind, src[4]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      5,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"INT64",
			},
		})
	} else if ok {
		m.csvSetter_Base_Int64_(v)
	}

	// column 6
	if v, ok, err := strconv.FromString(protoreflect.Uint32Kind, src[5]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      6,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"UINT32",
			},
		})
	} else if ok {
		m.csvSetter_Base_Uint32_(v)
	}

	// column 7
	if v, ok, err := strconv.FromString(protoreflect.Uint64Kind, src[6]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      7,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"UINT64",
			},
		})
	} else if ok {
		m.csvSetter_Base_Uint64_(v)
	}

	// column 8
	if v, ok, err := strconv.FromString(protoreflect.Sint32Kind, src[7]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      8,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SINT32",
			},
		})
	} else if ok {
		m.csvSetter_Base_Sint32_(v)
	}

	// column 9
	if v, ok, err := strconv.FromString(protoreflect.Sint64Kind, src[8]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      9,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SINT64",
			},
		})
	} else if ok {
		m.csvSetter_Base_Sint64_(v)
	}

	// column 10
	if v, ok, err := strconv.FromString(protoreflect.Fixed32Kind, src[9]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      10,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"FIXED32",
			},
		})
	} else if ok {
		m.csvSetter_Base_Fixed32_(v)
	}

	// column 11
	if v, ok, err := strconv.FromString(protoreflect.Fixed64Kind, src[10]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      11,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"FIXED64",
			},
		})
	} else if ok {
		m.csvSetter_Base_Fixed64_(v)
	}

	// column 12
	if v, ok, err := strconv.FromString(protoreflect.Sfixed32Kind, src[11]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      12,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SFIXED32",
			},
		})
	} else if ok {
		m.csvSetter_Base_Sfixed32_(v)
	}

	// column 13
	if v, ok, err := strconv.FromString(protoreflect.Sfixed64Kind, src[12]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      13,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SFIXED64",
			},
		})
	} else if ok {
		m.csvSetter_Base_Sfixed64_(v)
	}

	// column 14
	if v, ok, err := strconv.FromString(protoreflect.BoolKind, src[13]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      14,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"BOOL",
			},
		})
	} else if ok {
		m.csvSetter_Base_Bool_(v)
	}

	// column 15
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[14]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      15,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"STRING",
			},
		})
	} else if ok {
		m.csvSetter_Base_String_(v)
	}

	// column 16
	_ = src[15]

	// column 17
	if v, ok, err := strconv.FromCSV(protoreflect.StringKind, src[16]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      17,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"REPEATED_STRING",
			},
		})
	} else if ok {
		m.csvSetter_Base_RepeatedString_(v)
	}

	// column 18
	if v, ok, err := strconv.FromCSV(protoreflect.Int64Kind, src[17]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      18,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"REPEATED_INT64",
			},
		})
	} else if ok {
		m.csvSetter_Base_RepeatedInt64_(v)
	}

	// column 19
	if v, ok, err := strconv.FromString(protoreflect.Int64Kind, src[18]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      19,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"UPDATED_AT",
			},
		})
	} else if ok {
		m.csvSetter_Base_UpdatedAt(v)
	}

	// column 20
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[19]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      20,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"ERROR_CONTENT",
			},
		})
	} else if ok {
		m.csvSetter_ErrorContent(v)
	}

	return errs
}

func (m *TestRecordWithError) csvGetter_Base_TestRecordId() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero string
		return zero
	}
	return m.Base.TestRecordId
}

func (m *TestRecordWithError) csvSetter_Base_TestRecordId(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.TestRecordId, _ = v.(string)
}

func (m *TestRecordWithError) csvGetter_Base_Double_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero float64
		return zero
	}
	return m.Base.Double_
}

func (m *TestRecordWithError) csvSetter_Base_Double_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Double_, _ = v.(float64)
}

func (m *TestRecordWithError) csvGetter_Base_Float_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero float32
		return zero
	}
	return m.Base.Float_
}

func (m *TestRecordWithError) csvSetter_Base_Float_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Float_, _ = v.(float32)
}

func (m *TestRecordWithError) csvGetter_Base_Int32_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int32
		return zero
	}
	return m.Base.Int32_
}

func (m *TestRecordWithError) csvSetter_Base_Int32_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Int32_, _ = v.(int32)
}

func (m *TestRecordWithError) csvGetter_Base_Int64_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int64
		return zero
	}
	return m.Base.Int64_
}

func (m *TestRecordWithError) csvSetter_Base_Int64_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Int64_, _ = v.(int64)
}

func (m *TestRecordWithError) csvGetter_Base_Uint32_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero uint32
		return zero
	}
	return m.Base.Uint32_
}

func (m *TestRecordWithError) csvSetter_Base_Uint32_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Uint32_, _ = v.(uint32)
}

func (m *TestRecordWithError) csvGetter_Base_Uint64_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero uint64
		return zero
	}
	return m.Base.Uint64_
}

func (m *TestRecordWithError) csvSetter_Base_Uint64_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Uint64_, _ = v.(uint64)
}

func (m *TestRecordWithError) csvGetter_Base_Sint32_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int32
		return zero
	}
	return m.Base.Sint32_
}

func (m *TestRecordWithError) csvSetter_Base_Sint32_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Sint32_, _ = v.(int32)
}

func (m *TestRecordWithError) csvGetter_Base_Sint64_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int64
		return zero
	}
	return m.Base.Sint64_
}

func (m *TestRecordWithError) csvSetter_Base_Sint64_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Sint64_, _ = v.(int64)
}

func (m *TestRecordWithError) csvGetter_Base_Fixed32_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero uint32
		return zero
	}
	return m.Base.Fixed32_
}

func (m *TestRecordWithError) csvSetter_Base_Fixed32_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Fixed32_, _ = v.(uint32)
}

func (m *TestRecordWithError) csvGetter_Base_Fixed64_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero uint64
		return zero
	}
	return m.Base.Fixed64_
}

func (m *TestRecordWithError) csvSetter_Base_Fixed64_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Fixed64_, _ = v.(uint64)
}

func (m *TestRecordWithError) csvGetter_Base_Sfixed32_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int32
		return zero
	}
	return m.Base.Sfixed32_
}

func (m *TestRecordWithError) csvSetter_Base_Sfixed32_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Sfixed32_, _ = v.(int32)
}

func (m *TestRecordWithError) csvGetter_Base_Sfixed64_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int64
		return zero
	}
	return m.Base.Sfixed64_
}

func (m *TestRecordWithError) csvSetter_Base_Sfixed64_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Sfixed64_, _ = v.(int64)
}

func (m *TestRecordWithError) csvGetter_Base_Bool_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero bool
		return zero
	}
	return m.Base.Bool_
}

func (m *TestRecordWithError) csvSetter_Base_Bool_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.Bool_, _ = v.(bool)
}

func (m *TestRecordWithError) csvGetter_Base_String_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero string
		return zero
	}
	return m.Base.String_
}

func (m *TestRecordWithError) csvSetter_Base_String_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.String_, _ = v.(string)
}

func (m *TestRecordWithError) csvGetter_Base_RepeatedString_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero []string
		return zero
	}
	return m.Base.RepeatedString_
}

func (m *TestRecordWithError) csvSetter_Base_RepeatedString_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.RepeatedString_, _ = v.([]string)
}

func (m *TestRecordWithError) csvGetter_Base_RepeatedInt64_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero []int64
		return zero
	}
	return m.Base.RepeatedInt64_
}

func (m *TestRecordWithError) csvSetter_Base_RepeatedInt64_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.RepeatedInt64_, _ = v.([]int64)
}

func (m *TestRecordWithError) csvGetter_Base_UpdatedAt() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int64
		return zero
	}
	return m.Base.UpdatedAt
}

func (m *TestRecordWithError) csvSetter_Base_UpdatedAt(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &TestRecordFormatDefault{}
	}
	m.Base.UpdatedAt, _ = v.(int64)
}

func (m *TestRecordWithError) csvGetter_ErrorContent() any {
	return m.ErrorContent
}

func (m *TestRecordWithError) csvSetter_ErrorContent(v any) {
	m.ErrorContent, _ = v.(string)
}

func (m *TestRecordWithError) GetBase_TestRecordIdField(fields []string) string {
	return fields[0]
}

func (m *TestRecordWithError) GetBase_Double_Field(fields []string) string {
	return fields[1]
}

func (m *TestRecordWithError) GetBase_Float_Field(fields []string) string {
	return fields[2]
}

func (m *TestRecordWithError) GetBase_Int32_Field(fields []string) string {
	return fields[3]
}

func (m *TestRecordWithError) GetBase_Int64_Field(fields []string) string {
	return fields[4]
}

func (m *TestRecordWithError) GetBase_Uint32_Field(fields []string) string {
	return fields[5]
}

func (m *TestRecordWithError) GetBase_Uint64_Field(fields []string) string {
	return fields[6]
}

func (m *TestRecordWithError) GetBase_Sint32_Field(fields []string) string {
	return fields[7]
}

func (m *TestRecordWithError) GetBase_Sint64_Field(fields []string) string {
	return fields[8]
}

func (m *TestRecordWithError) GetBase_Fixed32_Field(fields []string) string {
	return fields[9]
}

func (m *TestRecordWithError) GetBase_Fixed64_Field(fields []string) string {
	return fields[10]
}

func (m *TestRecordWithError) GetBase_Sfixed32_Field(fields []string) string {
	return fields[11]
}

func (m *TestRecordWithError) GetBase_Sfixed64_Field(fields []string) string {
	return fields[12]
}

func (m *TestRecordWithError) GetBase_Bool_Field(fields []string) string {
	return fields[13]
}

func (m *TestRecordWithError) GetBase_String_Field(fields []string) string {
	return fields[14]
}

func (m *TestRecordWithError) GetBase_RepeatedString_Field(fields []string) string {
	return fields[16]
}

func (m *TestRecordWithError) GetBase_RepeatedInt64_Field(fields []string) string {
	return fields[17]
}

func (m *TestRecordWithError) GetBase_UpdatedAtField(fields []string) string {
	return fields[18]
}

func (m *TestRecordWithError) GetErrorContentField(fields []string) string {
	return fields[19]
}

func (m *DatetimeRecordFormatDefault) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
	return &mtnpb.CsvFileOptions{
		Header:         true,
		Comma:          0,
		Encoding:       1,
		QuoteMinimally: false,
	}, true
}

func (m *DatetimeRecordFormatDefault) GetCsvHeaderColumns() []string {
	l := make([]string, 5)

	// column 1
	l[0] = "DATETIME1_"

	// column 2
	l[1] = "DATETIME3_"

	// column 3
	l[2] = "DATETIME5_"

	// column 4
	l[3] = "DATETIME7_"

	// column 5
	l[4] = "DATETIME9_"

	return l
}

func (m *DatetimeRecordFormatDefault) MarshalCSV() ([]string, error) {
	l := make([]string, 5)

	// column 1
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Datetime1_()); err != nil {
		return nil, err
	} else {
		l[0] = v
	}

	// column 2
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Datetime3_()); err != nil {
		return nil, err
	} else {
		l[1] = v
	}

	// column 3
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Datetime5_()); err != nil {
		return nil, err
	} else {
		l[2] = v
	}

	// column 4
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Datetime7_()); err != nil {
		return nil, err
	} else {
		l[3] = v
	}

	// column 5
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Datetime9_()); err != nil {
		return nil, err
	} else {
		l[4] = v
	}

	return l, nil
}

func (m *DatetimeRecordFormatDefault) UnmarshalCSV(src []string) error {
	var errs error
	if len(src) != 5 {
		errs = multierror.Append(errs, &csv.Error{
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000022,
		})
		return errs
	}

	// column 1
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[0]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      1,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Datetime1_(v)
	}

	// column 2
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[1]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      2,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Datetime3_(v)
	}

	// column 3
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[2]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      3,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Datetime5_(v)
	}

	// column 4
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[3]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      4,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Datetime7_(v)
	}

	// column 5
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[4]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      5,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Datetime9_(v)
	}

	return errs
}

func (m *DatetimeRecordFormatDefault) csvGetter_Datetime1_() any {
	return m.Datetime1_
}

func (m *DatetimeRecordFormatDefault) csvSetter_Datetime1_(v any) {
	m.Datetime1_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordFormatDefault) csvGetter_Datetime3_() any {
	return m.Datetime3_
}

func (m *DatetimeRecordFormatDefault) csvSetter_Datetime3_(v any) {
	m.Datetime3_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordFormatDefault) csvGetter_Datetime5_() any {
	return m.Datetime5_
}

func (m *DatetimeRecordFormatDefault) csvSetter_Datetime5_(v any) {
	m.Datetime5_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordFormatDefault) csvGetter_Datetime7_() any {
	return m.Datetime7_
}

func (m *DatetimeRecordFormatDefault) csvSetter_Datetime7_(v any) {
	m.Datetime7_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordFormatDefault) csvGetter_Datetime9_() any {
	return m.Datetime9_
}

func (m *DatetimeRecordFormatDefault) csvSetter_Datetime9_(v any) {
	m.Datetime9_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordFormatDefault) GetDatetime1_Field(fields []string) string {
	return fields[0]
}

func (m *DatetimeRecordFormatDefault) GetDatetime3_Field(fields []string) string {
	return fields[1]
}

func (m *DatetimeRecordFormatDefault) GetDatetime5_Field(fields []string) string {
	return fields[2]
}

func (m *DatetimeRecordFormatDefault) GetDatetime7_Field(fields []string) string {
	return fields[3]
}

func (m *DatetimeRecordFormatDefault) GetDatetime9_Field(fields []string) string {
	return fields[4]
}

func (m *DatetimeRecordWithError) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
	return &mtnpb.CsvFileOptions{
		Header:         true,
		Comma:          0,
		Encoding:       1,
		QuoteMinimally: false,
	}, true
}

func (m *DatetimeRecordWithError) GetCsvHeaderColumns() []string {
	l := make([]string, 20)

	// column 1
	l[0] = "DATETIME1_"

	// column 2
	l[1] = "DATETIME3_"

	// column 3
	l[2] = "DATETIME5_"

	// column 4
	l[3] = "DATETIME7_"

	// column 5
	l[4] = "DATETIME9_"

	// column 6
	l[5] = ""

	// column 7
	l[6] = ""

	// column 8
	l[7] = ""

	// column 9
	l[8] = ""

	// column 10
	l[9] = ""

	// column 11
	l[10] = ""

	// column 12
	l[11] = ""

	// column 13
	l[12] = ""

	// column 14
	l[13] = ""

	// column 15
	l[14] = ""

	// column 16
	l[15] = ""

	// column 17
	l[16] = ""

	// column 18
	l[17] = ""

	// column 19
	l[18] = ""

	// column 20
	l[19] = "ERROR_CONTENT"

	return l
}

func (m *DatetimeRecordWithError) MarshalCSV() ([]string, error) {
	l := make([]string, 20)

	// column 1
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Base_Datetime1_()); err != nil {
		return nil, err
	} else {
		l[0] = v
	}

	// column 2
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Base_Datetime3_()); err != nil {
		return nil, err
	} else {
		l[1] = v
	}

	// column 3
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Base_Datetime5_()); err != nil {
		return nil, err
	} else {
		l[2] = v
	}

	// column 4
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Base_Datetime7_()); err != nil {
		return nil, err
	} else {
		l[3] = v
	}

	// column 5
	if v, err := strconv.ToDatetime(protoreflect.MessageKind, m.csvGetter_Base_Datetime9_()); err != nil {
		return nil, err
	} else {
		l[4] = v
	}

	// column 6
	l[5] = ""

	// column 7
	l[6] = ""

	// column 8
	l[7] = ""

	// column 9
	l[8] = ""

	// column 10
	l[9] = ""

	// column 11
	l[10] = ""

	// column 12
	l[11] = ""

	// column 13
	l[12] = ""

	// column 14
	l[13] = ""

	// column 15
	l[14] = ""

	// column 16
	l[15] = ""

	// column 17
	l[16] = ""

	// column 18
	l[17] = ""

	// column 19
	l[18] = ""

	// column 20
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_ErrorContent()); err != nil {
		return nil, err
	} else {
		l[19] = v
	}

	return l, nil
}

func (m *DatetimeRecordWithError) UnmarshalCSV(src []string) error {
	var errs error
	if len(src) != 20 {
		errs = multierror.Append(errs, &csv.Error{
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000022,
		})
		return errs
	}

	// column 1
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[0]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      1,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Base_Datetime1_(v)
	}

	// column 2
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[1]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      2,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Base_Datetime3_(v)
	}

	// column 3
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[2]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      3,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Base_Datetime5_(v)
	}

	// column 4
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[3]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      4,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Base_Datetime7_(v)
	}

	// column 5
	if v, ok, err := strconv.FromDatetime(protoreflect.MessageKind, src[4]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      5,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000015,
		})
	} else if ok {
		m.csvSetter_Base_Datetime9_(v)
	}

	// column 6
	_ = src[5]

	// column 7
	_ = src[6]

	// column 8
	_ = src[7]

	// column 9
	_ = src[8]

	// column 10
	_ = src[9]

	// column 11
	_ = src[10]

	// column 12
	_ = src[11]

	// column 13
	_ = src[12]

	// column 14
	_ = src[13]

	// column 15
	_ = src[14]

	// column 16
	_ = src[15]

	// column 17
	_ = src[16]

	// column 18
	_ = src[17]

	// column 19
	_ = src[18]

	// column 20
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[19]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      20,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"ERROR_CONTENT",
			},
		})
	} else if ok {
		m.csvSetter_ErrorContent(v)
	}

	return errs
}

func (m *DatetimeRecordWithError) csvGetter_Base_Datetime1_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero *protobuf.Datetime
		return zero
	}
	return m.Base.Datetime1_
}

func (m *DatetimeRecordWithError) csvSetter_Base_Datetime1_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &DatetimeRecordFormatDefault{}
	}
	m.Base.Datetime1_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordWithError) csvGetter_Base_Datetime3_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero *protobuf.Datetime
		return zero
	}
	return m.Base.Datetime3_
}

func (m *DatetimeRecordWithError) csvSetter_Base_Datetime3_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &DatetimeRecordFormatDefault{}
	}
	m.Base.Datetime3_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordWithError) csvGetter_Base_Datetime5_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero *protobuf.Datetime
		return zero
	}
	return m.Base.Datetime5_
}

func (m *DatetimeRecordWithError) csvSetter_Base_Datetime5_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &DatetimeRecordFormatDefault{}
	}
	m.Base.Datetime5_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordWithError) csvGetter_Base_Datetime7_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero *protobuf.Datetime
		return zero
	}
	return m.Base.Datetime7_
}

func (m *DatetimeRecordWithError) csvSetter_Base_Datetime7_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &DatetimeRecordFormatDefault{}
	}
	m.Base.Datetime7_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordWithError) csvGetter_Base_Datetime9_() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero *protobuf.Datetime
		return zero
	}
	return m.Base.Datetime9_
}

func (m *DatetimeRecordWithError) csvSetter_Base_Datetime9_(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &DatetimeRecordFormatDefault{}
	}
	m.Base.Datetime9_, _ = v.(*protobuf.Datetime)
}

func (m *DatetimeRecordWithError) csvGetter_ErrorContent() any {
	return m.ErrorContent
}

func (m *DatetimeRecordWithError) csvSetter_ErrorContent(v any) {
	m.ErrorContent, _ = v.(string)
}

func (m *DatetimeRecordWithError) GetBase_Datetime1_Field(fields []string) string {
	return fields[0]
}

func (m *DatetimeRecordWithError) GetBase_Datetime3_Field(fields []string) string {
	return fields[1]
}

func (m *DatetimeRecordWithError) GetBase_Datetime5_Field(fields []string) string {
	return fields[2]
}

func (m *DatetimeRecordWithError) GetBase_Datetime7_Field(fields []string) string {
	return fields[3]
}

func (m *DatetimeRecordWithError) GetBase_Datetime9_Field(fields []string) string {
	return fields[4]
}

func (m *DatetimeRecordWithError) GetErrorContentField(fields []string) string {
	return fields[19]
}
