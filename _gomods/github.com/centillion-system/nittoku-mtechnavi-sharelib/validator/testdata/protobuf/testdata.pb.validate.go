// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testdata.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Strings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Strings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Strings with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StringsMultiError, or nil if none found.
func (m *Strings) ValidateAll() error {
	return m.validate(true)
}

func (m *Strings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConstFoo() != "foo" {
		err := StringsValidationError{
			field:  "ConstFoo",
			reason: "value must equal foo",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLen_5()) != 5 {
		err := StringsValidationError{
			field:  "Len_5",
			reason: "value length must be 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetMinLen_5()) < 5 {
		err := StringsValidationError{
			field:  "MinLen_5",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMaxLen_5()) > 5 {
		err := StringsValidationError{
			field:  "MaxLen_5",
			reason: "value length must be at most 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetBetween_1_5()); l < 1 || l > 5 {
		err := StringsValidationError{
			field:  "Between_1_5",
			reason: "value length must be between 1 and 5 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMinBytes_5()) < 5 {
		err := StringsValidationError{
			field:  "MinBytes_5",
			reason: "value length must be at least 5 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetMaxBytes_5()) > 5 {
		err := StringsValidationError{
			field:  "MaxBytes_5",
			reason: "value length must be at most 5 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetBetweenBytes_1_5()); l < 1 || l > 5 {
		err := StringsValidationError{
			field:  "BetweenBytes_1_5",
			reason: "value length must be between 1 and 5 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Strings_Pattern_Pattern.MatchString(m.GetPattern()) {
		err := StringsValidationError{
			field:  "Pattern",
			reason: "value does not match regex pattern \"re2-compliant\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasPrefix(m.GetPrefix(), "foo") {
		err := StringsValidationError{
			field:  "Prefix",
			reason: "value does not have prefix \"foo\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.HasSuffix(m.GetSuffix(), "foo") {
		err := StringsValidationError{
			field:  "Suffix",
			reason: "value does not have suffix \"foo\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !strings.Contains(m.GetContains(), "foo") {
		err := StringsValidationError{
			field:  "Contains",
			reason: "value does not contain substring \"foo\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetNotContains(), "foo") {
		err := StringsValidationError{
			field:  "NotContains",
			reason: "value contains substring \"foo\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StringsMultiError(errors)
	}

	return nil
}

// StringsMultiError is an error wrapping multiple validation errors returned
// by Strings.ValidateAll() if the designated constraints aren't met.
type StringsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringsMultiError) AllErrors() []error { return m }

// StringsValidationError is the validation error returned by Strings.Validate
// if the designated constraints aren't met.
type StringsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringsValidationError) ErrorName() string { return "StringsValidationError" }

// Error satisfies the builtin error interface
func (e StringsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringsValidationError{}

var _Strings_Pattern_Pattern = regexp.MustCompile("re2-compliant")

// Validate checks the field values on TestingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestingRequestMultiError,
// or nil if none found.
func (m *TestingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TestingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	if len(errors) > 0 {
		return TestingRequestMultiError(errors)
	}

	return nil
}

// TestingRequestMultiError is an error wrapping multiple validation errors
// returned by TestingRequest.ValidateAll() if the designated constraints
// aren't met.
type TestingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestingRequestMultiError) AllErrors() []error { return m }

// TestingRequestValidationError is the validation error returned by
// TestingRequest.Validate if the designated constraints aren't met.
type TestingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestingRequestValidationError) ErrorName() string { return "TestingRequestValidationError" }

// Error satisfies the builtin error interface
func (e TestingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestingRequestValidationError{}

// Validate checks the field values on TestRecord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestRecordMultiError, or
// nil if none found.
func (m *TestRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *TestRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Double_

	// no validation rules for Float_

	// no validation rules for Int32_

	// no validation rules for Int64_

	// no validation rules for Uint32_

	// no validation rules for Uint64_

	// no validation rules for Sint32_

	// no validation rules for Sint64_

	// no validation rules for Fixed32_

	// no validation rules for Fixed64_

	// no validation rules for Sfixed32_

	// no validation rules for Sfixed64_

	// no validation rules for Bool_

	// no validation rules for String_

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TestRecordMultiError(errors)
	}

	return nil
}

// TestRecordMultiError is an error wrapping multiple validation errors
// returned by TestRecord.ValidateAll() if the designated constraints aren't met.
type TestRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestRecordMultiError) AllErrors() []error { return m }

// TestRecordValidationError is the validation error returned by
// TestRecord.Validate if the designated constraints aren't met.
type TestRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestRecordValidationError) ErrorName() string { return "TestRecordValidationError" }

// Error satisfies the builtin error interface
func (e TestRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestRecordValidationError{}
