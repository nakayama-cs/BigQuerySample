// Code generated by protoc-gen-csv. DO NOT EDIT.

package {{.File.GoPackageName}}

import (
  "errors"
  "github.com/hashicorp/go-multierror"

  mtnpb "mtechnavi/sharelib/protobuf/mtn"
  "mtechnavi/sharelib/protobuf"
  "mtechnavi/sharelib/encoding/csv"
  "mtechnavi/sharelib/encoding/csv/strconv"
  "google.golang.org/protobuf/reflect/protoreflect"
  "mtechnavi/sharelib/constants"
)

var (
  _ mtnpb.CsvFileOptions
  _ = errors.New
  _ = strconv.ToString
  _ protoreflect.Kind
  _ protobuf.Datetime
)

{{range $msg := .Messages}}
{{$fileOpts := getCsvFileOptions $msg -}}

func (m *{{$msg.GoIdent.GoName}}) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
{{if $fileOpts -}}
    return &mtnpb.CsvFileOptions{
      Header: {{$fileOpts.Header}},
      Comma: {{$fileOpts.Comma.Number}},
      Encoding: {{$fileOpts.Encoding.Number}},
      QuoteMinimally: {{$fileOpts.QuoteMinimally}},
    }, true
{{else -}}
    return nil, false
{{end -}}
}

{{$colSpecs := getColumnSpecs $msg}}
func (m *{{$msg.GoIdent.GoName}}) GetCsvHeaderColumns() ([]string) {
  l := make([]string, {{len $colSpecs}})
{{range $colSpec := $colSpecs}}
  // column {{$colSpec.Column}}
  l[{{$colSpec.Index}}] = {{ printf `"%s"` $colSpec.Header }}
{{end}}
  return l
}

func (m *{{$msg.GoIdent.GoName}}) MarshalCSV() ([]string, error) {
  l := make([]string, {{len $colSpecs}})
{{range $colSpec := $colSpecs}}
  // column {{$colSpec.Column}}
{{if and $colSpec.IsValid $colSpec.IsList -}}
  if v, err := strconv.ToCSV(protoreflect.{{$colSpec.Kind.GoString}}, m.csvGetter_{{$colSpec.JoinFieldNames "_"}}()); err != nil {
    return nil, err
  } else {
    l[{{$colSpec.Index}}] = v
  }
{{else if and $colSpec.IsValid $colSpec.IsDatetime -}}
  if v, err := strconv.ToDatetime(protoreflect.{{$colSpec.Kind.GoString}}, m.csvGetter_{{$colSpec.JoinFieldNames "_"}}()); err != nil {
    return nil, err
  } else {
    l[{{$colSpec.Index}}] = v
  }
{{else if and $colSpec.IsValid $colSpec.IsDate -}}
  if v, err := strconv.ToDate(protoreflect.{{$colSpec.Kind.GoString}}, m.csvGetter_{{$colSpec.JoinFieldNames "_"}}()); err != nil {
    return nil, err
  } else {
    l[{{$colSpec.Index}}] = v
  }
{{else if and $colSpec.IsValid $colSpec.IsAmount -}}
  if v, err := strconv.ToAmount(protoreflect.{{$colSpec.Kind.GoString}}, m.csvGetter_{{$colSpec.JoinFieldNames "_"}}()); err != nil {
    return nil, err
  } else {
    l[{{$colSpec.Index}}] = v
  }
{{else if $colSpec.IsValid -}}
  if v, err := strconv.ToString(protoreflect.{{$colSpec.Kind.GoString}}, m.csvGetter_{{$colSpec.JoinFieldNames "_"}}()); err != nil {
    return nil, err
  } else {
    l[{{$colSpec.Index}}] = v
  }
{{else -}}
  l[{{$colSpec.Index}}] = ""
{{end -}}
{{end}}
  return l, nil
}

func (m *{{$msg.GoIdent.GoName}}) UnmarshalCSV(src []string) error {
  var errs error
  if len(src) != {{len $colSpecs}} {
    errs = multierror.Append(errs, &csv.Error{
        ErrorLevel: protobuf.ErrorLevel_ERROR,
        MessageName: constants.MessageName_E0000022,
    })
    return errs
  }
{{range $colSpec := $colSpecs}}
  // column {{$colSpec.Column}}
  {{if $colSpec.Default -}}
  if src[{{$colSpec.Index}}] == "" {
    src[{{$colSpec.Index}}] = {{ printf `"%s"` $colSpec.Default }}
  }
  {{end -}}
{{if and $colSpec.IsValid $colSpec.IsList -}}
  if v, ok, err := strconv.FromCSV(protoreflect.{{$colSpec.Kind.GoString}}, src[{{$colSpec.Index}}]); err != nil {
    errs = multierror.Append(errs, &csv.Error{
        Column: {{$colSpec.Column}},
        Causes: []error{err},
        ErrorLevel: protobuf.ErrorLevel_ERROR,
        MessageName: constants.MessageName_E1000002,
        MessageArgs: []any{
            {{ printf `"%s"` $colSpec.Header }},
        },
    })
  } else if ok {
    m.csvSetter_{{$colSpec.JoinFieldNames "_"}}(v)
  }
{{else if and $colSpec.IsValid $colSpec.IsDatetime -}}
  if v, ok, err := strconv.FromDatetime(protoreflect.{{$colSpec.Kind.GoString}}, src[{{$colSpec.Index}}]); err != nil {
    errs = multierror.Append(errs, &csv.Error{
        Column: {{$colSpec.Column}},
        Causes: []error{err},
        ErrorLevel: protobuf.ErrorLevel_ERROR,
        MessageName: constants.MessageName_E0000015,
    })
  } else if ok {
    m.csvSetter_{{$colSpec.JoinFieldNames "_"}}(v)
  }
{{else if and $colSpec.IsValid $colSpec.IsDate -}}
  if v, ok, err := strconv.FromDate(protoreflect.{{$colSpec.Kind.GoString}}, src[{{$colSpec.Index}}]); err != nil {
    errs = multierror.Append(errs, &csv.Error{
        Column: {{$colSpec.Column}},
        Causes: []error{err},
        ErrorLevel: protobuf.ErrorLevel_ERROR,
        MessageName: constants.MessageName_E0000015,
    })
  } else if ok {
    m.csvSetter_{{$colSpec.JoinFieldNames "_"}}(v)
  }
{{else if and $colSpec.IsValid $colSpec.IsAmount -}}
  if v, ok, err := strconv.FromAmount(protoreflect.{{$colSpec.Kind.GoString}}, src[{{$colSpec.Index}}]); err != nil {
    errs = multierror.Append(errs, &csv.Error{
        Column: {{$colSpec.Column}},
        Causes: []error{err},
        ErrorLevel: protobuf.ErrorLevel_ERROR,
        MessageName: constants.MessageName_E0000004,
    })
  } else if ok {
    m.csvSetter_{{$colSpec.JoinFieldNames "_"}}(v)
  }
{{else if $colSpec.IsValid -}}
  if v, ok, err := strconv.FromString(protoreflect.{{$colSpec.Kind.GoString}}, src[{{$colSpec.Index}}]); err != nil {
    errs = multierror.Append(errs, &csv.Error{
        Column: {{$colSpec.Column}},
        Causes: []error{err},
        ErrorLevel: protobuf.ErrorLevel_ERROR,
        MessageName: constants.MessageName_E1000002,
        MessageArgs: []any{
            {{ printf `"%s"` $colSpec.Header }},
        },
    })
  } else if ok {
    m.csvSetter_{{$colSpec.JoinFieldNames "_"}}(v)
  }
{{else -}}
  _ = src[{{$colSpec.Index}}]
{{end -}}
{{end}}
  return errs
}

{{/* ネストしたフィールドへのアクセス用にアクセサを用意する */}}
{{range $colSpec := $colSpecs}}
{{if $colSpec.IsValid -}}
func (m *{{$msg.GoIdent.GoName}}) csvGetter_{{$colSpec.JoinFieldNames "_"}}() any {
{{range $fieldAccess := $colSpec.FieldAccessList "m" -}}
  // check nested message
  if {{$fieldAccess}} == nil {
    // zero value
{{if $colSpec.IsList -}}
    var zero []{{$colSpec.GoType}}
{{else -}}
    var zero {{$colSpec.GoType}}
{{end -}}
    return zero
  }
{{end -}}
  return {{$colSpec.FieldAccess "m"}}
}

func (m *{{$msg.GoIdent.GoName}}) csvSetter_{{$colSpec.JoinFieldNames "_"}}(v any) {
{{range $i, $fieldAccess := $colSpec.FieldAccessList "m" -}}
  // check nested message
  if {{$fieldAccess}} == nil {
    {{$fieldAccess}} = &{{$colSpec.MessageName $i}}{}
  }
{{end -}}
{{if $colSpec.IsList -}}
  {{$colSpec.FieldAccess "m"}}, _ = v.([]{{$colSpec.GoType}})
{{else -}}
  {{$colSpec.FieldAccess "m"}}, _ = v.({{$colSpec.GoType}})
{{end -}}
}
{{end}}
{{end}}

{{range $colSpec := $colSpecs}}
{{if $colSpec.IsValid -}}
func (m *{{$msg.GoIdent.GoName}}) Get{{$colSpec.JoinFieldNames "_"}}Field(fields []string) string {
  return fields[{{$colSpec.Index}}]
}
{{end -}}
{{end}}
{{end}}
