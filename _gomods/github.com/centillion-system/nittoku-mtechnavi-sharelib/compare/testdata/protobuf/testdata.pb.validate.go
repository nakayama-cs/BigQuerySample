// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testdata.proto

package testdata

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ScalarTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScalarTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScalarTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScalarTypesMultiError, or
// nil if none found.
func (m *ScalarTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *ScalarTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivateDouble_

	// no validation rules for GrantedFloat_

	// no validation rules for PublicInt32_

	// no validation rules for PrivateInt64_

	// no validation rules for GrantedUint32_

	// no validation rules for PublicUint64_

	// no validation rules for PrivateSint32_

	// no validation rules for GrantedSint64_

	// no validation rules for PublicFixed32_

	// no validation rules for PrivateFixed64_

	// no validation rules for GrantedSfixed32_

	// no validation rules for PublicSfixed64_

	// no validation rules for PrivateBool_

	// no validation rules for GrantedString_

	// no validation rules for PublicBytes_

	// no validation rules for PrivateEnum_

	// no validation rules for ScalarTypesId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScalarTypesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScalarTypesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScalarTypesValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScalarTypesMultiError(errors)
	}

	return nil
}

// ScalarTypesMultiError is an error wrapping multiple validation errors
// returned by ScalarTypes.ValidateAll() if the designated constraints aren't met.
type ScalarTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScalarTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScalarTypesMultiError) AllErrors() []error { return m }

// ScalarTypesValidationError is the validation error returned by
// ScalarTypes.Validate if the designated constraints aren't met.
type ScalarTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScalarTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScalarTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScalarTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScalarTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScalarTypesValidationError) ErrorName() string { return "ScalarTypesValidationError" }

// Error satisfies the builtin error interface
func (e ScalarTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScalarTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScalarTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScalarTypesValidationError{}

// Validate checks the field values on RepeatedTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatedTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedTypes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatedTypesMultiError, or
// nil if none found.
func (m *RepeatedTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrivateRepeatedMessage_() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedTypesValidationError{
						field:  fmt.Sprintf("PrivateRepeatedMessage_[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedTypesValidationError{
						field:  fmt.Sprintf("PrivateRepeatedMessage_[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedTypesValidationError{
					field:  fmt.Sprintf("PrivateRepeatedMessage_[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RepeatedTypesMultiError(errors)
	}

	return nil
}

// RepeatedTypesMultiError is an error wrapping multiple validation errors
// returned by RepeatedTypes.ValidateAll() if the designated constraints
// aren't met.
type RepeatedTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatedTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatedTypesMultiError) AllErrors() []error { return m }

// RepeatedTypesValidationError is the validation error returned by
// RepeatedTypes.Validate if the designated constraints aren't met.
type RepeatedTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedTypesValidationError) ErrorName() string { return "RepeatedTypesValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedTypesValidationError{}

// Validate checks the field values on MapTypes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapTypesMultiError, or nil
// if none found.
func (m *MapTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *MapTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivateMapStringDouble_

	// no validation rules for GrantedMapStringFloat_

	// no validation rules for PublicMapStringInt32_

	// no validation rules for PrivateMapStringInt64_

	// no validation rules for GrantedMapStringUint32_

	// no validation rules for PublicMapStringUint64_

	// no validation rules for PrivateMapStringSint32_

	// no validation rules for GrantedMapStringSint64_

	// no validation rules for PublicMapStringFixed32_

	// no validation rules for PrivateMapStringFixed64_

	// no validation rules for GrantedMapStringSfixed32_

	// no validation rules for PublicMapStringSfixed64_

	// no validation rules for PrivateMapStringBool_

	// no validation rules for GrantedMapStringString_

	// no validation rules for PublicMapStringBytes_

	{
		sorted_keys := make([]string, len(m.GetPrivateMapStringMessage_()))
		i := 0
		for key := range m.GetPrivateMapStringMessage_() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPrivateMapStringMessage_()[key]
			_ = val

			// no validation rules for PrivateMapStringMessage_[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, MapTypesValidationError{
							field:  fmt.Sprintf("PrivateMapStringMessage_[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, MapTypesValidationError{
							field:  fmt.Sprintf("PrivateMapStringMessage_[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return MapTypesValidationError{
						field:  fmt.Sprintf("PrivateMapStringMessage_[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return MapTypesMultiError(errors)
	}

	return nil
}

// MapTypesMultiError is an error wrapping multiple validation errors returned
// by MapTypes.ValidateAll() if the designated constraints aren't met.
type MapTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapTypesMultiError) AllErrors() []error { return m }

// MapTypesValidationError is the validation error returned by
// MapTypes.Validate if the designated constraints aren't met.
type MapTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapTypesValidationError) ErrorName() string { return "MapTypesValidationError" }

// Error satisfies the builtin error interface
func (e MapTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapTypesValidationError{}

// Validate checks the field values on OneOfTypes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OneOfTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OneOfTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OneOfTypesMultiError, or
// nil if none found.
func (m *OneOfTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *OneOfTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.TestOneof.(type) {

	case *OneOfTypes_PrivateMessage:

		if all {
			switch v := interface{}(m.GetPrivateMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneOfTypesValidationError{
						field:  "PrivateMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneOfTypesValidationError{
						field:  "PrivateMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPrivateMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfTypesValidationError{
					field:  "PrivateMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OneOfTypes_GrantedMessage:

		if all {
			switch v := interface{}(m.GetGrantedMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneOfTypesValidationError{
						field:  "GrantedMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneOfTypesValidationError{
						field:  "GrantedMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGrantedMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfTypesValidationError{
					field:  "GrantedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *OneOfTypes_PublicMessage:

		if all {
			switch v := interface{}(m.GetPublicMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OneOfTypesValidationError{
						field:  "PublicMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OneOfTypesValidationError{
						field:  "PublicMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPublicMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OneOfTypesValidationError{
					field:  "PublicMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OneOfTypesMultiError(errors)
	}

	return nil
}

// OneOfTypesMultiError is an error wrapping multiple validation errors
// returned by OneOfTypes.ValidateAll() if the designated constraints aren't met.
type OneOfTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OneOfTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OneOfTypesMultiError) AllErrors() []error { return m }

// OneOfTypesValidationError is the validation error returned by
// OneOfTypes.Validate if the designated constraints aren't met.
type OneOfTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OneOfTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OneOfTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OneOfTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OneOfTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OneOfTypesValidationError) ErrorName() string { return "OneOfTypesValidationError" }

// Error satisfies the builtin error interface
func (e OneOfTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOneOfTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OneOfTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OneOfTypesValidationError{}

// Validate checks the field values on NestedTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NestedTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NestedTypes with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NestedTypesMultiError, or
// nil if none found.
func (m *NestedTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *NestedTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Private

	// no validation rules for Granted

	// no validation rules for Public

	if all {
		switch v := interface{}(m.GetPrivateScalarTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateScalarTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateScalarTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateScalarTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PrivateScalarTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedScalarTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedScalarTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedScalarTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedScalarTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "GrantedScalarTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicScalarTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicScalarTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicScalarTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicScalarTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PublicScalarTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateRepeatedTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateRepeatedTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateRepeatedTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateRepeatedTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PrivateRepeatedTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedRepeatedTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedRepeatedTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedRepeatedTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedRepeatedTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "GrantedRepeatedTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicRepeatedTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicRepeatedTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicRepeatedTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicRepeatedTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PublicRepeatedTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateMapTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateMapTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateMapTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateMapTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PrivateMapTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedMapTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedMapTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedMapTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedMapTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "GrantedMapTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicMapTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicMapTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicMapTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicMapTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PublicMapTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateOneOfTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateOneOfTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PrivateOneOfTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateOneOfTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PrivateOneOfTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedOneOfTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedOneOfTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "GrantedOneOfTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedOneOfTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "GrantedOneOfTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicOneOfTypes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicOneOfTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "PublicOneOfTypes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicOneOfTypes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "PublicOneOfTypes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NestedVisibilityTypesId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedTypesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedTypesValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NestedTypesMultiError(errors)
	}

	return nil
}

// NestedTypesMultiError is an error wrapping multiple validation errors
// returned by NestedTypes.ValidateAll() if the designated constraints aren't met.
type NestedTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NestedTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NestedTypesMultiError) AllErrors() []error { return m }

// NestedTypesValidationError is the validation error returned by
// NestedTypes.Validate if the designated constraints aren't met.
type NestedTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NestedTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NestedTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NestedTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NestedTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NestedTypesValidationError) ErrorName() string { return "NestedTypesValidationError" }

// Error satisfies the builtin error interface
func (e NestedTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNestedTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NestedTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NestedTypesValidationError{}

// Validate checks the field values on InheritMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InheritMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InheritMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InheritMessageMultiError,
// or nil if none found.
func (m *InheritMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *InheritMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InheritString

	if all {
		switch v := interface{}(m.GetPrivateNestedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "PrivateNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "PrivateNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateNestedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InheritMessageValidationError{
				field:  "PrivateNestedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedNestedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "GrantedNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "GrantedNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedNestedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InheritMessageValidationError{
				field:  "GrantedNestedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicNestedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "PublicNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "PublicNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicNestedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InheritMessageValidationError{
				field:  "PublicNestedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInheritNestedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "InheritNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InheritMessageValidationError{
					field:  "InheritNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInheritNestedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InheritMessageValidationError{
				field:  "InheritNestedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InheritMessageMultiError(errors)
	}

	return nil
}

// InheritMessageMultiError is an error wrapping multiple validation errors
// returned by InheritMessage.ValidateAll() if the designated constraints
// aren't met.
type InheritMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InheritMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InheritMessageMultiError) AllErrors() []error { return m }

// InheritMessageValidationError is the validation error returned by
// InheritMessage.Validate if the designated constraints aren't met.
type InheritMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InheritMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InheritMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InheritMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InheritMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InheritMessageValidationError) ErrorName() string { return "InheritMessageValidationError" }

// Error satisfies the builtin error interface
func (e InheritMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInheritMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InheritMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InheritMessageValidationError{}

// Validate checks the field values on NestedInheritTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NestedInheritTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NestedInheritTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NestedInheritTypesMultiError, or nil if none found.
func (m *NestedInheritTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *NestedInheritTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrivateInheritMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedInheritTypesValidationError{
					field:  "PrivateInheritMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedInheritTypesValidationError{
					field:  "PrivateInheritMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateInheritMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedInheritTypesValidationError{
				field:  "PrivateInheritMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedInheritMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedInheritTypesValidationError{
					field:  "GrantedInheritMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedInheritTypesValidationError{
					field:  "GrantedInheritMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedInheritMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedInheritTypesValidationError{
				field:  "GrantedInheritMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicInheritMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedInheritTypesValidationError{
					field:  "PublicInheritMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedInheritTypesValidationError{
					field:  "PublicInheritMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicInheritMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedInheritTypesValidationError{
				field:  "PublicInheritMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NestedInheritTypesMultiError(errors)
	}

	return nil
}

// NestedInheritTypesMultiError is an error wrapping multiple validation errors
// returned by NestedInheritTypes.ValidateAll() if the designated constraints
// aren't met.
type NestedInheritTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NestedInheritTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NestedInheritTypesMultiError) AllErrors() []error { return m }

// NestedInheritTypesValidationError is the validation error returned by
// NestedInheritTypes.Validate if the designated constraints aren't met.
type NestedInheritTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NestedInheritTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NestedInheritTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NestedInheritTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NestedInheritTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NestedInheritTypesValidationError) ErrorName() string {
	return "NestedInheritTypesValidationError"
}

// Error satisfies the builtin error interface
func (e NestedInheritTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNestedInheritTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NestedInheritTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NestedInheritTypesValidationError{}

// Validate checks the field values on InheritMessage_NestedMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InheritMessage_NestedMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InheritMessage_NestedMessage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InheritMessage_NestedMessageMultiError, or nil if none found.
func (m *InheritMessage_NestedMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *InheritMessage_NestedMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InheritString

	if len(errors) > 0 {
		return InheritMessage_NestedMessageMultiError(errors)
	}

	return nil
}

// InheritMessage_NestedMessageMultiError is an error wrapping multiple
// validation errors returned by InheritMessage_NestedMessage.ValidateAll() if
// the designated constraints aren't met.
type InheritMessage_NestedMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InheritMessage_NestedMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InheritMessage_NestedMessageMultiError) AllErrors() []error { return m }

// InheritMessage_NestedMessageValidationError is the validation error returned
// by InheritMessage_NestedMessage.Validate if the designated constraints
// aren't met.
type InheritMessage_NestedMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InheritMessage_NestedMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InheritMessage_NestedMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InheritMessage_NestedMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InheritMessage_NestedMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InheritMessage_NestedMessageValidationError) ErrorName() string {
	return "InheritMessage_NestedMessageValidationError"
}

// Error satisfies the builtin error interface
func (e InheritMessage_NestedMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInheritMessage_NestedMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InheritMessage_NestedMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InheritMessage_NestedMessageValidationError{}
