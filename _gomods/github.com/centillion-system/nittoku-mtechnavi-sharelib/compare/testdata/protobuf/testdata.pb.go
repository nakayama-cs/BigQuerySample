// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: testdata.proto

package testdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RootEnum int32

const (
	RootEnum_A RootEnum = 0
	RootEnum_B RootEnum = 1
	RootEnum_C RootEnum = 2
)

// Enum value maps for RootEnum.
var (
	RootEnum_name = map[int32]string{
		0: "A",
		1: "B",
		2: "C",
	}
	RootEnum_value = map[string]int32{
		"A": 0,
		"B": 1,
		"C": 2,
	}
)

func (x RootEnum) Enum() *RootEnum {
	p := new(RootEnum)
	*p = x
	return p
}

func (x RootEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RootEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_testdata_proto_enumTypes[0].Descriptor()
}

func (RootEnum) Type() protoreflect.EnumType {
	return &file_testdata_proto_enumTypes[0]
}

func (x RootEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RootEnum.Descriptor instead.
func (RootEnum) EnumDescriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{0}
}

type ScalarTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateDouble_   float64                            `protobuf:"fixed64,1,opt,name=private_double_,json=privateDouble,proto3" json:"private_double_,omitempty"`
	GrantedFloat_    float32                            `protobuf:"fixed32,3,opt,name=granted_float_,json=grantedFloat,proto3" json:"granted_float_,omitempty"`
	PublicInt32_     int32                              `protobuf:"varint,5,opt,name=public_int32_,json=publicInt32,proto3" json:"public_int32_,omitempty"`
	PrivateInt64_    int64                              `protobuf:"varint,7,opt,name=private_int64_,json=privateInt64,proto3" json:"private_int64_,omitempty"`
	GrantedUint32_   uint32                             `protobuf:"varint,9,opt,name=granted_uint32_,json=grantedUint32,proto3" json:"granted_uint32_,omitempty"`
	PublicUint64_    uint64                             `protobuf:"varint,11,opt,name=public_uint64_,json=publicUint64,proto3" json:"public_uint64_,omitempty"`
	PrivateSint32_   int32                              `protobuf:"zigzag32,13,opt,name=private_sint32_,json=privateSint32,proto3" json:"private_sint32_,omitempty"`
	GrantedSint64_   int64                              `protobuf:"zigzag64,15,opt,name=granted_sint64_,json=grantedSint64,proto3" json:"granted_sint64_,omitempty"`
	PublicFixed32_   uint32                             `protobuf:"fixed32,17,opt,name=public_fixed32_,json=publicFixed32,proto3" json:"public_fixed32_,omitempty"`
	PrivateFixed64_  uint64                             `protobuf:"fixed64,19,opt,name=private_fixed64_,json=privateFixed64,proto3" json:"private_fixed64_,omitempty"`
	GrantedSfixed32_ int32                              `protobuf:"fixed32,21,opt,name=granted_sfixed32_,json=grantedSfixed32,proto3" json:"granted_sfixed32_,omitempty"`
	PublicSfixed64_  int64                              `protobuf:"fixed64,23,opt,name=public_sfixed64_,json=publicSfixed64,proto3" json:"public_sfixed64_,omitempty"`
	PrivateBool_     bool                               `protobuf:"varint,25,opt,name=private_bool_,json=privateBool,proto3" json:"private_bool_,omitempty"`
	GrantedString_   string                             `protobuf:"bytes,27,opt,name=granted_string_,json=grantedString,proto3" json:"granted_string_,omitempty"`
	PublicBytes_     []byte                             `protobuf:"bytes,29,opt,name=public_bytes_,json=publicBytes,proto3" json:"public_bytes_,omitempty"`
	PrivateEnum_     RootEnum                           `protobuf:"varint,31,opt,name=private_enum_,json=privateEnum,proto3,enum=mtechnavi.compare.testdata.RootEnum" json:"private_enum_,omitempty"`
	ScalarTypesId    string                             `protobuf:"bytes,100,opt,name=scalar_types_id,json=scalarTypesId,proto3" json:"scalar_types_id,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,101,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,102,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,103,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,104,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
}

func (x *ScalarTypes) Reset() {
	*x = ScalarTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTypes) ProtoMessage() {}

func (x *ScalarTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTypes.ProtoReflect.Descriptor instead.
func (*ScalarTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{0}
}

func (x *ScalarTypes) GetPrivateDouble_() float64 {
	if x != nil {
		return x.PrivateDouble_
	}
	return 0
}

func (x *ScalarTypes) GetGrantedFloat_() float32 {
	if x != nil {
		return x.GrantedFloat_
	}
	return 0
}

func (x *ScalarTypes) GetPublicInt32_() int32 {
	if x != nil {
		return x.PublicInt32_
	}
	return 0
}

func (x *ScalarTypes) GetPrivateInt64_() int64 {
	if x != nil {
		return x.PrivateInt64_
	}
	return 0
}

func (x *ScalarTypes) GetGrantedUint32_() uint32 {
	if x != nil {
		return x.GrantedUint32_
	}
	return 0
}

func (x *ScalarTypes) GetPublicUint64_() uint64 {
	if x != nil {
		return x.PublicUint64_
	}
	return 0
}

func (x *ScalarTypes) GetPrivateSint32_() int32 {
	if x != nil {
		return x.PrivateSint32_
	}
	return 0
}

func (x *ScalarTypes) GetGrantedSint64_() int64 {
	if x != nil {
		return x.GrantedSint64_
	}
	return 0
}

func (x *ScalarTypes) GetPublicFixed32_() uint32 {
	if x != nil {
		return x.PublicFixed32_
	}
	return 0
}

func (x *ScalarTypes) GetPrivateFixed64_() uint64 {
	if x != nil {
		return x.PrivateFixed64_
	}
	return 0
}

func (x *ScalarTypes) GetGrantedSfixed32_() int32 {
	if x != nil {
		return x.GrantedSfixed32_
	}
	return 0
}

func (x *ScalarTypes) GetPublicSfixed64_() int64 {
	if x != nil {
		return x.PublicSfixed64_
	}
	return 0
}

func (x *ScalarTypes) GetPrivateBool_() bool {
	if x != nil {
		return x.PrivateBool_
	}
	return false
}

func (x *ScalarTypes) GetGrantedString_() string {
	if x != nil {
		return x.GrantedString_
	}
	return ""
}

func (x *ScalarTypes) GetPublicBytes_() []byte {
	if x != nil {
		return x.PublicBytes_
	}
	return nil
}

func (x *ScalarTypes) GetPrivateEnum_() RootEnum {
	if x != nil {
		return x.PrivateEnum_
	}
	return RootEnum_A
}

func (x *ScalarTypes) GetScalarTypesId() string {
	if x != nil {
		return x.ScalarTypesId
	}
	return ""
}

func (x *ScalarTypes) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *ScalarTypes) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ScalarTypes) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ScalarTypes) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

type RepeatedTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateRepeatedDouble_   []float64      `protobuf:"fixed64,101,rep,packed,name=private_repeated_double_,json=privateRepeatedDouble,proto3" json:"private_repeated_double_,omitempty"`
	GrantedRepeatedFloat_    []float32      `protobuf:"fixed32,103,rep,packed,name=granted_repeated_float_,json=grantedRepeatedFloat,proto3" json:"granted_repeated_float_,omitempty"`
	PublicRepeatedInt32_     []int32        `protobuf:"varint,105,rep,packed,name=public_repeated_int32_,json=publicRepeatedInt32,proto3" json:"public_repeated_int32_,omitempty"`
	PrivateRepeatedInt64_    []int64        `protobuf:"varint,107,rep,packed,name=private_repeated_int64_,json=privateRepeatedInt64,proto3" json:"private_repeated_int64_,omitempty"`
	GrantedRepeatedUint32_   []uint32       `protobuf:"varint,109,rep,packed,name=granted_repeated_uint32_,json=grantedRepeatedUint32,proto3" json:"granted_repeated_uint32_,omitempty"`
	PublicRepeatedUint64_    []uint64       `protobuf:"varint,111,rep,packed,name=public_repeated_uint64_,json=publicRepeatedUint64,proto3" json:"public_repeated_uint64_,omitempty"`
	PrivateRepeatedSint32_   []int32        `protobuf:"zigzag32,113,rep,packed,name=private_repeated_sint32_,json=privateRepeatedSint32,proto3" json:"private_repeated_sint32_,omitempty"`
	GrantedRepeatedSint64_   []int64        `protobuf:"zigzag64,115,rep,packed,name=granted_repeated_sint64_,json=grantedRepeatedSint64,proto3" json:"granted_repeated_sint64_,omitempty"`
	PublicRepeatedFixed32_   []uint32       `protobuf:"fixed32,117,rep,packed,name=public_repeated_fixed32_,json=publicRepeatedFixed32,proto3" json:"public_repeated_fixed32_,omitempty"`
	PrivateRepeatedFixed64_  []uint64       `protobuf:"fixed64,119,rep,packed,name=private_repeated_fixed64_,json=privateRepeatedFixed64,proto3" json:"private_repeated_fixed64_,omitempty"`
	GrantedRepeatedSfixed32_ []int32        `protobuf:"fixed32,121,rep,packed,name=granted_repeated_sfixed32_,json=grantedRepeatedSfixed32,proto3" json:"granted_repeated_sfixed32_,omitempty"`
	PublicRepeatedSfixed64_  []int64        `protobuf:"fixed64,123,rep,packed,name=public_repeated_sfixed64_,json=publicRepeatedSfixed64,proto3" json:"public_repeated_sfixed64_,omitempty"`
	PrivateRepeatedBool_     []bool         `protobuf:"varint,125,rep,packed,name=private_repeated_bool_,json=privateRepeatedBool,proto3" json:"private_repeated_bool_,omitempty"`
	GrantedRepeatedString_   []string       `protobuf:"bytes,127,rep,name=granted_repeated_string_,json=grantedRepeatedString,proto3" json:"granted_repeated_string_,omitempty"`
	PublicRepeatedBytes_     [][]byte       `protobuf:"bytes,129,rep,name=public_repeated_bytes_,json=publicRepeatedBytes,proto3" json:"public_repeated_bytes_,omitempty"`
	PrivateRepeatedMessage_  []*ScalarTypes `protobuf:"bytes,131,rep,name=private_repeated_message_,json=privateRepeatedMessage,proto3" json:"private_repeated_message_,omitempty"`
}

func (x *RepeatedTypes) Reset() {
	*x = RepeatedTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedTypes) ProtoMessage() {}

func (x *RepeatedTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedTypes.ProtoReflect.Descriptor instead.
func (*RepeatedTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedTypes) GetPrivateRepeatedDouble_() []float64 {
	if x != nil {
		return x.PrivateRepeatedDouble_
	}
	return nil
}

func (x *RepeatedTypes) GetGrantedRepeatedFloat_() []float32 {
	if x != nil {
		return x.GrantedRepeatedFloat_
	}
	return nil
}

func (x *RepeatedTypes) GetPublicRepeatedInt32_() []int32 {
	if x != nil {
		return x.PublicRepeatedInt32_
	}
	return nil
}

func (x *RepeatedTypes) GetPrivateRepeatedInt64_() []int64 {
	if x != nil {
		return x.PrivateRepeatedInt64_
	}
	return nil
}

func (x *RepeatedTypes) GetGrantedRepeatedUint32_() []uint32 {
	if x != nil {
		return x.GrantedRepeatedUint32_
	}
	return nil
}

func (x *RepeatedTypes) GetPublicRepeatedUint64_() []uint64 {
	if x != nil {
		return x.PublicRepeatedUint64_
	}
	return nil
}

func (x *RepeatedTypes) GetPrivateRepeatedSint32_() []int32 {
	if x != nil {
		return x.PrivateRepeatedSint32_
	}
	return nil
}

func (x *RepeatedTypes) GetGrantedRepeatedSint64_() []int64 {
	if x != nil {
		return x.GrantedRepeatedSint64_
	}
	return nil
}

func (x *RepeatedTypes) GetPublicRepeatedFixed32_() []uint32 {
	if x != nil {
		return x.PublicRepeatedFixed32_
	}
	return nil
}

func (x *RepeatedTypes) GetPrivateRepeatedFixed64_() []uint64 {
	if x != nil {
		return x.PrivateRepeatedFixed64_
	}
	return nil
}

func (x *RepeatedTypes) GetGrantedRepeatedSfixed32_() []int32 {
	if x != nil {
		return x.GrantedRepeatedSfixed32_
	}
	return nil
}

func (x *RepeatedTypes) GetPublicRepeatedSfixed64_() []int64 {
	if x != nil {
		return x.PublicRepeatedSfixed64_
	}
	return nil
}

func (x *RepeatedTypes) GetPrivateRepeatedBool_() []bool {
	if x != nil {
		return x.PrivateRepeatedBool_
	}
	return nil
}

func (x *RepeatedTypes) GetGrantedRepeatedString_() []string {
	if x != nil {
		return x.GrantedRepeatedString_
	}
	return nil
}

func (x *RepeatedTypes) GetPublicRepeatedBytes_() [][]byte {
	if x != nil {
		return x.PublicRepeatedBytes_
	}
	return nil
}

func (x *RepeatedTypes) GetPrivateRepeatedMessage_() []*ScalarTypes {
	if x != nil {
		return x.PrivateRepeatedMessage_
	}
	return nil
}

type MapTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateMapStringDouble_   map[string]float64      `protobuf:"bytes,201,rep,name=private_map_string_double_,json=privateMapStringDouble,proto3" json:"private_map_string_double_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	GrantedMapStringFloat_    map[string]float32      `protobuf:"bytes,203,rep,name=granted_map_string_float_,json=grantedMapStringFloat,proto3" json:"granted_map_string_float_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	PublicMapStringInt32_     map[string]int32        `protobuf:"bytes,205,rep,name=public_map_string_int32_,json=publicMapStringInt32,proto3" json:"public_map_string_int32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PrivateMapStringInt64_    map[string]int64        `protobuf:"bytes,207,rep,name=private_map_string_int64_,json=privateMapStringInt64,proto3" json:"private_map_string_int64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedMapStringUint32_   map[string]uint32       `protobuf:"bytes,209,rep,name=granted_map_string_uint32_,json=grantedMapStringUint32,proto3" json:"granted_map_string_uint32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PublicMapStringUint64_    map[string]uint64       `protobuf:"bytes,211,rep,name=public_map_string_uint64_,json=publicMapStringUint64,proto3" json:"public_map_string_uint64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PrivateMapStringSint32_   map[string]int32        `protobuf:"bytes,213,rep,name=private_map_string_sint32_,json=privateMapStringSint32,proto3" json:"private_map_string_sint32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	GrantedMapStringSint64_   map[string]int64        `protobuf:"bytes,215,rep,name=granted_map_string_sint64_,json=grantedMapStringSint64,proto3" json:"granted_map_string_sint64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	PublicMapStringFixed32_   map[string]uint32       `protobuf:"bytes,217,rep,name=public_map_string_fixed32_,json=publicMapStringFixed32,proto3" json:"public_map_string_fixed32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	PrivateMapStringFixed64_  map[string]uint64       `protobuf:"bytes,219,rep,name=private_map_string_fixed64_,json=privateMapStringFixed64,proto3" json:"private_map_string_fixed64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	GrantedMapStringSfixed32_ map[string]int32        `protobuf:"bytes,221,rep,name=granted_map_string_sfixed32_,json=grantedMapStringSfixed32,proto3" json:"granted_map_string_sfixed32_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	PublicMapStringSfixed64_  map[string]int64        `protobuf:"bytes,223,rep,name=public_map_string_sfixed64_,json=publicMapStringSfixed64,proto3" json:"public_map_string_sfixed64_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	PrivateMapStringBool_     map[string]bool         `protobuf:"bytes,225,rep,name=private_map_string_bool_,json=privateMapStringBool,proto3" json:"private_map_string_bool_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GrantedMapStringString_   map[string]string       `protobuf:"bytes,227,rep,name=granted_map_string_string_,json=grantedMapStringString,proto3" json:"granted_map_string_string_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PublicMapStringBytes_     map[string][]byte       `protobuf:"bytes,229,rep,name=public_map_string_bytes_,json=publicMapStringBytes,proto3" json:"public_map_string_bytes_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrivateMapStringMessage_  map[string]*ScalarTypes `protobuf:"bytes,231,rep,name=private_map_string_message_,json=privateMapStringMessage,proto3" json:"private_map_string_message_,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapTypes) Reset() {
	*x = MapTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTypes) ProtoMessage() {}

func (x *MapTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTypes.ProtoReflect.Descriptor instead.
func (*MapTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{2}
}

func (x *MapTypes) GetPrivateMapStringDouble_() map[string]float64 {
	if x != nil {
		return x.PrivateMapStringDouble_
	}
	return nil
}

func (x *MapTypes) GetGrantedMapStringFloat_() map[string]float32 {
	if x != nil {
		return x.GrantedMapStringFloat_
	}
	return nil
}

func (x *MapTypes) GetPublicMapStringInt32_() map[string]int32 {
	if x != nil {
		return x.PublicMapStringInt32_
	}
	return nil
}

func (x *MapTypes) GetPrivateMapStringInt64_() map[string]int64 {
	if x != nil {
		return x.PrivateMapStringInt64_
	}
	return nil
}

func (x *MapTypes) GetGrantedMapStringUint32_() map[string]uint32 {
	if x != nil {
		return x.GrantedMapStringUint32_
	}
	return nil
}

func (x *MapTypes) GetPublicMapStringUint64_() map[string]uint64 {
	if x != nil {
		return x.PublicMapStringUint64_
	}
	return nil
}

func (x *MapTypes) GetPrivateMapStringSint32_() map[string]int32 {
	if x != nil {
		return x.PrivateMapStringSint32_
	}
	return nil
}

func (x *MapTypes) GetGrantedMapStringSint64_() map[string]int64 {
	if x != nil {
		return x.GrantedMapStringSint64_
	}
	return nil
}

func (x *MapTypes) GetPublicMapStringFixed32_() map[string]uint32 {
	if x != nil {
		return x.PublicMapStringFixed32_
	}
	return nil
}

func (x *MapTypes) GetPrivateMapStringFixed64_() map[string]uint64 {
	if x != nil {
		return x.PrivateMapStringFixed64_
	}
	return nil
}

func (x *MapTypes) GetGrantedMapStringSfixed32_() map[string]int32 {
	if x != nil {
		return x.GrantedMapStringSfixed32_
	}
	return nil
}

func (x *MapTypes) GetPublicMapStringSfixed64_() map[string]int64 {
	if x != nil {
		return x.PublicMapStringSfixed64_
	}
	return nil
}

func (x *MapTypes) GetPrivateMapStringBool_() map[string]bool {
	if x != nil {
		return x.PrivateMapStringBool_
	}
	return nil
}

func (x *MapTypes) GetGrantedMapStringString_() map[string]string {
	if x != nil {
		return x.GrantedMapStringString_
	}
	return nil
}

func (x *MapTypes) GetPublicMapStringBytes_() map[string][]byte {
	if x != nil {
		return x.PublicMapStringBytes_
	}
	return nil
}

func (x *MapTypes) GetPrivateMapStringMessage_() map[string]*ScalarTypes {
	if x != nil {
		return x.PrivateMapStringMessage_
	}
	return nil
}

type OneOfTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestOneof:
	//
	//	*OneOfTypes_PrivateMessage
	//	*OneOfTypes_GrantedMessage
	//	*OneOfTypes_PublicMessage
	TestOneof isOneOfTypes_TestOneof `protobuf_oneof:"test_oneof"`
}

func (x *OneOfTypes) Reset() {
	*x = OneOfTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfTypes) ProtoMessage() {}

func (x *OneOfTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfTypes.ProtoReflect.Descriptor instead.
func (*OneOfTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{3}
}

func (m *OneOfTypes) GetTestOneof() isOneOfTypes_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *OneOfTypes) GetPrivateMessage() *ScalarTypes {
	if x, ok := x.GetTestOneof().(*OneOfTypes_PrivateMessage); ok {
		return x.PrivateMessage
	}
	return nil
}

func (x *OneOfTypes) GetGrantedMessage() *ScalarTypes {
	if x, ok := x.GetTestOneof().(*OneOfTypes_GrantedMessage); ok {
		return x.GrantedMessage
	}
	return nil
}

func (x *OneOfTypes) GetPublicMessage() *ScalarTypes {
	if x, ok := x.GetTestOneof().(*OneOfTypes_PublicMessage); ok {
		return x.PublicMessage
	}
	return nil
}

type isOneOfTypes_TestOneof interface {
	isOneOfTypes_TestOneof()
}

type OneOfTypes_PrivateMessage struct {
	PrivateMessage *ScalarTypes `protobuf:"bytes,1,opt,name=private_message,json=privateMessage,proto3,oneof"`
}

type OneOfTypes_GrantedMessage struct {
	GrantedMessage *ScalarTypes `protobuf:"bytes,3,opt,name=granted_message,json=grantedMessage,proto3,oneof"`
}

type OneOfTypes_PublicMessage struct {
	PublicMessage *ScalarTypes `protobuf:"bytes,5,opt,name=public_message,json=publicMessage,proto3,oneof"`
}

func (*OneOfTypes_PrivateMessage) isOneOfTypes_TestOneof() {}

func (*OneOfTypes_GrantedMessage) isOneOfTypes_TestOneof() {}

func (*OneOfTypes_PublicMessage) isOneOfTypes_TestOneof() {}

type NestedTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private                 string                             `protobuf:"bytes,1,opt,name=private,proto3" json:"private,omitempty"`
	Granted                 string                             `protobuf:"bytes,3,opt,name=granted,proto3" json:"granted,omitempty"`
	Public                  string                             `protobuf:"bytes,5,opt,name=public,proto3" json:"public,omitempty"`
	PrivateScalarTypes      *ScalarTypes                       `protobuf:"bytes,11,opt,name=private_scalar_types,json=privateScalarTypes,proto3" json:"private_scalar_types,omitempty"`
	GrantedScalarTypes      *ScalarTypes                       `protobuf:"bytes,13,opt,name=granted_scalar_types,json=grantedScalarTypes,proto3" json:"granted_scalar_types,omitempty"`
	PublicScalarTypes       *ScalarTypes                       `protobuf:"bytes,15,opt,name=public_scalar_types,json=publicScalarTypes,proto3" json:"public_scalar_types,omitempty"`
	PrivateRepeatedTypes    *RepeatedTypes                     `protobuf:"bytes,21,opt,name=private_repeated_types,json=privateRepeatedTypes,proto3" json:"private_repeated_types,omitempty"`
	GrantedRepeatedTypes    *RepeatedTypes                     `protobuf:"bytes,23,opt,name=granted_repeated_types,json=grantedRepeatedTypes,proto3" json:"granted_repeated_types,omitempty"`
	PublicRepeatedTypes     *RepeatedTypes                     `protobuf:"bytes,25,opt,name=public_repeated_types,json=publicRepeatedTypes,proto3" json:"public_repeated_types,omitempty"`
	PrivateMapTypes         *MapTypes                          `protobuf:"bytes,31,opt,name=private_map_types,json=privateMapTypes,proto3" json:"private_map_types,omitempty"`
	GrantedMapTypes         *MapTypes                          `protobuf:"bytes,33,opt,name=granted_map_types,json=grantedMapTypes,proto3" json:"granted_map_types,omitempty"`
	PublicMapTypes          *MapTypes                          `protobuf:"bytes,35,opt,name=public_map_types,json=publicMapTypes,proto3" json:"public_map_types,omitempty"`
	PrivateOneOfTypes       *OneOfTypes                        `protobuf:"bytes,41,opt,name=private_one_of_types,json=privateOneOfTypes,proto3" json:"private_one_of_types,omitempty"`
	GrantedOneOfTypes       *OneOfTypes                        `protobuf:"bytes,43,opt,name=granted_one_of_types,json=grantedOneOfTypes,proto3" json:"granted_one_of_types,omitempty"`
	PublicOneOfTypes        *OneOfTypes                        `protobuf:"bytes,45,opt,name=public_one_of_types,json=publicOneOfTypes,proto3" json:"public_one_of_types,omitempty"`
	NestedVisibilityTypesId string                             `protobuf:"bytes,100,opt,name=nested_visibility_types_id,json=nestedVisibilityTypesId,proto3" json:"nested_visibility_types_id,omitempty"`
	DeletedAt               int64                              `protobuf:"varint,101,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt               int64                              `protobuf:"varint,102,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               int64                              `protobuf:"varint,103,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SharedProperties        *protobuf.EmbeddedSharedProperties `protobuf:"bytes,104,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
}

func (x *NestedTypes) Reset() {
	*x = NestedTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedTypes) ProtoMessage() {}

func (x *NestedTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedTypes.ProtoReflect.Descriptor instead.
func (*NestedTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{4}
}

func (x *NestedTypes) GetPrivate() string {
	if x != nil {
		return x.Private
	}
	return ""
}

func (x *NestedTypes) GetGranted() string {
	if x != nil {
		return x.Granted
	}
	return ""
}

func (x *NestedTypes) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *NestedTypes) GetPrivateScalarTypes() *ScalarTypes {
	if x != nil {
		return x.PrivateScalarTypes
	}
	return nil
}

func (x *NestedTypes) GetGrantedScalarTypes() *ScalarTypes {
	if x != nil {
		return x.GrantedScalarTypes
	}
	return nil
}

func (x *NestedTypes) GetPublicScalarTypes() *ScalarTypes {
	if x != nil {
		return x.PublicScalarTypes
	}
	return nil
}

func (x *NestedTypes) GetPrivateRepeatedTypes() *RepeatedTypes {
	if x != nil {
		return x.PrivateRepeatedTypes
	}
	return nil
}

func (x *NestedTypes) GetGrantedRepeatedTypes() *RepeatedTypes {
	if x != nil {
		return x.GrantedRepeatedTypes
	}
	return nil
}

func (x *NestedTypes) GetPublicRepeatedTypes() *RepeatedTypes {
	if x != nil {
		return x.PublicRepeatedTypes
	}
	return nil
}

func (x *NestedTypes) GetPrivateMapTypes() *MapTypes {
	if x != nil {
		return x.PrivateMapTypes
	}
	return nil
}

func (x *NestedTypes) GetGrantedMapTypes() *MapTypes {
	if x != nil {
		return x.GrantedMapTypes
	}
	return nil
}

func (x *NestedTypes) GetPublicMapTypes() *MapTypes {
	if x != nil {
		return x.PublicMapTypes
	}
	return nil
}

func (x *NestedTypes) GetPrivateOneOfTypes() *OneOfTypes {
	if x != nil {
		return x.PrivateOneOfTypes
	}
	return nil
}

func (x *NestedTypes) GetGrantedOneOfTypes() *OneOfTypes {
	if x != nil {
		return x.GrantedOneOfTypes
	}
	return nil
}

func (x *NestedTypes) GetPublicOneOfTypes() *OneOfTypes {
	if x != nil {
		return x.PublicOneOfTypes
	}
	return nil
}

func (x *NestedTypes) GetNestedVisibilityTypesId() string {
	if x != nil {
		return x.NestedVisibilityTypesId
	}
	return ""
}

func (x *NestedTypes) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *NestedTypes) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NestedTypes) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NestedTypes) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

type InheritMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InheritString        string                        `protobuf:"bytes,1,opt,name=inherit_string,json=inheritString,proto3" json:"inherit_string,omitempty"`
	PrivateNestedMessage *InheritMessage_NestedMessage `protobuf:"bytes,3,opt,name=private_nested_message,json=privateNestedMessage,proto3" json:"private_nested_message,omitempty"`
	GrantedNestedMessage *InheritMessage_NestedMessage `protobuf:"bytes,5,opt,name=granted_nested_message,json=grantedNestedMessage,proto3" json:"granted_nested_message,omitempty"`
	PublicNestedMessage  *InheritMessage_NestedMessage `protobuf:"bytes,7,opt,name=public_nested_message,json=publicNestedMessage,proto3" json:"public_nested_message,omitempty"`
	InheritNestedMessage *InheritMessage_NestedMessage `protobuf:"bytes,9,opt,name=inherit_nested_message,json=inheritNestedMessage,proto3" json:"inherit_nested_message,omitempty"`
}

func (x *InheritMessage) Reset() {
	*x = InheritMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InheritMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InheritMessage) ProtoMessage() {}

func (x *InheritMessage) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InheritMessage.ProtoReflect.Descriptor instead.
func (*InheritMessage) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{5}
}

func (x *InheritMessage) GetInheritString() string {
	if x != nil {
		return x.InheritString
	}
	return ""
}

func (x *InheritMessage) GetPrivateNestedMessage() *InheritMessage_NestedMessage {
	if x != nil {
		return x.PrivateNestedMessage
	}
	return nil
}

func (x *InheritMessage) GetGrantedNestedMessage() *InheritMessage_NestedMessage {
	if x != nil {
		return x.GrantedNestedMessage
	}
	return nil
}

func (x *InheritMessage) GetPublicNestedMessage() *InheritMessage_NestedMessage {
	if x != nil {
		return x.PublicNestedMessage
	}
	return nil
}

func (x *InheritMessage) GetInheritNestedMessage() *InheritMessage_NestedMessage {
	if x != nil {
		return x.InheritNestedMessage
	}
	return nil
}

type NestedInheritTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateInheritMessage *InheritMessage `protobuf:"bytes,1,opt,name=private_inherit_message,json=privateInheritMessage,proto3" json:"private_inherit_message,omitempty"`
	GrantedInheritMessage *InheritMessage `protobuf:"bytes,3,opt,name=granted_inherit_message,json=grantedInheritMessage,proto3" json:"granted_inherit_message,omitempty"`
	PublicInheritMessage  *InheritMessage `protobuf:"bytes,5,opt,name=public_inherit_message,json=publicInheritMessage,proto3" json:"public_inherit_message,omitempty"`
}

func (x *NestedInheritTypes) Reset() {
	*x = NestedInheritTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedInheritTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedInheritTypes) ProtoMessage() {}

func (x *NestedInheritTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedInheritTypes.ProtoReflect.Descriptor instead.
func (*NestedInheritTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{6}
}

func (x *NestedInheritTypes) GetPrivateInheritMessage() *InheritMessage {
	if x != nil {
		return x.PrivateInheritMessage
	}
	return nil
}

func (x *NestedInheritTypes) GetGrantedInheritMessage() *InheritMessage {
	if x != nil {
		return x.GrantedInheritMessage
	}
	return nil
}

func (x *NestedInheritTypes) GetPublicInheritMessage() *InheritMessage {
	if x != nil {
		return x.PublicInheritMessage
	}
	return nil
}

type InheritMessage_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InheritString string `protobuf:"bytes,1,opt,name=inherit_string,json=inheritString,proto3" json:"inherit_string,omitempty"`
}

func (x *InheritMessage_NestedMessage) Reset() {
	*x = InheritMessage_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InheritMessage_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InheritMessage_NestedMessage) ProtoMessage() {}

func (x *InheritMessage_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InheritMessage_NestedMessage.ProtoReflect.Descriptor instead.
func (*InheritMessage_NestedMessage) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{5, 0}
}

func (x *InheritMessage_NestedMessage) GetInheritString() string {
	if x != nil {
		return x.InheritString
	}
	return ""
}

var File_testdata_proto protoreflect.FileDescriptor

var file_testdata_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x6d, 0x74,
	0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xef, 0x07, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x04, 0xc2, 0xb8, 0x02,
	0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x2c, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x2a,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x42, 0x04, 0xc2,
	0xb8, 0x02, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x2e, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x2e, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x07, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x02, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x06, 0x42, 0x04, 0xc2, 0xb8,
	0x02, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x32, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x02, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x04, 0xc2, 0xb8, 0x02,
	0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xb6, 0x08, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x18, 0x65, 0x20, 0x03, 0x28, 0x01, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x18, 0x67, 0x20, 0x03, 0x28, 0x02, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x14,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x69,
	0x20, 0x03, 0x28, 0x05, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x13, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x6b, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3f,
	0x0a, 0x18, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x0d,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x3d, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3d,
	0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0x71, 0x20, 0x03, 0x28, 0x11,
	0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3f, 0x0a,
	0x18, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0x73, 0x20, 0x03, 0x28, 0x12, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3f,
	0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x75, 0x20, 0x03, 0x28, 0x07,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x3f, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0x77, 0x20, 0x03,
	0x28, 0x06, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x43, 0x0a, 0x1a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0x79,
	0x20, 0x03, 0x28, 0x0f, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x17, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x41, 0x0a, 0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x18, 0x7b, 0x20, 0x03, 0x28, 0x10, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02,
	0x52, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x18, 0x7d, 0x20, 0x03, 0x28, 0x08, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x13,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18,
	0x7f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x15, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x18, 0x81,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x18,
	0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x1a,
	0x0a, 0x08, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x18, 0xcb,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x15,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x7f, 0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x18, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02,
	0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x18, 0xcf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc2, 0xb8,
	0x02, 0x00, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xd1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x16, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18,
	0xd3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52,
	0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x83, 0x01, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x18, 0xd5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04,
	0xc2, 0xb8, 0x02, 0x00, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x85, 0x01, 0x0a,
	0x1a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x18, 0xd7, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x16, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x18, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x02, 0x52, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x86, 0x01, 0x0a,
	0x1b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x18, 0xdb, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x17, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x8b, 0x01, 0x0a, 0x1c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x18, 0xdd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x18, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x88, 0x01, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x18, 0xdf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x7d,
	0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x18, 0xe1, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x85, 0x01,
	0x0a, 0x1a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x18, 0xe3, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x16, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x7f, 0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x18, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02,
	0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x18, 0xe7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x49, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a,
	0x1a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a,
	0x1c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x73, 0x0a, 0x1c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a,
	0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x02, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x22, 0xdf, 0x0b, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x5f, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00,
	0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02,
	0x02, 0x08, 0x01, 0x52, 0x12, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2,
	0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x67, 0x0a, 0x16, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x52, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01,
	0x52, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4f, 0x6e,
	0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0xdb, 0x04, 0x0a, 0x0e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x16, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x14, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8,
	0x02, 0x02, 0x08, 0x02, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x16, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x03, 0x52, 0x14, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x3e, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0xd4, 0x02, 0x0a, 0x12, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x15, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x68,
	0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x02, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x1f, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x42,
	0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x02, 0x42, 0x1c, 0x5a, 0x1a, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testdata_proto_rawDescOnce sync.Once
	file_testdata_proto_rawDescData = file_testdata_proto_rawDesc
)

func file_testdata_proto_rawDescGZIP() []byte {
	file_testdata_proto_rawDescOnce.Do(func() {
		file_testdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_testdata_proto_rawDescData)
	})
	return file_testdata_proto_rawDescData
}

var file_testdata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_testdata_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_testdata_proto_goTypes = []interface{}{
	(RootEnum)(0),                        // 0: mtechnavi.compare.testdata.RootEnum
	(*ScalarTypes)(nil),                  // 1: mtechnavi.compare.testdata.ScalarTypes
	(*RepeatedTypes)(nil),                // 2: mtechnavi.compare.testdata.RepeatedTypes
	(*MapTypes)(nil),                     // 3: mtechnavi.compare.testdata.MapTypes
	(*OneOfTypes)(nil),                   // 4: mtechnavi.compare.testdata.OneOfTypes
	(*NestedTypes)(nil),                  // 5: mtechnavi.compare.testdata.NestedTypes
	(*InheritMessage)(nil),               // 6: mtechnavi.compare.testdata.InheritMessage
	(*NestedInheritTypes)(nil),           // 7: mtechnavi.compare.testdata.NestedInheritTypes
	nil,                                  // 8: mtechnavi.compare.testdata.MapTypes.PrivateMapStringDoubleEntry
	nil,                                  // 9: mtechnavi.compare.testdata.MapTypes.GrantedMapStringFloatEntry
	nil,                                  // 10: mtechnavi.compare.testdata.MapTypes.PublicMapStringInt32Entry
	nil,                                  // 11: mtechnavi.compare.testdata.MapTypes.PrivateMapStringInt64Entry
	nil,                                  // 12: mtechnavi.compare.testdata.MapTypes.GrantedMapStringUint32Entry
	nil,                                  // 13: mtechnavi.compare.testdata.MapTypes.PublicMapStringUint64Entry
	nil,                                  // 14: mtechnavi.compare.testdata.MapTypes.PrivateMapStringSint32Entry
	nil,                                  // 15: mtechnavi.compare.testdata.MapTypes.GrantedMapStringSint64Entry
	nil,                                  // 16: mtechnavi.compare.testdata.MapTypes.PublicMapStringFixed32Entry
	nil,                                  // 17: mtechnavi.compare.testdata.MapTypes.PrivateMapStringFixed64Entry
	nil,                                  // 18: mtechnavi.compare.testdata.MapTypes.GrantedMapStringSfixed32Entry
	nil,                                  // 19: mtechnavi.compare.testdata.MapTypes.PublicMapStringSfixed64Entry
	nil,                                  // 20: mtechnavi.compare.testdata.MapTypes.PrivateMapStringBoolEntry
	nil,                                  // 21: mtechnavi.compare.testdata.MapTypes.GrantedMapStringStringEntry
	nil,                                  // 22: mtechnavi.compare.testdata.MapTypes.PublicMapStringBytesEntry
	nil,                                  // 23: mtechnavi.compare.testdata.MapTypes.PrivateMapStringMessageEntry
	(*InheritMessage_NestedMessage)(nil), // 24: mtechnavi.compare.testdata.InheritMessage.NestedMessage
	(*protobuf.EmbeddedSharedProperties)(nil), // 25: sharelib.EmbeddedSharedProperties
}
var file_testdata_proto_depIdxs = []int32{
	0,  // 0: mtechnavi.compare.testdata.ScalarTypes.private_enum_:type_name -> mtechnavi.compare.testdata.RootEnum
	25, // 1: mtechnavi.compare.testdata.ScalarTypes.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	1,  // 2: mtechnavi.compare.testdata.RepeatedTypes.private_repeated_message_:type_name -> mtechnavi.compare.testdata.ScalarTypes
	8,  // 3: mtechnavi.compare.testdata.MapTypes.private_map_string_double_:type_name -> mtechnavi.compare.testdata.MapTypes.PrivateMapStringDoubleEntry
	9,  // 4: mtechnavi.compare.testdata.MapTypes.granted_map_string_float_:type_name -> mtechnavi.compare.testdata.MapTypes.GrantedMapStringFloatEntry
	10, // 5: mtechnavi.compare.testdata.MapTypes.public_map_string_int32_:type_name -> mtechnavi.compare.testdata.MapTypes.PublicMapStringInt32Entry
	11, // 6: mtechnavi.compare.testdata.MapTypes.private_map_string_int64_:type_name -> mtechnavi.compare.testdata.MapTypes.PrivateMapStringInt64Entry
	12, // 7: mtechnavi.compare.testdata.MapTypes.granted_map_string_uint32_:type_name -> mtechnavi.compare.testdata.MapTypes.GrantedMapStringUint32Entry
	13, // 8: mtechnavi.compare.testdata.MapTypes.public_map_string_uint64_:type_name -> mtechnavi.compare.testdata.MapTypes.PublicMapStringUint64Entry
	14, // 9: mtechnavi.compare.testdata.MapTypes.private_map_string_sint32_:type_name -> mtechnavi.compare.testdata.MapTypes.PrivateMapStringSint32Entry
	15, // 10: mtechnavi.compare.testdata.MapTypes.granted_map_string_sint64_:type_name -> mtechnavi.compare.testdata.MapTypes.GrantedMapStringSint64Entry
	16, // 11: mtechnavi.compare.testdata.MapTypes.public_map_string_fixed32_:type_name -> mtechnavi.compare.testdata.MapTypes.PublicMapStringFixed32Entry
	17, // 12: mtechnavi.compare.testdata.MapTypes.private_map_string_fixed64_:type_name -> mtechnavi.compare.testdata.MapTypes.PrivateMapStringFixed64Entry
	18, // 13: mtechnavi.compare.testdata.MapTypes.granted_map_string_sfixed32_:type_name -> mtechnavi.compare.testdata.MapTypes.GrantedMapStringSfixed32Entry
	19, // 14: mtechnavi.compare.testdata.MapTypes.public_map_string_sfixed64_:type_name -> mtechnavi.compare.testdata.MapTypes.PublicMapStringSfixed64Entry
	20, // 15: mtechnavi.compare.testdata.MapTypes.private_map_string_bool_:type_name -> mtechnavi.compare.testdata.MapTypes.PrivateMapStringBoolEntry
	21, // 16: mtechnavi.compare.testdata.MapTypes.granted_map_string_string_:type_name -> mtechnavi.compare.testdata.MapTypes.GrantedMapStringStringEntry
	22, // 17: mtechnavi.compare.testdata.MapTypes.public_map_string_bytes_:type_name -> mtechnavi.compare.testdata.MapTypes.PublicMapStringBytesEntry
	23, // 18: mtechnavi.compare.testdata.MapTypes.private_map_string_message_:type_name -> mtechnavi.compare.testdata.MapTypes.PrivateMapStringMessageEntry
	1,  // 19: mtechnavi.compare.testdata.OneOfTypes.private_message:type_name -> mtechnavi.compare.testdata.ScalarTypes
	1,  // 20: mtechnavi.compare.testdata.OneOfTypes.granted_message:type_name -> mtechnavi.compare.testdata.ScalarTypes
	1,  // 21: mtechnavi.compare.testdata.OneOfTypes.public_message:type_name -> mtechnavi.compare.testdata.ScalarTypes
	1,  // 22: mtechnavi.compare.testdata.NestedTypes.private_scalar_types:type_name -> mtechnavi.compare.testdata.ScalarTypes
	1,  // 23: mtechnavi.compare.testdata.NestedTypes.granted_scalar_types:type_name -> mtechnavi.compare.testdata.ScalarTypes
	1,  // 24: mtechnavi.compare.testdata.NestedTypes.public_scalar_types:type_name -> mtechnavi.compare.testdata.ScalarTypes
	2,  // 25: mtechnavi.compare.testdata.NestedTypes.private_repeated_types:type_name -> mtechnavi.compare.testdata.RepeatedTypes
	2,  // 26: mtechnavi.compare.testdata.NestedTypes.granted_repeated_types:type_name -> mtechnavi.compare.testdata.RepeatedTypes
	2,  // 27: mtechnavi.compare.testdata.NestedTypes.public_repeated_types:type_name -> mtechnavi.compare.testdata.RepeatedTypes
	3,  // 28: mtechnavi.compare.testdata.NestedTypes.private_map_types:type_name -> mtechnavi.compare.testdata.MapTypes
	3,  // 29: mtechnavi.compare.testdata.NestedTypes.granted_map_types:type_name -> mtechnavi.compare.testdata.MapTypes
	3,  // 30: mtechnavi.compare.testdata.NestedTypes.public_map_types:type_name -> mtechnavi.compare.testdata.MapTypes
	4,  // 31: mtechnavi.compare.testdata.NestedTypes.private_one_of_types:type_name -> mtechnavi.compare.testdata.OneOfTypes
	4,  // 32: mtechnavi.compare.testdata.NestedTypes.granted_one_of_types:type_name -> mtechnavi.compare.testdata.OneOfTypes
	4,  // 33: mtechnavi.compare.testdata.NestedTypes.public_one_of_types:type_name -> mtechnavi.compare.testdata.OneOfTypes
	25, // 34: mtechnavi.compare.testdata.NestedTypes.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	24, // 35: mtechnavi.compare.testdata.InheritMessage.private_nested_message:type_name -> mtechnavi.compare.testdata.InheritMessage.NestedMessage
	24, // 36: mtechnavi.compare.testdata.InheritMessage.granted_nested_message:type_name -> mtechnavi.compare.testdata.InheritMessage.NestedMessage
	24, // 37: mtechnavi.compare.testdata.InheritMessage.public_nested_message:type_name -> mtechnavi.compare.testdata.InheritMessage.NestedMessage
	24, // 38: mtechnavi.compare.testdata.InheritMessage.inherit_nested_message:type_name -> mtechnavi.compare.testdata.InheritMessage.NestedMessage
	6,  // 39: mtechnavi.compare.testdata.NestedInheritTypes.private_inherit_message:type_name -> mtechnavi.compare.testdata.InheritMessage
	6,  // 40: mtechnavi.compare.testdata.NestedInheritTypes.granted_inherit_message:type_name -> mtechnavi.compare.testdata.InheritMessage
	6,  // 41: mtechnavi.compare.testdata.NestedInheritTypes.public_inherit_message:type_name -> mtechnavi.compare.testdata.InheritMessage
	1,  // 42: mtechnavi.compare.testdata.MapTypes.PrivateMapStringMessageEntry.value:type_name -> mtechnavi.compare.testdata.ScalarTypes
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_testdata_proto_init() }
func file_testdata_proto_init() {
	if File_testdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InheritMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedInheritTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InheritMessage_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testdata_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OneOfTypes_PrivateMessage)(nil),
		(*OneOfTypes_GrantedMessage)(nil),
		(*OneOfTypes_PublicMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testdata_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testdata_proto_goTypes,
		DependencyIndexes: file_testdata_proto_depIdxs,
		EnumInfos:         file_testdata_proto_enumTypes,
		MessageInfos:      file_testdata_proto_msgTypes,
	}.Build()
	File_testdata_proto = out.File
	file_testdata_proto_rawDesc = nil
	file_testdata_proto_goTypes = nil
	file_testdata_proto_depIdxs = nil
}
