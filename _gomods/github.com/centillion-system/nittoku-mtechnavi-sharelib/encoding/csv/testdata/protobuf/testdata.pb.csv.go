// Code generated by protoc-gen-csv. DO NOT EDIT.

package protobuf

import (
	"errors"
	"github.com/hashicorp/go-multierror"

	mtnpb "mtechnavi/sharelib/protobuf/mtn"
	"mtechnavi/sharelib/protobuf"
	"mtechnavi/sharelib/encoding/csv"
	"mtechnavi/sharelib/encoding/csv/strconv"
	"google.golang.org/protobuf/reflect/protoreflect"
	"mtechnavi/sharelib/constants"
)

var (
	_ mtnpb.CsvFileOptions
	_ = errors.New
	_ = strconv.ToString
	_ protoreflect.Kind
	_ protobuf.Datetime
)

func (m *SampleRecord) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
	return &mtnpb.CsvFileOptions{
		Header:         true,
		Comma:          0,
		Encoding:       1,
		QuoteMinimally: false,
	}, true
}

func (m *SampleRecord) GetCsvHeaderColumns() []string {
	l := make([]string, 8)

	// column 1
	l[0] = "EMAIL"

	// column 2
	l[1] = "ID"

	// column 3
	l[2] = "DISPLAY_NAME"

	// column 4
	l[3] = ""

	// column 5
	l[4] = "AGE"

	// column 6
	l[5] = ""

	// column 7
	l[6] = ""

	// column 8
	l[7] = "SINGLE_SIGN_ON"

	return l
}

func (m *SampleRecord) MarshalCSV() ([]string, error) {
	l := make([]string, 8)

	// column 1
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_Email()); err != nil {
		return nil, err
	} else {
		l[0] = v
	}

	// column 2
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_UserId()); err != nil {
		return nil, err
	} else {
		l[1] = v
	}

	// column 3
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_DisplayName()); err != nil {
		return nil, err
	} else {
		l[2] = v
	}

	// column 4
	l[3] = ""

	// column 5
	if v, err := strconv.ToString(protoreflect.Int32Kind, m.csvGetter_Age()); err != nil {
		return nil, err
	} else {
		l[4] = v
	}

	// column 6
	if v, err := strconv.ToString(protoreflect.DoubleKind, m.csvGetter_Weight()); err != nil {
		return nil, err
	} else {
		l[5] = v
	}

	// column 7
	if v, err := strconv.ToCSV(protoreflect.StringKind, m.csvGetter_Tags()); err != nil {
		return nil, err
	} else {
		l[6] = v
	}

	// column 8
	if v, err := strconv.ToString(protoreflect.BoolKind, m.csvGetter_EnableSingleSignOn()); err != nil {
		return nil, err
	} else {
		l[7] = v
	}

	return l, nil
}

func (m *SampleRecord) UnmarshalCSV(src []string) error {
	var errs error
	if len(src) != 8 {
		errs = multierror.Append(errs, &csv.Error{
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000022,
		})
		return errs
	}

	// column 1
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[0]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      1,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"EMAIL",
			},
		})
	} else if ok {
		m.csvSetter_Email(v)
	}

	// column 2
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[1]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      2,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"ID",
			},
		})
	} else if ok {
		m.csvSetter_UserId(v)
	}

	// column 3
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[2]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      3,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"DISPLAY_NAME",
			},
		})
	} else if ok {
		m.csvSetter_DisplayName(v)
	}

	// column 4
	_ = src[3]

	// column 5
	if src[4] == "" {
		src[4] = "0"
	}
	if v, ok, err := strconv.FromString(protoreflect.Int32Kind, src[4]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      5,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"AGE",
			},
		})
	} else if ok {
		m.csvSetter_Age(v)
	}

	// column 6
	if v, ok, err := strconv.FromString(protoreflect.DoubleKind, src[5]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      6,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"",
			},
		})
	} else if ok {
		m.csvSetter_Weight(v)
	}

	// column 7
	if src[6] == "" {
		src[6] = "default001,default002"
	}
	if v, ok, err := strconv.FromCSV(protoreflect.StringKind, src[6]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      7,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"",
			},
		})
	} else if ok {
		m.csvSetter_Tags(v)
	}

	// column 8
	if src[7] == "" {
		src[7] = "1"
	}
	if v, ok, err := strconv.FromString(protoreflect.BoolKind, src[7]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      8,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SINGLE_SIGN_ON",
			},
		})
	} else if ok {
		m.csvSetter_EnableSingleSignOn(v)
	}

	return errs
}

func (m *SampleRecord) csvGetter_Email() any {
	return m.Email
}

func (m *SampleRecord) csvSetter_Email(v any) {
	m.Email, _ = v.(string)
}

func (m *SampleRecord) csvGetter_UserId() any {
	return m.UserId
}

func (m *SampleRecord) csvSetter_UserId(v any) {
	m.UserId, _ = v.(string)
}

func (m *SampleRecord) csvGetter_DisplayName() any {
	return m.DisplayName
}

func (m *SampleRecord) csvSetter_DisplayName(v any) {
	m.DisplayName, _ = v.(string)
}

func (m *SampleRecord) csvGetter_Age() any {
	return m.Age
}

func (m *SampleRecord) csvSetter_Age(v any) {
	m.Age, _ = v.(int32)
}

func (m *SampleRecord) csvGetter_Weight() any {
	return m.Weight
}

func (m *SampleRecord) csvSetter_Weight(v any) {
	m.Weight, _ = v.(float64)
}

func (m *SampleRecord) csvGetter_Tags() any {
	return m.Tags
}

func (m *SampleRecord) csvSetter_Tags(v any) {
	m.Tags, _ = v.([]string)
}

func (m *SampleRecord) csvGetter_EnableSingleSignOn() any {
	return m.EnableSingleSignOn
}

func (m *SampleRecord) csvSetter_EnableSingleSignOn(v any) {
	m.EnableSingleSignOn, _ = v.(bool)
}

func (m *SampleRecord) GetEmailField(fields []string) string {
	return fields[0]
}

func (m *SampleRecord) GetUserIdField(fields []string) string {
	return fields[1]
}

func (m *SampleRecord) GetDisplayNameField(fields []string) string {
	return fields[2]
}

func (m *SampleRecord) GetAgeField(fields []string) string {
	return fields[4]
}

func (m *SampleRecord) GetWeightField(fields []string) string {
	return fields[5]
}

func (m *SampleRecord) GetTagsField(fields []string) string {
	return fields[6]
}

func (m *SampleRecord) GetEnableSingleSignOnField(fields []string) string {
	return fields[7]
}

func (m *SampleRecordWithError) GetCsvFileOptions() (*mtnpb.CsvFileOptions, bool) {
	return nil, false
}

func (m *SampleRecordWithError) GetCsvHeaderColumns() []string {
	l := make([]string, 9)

	// column 1
	l[0] = "EMAIL"

	// column 2
	l[1] = "ID"

	// column 3
	l[2] = "DISPLAY_NAME"

	// column 4
	l[3] = ""

	// column 5
	l[4] = "AGE"

	// column 6
	l[5] = ""

	// column 7
	l[6] = ""

	// column 8
	l[7] = "SINGLE_SIGN_ON"

	// column 9
	l[8] = ""

	return l
}

func (m *SampleRecordWithError) MarshalCSV() ([]string, error) {
	l := make([]string, 9)

	// column 1
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_Base_Email()); err != nil {
		return nil, err
	} else {
		l[0] = v
	}

	// column 2
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_Base_UserId()); err != nil {
		return nil, err
	} else {
		l[1] = v
	}

	// column 3
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_Base_DisplayName()); err != nil {
		return nil, err
	} else {
		l[2] = v
	}

	// column 4
	l[3] = ""

	// column 5
	if v, err := strconv.ToString(protoreflect.Int32Kind, m.csvGetter_Base_Age()); err != nil {
		return nil, err
	} else {
		l[4] = v
	}

	// column 6
	if v, err := strconv.ToString(protoreflect.DoubleKind, m.csvGetter_Base_Weight()); err != nil {
		return nil, err
	} else {
		l[5] = v
	}

	// column 7
	if v, err := strconv.ToCSV(protoreflect.StringKind, m.csvGetter_Base_Tags()); err != nil {
		return nil, err
	} else {
		l[6] = v
	}

	// column 8
	if v, err := strconv.ToString(protoreflect.BoolKind, m.csvGetter_Base_EnableSingleSignOn()); err != nil {
		return nil, err
	} else {
		l[7] = v
	}

	// column 9
	if v, err := strconv.ToString(protoreflect.StringKind, m.csvGetter_ErrorContent()); err != nil {
		return nil, err
	} else {
		l[8] = v
	}

	return l, nil
}

func (m *SampleRecordWithError) UnmarshalCSV(src []string) error {
	var errs error
	if len(src) != 9 {
		errs = multierror.Append(errs, &csv.Error{
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E0000022,
		})
		return errs
	}

	// column 1
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[0]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      1,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"EMAIL",
			},
		})
	} else if ok {
		m.csvSetter_Base_Email(v)
	}

	// column 2
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[1]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      2,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"ID",
			},
		})
	} else if ok {
		m.csvSetter_Base_UserId(v)
	}

	// column 3
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[2]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      3,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"DISPLAY_NAME",
			},
		})
	} else if ok {
		m.csvSetter_Base_DisplayName(v)
	}

	// column 4
	_ = src[3]

	// column 5
	if src[4] == "" {
		src[4] = "0"
	}
	if v, ok, err := strconv.FromString(protoreflect.Int32Kind, src[4]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      5,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"AGE",
			},
		})
	} else if ok {
		m.csvSetter_Base_Age(v)
	}

	// column 6
	if v, ok, err := strconv.FromString(protoreflect.DoubleKind, src[5]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      6,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"",
			},
		})
	} else if ok {
		m.csvSetter_Base_Weight(v)
	}

	// column 7
	if src[6] == "" {
		src[6] = "default001,default002"
	}
	if v, ok, err := strconv.FromCSV(protoreflect.StringKind, src[6]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      7,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"",
			},
		})
	} else if ok {
		m.csvSetter_Base_Tags(v)
	}

	// column 8
	if src[7] == "" {
		src[7] = "1"
	}
	if v, ok, err := strconv.FromString(protoreflect.BoolKind, src[7]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      8,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"SINGLE_SIGN_ON",
			},
		})
	} else if ok {
		m.csvSetter_Base_EnableSingleSignOn(v)
	}

	// column 9
	if v, ok, err := strconv.FromString(protoreflect.StringKind, src[8]); err != nil {
		errs = multierror.Append(errs, &csv.Error{
			Column:      9,
			Causes:      []error{err},
			ErrorLevel:  protobuf.ErrorLevel_ERROR,
			MessageName: constants.MessageName_E1000002,
			MessageArgs: []any{
				"",
			},
		})
	} else if ok {
		m.csvSetter_ErrorContent(v)
	}

	return errs
}

func (m *SampleRecordWithError) csvGetter_Base_Email() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero string
		return zero
	}
	return m.Base.Email
}

func (m *SampleRecordWithError) csvSetter_Base_Email(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.Email, _ = v.(string)
}

func (m *SampleRecordWithError) csvGetter_Base_UserId() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero string
		return zero
	}
	return m.Base.UserId
}

func (m *SampleRecordWithError) csvSetter_Base_UserId(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.UserId, _ = v.(string)
}

func (m *SampleRecordWithError) csvGetter_Base_DisplayName() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero string
		return zero
	}
	return m.Base.DisplayName
}

func (m *SampleRecordWithError) csvSetter_Base_DisplayName(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.DisplayName, _ = v.(string)
}

func (m *SampleRecordWithError) csvGetter_Base_Age() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero int32
		return zero
	}
	return m.Base.Age
}

func (m *SampleRecordWithError) csvSetter_Base_Age(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.Age, _ = v.(int32)
}

func (m *SampleRecordWithError) csvGetter_Base_Weight() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero float64
		return zero
	}
	return m.Base.Weight
}

func (m *SampleRecordWithError) csvSetter_Base_Weight(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.Weight, _ = v.(float64)
}

func (m *SampleRecordWithError) csvGetter_Base_Tags() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero []string
		return zero
	}
	return m.Base.Tags
}

func (m *SampleRecordWithError) csvSetter_Base_Tags(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.Tags, _ = v.([]string)
}

func (m *SampleRecordWithError) csvGetter_Base_EnableSingleSignOn() any {
	// check nested message
	if m.Base == nil {
		// zero value
		var zero bool
		return zero
	}
	return m.Base.EnableSingleSignOn
}

func (m *SampleRecordWithError) csvSetter_Base_EnableSingleSignOn(v any) {
	// check nested message
	if m.Base == nil {
		m.Base = &SampleRecord{}
	}
	m.Base.EnableSingleSignOn, _ = v.(bool)
}

func (m *SampleRecordWithError) csvGetter_ErrorContent() any {
	return m.ErrorContent
}

func (m *SampleRecordWithError) csvSetter_ErrorContent(v any) {
	m.ErrorContent, _ = v.(string)
}

func (m *SampleRecordWithError) GetBase_EmailField(fields []string) string {
	return fields[0]
}

func (m *SampleRecordWithError) GetBase_UserIdField(fields []string) string {
	return fields[1]
}

func (m *SampleRecordWithError) GetBase_DisplayNameField(fields []string) string {
	return fields[2]
}

func (m *SampleRecordWithError) GetBase_AgeField(fields []string) string {
	return fields[4]
}

func (m *SampleRecordWithError) GetBase_WeightField(fields []string) string {
	return fields[5]
}

func (m *SampleRecordWithError) GetBase_TagsField(fields []string) string {
	return fields[6]
}

func (m *SampleRecordWithError) GetBase_EnableSingleSignOnField(fields []string) string {
	return fields[7]
}

func (m *SampleRecordWithError) GetErrorContentField(fields []string) string {
	return fields[8]
}
