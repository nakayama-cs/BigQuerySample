// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: testdata.proto

package testdata

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SimpleVisibilityTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SimpleVisibilityTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimpleVisibilityTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SimpleVisibilityTypesMultiError, or nil if none found.
func (m *SimpleVisibilityTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *SimpleVisibilityTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Private1

	// no validation rules for Private2

	// no validation rules for Granted

	// no validation rules for Public

	// no validation rules for SimpleVisibilityTypesId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SimpleVisibilityTypesMultiError(errors)
	}

	return nil
}

// SimpleVisibilityTypesMultiError is an error wrapping multiple validation
// errors returned by SimpleVisibilityTypes.ValidateAll() if the designated
// constraints aren't met.
type SimpleVisibilityTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimpleVisibilityTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimpleVisibilityTypesMultiError) AllErrors() []error { return m }

// SimpleVisibilityTypesValidationError is the validation error returned by
// SimpleVisibilityTypes.Validate if the designated constraints aren't met.
type SimpleVisibilityTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimpleVisibilityTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimpleVisibilityTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimpleVisibilityTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimpleVisibilityTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimpleVisibilityTypesValidationError) ErrorName() string {
	return "SimpleVisibilityTypesValidationError"
}

// Error satisfies the builtin error interface
func (e SimpleVisibilityTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimpleVisibilityTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimpleVisibilityTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimpleVisibilityTypesValidationError{}

// Validate checks the field values on NestedMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NestedMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NestedMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NestedMessageMultiError, or
// nil if none found.
func (m *NestedMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *NestedMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPrivateMessage1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "PrivateMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "PrivateMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateMessage1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedMessageValidationError{
				field:  "PrivateMessage1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateMessage2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "PrivateMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "PrivateMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateMessage2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedMessageValidationError{
				field:  "PrivateMessage2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "GrantedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "GrantedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedMessageValidationError{
				field:  "GrantedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "PublicMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "PublicMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedMessageValidationError{
				field:  "PublicMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NestedMessageId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedMessageValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedMessageValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NestedMessageMultiError(errors)
	}

	return nil
}

// NestedMessageMultiError is an error wrapping multiple validation errors
// returned by NestedMessage.ValidateAll() if the designated constraints
// aren't met.
type NestedMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NestedMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NestedMessageMultiError) AllErrors() []error { return m }

// NestedMessageValidationError is the validation error returned by
// NestedMessage.Validate if the designated constraints aren't met.
type NestedMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NestedMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NestedMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NestedMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NestedMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NestedMessageValidationError) ErrorName() string { return "NestedMessageValidationError" }

// Error satisfies the builtin error interface
func (e NestedMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNestedMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NestedMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NestedMessageValidationError{}

// Validate checks the field values on EmptyMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyMessageMultiError, or
// nil if none found.
func (m *EmptyMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMessageMultiError(errors)
	}

	return nil
}

// EmptyMessageMultiError is an error wrapping multiple validation errors
// returned by EmptyMessage.ValidateAll() if the designated constraints aren't met.
type EmptyMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMessageMultiError) AllErrors() []error { return m }

// EmptyMessageValidationError is the validation error returned by
// EmptyMessage.Validate if the designated constraints aren't met.
type EmptyMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyMessageValidationError) ErrorName() string { return "EmptyMessageValidationError" }

// Error satisfies the builtin error interface
func (e EmptyMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyMessageValidationError{}

// Validate checks the field values on NestedVisibilityTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NestedVisibilityTypes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NestedVisibilityTypes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NestedVisibilityTypesMultiError, or nil if none found.
func (m *NestedVisibilityTypes) ValidateAll() error {
	return m.validate(true)
}

func (m *NestedVisibilityTypes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Private1

	// no validation rules for Private2

	// no validation rules for Granted

	// no validation rules for Public

	if all {
		switch v := interface{}(m.GetPrivateMessage1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateMessage1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PrivateMessage1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateMessage2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateMessage2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PrivateMessage2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "GrantedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "GrantedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "GrantedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PublicMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PublicMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PublicMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateNestedMessage1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateNestedMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateNestedMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateNestedMessage1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PrivateNestedMessage1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateNestedMessage2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateNestedMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateNestedMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateNestedMessage2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PrivateNestedMessage2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedNestedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "GrantedNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "GrantedNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedNestedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "GrantedNestedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicNestedMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PublicNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PublicNestedMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicNestedMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PublicNestedMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateEmptyMessage1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateEmptyMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateEmptyMessage1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateEmptyMessage1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PrivateEmptyMessage1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPrivateEmptyMessage2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateEmptyMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PrivateEmptyMessage2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPrivateEmptyMessage2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PrivateEmptyMessage2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrantedEmptyMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "GrantedEmptyMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "GrantedEmptyMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedEmptyMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "GrantedEmptyMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPublicEmptyMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PublicEmptyMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "PublicEmptyMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublicEmptyMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "PublicEmptyMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NestedVisibilityTypesId

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetSharedProperties()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NestedVisibilityTypesValidationError{
					field:  "SharedProperties",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharedProperties()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NestedVisibilityTypesValidationError{
				field:  "SharedProperties",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.TestOneof.(type) {

	case *NestedVisibilityTypes_Message1:

		if all {
			switch v := interface{}(m.GetMessage1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NestedVisibilityTypesValidationError{
						field:  "Message1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NestedVisibilityTypesValidationError{
						field:  "Message1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NestedVisibilityTypesValidationError{
					field:  "Message1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NestedVisibilityTypes_Message2:

		if all {
			switch v := interface{}(m.GetMessage2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NestedVisibilityTypesValidationError{
						field:  "Message2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NestedVisibilityTypesValidationError{
						field:  "Message2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NestedVisibilityTypesValidationError{
					field:  "Message2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NestedVisibilityTypes_Message3:

		if all {
			switch v := interface{}(m.GetMessage3()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NestedVisibilityTypesValidationError{
						field:  "Message3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NestedVisibilityTypesValidationError{
						field:  "Message3",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NestedVisibilityTypesValidationError{
					field:  "Message3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NestedVisibilityTypesMultiError(errors)
	}

	return nil
}

// NestedVisibilityTypesMultiError is an error wrapping multiple validation
// errors returned by NestedVisibilityTypes.ValidateAll() if the designated
// constraints aren't met.
type NestedVisibilityTypesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NestedVisibilityTypesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NestedVisibilityTypesMultiError) AllErrors() []error { return m }

// NestedVisibilityTypesValidationError is the validation error returned by
// NestedVisibilityTypes.Validate if the designated constraints aren't met.
type NestedVisibilityTypesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NestedVisibilityTypesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NestedVisibilityTypesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NestedVisibilityTypesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NestedVisibilityTypesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NestedVisibilityTypesValidationError) ErrorName() string {
	return "NestedVisibilityTypesValidationError"
}

// Error satisfies the builtin error interface
func (e NestedVisibilityTypesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNestedVisibilityTypes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NestedVisibilityTypesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NestedVisibilityTypesValidationError{}
