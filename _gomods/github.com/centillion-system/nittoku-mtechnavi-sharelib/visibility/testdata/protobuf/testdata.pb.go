// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: testdata.proto

package testdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	protobuf "mtechnavi/sharelib/protobuf"
	_ "mtechnavi/sharelib/protobuf/mtn"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleVisibilityTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private1                string `protobuf:"bytes,1,opt,name=private1,proto3" json:"private1,omitempty"`
	Private2                string `protobuf:"bytes,2,opt,name=private2,proto3" json:"private2,omitempty"`
	Granted                 string `protobuf:"bytes,3,opt,name=granted,proto3" json:"granted,omitempty"`
	Public                  string `protobuf:"bytes,4,opt,name=public,proto3" json:"public,omitempty"`
	SimpleVisibilityTypesId string `protobuf:"bytes,100,opt,name=simple_visibility_types_id,json=simpleVisibilityTypesId,proto3" json:"simple_visibility_types_id,omitempty"`
	DeletedAt               int64  `protobuf:"varint,101,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt               int64  `protobuf:"varint,102,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               int64  `protobuf:"varint,103,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SimpleVisibilityTypes) Reset() {
	*x = SimpleVisibilityTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleVisibilityTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleVisibilityTypes) ProtoMessage() {}

func (x *SimpleVisibilityTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleVisibilityTypes.ProtoReflect.Descriptor instead.
func (*SimpleVisibilityTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleVisibilityTypes) GetPrivate1() string {
	if x != nil {
		return x.Private1
	}
	return ""
}

func (x *SimpleVisibilityTypes) GetPrivate2() string {
	if x != nil {
		return x.Private2
	}
	return ""
}

func (x *SimpleVisibilityTypes) GetGranted() string {
	if x != nil {
		return x.Granted
	}
	return ""
}

func (x *SimpleVisibilityTypes) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *SimpleVisibilityTypes) GetSimpleVisibilityTypesId() string {
	if x != nil {
		return x.SimpleVisibilityTypesId
	}
	return ""
}

func (x *SimpleVisibilityTypes) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *SimpleVisibilityTypes) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SimpleVisibilityTypes) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateMessage1  *SimpleVisibilityTypes             `protobuf:"bytes,1,opt,name=private_message1,json=privateMessage1,proto3" json:"private_message1,omitempty"`
	PrivateMessage2  *SimpleVisibilityTypes             `protobuf:"bytes,3,opt,name=private_message2,json=privateMessage2,proto3" json:"private_message2,omitempty"`
	GrantedMessage   *SimpleVisibilityTypes             `protobuf:"bytes,5,opt,name=granted_message,json=grantedMessage,proto3" json:"granted_message,omitempty"`
	PublicMessage    *SimpleVisibilityTypes             `protobuf:"bytes,7,opt,name=public_message,json=publicMessage,proto3" json:"public_message,omitempty"`
	NestedMessageId  string                             `protobuf:"bytes,100,opt,name=nested_message_id,json=nestedMessageId,proto3" json:"nested_message_id,omitempty"`
	DeletedAt        int64                              `protobuf:"varint,101,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt        int64                              `protobuf:"varint,102,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        int64                              `protobuf:"varint,103,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SharedProperties *protobuf.EmbeddedSharedProperties `protobuf:"bytes,104,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
}

func (x *NestedMessage) Reset() {
	*x = NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage) ProtoMessage() {}

func (x *NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessage.ProtoReflect.Descriptor instead.
func (*NestedMessage) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{1}
}

func (x *NestedMessage) GetPrivateMessage1() *SimpleVisibilityTypes {
	if x != nil {
		return x.PrivateMessage1
	}
	return nil
}

func (x *NestedMessage) GetPrivateMessage2() *SimpleVisibilityTypes {
	if x != nil {
		return x.PrivateMessage2
	}
	return nil
}

func (x *NestedMessage) GetGrantedMessage() *SimpleVisibilityTypes {
	if x != nil {
		return x.GrantedMessage
	}
	return nil
}

func (x *NestedMessage) GetPublicMessage() *SimpleVisibilityTypes {
	if x != nil {
		return x.PublicMessage
	}
	return nil
}

func (x *NestedMessage) GetNestedMessageId() string {
	if x != nil {
		return x.NestedMessageId
	}
	return ""
}

func (x *NestedMessage) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *NestedMessage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NestedMessage) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NestedMessage) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{2}
}

type NestedVisibilityTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private1        string                 `protobuf:"bytes,1,opt,name=private1,proto3" json:"private1,omitempty"`
	Private2        string                 `protobuf:"bytes,3,opt,name=private2,proto3" json:"private2,omitempty"`
	Granted         string                 `protobuf:"bytes,5,opt,name=granted,proto3" json:"granted,omitempty"`
	Public          string                 `protobuf:"bytes,7,opt,name=public,proto3" json:"public,omitempty"`
	PrivateMessage1 *SimpleVisibilityTypes `protobuf:"bytes,9,opt,name=private_message1,json=privateMessage1,proto3" json:"private_message1,omitempty"`
	PrivateMessage2 *SimpleVisibilityTypes `protobuf:"bytes,11,opt,name=private_message2,json=privateMessage2,proto3" json:"private_message2,omitempty"`
	GrantedMessage  *SimpleVisibilityTypes `protobuf:"bytes,13,opt,name=granted_message,json=grantedMessage,proto3" json:"granted_message,omitempty"`
	PublicMessage   *SimpleVisibilityTypes `protobuf:"bytes,15,opt,name=public_message,json=publicMessage,proto3" json:"public_message,omitempty"`
	// Types that are assignable to TestOneof:
	//
	//	*NestedVisibilityTypes_Message1
	//	*NestedVisibilityTypes_Message2
	//	*NestedVisibilityTypes_Message3
	TestOneof               isNestedVisibilityTypes_TestOneof  `protobuf_oneof:"test_oneof"`
	PrivateNestedMessage1   *NestedMessage                     `protobuf:"bytes,23,opt,name=private_nested_message1,json=privateNestedMessage1,proto3" json:"private_nested_message1,omitempty"`
	PrivateNestedMessage2   *NestedMessage                     `protobuf:"bytes,25,opt,name=private_nested_message2,json=privateNestedMessage2,proto3" json:"private_nested_message2,omitempty"`
	GrantedNestedMessage    *NestedMessage                     `protobuf:"bytes,27,opt,name=granted_nested_message,json=grantedNestedMessage,proto3" json:"granted_nested_message,omitempty"`
	PublicNestedMessage     *NestedMessage                     `protobuf:"bytes,29,opt,name=public_nested_message,json=publicNestedMessage,proto3" json:"public_nested_message,omitempty"`
	PrivateEmptyMessage1    *EmptyMessage                      `protobuf:"bytes,31,opt,name=private_empty_message1,json=privateEmptyMessage1,proto3" json:"private_empty_message1,omitempty"`
	PrivateEmptyMessage2    *EmptyMessage                      `protobuf:"bytes,33,opt,name=private_empty_message2,json=privateEmptyMessage2,proto3" json:"private_empty_message2,omitempty"`
	GrantedEmptyMessage     *EmptyMessage                      `protobuf:"bytes,35,opt,name=granted_empty_message,json=grantedEmptyMessage,proto3" json:"granted_empty_message,omitempty"`
	PublicEmptyMessage      *EmptyMessage                      `protobuf:"bytes,37,opt,name=public_empty_message,json=publicEmptyMessage,proto3" json:"public_empty_message,omitempty"`
	NestedVisibilityTypesId string                             `protobuf:"bytes,100,opt,name=nested_visibility_types_id,json=nestedVisibilityTypesId,proto3" json:"nested_visibility_types_id,omitempty"`
	DeletedAt               int64                              `protobuf:"varint,101,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	CreatedAt               int64                              `protobuf:"varint,102,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               int64                              `protobuf:"varint,103,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SharedProperties        *protobuf.EmbeddedSharedProperties `protobuf:"bytes,104,opt,name=shared_properties,json=sharedProperties,proto3" json:"shared_properties,omitempty"`
}

func (x *NestedVisibilityTypes) Reset() {
	*x = NestedVisibilityTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_testdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedVisibilityTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedVisibilityTypes) ProtoMessage() {}

func (x *NestedVisibilityTypes) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedVisibilityTypes.ProtoReflect.Descriptor instead.
func (*NestedVisibilityTypes) Descriptor() ([]byte, []int) {
	return file_testdata_proto_rawDescGZIP(), []int{3}
}

func (x *NestedVisibilityTypes) GetPrivate1() string {
	if x != nil {
		return x.Private1
	}
	return ""
}

func (x *NestedVisibilityTypes) GetPrivate2() string {
	if x != nil {
		return x.Private2
	}
	return ""
}

func (x *NestedVisibilityTypes) GetGranted() string {
	if x != nil {
		return x.Granted
	}
	return ""
}

func (x *NestedVisibilityTypes) GetPublic() string {
	if x != nil {
		return x.Public
	}
	return ""
}

func (x *NestedVisibilityTypes) GetPrivateMessage1() *SimpleVisibilityTypes {
	if x != nil {
		return x.PrivateMessage1
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPrivateMessage2() *SimpleVisibilityTypes {
	if x != nil {
		return x.PrivateMessage2
	}
	return nil
}

func (x *NestedVisibilityTypes) GetGrantedMessage() *SimpleVisibilityTypes {
	if x != nil {
		return x.GrantedMessage
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPublicMessage() *SimpleVisibilityTypes {
	if x != nil {
		return x.PublicMessage
	}
	return nil
}

func (m *NestedVisibilityTypes) GetTestOneof() isNestedVisibilityTypes_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (x *NestedVisibilityTypes) GetMessage1() *SimpleVisibilityTypes {
	if x, ok := x.GetTestOneof().(*NestedVisibilityTypes_Message1); ok {
		return x.Message1
	}
	return nil
}

func (x *NestedVisibilityTypes) GetMessage2() *SimpleVisibilityTypes {
	if x, ok := x.GetTestOneof().(*NestedVisibilityTypes_Message2); ok {
		return x.Message2
	}
	return nil
}

func (x *NestedVisibilityTypes) GetMessage3() *SimpleVisibilityTypes {
	if x, ok := x.GetTestOneof().(*NestedVisibilityTypes_Message3); ok {
		return x.Message3
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPrivateNestedMessage1() *NestedMessage {
	if x != nil {
		return x.PrivateNestedMessage1
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPrivateNestedMessage2() *NestedMessage {
	if x != nil {
		return x.PrivateNestedMessage2
	}
	return nil
}

func (x *NestedVisibilityTypes) GetGrantedNestedMessage() *NestedMessage {
	if x != nil {
		return x.GrantedNestedMessage
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPublicNestedMessage() *NestedMessage {
	if x != nil {
		return x.PublicNestedMessage
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPrivateEmptyMessage1() *EmptyMessage {
	if x != nil {
		return x.PrivateEmptyMessage1
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPrivateEmptyMessage2() *EmptyMessage {
	if x != nil {
		return x.PrivateEmptyMessage2
	}
	return nil
}

func (x *NestedVisibilityTypes) GetGrantedEmptyMessage() *EmptyMessage {
	if x != nil {
		return x.GrantedEmptyMessage
	}
	return nil
}

func (x *NestedVisibilityTypes) GetPublicEmptyMessage() *EmptyMessage {
	if x != nil {
		return x.PublicEmptyMessage
	}
	return nil
}

func (x *NestedVisibilityTypes) GetNestedVisibilityTypesId() string {
	if x != nil {
		return x.NestedVisibilityTypesId
	}
	return ""
}

func (x *NestedVisibilityTypes) GetDeletedAt() int64 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *NestedVisibilityTypes) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NestedVisibilityTypes) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *NestedVisibilityTypes) GetSharedProperties() *protobuf.EmbeddedSharedProperties {
	if x != nil {
		return x.SharedProperties
	}
	return nil
}

type isNestedVisibilityTypes_TestOneof interface {
	isNestedVisibilityTypes_TestOneof()
}

type NestedVisibilityTypes_Message1 struct {
	Message1 *SimpleVisibilityTypes `protobuf:"bytes,17,opt,name=message1,proto3,oneof"`
}

type NestedVisibilityTypes_Message2 struct {
	Message2 *SimpleVisibilityTypes `protobuf:"bytes,19,opt,name=message2,proto3,oneof"`
}

type NestedVisibilityTypes_Message3 struct {
	Message3 *SimpleVisibilityTypes `protobuf:"bytes,21,opt,name=message3,proto3,oneof"`
}

func (*NestedVisibilityTypes_Message1) isNestedVisibilityTypes_TestOneof() {}

func (*NestedVisibilityTypes_Message2) isNestedVisibilityTypes_TestOneof() {}

func (*NestedVisibilityTypes_Message3) isNestedVisibilityTypes_TestOneof() {}

var File_testdata_proto protoreflect.FileDescriptor

var file_testdata_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x14, 0x6d, 0x74, 0x6e, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc2,
	0xb8, 0x02, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x32, 0x12, 0x20, 0x0a,
	0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x3b, 0x0a, 0x1a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfd, 0x04, 0x0a, 0x0d, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76,
	0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x65, 0x0a, 0x10,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x04, 0xc2, 0xb8,
	0x02, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0x65, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfa, 0x0e, 0x0a, 0x15, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x31, 0x12,
	0x20, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x32, 0x12, 0x20, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x01, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x5f, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x12, 0x65, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x65, 0x0a, 0x0f, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x04, 0xc2, 0xb8, 0x02, 0x00, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x12, 0x5a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x5a, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x48, 0x00, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x64, 0x0a, 0x17, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65,
	0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12,
	0x6a, 0x0a, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x04,
	0xc2, 0xb8, 0x02, 0x00, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x6a, 0x0a, 0x16, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x14, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x13, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x61, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x12, 0x67, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x04, 0xc2, 0xb8, 0x02, 0x00, 0x52, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x67, 0x0a,
	0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69, 0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08,
	0x01, 0x52, 0x13, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61, 0x76, 0x69,
	0x2e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x06, 0xc2, 0xb8, 0x02, 0x02, 0x08, 0x02, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x1f, 0x5a, 0x1d, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x61, 0x76, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_testdata_proto_rawDescOnce sync.Once
	file_testdata_proto_rawDescData = file_testdata_proto_rawDesc
)

func file_testdata_proto_rawDescGZIP() []byte {
	file_testdata_proto_rawDescOnce.Do(func() {
		file_testdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_testdata_proto_rawDescData)
	})
	return file_testdata_proto_rawDescData
}

var file_testdata_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_testdata_proto_goTypes = []interface{}{
	(*SimpleVisibilityTypes)(nil),             // 0: mtechnavi.visibility.testdata.SimpleVisibilityTypes
	(*NestedMessage)(nil),                     // 1: mtechnavi.visibility.testdata.NestedMessage
	(*EmptyMessage)(nil),                      // 2: mtechnavi.visibility.testdata.EmptyMessage
	(*NestedVisibilityTypes)(nil),             // 3: mtechnavi.visibility.testdata.NestedVisibilityTypes
	(*protobuf.EmbeddedSharedProperties)(nil), // 4: sharelib.EmbeddedSharedProperties
}
var file_testdata_proto_depIdxs = []int32{
	0,  // 0: mtechnavi.visibility.testdata.NestedMessage.private_message1:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 1: mtechnavi.visibility.testdata.NestedMessage.private_message2:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 2: mtechnavi.visibility.testdata.NestedMessage.granted_message:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 3: mtechnavi.visibility.testdata.NestedMessage.public_message:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	4,  // 4: mtechnavi.visibility.testdata.NestedMessage.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	0,  // 5: mtechnavi.visibility.testdata.NestedVisibilityTypes.private_message1:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 6: mtechnavi.visibility.testdata.NestedVisibilityTypes.private_message2:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 7: mtechnavi.visibility.testdata.NestedVisibilityTypes.granted_message:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 8: mtechnavi.visibility.testdata.NestedVisibilityTypes.public_message:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 9: mtechnavi.visibility.testdata.NestedVisibilityTypes.message1:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 10: mtechnavi.visibility.testdata.NestedVisibilityTypes.message2:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	0,  // 11: mtechnavi.visibility.testdata.NestedVisibilityTypes.message3:type_name -> mtechnavi.visibility.testdata.SimpleVisibilityTypes
	1,  // 12: mtechnavi.visibility.testdata.NestedVisibilityTypes.private_nested_message1:type_name -> mtechnavi.visibility.testdata.NestedMessage
	1,  // 13: mtechnavi.visibility.testdata.NestedVisibilityTypes.private_nested_message2:type_name -> mtechnavi.visibility.testdata.NestedMessage
	1,  // 14: mtechnavi.visibility.testdata.NestedVisibilityTypes.granted_nested_message:type_name -> mtechnavi.visibility.testdata.NestedMessage
	1,  // 15: mtechnavi.visibility.testdata.NestedVisibilityTypes.public_nested_message:type_name -> mtechnavi.visibility.testdata.NestedMessage
	2,  // 16: mtechnavi.visibility.testdata.NestedVisibilityTypes.private_empty_message1:type_name -> mtechnavi.visibility.testdata.EmptyMessage
	2,  // 17: mtechnavi.visibility.testdata.NestedVisibilityTypes.private_empty_message2:type_name -> mtechnavi.visibility.testdata.EmptyMessage
	2,  // 18: mtechnavi.visibility.testdata.NestedVisibilityTypes.granted_empty_message:type_name -> mtechnavi.visibility.testdata.EmptyMessage
	2,  // 19: mtechnavi.visibility.testdata.NestedVisibilityTypes.public_empty_message:type_name -> mtechnavi.visibility.testdata.EmptyMessage
	4,  // 20: mtechnavi.visibility.testdata.NestedVisibilityTypes.shared_properties:type_name -> sharelib.EmbeddedSharedProperties
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_testdata_proto_init() }
func file_testdata_proto_init() {
	if File_testdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_testdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleVisibilityTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_testdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedVisibilityTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_testdata_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*NestedVisibilityTypes_Message1)(nil),
		(*NestedVisibilityTypes_Message2)(nil),
		(*NestedVisibilityTypes_Message3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_testdata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testdata_proto_goTypes,
		DependencyIndexes: file_testdata_proto_depIdxs,
		MessageInfos:      file_testdata_proto_msgTypes,
	}.Build()
	File_testdata_proto = out.File
	file_testdata_proto_rawDesc = nil
	file_testdata_proto_goTypes = nil
	file_testdata_proto_depIdxs = nil
}
