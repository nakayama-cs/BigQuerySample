package main

import (
	"encoding/csv"
	"errors"
	"flag"
	"fmt"
	"io"
	"os"
	"strings"
)

type record struct {
	MessageName string

	MessageType string

	MessageText string
}

func main() {
	var (
		outFile string
	)
	flag.StringVar(&outFile, "o", "-", "")
	flag.Parse()

	rc, err := os.Open(flag.Arg(0))
	if err != nil {
		panic(err)
	}
	defer rc.Close()

	reader := csv.NewReader(rc)
	reader.Comma = '\t'
	reader.FieldsPerRecord = -1
	// skip header
	if _, err := reader.Read(); err != nil {
		panic(err)
	}
	var l []*record
	for {
		v, err := reader.Read()
		if errors.Is(err, io.EOF) {
			break
		} else if err != nil {
			panic(err)
		} else if len(v) < 1 {
			// empty line
			continue
		}

		var messageName string
		var messageType string
		var messageText string
		switch {
		case len(v) >= 3:
			messageText = v[2]
			fallthrough
		case len(v) >= 2:
			messageType = v[1]
			fallthrough
		case len(v) >= 1:
			messageName = v[0]

		}

		val := &record{
			MessageName: messageName,
			MessageType: messageType,
			MessageText: strings.Replace(messageText, "\n", "\\n ", -1),
		}

		// メッセージ種別が空はスキップ
		if val.MessageType == "" {
			continue
		}

		l = append(l, val)
	}

	var w io.Writer
	if outFile == "-" {
		w = os.Stdout
	} else {
		wc, err := os.Create(outFile)
		if err != nil {
			panic(err)
		}
		defer wc.Close()
		w = wc
	}

	p := func(format string, args ...any) {
		fmt.Fprintf(w, format, args...)
	}
	p("// Code generated by generate-message-constants. DO NOT EDIT.\n\n")
	p("package constants\n")

	// const (
	// 	MessageName_E001 MessageName = ""
	// )

	func() {
		memo := map[string]struct{}{}
		p("const (\n")
		for _, v := range l {
			if _, dup := memo[v.MessageName]; dup {
				continue
			}
			p("  MessageName_%s MessageName = %q // [%s]%s\n", v.MessageName, v.MessageName, v.MessageType, v.MessageText)
			memo[v.MessageName] = struct{}{}
		}
		p(")\n")
	}()
	p("\n")
}
