package main

import (
	"encoding/csv"
	"errors"
	"flag"
	"fmt"
	"io"
	"os"
)

type record struct {
	CategoryName string

	CategoryMemo string

	SystemName string

	SystemMemo string
}

func main() {
	var (
		outFile string
	)
	flag.StringVar(&outFile, "o", "-", "")
	flag.Parse()

	rc, err := os.Open(flag.Arg(0))
	if err != nil {
		panic(err)
	}
	defer rc.Close()

	reader := csv.NewReader(rc)
	reader.Comma = '\t'
	reader.FieldsPerRecord = -1
	// skip header
	if _, err := reader.Read(); err != nil {
		panic(err)
	}
	var l []*record
	for {
		v, err := reader.Read()
		if errors.Is(err, io.EOF) {
			break
		} else if err != nil {
			panic(err)
		} else if len(v) < 3 { // 名称が空白になるケースがあるため3まで許容する
			// empty line
			continue
		}

		// 空白対策
		if v[2] == "" {
			continue
		}

		// 足りない場合は空白
		systemMemo := ""
		if 4 <= len(v) {
			systemMemo = v[3]
		}

		l = append(l, &record{
			CategoryName: v[0],
			CategoryMemo: v[1],
			SystemName:   v[2],
			SystemMemo:   systemMemo,
		})
	}

	var w io.Writer
	if outFile == "-" {
		w = os.Stdout
	} else {
		wc, err := os.Create(outFile)
		if err != nil {
			panic(err)
		}
		defer wc.Close()
		w = wc
	}

	p := func(format string, args ...any) {
		fmt.Fprintf(w, format, args...)
	}
	p("// Code generated by generate-nameoption-constants. DO NOT EDIT.\n\n")
	p("package constants\n")
	func() {
		memo := map[string]struct{}{}
		p("const (\n")
		for _, v := range l {
			if _, dup := memo[v.CategoryName]; dup {
				continue
			}
			p("  NameOption_CategoryName_%s = %q // %s\n", v.CategoryName, v.CategoryName, v.CategoryMemo)
			memo[v.CategoryName] = struct{}{}
		}
		p(")\n")
	}()
	p("const (\n")
	for _, v := range l {
		p("  NameOption_SystemName_%s_%s = %q // %s - %s\n", v.CategoryName, v.SystemName, v.SystemName, v.CategoryMemo, v.SystemMemo)
	}
	p(")\n")
}
