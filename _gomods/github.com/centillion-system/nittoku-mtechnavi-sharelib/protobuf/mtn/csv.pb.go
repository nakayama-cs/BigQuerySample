// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0
// source: mtn/csv.proto

package mtn

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileEncoding int32

const (
	FileEncoding_UTF_8     FileEncoding = 0
	FileEncoding_SHIFT_JIS FileEncoding = 1
)

// Enum value maps for FileEncoding.
var (
	FileEncoding_name = map[int32]string{
		0: "UTF_8",
		1: "SHIFT_JIS",
	}
	FileEncoding_value = map[string]int32{
		"UTF_8":     0,
		"SHIFT_JIS": 1,
	}
)

func (x FileEncoding) Enum() *FileEncoding {
	p := new(FileEncoding)
	*p = x
	return p
}

func (x FileEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_mtn_csv_proto_enumTypes[0].Descriptor()
}

func (FileEncoding) Type() protoreflect.EnumType {
	return &file_mtn_csv_proto_enumTypes[0]
}

func (x FileEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileEncoding.Descriptor instead.
func (FileEncoding) EnumDescriptor() ([]byte, []int) {
	return file_mtn_csv_proto_rawDescGZIP(), []int{0}
}

type CsvFileOptions_CommaChar int32

const (
	CsvFileOptions_COMMA CsvFileOptions_CommaChar = 0
	CsvFileOptions_TAB   CsvFileOptions_CommaChar = 1
)

// Enum value maps for CsvFileOptions_CommaChar.
var (
	CsvFileOptions_CommaChar_name = map[int32]string{
		0: "COMMA",
		1: "TAB",
	}
	CsvFileOptions_CommaChar_value = map[string]int32{
		"COMMA": 0,
		"TAB":   1,
	}
)

func (x CsvFileOptions_CommaChar) Enum() *CsvFileOptions_CommaChar {
	p := new(CsvFileOptions_CommaChar)
	*p = x
	return p
}

func (x CsvFileOptions_CommaChar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CsvFileOptions_CommaChar) Descriptor() protoreflect.EnumDescriptor {
	return file_mtn_csv_proto_enumTypes[1].Descriptor()
}

func (CsvFileOptions_CommaChar) Type() protoreflect.EnumType {
	return &file_mtn_csv_proto_enumTypes[1]
}

func (x CsvFileOptions_CommaChar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CsvFileOptions_CommaChar.Descriptor instead.
func (CsvFileOptions_CommaChar) EnumDescriptor() ([]byte, []int) {
	return file_mtn_csv_proto_rawDescGZIP(), []int{0, 0}
}

type CsvFileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         bool                     `protobuf:"varint,1,opt,name=header,proto3" json:"header,omitempty"`
	Comma          CsvFileOptions_CommaChar `protobuf:"varint,2,opt,name=comma,proto3,enum=mtn.CsvFileOptions_CommaChar" json:"comma,omitempty"`
	Encoding       FileEncoding             `protobuf:"varint,3,opt,name=encoding,proto3,enum=mtn.FileEncoding" json:"encoding,omitempty"`
	QuoteMinimally bool                     `protobuf:"varint,4,opt,name=quote_minimally,json=quoteMinimally,proto3" json:"quote_minimally,omitempty"`
}

func (x *CsvFileOptions) Reset() {
	*x = CsvFileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtn_csv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvFileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvFileOptions) ProtoMessage() {}

func (x *CsvFileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mtn_csv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvFileOptions.ProtoReflect.Descriptor instead.
func (*CsvFileOptions) Descriptor() ([]byte, []int) {
	return file_mtn_csv_proto_rawDescGZIP(), []int{0}
}

func (x *CsvFileOptions) GetHeader() bool {
	if x != nil {
		return x.Header
	}
	return false
}

func (x *CsvFileOptions) GetComma() CsvFileOptions_CommaChar {
	if x != nil {
		return x.Comma
	}
	return CsvFileOptions_COMMA
}

func (x *CsvFileOptions) GetEncoding() FileEncoding {
	if x != nil {
		return x.Encoding
	}
	return FileEncoding_UTF_8
}

func (x *CsvFileOptions) GetQuoteMinimally() bool {
	if x != nil {
		return x.QuoteMinimally
	}
	return false
}

type CsvColumnOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column int32 `protobuf:"varint,1,opt,name=column,proto3" json:"column,omitempty"`
	// required ヘッダ名称
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// デフォルト値
	Default string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *CsvColumnOptions) Reset() {
	*x = CsvColumnOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mtn_csv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvColumnOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvColumnOptions) ProtoMessage() {}

func (x *CsvColumnOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mtn_csv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvColumnOptions.ProtoReflect.Descriptor instead.
func (*CsvColumnOptions) Descriptor() ([]byte, []int) {
	return file_mtn_csv_proto_rawDescGZIP(), []int{1}
}

func (x *CsvColumnOptions) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *CsvColumnOptions) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *CsvColumnOptions) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

var file_mtn_csv_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*CsvFileOptions)(nil),
		Field:         5001,
		Name:          "mtn.csv_default_format",
		Tag:           "bytes,5001,opt,name=csv_default_format",
		Filename:      "mtn/csv.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*CsvColumnOptions)(nil),
		Field:         5001,
		Name:          "mtn.csv",
		Tag:           "bytes,5001,opt,name=csv",
		Filename:      "mtn/csv.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional mtn.CsvFileOptions csv_default_format = 5001;
	E_CsvDefaultFormat = &file_mtn_csv_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional mtn.CsvColumnOptions csv = 5001;
	E_Csv = &file_mtn_csv_proto_extTypes[1]
)

var File_mtn_csv_proto protoreflect.FileDescriptor

var file_mtn_csv_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x74, 0x6e, 0x2f, 0x63, 0x73, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x6d, 0x74, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x43, 0x73, 0x76, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6d, 0x74, 0x6e, 0x2e, 0x43, 0x73, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x22, 0x1f,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x42, 0x10, 0x01, 0x22,
	0x5c, 0x0a, 0x10, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2a, 0x28, 0x0a,
	0x0c, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x54, 0x46, 0x5f, 0x38, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x48, 0x49, 0x46,
	0x54, 0x5f, 0x4a, 0x49, 0x53, 0x10, 0x01, 0x3a, 0x63, 0x0a, 0x12, 0x63, 0x73, 0x76, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x89,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x6e, 0x2e, 0x43, 0x73, 0x76, 0x46,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x63, 0x73, 0x76, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x47, 0x0a, 0x03,
	0x63, 0x73, 0x76, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x6e, 0x2e,
	0x43, 0x73, 0x76, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x03, 0x63, 0x73, 0x76, 0x42, 0x21, 0x5a, 0x1f, 0x6d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x61,
	0x76, 0x69, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x6c, 0x69, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x74, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mtn_csv_proto_rawDescOnce sync.Once
	file_mtn_csv_proto_rawDescData = file_mtn_csv_proto_rawDesc
)

func file_mtn_csv_proto_rawDescGZIP() []byte {
	file_mtn_csv_proto_rawDescOnce.Do(func() {
		file_mtn_csv_proto_rawDescData = protoimpl.X.CompressGZIP(file_mtn_csv_proto_rawDescData)
	})
	return file_mtn_csv_proto_rawDescData
}

var file_mtn_csv_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mtn_csv_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mtn_csv_proto_goTypes = []interface{}{
	(FileEncoding)(0),                   // 0: mtn.FileEncoding
	(CsvFileOptions_CommaChar)(0),       // 1: mtn.CsvFileOptions.CommaChar
	(*CsvFileOptions)(nil),              // 2: mtn.CsvFileOptions
	(*CsvColumnOptions)(nil),            // 3: mtn.CsvColumnOptions
	(*descriptorpb.MessageOptions)(nil), // 4: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),   // 5: google.protobuf.FieldOptions
}
var file_mtn_csv_proto_depIdxs = []int32{
	1, // 0: mtn.CsvFileOptions.comma:type_name -> mtn.CsvFileOptions.CommaChar
	0, // 1: mtn.CsvFileOptions.encoding:type_name -> mtn.FileEncoding
	4, // 2: mtn.csv_default_format:extendee -> google.protobuf.MessageOptions
	5, // 3: mtn.csv:extendee -> google.protobuf.FieldOptions
	2, // 4: mtn.csv_default_format:type_name -> mtn.CsvFileOptions
	3, // 5: mtn.csv:type_name -> mtn.CsvColumnOptions
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	4, // [4:6] is the sub-list for extension type_name
	2, // [2:4] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_mtn_csv_proto_init() }
func file_mtn_csv_proto_init() {
	if File_mtn_csv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mtn_csv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvFileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mtn_csv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvColumnOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mtn_csv_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_mtn_csv_proto_goTypes,
		DependencyIndexes: file_mtn_csv_proto_depIdxs,
		EnumInfos:         file_mtn_csv_proto_enumTypes,
		MessageInfos:      file_mtn_csv_proto_msgTypes,
		ExtensionInfos:    file_mtn_csv_proto_extTypes,
	}.Build()
	File_mtn_csv_proto = out.File
	file_mtn_csv_proto_rawDesc = nil
	file_mtn_csv_proto_goTypes = nil
	file_mtn_csv_proto_depIdxs = nil
}
