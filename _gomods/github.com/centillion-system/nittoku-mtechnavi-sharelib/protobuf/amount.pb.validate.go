// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: amount.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MonetaryAmount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MonetaryAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonetaryAmount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MonetaryAmountMultiError,
// or nil if none found.
func (m *MonetaryAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *MonetaryAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CurrencyCode

	// no validation rules for IntegralAmount

	// no validation rules for FractionalAmount

	if len(errors) > 0 {
		return MonetaryAmountMultiError(errors)
	}

	return nil
}

// MonetaryAmountMultiError is an error wrapping multiple validation errors
// returned by MonetaryAmount.ValidateAll() if the designated constraints
// aren't met.
type MonetaryAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonetaryAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonetaryAmountMultiError) AllErrors() []error { return m }

// MonetaryAmountValidationError is the validation error returned by
// MonetaryAmount.Validate if the designated constraints aren't met.
type MonetaryAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonetaryAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonetaryAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonetaryAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonetaryAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonetaryAmountValidationError) ErrorName() string { return "MonetaryAmountValidationError" }

// Error satisfies the builtin error interface
func (e MonetaryAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonetaryAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonetaryAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonetaryAmountValidationError{}

// Validate checks the field values on DistantAmount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DistantAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DistantAmount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DistantAmountMultiError, or
// nil if none found.
func (m *DistantAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *DistantAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unit

	// no validation rules for IntegralAmount

	// no validation rules for FractionalAmount

	if len(errors) > 0 {
		return DistantAmountMultiError(errors)
	}

	return nil
}

// DistantAmountMultiError is an error wrapping multiple validation errors
// returned by DistantAmount.ValidateAll() if the designated constraints
// aren't met.
type DistantAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistantAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistantAmountMultiError) AllErrors() []error { return m }

// DistantAmountValidationError is the validation error returned by
// DistantAmount.Validate if the designated constraints aren't met.
type DistantAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistantAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistantAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistantAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistantAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistantAmountValidationError) ErrorName() string { return "DistantAmountValidationError" }

// Error satisfies the builtin error interface
func (e DistantAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistantAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistantAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistantAmountValidationError{}

// Validate checks the field values on QuantityAmount with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuantityAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuantityAmount with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuantityAmountMultiError,
// or nil if none found.
func (m *QuantityAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *QuantityAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuantityAmountValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuantityAmountValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuantityAmountValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IntegralAmount

	// no validation rules for FractionalAmount

	if len(errors) > 0 {
		return QuantityAmountMultiError(errors)
	}

	return nil
}

// QuantityAmountMultiError is an error wrapping multiple validation errors
// returned by QuantityAmount.ValidateAll() if the designated constraints
// aren't met.
type QuantityAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuantityAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuantityAmountMultiError) AllErrors() []error { return m }

// QuantityAmountValidationError is the validation error returned by
// QuantityAmount.Validate if the designated constraints aren't met.
type QuantityAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuantityAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuantityAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuantityAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuantityAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuantityAmountValidationError) ErrorName() string { return "QuantityAmountValidationError" }

// Error satisfies the builtin error interface
func (e QuantityAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuantityAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuantityAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuantityAmountValidationError{}

// Validate checks the field values on Amount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Amount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Amount with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AmountMultiError, or nil if none found.
func (m *Amount) ValidateAll() error {
	return m.validate(true)
}

func (m *Amount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IntegralAmount

	// no validation rules for FractionalAmount

	if len(errors) > 0 {
		return AmountMultiError(errors)
	}

	return nil
}

// AmountMultiError is an error wrapping multiple validation errors returned by
// Amount.ValidateAll() if the designated constraints aren't met.
type AmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AmountMultiError) AllErrors() []error { return m }

// AmountValidationError is the validation error returned by Amount.Validate if
// the designated constraints aren't met.
type AmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AmountValidationError) ErrorName() string { return "AmountValidationError" }

// Error satisfies the builtin error interface
func (e AmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AmountValidationError{}
