// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: import.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileFormat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileFormat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileFormat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileFormatMultiError, or
// nil if none found.
func (m *FileFormat) ValidateAll() error {
	return m.validate(true)
}

func (m *FileFormat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFormat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileFormatValidationError{
					field:  "Format",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileFormatValidationError{
					field:  "Format",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFormat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileFormatValidationError{
				field:  "Format",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Header

	for idx, item := range m.GetHeaderColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileFormatValidationError{
						field:  fmt.Sprintf("HeaderColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileFormatValidationError{
						field:  fmt.Sprintf("HeaderColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileFormatValidationError{
					field:  fmt.Sprintf("HeaderColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CommaName

	// no validation rules for EncodingName

	// no validation rules for QuoteMinimally

	// no validation rules for TypeName

	if len(errors) > 0 {
		return FileFormatMultiError(errors)
	}

	return nil
}

// FileFormatMultiError is an error wrapping multiple validation errors
// returned by FileFormat.ValidateAll() if the designated constraints aren't met.
type FileFormatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileFormatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileFormatMultiError) AllErrors() []error { return m }

// FileFormatValidationError is the validation error returned by
// FileFormat.Validate if the designated constraints aren't met.
type FileFormatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileFormatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileFormatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileFormatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileFormatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileFormatValidationError) ErrorName() string { return "FileFormatValidationError" }

// Error satisfies the builtin error interface
func (e FileFormatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileFormat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileFormatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileFormatValidationError{}

// Validate checks the field values on HeaderColumn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HeaderColumn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeaderColumn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HeaderColumnMultiError, or
// nil if none found.
func (m *HeaderColumn) ValidateAll() error {
	return m.validate(true)
}

func (m *HeaderColumn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageName

	// no validation rules for DisplayName

	if len(errors) > 0 {
		return HeaderColumnMultiError(errors)
	}

	return nil
}

// HeaderColumnMultiError is an error wrapping multiple validation errors
// returned by HeaderColumn.ValidateAll() if the designated constraints aren't met.
type HeaderColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeaderColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeaderColumnMultiError) AllErrors() []error { return m }

// HeaderColumnValidationError is the validation error returned by
// HeaderColumn.Validate if the designated constraints aren't met.
type HeaderColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeaderColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeaderColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeaderColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeaderColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeaderColumnValidationError) ErrorName() string { return "HeaderColumnValidationError" }

// Error satisfies the builtin error interface
func (e HeaderColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaderColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeaderColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeaderColumnValidationError{}

// Validate checks the field values on ImportSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportSummaryMultiError, or
// nil if none found.
func (m *ImportSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Success

	// no validation rules for Error

	if len(errors) > 0 {
		return ImportSummaryMultiError(errors)
	}

	return nil
}

// ImportSummaryMultiError is an error wrapping multiple validation errors
// returned by ImportSummary.ValidateAll() if the designated constraints
// aren't met.
type ImportSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportSummaryMultiError) AllErrors() []error { return m }

// ImportSummaryValidationError is the validation error returned by
// ImportSummary.Validate if the designated constraints aren't met.
type ImportSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSummaryValidationError) ErrorName() string { return "ImportSummaryValidationError" }

// Error satisfies the builtin error interface
func (e ImportSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSummaryValidationError{}

// Validate checks the field values on ImportError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportError with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportErrorMultiError, or
// nil if none found.
func (m *ImportError) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowNumber

	// no validation rules for ColumnNumber

	// no validation rules for ErrorLevel

	// no validation rules for MessageName

	if len(errors) > 0 {
		return ImportErrorMultiError(errors)
	}

	return nil
}

// ImportErrorMultiError is an error wrapping multiple validation errors
// returned by ImportError.ValidateAll() if the designated constraints aren't met.
type ImportErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportErrorMultiError) AllErrors() []error { return m }

// ImportErrorValidationError is the validation error returned by
// ImportError.Validate if the designated constraints aren't met.
type ImportErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportErrorValidationError) ErrorName() string { return "ImportErrorValidationError" }

// Error satisfies the builtin error interface
func (e ImportErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportErrorValidationError{}
