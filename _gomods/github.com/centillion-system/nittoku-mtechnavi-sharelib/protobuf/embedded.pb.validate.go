// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: embedded.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmbeddedUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmbeddedUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmbeddedUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmbeddedUserMultiError, or
// nil if none found.
func (m *EmbeddedUser) ValidateAll() error {
	return m.validate(true)
}

func (m *EmbeddedUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for Email

	if len(errors) > 0 {
		return EmbeddedUserMultiError(errors)
	}

	return nil
}

// EmbeddedUserMultiError is an error wrapping multiple validation errors
// returned by EmbeddedUser.ValidateAll() if the designated constraints aren't met.
type EmbeddedUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmbeddedUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmbeddedUserMultiError) AllErrors() []error { return m }

// EmbeddedUserValidationError is the validation error returned by
// EmbeddedUser.Validate if the designated constraints aren't met.
type EmbeddedUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbeddedUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbeddedUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbeddedUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbeddedUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbeddedUserValidationError) ErrorName() string { return "EmbeddedUserValidationError" }

// Error satisfies the builtin error interface
func (e EmbeddedUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbeddedUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbeddedUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbeddedUserValidationError{}

// Validate checks the field values on EmbeddedSharedProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmbeddedSharedProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmbeddedSharedProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmbeddedSharedPropertiesMultiError, or nil if none found.
func (m *EmbeddedSharedProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EmbeddedSharedProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SharedBy

	// no validation rules for SharedAt

	if len(errors) > 0 {
		return EmbeddedSharedPropertiesMultiError(errors)
	}

	return nil
}

// EmbeddedSharedPropertiesMultiError is an error wrapping multiple validation
// errors returned by EmbeddedSharedProperties.ValidateAll() if the designated
// constraints aren't met.
type EmbeddedSharedPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmbeddedSharedPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmbeddedSharedPropertiesMultiError) AllErrors() []error { return m }

// EmbeddedSharedPropertiesValidationError is the validation error returned by
// EmbeddedSharedProperties.Validate if the designated constraints aren't met.
type EmbeddedSharedPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbeddedSharedPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbeddedSharedPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbeddedSharedPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbeddedSharedPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbeddedSharedPropertiesValidationError) ErrorName() string {
	return "EmbeddedSharedPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EmbeddedSharedPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbeddedSharedProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbeddedSharedPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbeddedSharedPropertiesValidationError{}

// Validate checks the field values on EmbeddedUpdatedProperties with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmbeddedUpdatedProperties) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmbeddedUpdatedProperties with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmbeddedUpdatedPropertiesMultiError, or nil if none found.
func (m *EmbeddedUpdatedProperties) ValidateAll() error {
	return m.validate(true)
}

func (m *EmbeddedUpdatedProperties) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EmbeddedUpdatedPropertiesValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EmbeddedUpdatedPropertiesValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EmbeddedUpdatedPropertiesValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EmbeddedUpdatedPropertiesMultiError(errors)
	}

	return nil
}

// EmbeddedUpdatedPropertiesMultiError is an error wrapping multiple validation
// errors returned by EmbeddedUpdatedProperties.ValidateAll() if the
// designated constraints aren't met.
type EmbeddedUpdatedPropertiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmbeddedUpdatedPropertiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmbeddedUpdatedPropertiesMultiError) AllErrors() []error { return m }

// EmbeddedUpdatedPropertiesValidationError is the validation error returned by
// EmbeddedUpdatedProperties.Validate if the designated constraints aren't met.
type EmbeddedUpdatedPropertiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbeddedUpdatedPropertiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbeddedUpdatedPropertiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbeddedUpdatedPropertiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbeddedUpdatedPropertiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbeddedUpdatedPropertiesValidationError) ErrorName() string {
	return "EmbeddedUpdatedPropertiesValidationError"
}

// Error satisfies the builtin error interface
func (e EmbeddedUpdatedPropertiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbeddedUpdatedProperties.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbeddedUpdatedPropertiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbeddedUpdatedPropertiesValidationError{}

// Validate checks the field values on EmbeddedCompany with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmbeddedCompany) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmbeddedCompany with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmbeddedCompanyMultiError, or nil if none found.
func (m *EmbeddedCompany) ValidateAll() error {
	return m.validate(true)
}

func (m *EmbeddedCompany) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompanyId

	// no validation rules for DisplayNameLang

	if len(errors) > 0 {
		return EmbeddedCompanyMultiError(errors)
	}

	return nil
}

// EmbeddedCompanyMultiError is an error wrapping multiple validation errors
// returned by EmbeddedCompany.ValidateAll() if the designated constraints
// aren't met.
type EmbeddedCompanyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmbeddedCompanyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmbeddedCompanyMultiError) AllErrors() []error { return m }

// EmbeddedCompanyValidationError is the validation error returned by
// EmbeddedCompany.Validate if the designated constraints aren't met.
type EmbeddedCompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmbeddedCompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmbeddedCompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmbeddedCompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmbeddedCompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmbeddedCompanyValidationError) ErrorName() string { return "EmbeddedCompanyValidationError" }

// Error satisfies the builtin error interface
func (e EmbeddedCompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmbeddedCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmbeddedCompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmbeddedCompanyValidationError{}
